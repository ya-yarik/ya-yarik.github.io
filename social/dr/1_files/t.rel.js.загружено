
// +++ base.js +++
var T = {

	GKEY:'AIzaSyC8I3y3w4QG1we-GkmM0zcaVJ1c5tVANVs',

	l:new D.Lang( 'xGlobal' ),

	chartColors:[
		'#ffc018', '#cc1825', '#445f96', '#0084c4', '#a8c930', '#07996e', '#ff7e2c',  '#9321b4',  '#a48a0f', '#db2186',
		'#050505', '#220408', '#47090F', '#9A1521' , '#B23C5B', '#A940AF' , '#7E4FA1' , '#5E4FA2'
	],

	reloadProfileNews: true,
	reloadCalendar: true,
    realoadMyInvitations: true,

	searchFieldOnfocus:function(){
		if (this.value == this.getAttribute('defaultText')) {
			this.value='';
			removeClassName(this,'inactive');
		} else {
			removeClassName(this,'inactive');
		}
	},

	searchFieldOnblur:function(){
		if( empty( this.value ) ){
			this.value = this.getAttribute('defaultText') || '';
			addClassName(this,'inactive');
		}
	},

	rateStars : function(value, par){
		par.className = par.className || '';
		par.onclick = par.onclick || null;
		par.value = par.value || 0;
		par.count = par.count || 5;
		par.starWidth = par.starWidth || 19.6;
		par.title = par.title || '';

		var node = mkE({
			tag : 'div',
			className : 'rateStars' + (par.className ? ' ' + par.className : ''),
			id : par.id,
			prop : {
				title : par.title,
				style : {
					width : Math.round(par.starWidth * par.count) + 'px'
				}
			},
			attr : {
				startcount : par.count
			},
			els : [
				{
					tag : 'input',
					type : 'hidden',
					name : par.name,
					value : par.value
				},
				{
					tag : 'div',
					prop : {
						style : {
							width : parseInt(value, 10) + '%'
						}
					}
				}
			]
		});

		if(par.onclick){
			node.onclick = function(event){
				T.rateStarsClick.call(this, event, par.onclick);
			};
			node.onmousemove = function(event){
				T.rateStarsMMove.call(this, event);
			};
			node.onmouseout = function(event){
				T.rateStarsMOut.call(this, event);
			};
		}

		return node;
	},

	rateStarsMMove:function(){
		if( this._drDisabled ){
			return;
		}
		this.style.cursor = 'hand';
		this.style.cursor = 'pointer';
		this.onmouseover = this.onmousemove;
		var node = this.getElementsByTagName( 'div' )[ 0 ];
		if( ! node._drWidth ){
			node._drWidth = getStyle( node, 'width' );
		}
		var oneStarWidth = this.offsetWidth / Number( this.getAttribute( 'starcount' ) );
		node.style.width = Math.ceil( Math.max( 1, ( D.mouseX - findPosX( this ) ) / oneStarWidth ) ) * oneStarWidth + 'px';
	},

	rateStarsMOut:function( e ){
		if( this._drDisabled ){
			return;
		}
		var node = this.getElementsByTagName( 'div' )[ 0 ];
		node.style.width = node._drWidth;
	},

	rateStarsClick:function( e, fn ){
		if( this._drDisabled ){
			return;
		}
		var startCount = Number( this.getAttribute( 'starcount' ) );
		var node = this.getElementsByTagName( 'div' )[ 0 ];
		var oneStarWidth = this.offsetWidth / startCount;
		var v = Math.round( node.offsetWidth / oneStarWidth );
		v = Math.min( v, startCount );
		v = Math.max( 1, v );
		var hidden = $( 'input', this )[ 0 ];
		if( ! hidden || hidden.name == '' ){
			this.style.cursor = 'default';
			this._drDisabled = true;
		} else {
			node._drWidth = v * oneStarWidth + 'px';
			hidden.value = v;
		}
		fn( v, node, this );
	},

	dropdownSelect:function(item, callback){
		var list = $(item.parentNode.parentNode);
		if(list.hasClass("clickable")){
			list.toggleClass('clicked');
		//	item.parentNode.parentNode.onmouseout = function(){$(this).removeClass('clicked')};
		}
		if(item.parentNode == item.parentNode.parentNode.firstChild){
			return false;
		}
		item.parentNode.parentNode.insertBefore( item.parentNode, item.parentNode.parentNode.firstChild);
		if(callback == null){
			return true;
		} else {
			callback();
			return false;
		}
	},

	pictureCollage : function(images,par) {
		par =par||{};
		par = $.extend({
			size : 'small',
			max: 4,
			empty:false,
			moreIcon:false,
			count: 0 // cipars, ko paraada kaa skaitu
		}, par);

		if (!images.length) {
			images = par.empty ? [] : [{url:'//ifrype.com/i/profile/i_no_pic.png'}];
		}

		var picC = Math.min(par.max, images.length);
		var picWr = $('<div/>',{'class':'pic-collage pics-' + picC + ' coll-size-'+par.size});
		var totalCount = images.length;
		var partNames = [];
	 	var moreStr = [];

		if (images.length) {
			for (var i=0;i<totalCount;i++){
				moreStr.push(images[i].title);
			}
		}

		var innerWrap = $('<div/>',{'class':'picc-inner'});

		for (var i=0;i<picC;i++) {
			var p = images[i];
			var cli = p.onclick || function(){};
			p = $.extend({
				title : ''
			},p);

			var t = p.title;
			var isMore = i == picC-1 && picC < totalCount;

			if (isMore) {
				t = moreStr.join(', ');
			}

			var sp = $('<a/>',{
				'data-index':i,
				href: isMore ? 'javascript:;' : ( p.href || 'javascript:;' ),
				'class':'pw pc'+i+(isMore?' more-link':''),
				'title' : t
			});

			if (isMore) {
				sp.html(totalCount);
				if(par.moreIcon){
					var moreImage = mkE({
						tag:'img',
						className:'moreImage',
						attr:{
							src: par.moreIcon
						}
					});
					sp.prepend(moreImage);
				}
			} else {
				sp.click(cli);
				sp.append(
					$('<img/>',{src : p.url})
				);
				if ( p.type == 'video' ) {
					mkE( {
						tag: 'div',
						className: 'playButton'
					} ).append( sp.get(0) );
				}

				if (p.online) {
					picWr.append('<span class="onlineStatus onlineWWWIcon idx'+i+'"></span>');
				}

				if (p.badge) {
					picWr.append(p.badge);
				}
			}
			innerWrap.append(sp);
		}

		if ( par.count ) {
			mkE( {
				tag: 'div',
				className: 'count',
				els:[{
					tag: 'div'
				}, {
					tag: 'div',
					text: par.count
				}]
			} ).append( picWr.get(0) );
		}

		picWr.append(innerWrap);

		return picWr;
	},

	radiobuttonSetClick : function(e) {
		$(e).closest('ul').find('li').removeClass('active');
		$(e).closest('li').addClass('active');
	},

	radiobuttonSet: function( items, par ) {
		items = items || [];
		par = par || {};
		var ul = mkE({
			tag: 'ul',
			className: 'radiobutton-set radius3'
		});
		O2O( ul, par );
		var r, li;
		for( var k in items ){
			r = items[ k ];
			li = mkE({
				tag: 'li'
			} ).append( ul );
			if ( k == 0 ) {
				addClassName(li, 'first');
			} else if ( k == r.length - 1 ) {
				addClassName(li, 'last');
			}
			if ( isset(r['class']) ) {
				addClassName(li, r['class']);
			}
			if ( !empty(r.active) ) {
				addClassName(li, 'active');
			}
			if ( !isset( r.caption ) ) {
				r.caption = 'Item ' + k;
			}
			mkE({
				tag: 'a',
				prop:{
					_drR:r,
					innerHTML:r.caption,
					href:r.href || 'javascript:',
					onclick:function(){
						T.radiobuttonSetClick( this, null );
						if( this._drR.onclick ){
							return this._drR.onclick();
						}
						return false;
					}
				}
			} ).append( li );
		}

		return ul;
	},

	/*
		item = [
			{
				caption:,
				onclick:[],
				href:[],
				selected
			}
		]
	*/
	dropDown:function( items, par ){
		items = items || [];
		par = par || {};
		var ul;
		var re = mkE( {
			tag:'div',
			className:'dropdownList',
			els:[
				ul = mkE( {
					tag:'ul',
					className:'hover'
				} )
			]
		} );
		O2O( re, par );
		var r, li;
		for( var k in items ){
			r = items[ k ];
			li = mkE( {
				tag:'li',
				els:[
					mkE( {
						tag:'a',
						prop:{
							_drR:r,
							innerHTML:r.caption,
							href:r.href || 'javascript:',
							onclick:function(){
								T.dropdownSelect( this, null );
								if( this._drR.onclick ){
									return this._drR.onclick();
								}
								return false;
							}
						}
					} )
				]
			} );
			delete r.caption;
			delete r.onclick;
			delete r.href;
			O2O( li, r );
			if( r.selected ){
				li.prepend( ul );
			} else {
				li.append( ul );
			}
		}
		return re;
	},

	multiItemID: 1,
	addMultiItem:function( obj, tpl, max, min, fn ){
		fn = fn || function(){};
		len = obj.parentNode.firstChild.childNodes.length;
		if(len<max){
			fn( len + 1, 'add' );
			div = document.createElement("div");
			div.className="item";
			div.innerHTML = tpl+ '<a href="javascript:" class="removeButton"></a>'; // onclick="return T.removeMultiItem(this,'+min+','+max+')"
			$( 'a.removeButton', div )[0].onclick = function(){
				return T.removeMultiItem( this, min, max, fn );
			};
			obj.parentNode.firstChild.appendChild(div);
			T.multiItemID++;
			if(len+1 > min){
				obj.parentNode.firstChild.className='container';
			}
			if(len+1>=max){
				obj.style.display = 'none';
			}
			evalScriptHTML(tpl);
		}
		return false;
	},

	removeMultiItem:function(obj, min, max , fn ){
		fn = fn || function(){};
		var len = obj.parentNode.parentNode.childNodes.length;
		if(len>min){
			fn( len - 1, 'remove' );
			if(len-1 == min){
				obj.parentNode.parentNode.className='container empty';
			}
			if(len-1<max){
				obj.parentNode.parentNode.parentNode.lastChild.style.display = '';
			}
			obj.parentNode.parentNode.removeChild(obj.parentNode);
		}
		return false;
	},

	filterCatShowSub: function(el, child) {
		var was_active = $(el.parentNode).is('.active');
		$('.filterCategories td table td div').hide();
		$('.additionalRow div').slideUp(500);
		$('.filterCategories td.active').removeClass( 'active' );

		if(!was_active){
			$('.additionalRow').hide();
			addClassName(el.parentNode,'active');

			$('#filterSubCat_' + child).css("display", "table-row");
			$('#filterSubCat_' + child + ' div').slideDown(500);
		}
	},

	filterActivateSub: function(el) {
		$('.filterSubCat td').removeClass('activeSub');
		addClassName(el.parentNode, 'activeSub');

	},

	sideMenuOpenChilds: function(el) {
		var list = el.parentNode.parentNode.getElementsByTagName('ul')[0];
		$(list).toggle();
	},

	readProfileNews:function(el, time) {
		$('#cbxContentmyProfileNews').toggle();
		if($('#cbxContentmyProfileNews').css('display') != 'none' && this.reloadProfileNews) {
			rq('/main/rq/profile_news.php', 'cbxContentmyProfileNews', {withoutLoading:true});
		}
		var tmp = el.getElementsByTagName('span')[0];
		if(tmp) {
			$(tmp).hide();
		}
		else {
			this.reloadProfileNews = false;
		}
	},
	readCalendar:function() {
		var parent = document.getElementById('calendarBox');
		if( parent._popover ){
			parent._popover.hide();
			delete parent._popover;
			return;
		}
		var par = new T.Popover.Par().setParent(parent).setPosition('right top').setScrollIntoView(true).setOnClose(function(){
			delete parent._popover;
		});
		var popover = new T.Popover(par);
		mkE({
			tag: 'div',
			els: [
				T.loadingCircle()
			],
			style: {
				padding: '32px 178px'
			}
		}).append(popover.content);
		popover.show();
		parent._popover = popover;

		D.onLoad('CalendarMain', function(){
			popover.setTitle(D.Lang.get('my_calendar', 'xCalendar'));
			var p = new D.CalendarMain.Par().setCount(6).setOnLoad(function(){
				clearNode(popover.content);
				calendar.append(popover.content);
				popover.position();
			});
			var calendar = new D.CalendarMain(p);
		});

		//rq('/main/calendar.php','calendarContent', {withoutLoading:true});

		var tmp = parent.getElementsByTagName('span')[0];

		if(tmp) {
			tmp.className=tmp.className.replace('on','off');
			$.post('/calendar/rq/post.php',{task:'read'});
		}
	},
	readMyInvitations: function() {
		var parent = document.getElementById('myInvitationsBox');
		if( parent._popover ){
			parent._popover.hide();
			delete parent._popover;
			return;
		}
		var par = new T.Popover.Par().setParent(parent).setPosition('right top').setScrollIntoView(true).setOnClose(function(){
			delete parent._popover;
		});
		var popover = new T.Popover(par);
		mkE({
			tag: 'div',
			els: [
				T.loadingCircle()
			],
			style: {
				padding: '32px 178px'
			}
		}).append(popover.content);
		popover.show();
		parent._popover = popover;

		D.onLoad('InvitationsMain', function(){
			popover.setTitle(D.Lang.get('my_invites', 'xInvite'));
			var p = new D.InvitationsMain.Par().setCount(8).setOnLoad(function(){
				clearNode(popover.content);
				invitations.append(popover.content);
				popover.position();
			});
			var invitations = new D.InvitationsMain(p);
		});

		var tmp = parent.getElementsByTagName('span')[0];
		if (tmp) {
			tmp.className = tmp.className.replace('on','off');
		}
    },

	cbx:function( par ){
		par = par || {};
		var content;
		var caption = {
			tag:'a',
			className:'cbxArrow',
			href:'javascript:',
			prop:{
				onselectstart:function(){
					return false;
				},
				onmousedown:function(){
					return false;
				},
				onclick:function(){
					return T._cbx( this,'','', function(){
						if( par.onclick ){
							par.onclick.call(re);
						}
					} );
				}
			}
		};
		if( par.caption instanceof Node ) {
			caption.els = [par.caption];
		} else {
			caption.text = par.caption || '...';
		}
		var re = mkE( {
			tag:'div',
			className:'cbx',
			els:[
				mkE( {
					tag:'div',
					className:'cbxCaption',
					els:[
						mkE( caption )
					]
				} ),
				content = mkE( {
					tag:'div',
					className:'cbxContent',
					els:par.els || []
				} )
			]
		} );
		if( par.open ){
			addClassName( re, 'open' );
		}
		re.appendChild = function( child ){
			content.appendChild( child );
		};
		return re;
	},

	_cbx:function( el, href, id, onclick ){
		if( existsClassName( el.parentNode.parentNode, 'open' ) ){
			removeClassName( el.parentNode.parentNode, 'open' );
			if( onclick ){
				onclick( false );
			}
			if( id ){
				$( '#' + id ).hide();
			}
		} else {
			addClassName( el.parentNode.parentNode, 'open' );
			if( ! empty( href ) ){
				if( empty( id ) ){
					rq( href, $( '.cbxContent', el.parentNode.parentNode )[ 0 ] );
				} else {
					$( '#' + id ).show();
					rq( href, $( '#' + id )[ 0 ] );
				}
			}
			if( onclick ){
				onclick( true );
			}
		}
		return false;
	},

	_multiCbx:function( el, id ){
		var p = $(el).parents('.formItemMultiCheckbox');
		if( p.hasClass('open') ){
			p.removeClass('open');
		}	else {
			p.addClass('open');
		}
		return false;
	},

	_multiCbxMouseOver:function(el){
		clearTimeout( el._showTimeout );
		var p = $(el);
		if( p.hasClass('open') ){
			return;
		}
		el._showTimeout = setTimeout( function(){
			p.addClass('open');

			var max_height = $(window).innerHeight() + $(document).scrollTop();

			elemJq = $(el).find('.multiCbxContent');
			elem = elemJq.get(0);

			var dropdown_xy = p.offset();
			var dropdown_height = p.height();
			var current_height = dropdown_xy.top + dropdown_height + elemJq.height() + 24; // + 24, lai var redzeet "saglabaats"

			if ( current_height > max_height ) {
				elem.style.top = (max_height - current_height + dropdown_height) + 'px';
			}
			el.style.zIndex = 105;
		}, 100 );
	},

	_multiCbxMouseOut:function(el){
		clearTimeout( el._showTimeout );
		var p = $(el);
		if( !p.hasClass('open') ){
			return;
		}
		el._showTimeout = setTimeout( function(){
			el.style.zIndex = 12;
			$(el).find('.multiCbxContent').css({'top': p.height() + 'px'});

			p.removeClass('open');
		}, 200 );
	},

	sbx:function( par ){
		par = par || {};
		var content;
		var re = mkE( {
			tag:'table',
			className:'sbx',
			prop:{
				cellPadding:'0',
				cellSpacing:'0',
				style:{
					width:'100%'
				}
			},
			els:[
				mkE( {
					tag:'tbody',
					els:[
						mkE( {
							tag:'tr',
							els:[
								mkE( {
									tag:'td',
									className:'sbxTL'
								} ),
								mkE( {
									tag:'td',
									className:'sbxTC'
								} ),
								mkE( {
									tag:'td',
									className:'sbxTR'
								} )
							]
						} ),
						mkE( {
							tag:'tr',
							els:[
								mkE( {
									tag:'td',
									className:'sbxML'
								} ),
								content = mkE( {
									tag:'td',
									className:'sbxM'
								} ),
								mkE( {
									tag:'td',
									className:'sbxMR'
								} )
							]
						} ),
						mkE( {
							tag:'tr',
							els:[
								mkE( {
									tag:'td',
									className:'sbxBL'
								} ),
								mkE( {
									tag:'td',
									className:'sbxBC'
								} ),
								mkE( {
									tag:'td',
									className:'sbxBR'
								} )
							]
						} )
					]
				} )
			]
		} );
		O2O( re, par );
		re.appendChild_ = re.appendChild;
		re.appendChild = function( el ){
			content.appendChild( el );
		};
		/*re.clear = function(){
			clearNode( content );
		};*/
		return re;
	},

	submitButton:function(par){
		/*
		par = par || {};
		var button;
		var tag = ( par.href ? 'a' : 'button' );
		if( par.type == 'html' ){
			tag = 'div';
		}
		var re = mkE( {
			tag:'span',
			className:'button radius3',
			els:[
				mkE( {
					tag:'div',
					className:'radius3',
					els:[
						button = mkE( {
							tag:tag,
							className:'buttonC radius3',
							prop:{
								target:par.target || ''
							},
							els:( par.els || [] )
						} )
					]
				} )
			]
		} );
		re.button = button;
		if( par.href ){
			button.href = par.href;
		}
		if( par.icon ){
			mkE( {
				tag:'span',
				className:'icon ' + par.icon + 'Icon',
				prop:{
					innerHTML:par.caption || ''
				}
			} ).append(button);
		} else {
			if( par.caption ){
				button.innerHTML = par.caption;
			}
		}
		if( par.className ){
			addClassName( re, par.className );
		}
		if( par.stretch ){
			addClassName( re, 'buttonStretch' );
		}
		if( par.size == 'large' ){
			addClassName( re, 'buttonLarge' );
		}
		switch( par.color ){
			case 'link':
				addClassName( re, 'buttonLink' );
				break;
            case 'blue':
                addClassName( re, 'buttonBlue' );
                break;
			case 'buy':
				addClassName( re, 'buttonBuy' );
				break;
		}
		delete par.className;
		delete par.stretch;
		delete par.color;
		delete par.size;
		delete par.type;
		delete par.els;
		O2O( re, par );
		return re;
		/*/
		var button = new T.Form.Button(par);
		button.node._form = button;
		return button.node;
		/**/
	},

	insertSmiley:function( parent, ta, f ){
		if( typeof ta == 'string' ){
			ta = document.getElementById(ta);
		}
		var s = D.insertSmiley( {
			onclick:function(v){
				if (f) {
					f(v);
					return;
				}
				insertAtCursor( ta, v + ' ' );
			},
			parent:parent
		} );
		return false;
	},

	box:function( type, t1, t2 ){
		var re = mkE( {
			tag:'div',
			className:'infoMsg radius3 ' + type + 'Icon'
		} );
		if( !empty(t2)){
			mkE( {
				tag:'strong',
				prop:{
					innerHTML:t1
				}
			} ).append(re);
			var p2 =  {
				tag:'span'
			};
			if( typeof t2 == 'string' ){
				p2.prop = {
					innerHTML:t2
				};
			} else {
				p2.els = t2;
			}
			mkE(p2).append(re);
		} else {
			var p1 =  {
				tag:'span'
			};
			if( typeof t1 == 'string' ){
				p1.prop = {
					innerHTML:t1
				};
			} else {
				p1.els = t1;
			}
			mkE(p1).append(re);
		}
		return re;
	},

	info:function( t1, t2 ){
		return this.box( 'info', t1, t2 );
	},

	success:function( t1, t2 ){
		return this.box( 'success', t1, t2 );
	},

	error:function( t1, t2 ){
		return this.box( 'error', t1, t2 );
	},

	step:function( n ){
		return mkE( {
			tag:'div',
			className:'step color0',
			els:[
				mkE( {
					tag:'b',
					text:n
				} )
			]
		} );
	},

	hrText:function( text ){
		return mkE( {
			tag: 'table',
			className: 'hrText',
			els:[
				{
					tag: 'tr',
					els:[
						{
							tag: 'td',
							attr: {
								width:'49%'
							},
							els:[
								{ tag:'hr' }
							]
						},
						{
							tag: 'td',
							className: 'hrTextC',
							prop: {
								innerHTML: text
							}
						},
						{
							tag:'td',
							attr: {
								width:'49%'
							},
							els:[
								{ tag:'hr' }
							]
						}
					]
				}
			]
		} );
	},

	bxTopBottom: function( className, par, content ) {
		var withHeading = className.indexOf('withheading') !== -1;

		var attr = par;
		delete attr.icon;
		delete attr.headingText;
		delete attr.onclose;
		delete attr.oncloseLink;

		var re = mkE({
			tag: 'div'
		});
		O2O( re, attr );
		addClassName(re, 'bx');
		if ( className ) {
			addClassName(re, className);
		}
		if ( par.icon ) {
			mkE({
				tag: 'bxicon'
			}).append( re );
		}

		var cont;
		if ( withHeading ) {
			var heading = mkE({
				tag: 'div',
				className: 'heading'
			}).append( re );
			if ( isset( par.headingText ) ) {
				heading.innerHTML = par.headingText;
			}
			cont = mkE({
				tag: 'div'
			}).append( re );
		}
		if ( isset( par.oncloseLink ) ) {
			var closeLink = mkE({
				tag: 'a',
				className: 'closeIcon icon',
				href: par.oncloseLink
			}).append( withHeading ? cont : re );
			if ( isset( par.onclose ) ) {
				closeLink.onclick = par.onclose;
			}
		}

		var bxContent = {};
		bxContent.tag = 'div';
		bxContent.className = 'bxContent';
		if( typeof content === 'string' ){
			bxContent.prop = {
				innerHTML: content
			};
		} else {
			bxContent.els = content;
		}
		mkE( bxContent ).append( re );

		return re;
	},

	footerTopBottom: function( par, content ) {
		var className = '';
		if ( isset( par['class'] ) ) {
			className = par['class'];
			delete par['class'];
		}

		var nodePar = {
			tag: 'div',
			className: 'formFooter ' + className
		};
		if( typeof content === 'string' ){
			nodePar.prop = {
				innerHTML: content
			};
		} else {
			nodePar.els = content;
		}
		var re = mkE( nodePar );
		O2O(re, par);
		return re;
	},

	picEditor:function( type, id, par ){
		par = par || {};
		var p = { width:1080, height:520 };
		p.onClose = par.onClose;
		var url = '/pic/editor.php?type=' + type + '&id=' + id + '&onSave=T.picEditor.onSave';
		var win = ( window.parent && window.parent !== window ? window.parent : window );
		var cb = function(re){
			( par.onSave || win.D.reload )(re);
		};
		win.T.picEditor.onSave = cb;
		win.InfoBox.iframe( url, p );
		return false;
	},

	/**
	 * @param {T.ddMenu__par|Object} par
	 * @returns {Node|null}
	 */
	ddMenu:function(par){
		var caption;
		if( empty( par.caption ) ){
			for( var k in par.items ){
				if( par.items[k].selected ){
					par.caption = par.items[k].caption;
					break;
				}
			}
			var first = reset( par.items );
			if( empty( par.caption ) && first ){
				par.caption = first.caption;
			}
		}
		var show = false;
		var hide = function(){
			removeClassName(menu, 'ddMenuTop');
			menu.style.display = 'none';
			menu.remove();
			show = false;
		};

		var offsetEl = par.offsetEl || false;

		var re = mkE( {
			tag:'span',
			prop:{
				className:'ddMenu',
				onmouseover:function(){
					if(!show){
						return;
					}
					clearTimeout( re._drTimeout );
					if( menu.style.display == '' ){
						return;
					}
					menu.style.display = '';
					if( T.ddMenu.last && T.ddMenu.last !== menu ){
						//T.ddMenu.last.style.display = 'none';
						T.ddMenu.last.remove();
					}
					T.ddMenu.last = menu;
					menu.append( document.body );
					var pos = D.position(re);
					var top = 0;
					if( par.scroll ){
						scrollContent.style.maxHeight = (document.documentElement.clientHeight / 2) - 100 + 'px';
						scrollBar.refresh();
					}
					if( par.relativeToWindow ){
						top = $(re).offset().top + re.offsetHeight + 5;
						if( top + menu.offsetHeight > document.documentElement.clientHeight + document.body.scrollTop + document.documentElement.scrollTop ){
							top -= (re.offsetHeight + 10 + menu.offsetHeight);
							addClassName(menu, 'ddMenuTop');
						}
					}else{
						top = pos.top + re.offsetHeight + 5;
						if( InfoBox.opened ){
							top += $(document).scrollTop() - $( InfoBox._.node ).scrollTop();
						}

						if (offsetEl && offsetEl.length) {
							top -= offsetEl.scrollTop();
						}
					}

					menu.style.top = top + 'px';
					menu.style.left = pos.left + 'px';
					menu.style.zIndex = InfoBox.zIndex + 1;


					if (typeof (par.onShow) == 'function') {
						par.onShow();
					}
				},
				onmouseout:function(){
					re._drTimeout = setTimeout( function(){
						hide();
					}, 300 );
				},
				onclick:function(){
					if(show){
						hide();
						return;
					}
					show = true;
					this.onmouseover();
				}
			},
			els:[
				{
					tag:'span',
					className:'ddMenuPrefix',
					prop:{
						innerHTML:( par.prefix || '' )
					}
				},
				caption = mkE( {
					tag:'span',
					className:'ddMenuCaption'
				} )
			]
		} );
		if ( par.caption instanceof Array ) {
			mkE.appendTypeElement( caption, par.caption );
		} else {
			caption.innerHTML = par.caption || '...';
		}
		var scrollBar, menuItems, menu = mkE( {
			tag:'div',
			className:'ddMenuList radius3',
			prop:{
				onmouseover:re.onmouseover,
				onmouseout:re.onmouseout,
				style:{
					display:'none'
				}
			},
			els:[
				{
					tag:'div',
					className:'ddMenuArr'
				},
				menuItems = mkE( {
					tag:'div'
				} )
			]
		} );
		for( var k in par.items ){
			if( !par.items.hasOwnProperty(k) ){
				continue;
			}
			var r = par.items[k];
			r.onclick = r.onclick || par.onclick || false;
			r.els = r.els || [];
			r.els = [ {
				tag:'a',
				innerHTML:r.caption || '&nbsp;',
				href:r.href || 'javascript:'
			} ].concat( r.els );
			var i = mkE( {
				tag:'div',
				className:'ddMenuListItem '+(r.className || ''),
				prop:{
					onclick:function(){
						var sel = existsClassName( this, 'ddMenuSelected' );
						if( !par.multiSelect ){
							if(sel){
								return;
							}
							$( '.ddMenuSelected', menu ).removeClass('ddMenuSelected');
						}
						if( !par.multiSelect && this._item.clickHide !== false ){
							show = false;
							menu.style.display = 'none';
							menu.remove();
						}
						if( par.changeCaption ){
							caption.innerHTML = this._item.caption;
						}
						this.onclick_(!sel, this._item);
						if( !par.selectable ){
							return;
						}
						if(sel){
							removeClassName( this, 'ddMenuSelected' );
						} else {
							addClassName( this, 'ddMenuSelected' );
						}
					},
					onclick_:( typeof r.onclick == 'function' ? r.onclick : new Function( r.onclick || '' ) ),
					_item:r
				},
				els:r.els
			} ).append(menuItems);
			if( r.selected ){
				par.selectable = true;
				addClassName( i, 'ddMenuSelected' );
			}
		}
		if( par.selectable ){
			addClassName( menu, 'ddMenuSelectable' );
		}
		if( par.id ){
			var node = $( '#' + par.id )[0];
			if(node){
				if( node.getAttribute('rel') == 'r' ){
					re.replace(node);
					$( "#s" + par.id ).remove();
				} else {
					re.append(node);
				}
			}
		}
		if( par.scroll ){
			var scrollContent = mkE({
				tag: 'div',
				style: {
					paddingRight: '8px'
				}
			}).append(menu);
			menuItems.append(scrollContent);
			var scrollBarPar = new T.ScrollBarPar();
			scrollBarPar.parent = scrollContent;
			scrollBarPar.element = menuItems;
			scrollBar = new T.ScrollBar(scrollBarPar);
			addClassName(menu, 'withScroll');
		}
		return re;
	}, // ddMenu

	sep:function(){
		return mkE( {
			tag:'div',
			className:'sep',
			els:[
				{
					tag:'h1',
					prop:{
						innerHTML:'&nbsp;'
					}
				}
			]
		} )
	},

	checkLink:function( a, href ){
		var rpc = new RPC('/rq/app.php');
		rpc.async = false;
		rpc.send(
			'checkLink',
			{
				href:href || a.href
			},
			function( re, par ){
				if( re.spam ){
					alert( D.Lang.get('link is spam') );
					return;
				}
				var closeInfoBox = false;
				var cb = function(v){
					if(v){
						if( a.target == '_blank' ){
							var ow = window.open( a.href );
							ow.opener = null;
						} else {
							document.location = a.href;
						}
					}
					if(closeInfoBox){
						InfoBox.close();
					}
				};
				if( re.ok ){
					cb(true);
					return;
				}
				closeInfoBox = true;
				D.messageBox( {
					title:D.Lang.get('link warning title'),
					html:'<div id="checkLink">' + D.Lang.get('link warning').replace( '$link', htmlspecialchars( re.dest || href || a.href ) ) + '</div>',
					buttons:[
						{
							value:false,
							caption:D.Lang.get('link warning back'),
							color:'link'
						},
						{
							value:true,
							caption:D.Lang.get('link warning open'),
							color:'submit'
							//title:re.host.length > 30 ? re.host : ''
						}
					]
				}, cb );
			}
		);
		return false;
	},

	icon:function(par){
		var re = mkE( {
			tag:'div',
			className:'profileSmallIcon',
			els:[
				mkE( {
					tag:'a',
					href:par.href
				} )
			]
		} );
		re.setImage = function(image){
			this.style.backgroundImage = "url('" + image + "')";
		};
		re.setImage( par.image );
		delete par.href;
		O2O( re, par );
		return re;
	},

	/**
	 * @param {object|string} par
	 * @returns {*}
	 */
	svgIcon:function(par){
		if( typeof par == 'string' ){
			par = { icon:par };
		}
		var className = 'svg-icon svg-icon-' + par.icon;
		if( par.suffix ){
			className += ' svg-icon-' + par.icon + '-' + par.suffix;
		}
		if( par.size ){
			className += ' svg-icon-' + par.size;
		}
		if( !par.color ){
			className += ' svg-icon-solid';
		}
		if( par.fill === false ){
			className += ' svg-icon-nofill';
		}
		if( par.className ){
			className += ' ' + className
		}
		var svg;
		try{
			svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
			svg.setAttribute('class', className);
			if (par.fill) {
				svg.setAttribute('fill', par.fill);
			}
			if (par.color) {
				svg.setAttribute('color', par.color);
			}
			var useNode = document.createElementNS('http://www.w3.org/2000/svg', 'use');
			useNode.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#icon-' + par.icon);
			svg.appendChild(useNode);
		} catch(e){
			svg = mkE( { tag:'span', className:className } );
		}
		svg.append = mkE.append;
		return svg;
	},

	userList:function(par){
		var node = mkE({
			tag: 'div',
			className: 'userList'
		});
		for(var k in par ){
			var u = par[ k ];
			T.icon(u).append(node);
		}
		return node;
	},

	textareaAutoHeight:function( taNodeQuery, par ){
		par = par || {};
		$(taNodeQuery).each( function(){
			T._textareaAutoHeight( this, par );
		} );
	},

	_textareaAutoHeight:function( ta, par ){
		if( !ta || ta._autoResize ){
			return;
		}
		ta._autoResize = true;
		var copy;
		var node = mkE( {
			tag:'div',
			className:'textareaAutoHeight',
			els:[
				copy = mkE( {
					tag:'div',
					style:{
						position:'absolute',
						//minHeight:( ta.offsetHeight ) + 'px',
						paddingLeft:getStyle( ta, 'paddingLeft' ),
						paddingTop:getStyle( ta, 'paddingTop' ),
						paddingRight:getStyle( ta, 'paddingRight' ),
						paddingBottom:getStyle( ta, 'paddingBottom' ),
						lineHeight:getStyle( ta, 'lineHeight' ),
						fontSize:getStyle( ta, 'fontSize' ),
						wordWrap:'break-word',
						visibility:'hidden',
						maxHeight:getStyle( ta, 'maxHeight' )
					}
	      } )
			]
		} );
		var maxHeight = parseInt( copy.style.maxHeight );
		try{
			copy.style.whiteSpace = 'pre-wrap';
		}	catch(e){}
		ta.style.overflow = 'hidden';
		D.insertAfter( node, ta );
		node.appendChild(ta);
		var to;
		var taJq = $(ta);
		var calc = function(nl){
			if( !maxHeight ){ // if node not in document
				copy.style.maxHeight = getStyle( ta, 'maxHeight' );
				maxHeight = parseInt( copy.style.maxHeight );
			}
			var pos = getStyle( ta, 'position' );
			if( !pos || pos == 'static' ){
				pos = 'relative';
				ta.style.position = 'relative';
			}
			node.style.position = pos;
			copy.style.width = ta.offsetWidth + 'px';
			copy._offsetHeight = copy.offsetHeight;
			copy.innerHTML = htmlspecialchars( ta.value ) + ( nl ? "\n" : '' ) + '_';
			if( copy._offsetHeight != copy.offsetHeight ){
				taJq.trigger('onHeightChange');
				ta.style.overflow = ( maxHeight == copy.offsetHeight ? '' : 'hidden' );
			}
			if( !copy.offsetHeight ){
				return;
			}
			if( !copy.style.minHeight ){
				copy.style.minHeight = ( ta.offsetHeight ) + 'px';
			}
			ta.style.height = copy.offsetHeight + 'px';
		};
		calc();
		var n = 0;
		taJq.on( 'keydown', function(e){
			if( e.keyCode == 10 || e.keyCode == 13 ){
				calc( !par.skipNewLine );
			}
		} );
		taJq.on('keyup paste', function(e){
			clearTimeout(to);
			++ n;
			if( n == 10 || e.keyCode == 10 || e.keyCode == 13 || e.keyCode == 8 || e.keyCode == 46 ){
				n = 0;
				calc();
				return;
			}
			to = setTimeout( calc, 150 );
		} );
		if( $(copy).closest( document.body ).length && !copy.offsetHeight ){
			var inter = setInterval( function(){
				if( !copy.offsetHeight ){
					return;
				}
				clearInterval(inter);
				calc();
			}, 100 );
		}
	},

	addToCols:function( colQuery, newItemQuery ){
		var cols = $(colQuery);
		if( !cols.length ){
			return false;
		}
		//var t = new Date().getTime();
		$(newItemQuery).each( function(){
			var id = this.getAttribute('data-id');
			if(id){
				if( $( colQuery + ' > [data-id=' + id + ']' ).length ){
					$(this).remove();
					return;
				}
			}
			var col = cols[0];
			var h = $(col).height();
			cols.each( function(){
				if( $(this).height() < h ){
					col = this;
				}
			} );
			col.appendChild(this);
		} );
		//D.log( new Date().getTime() - t );
		return true;
	},

	tabbedPanel : function(items, params) {
		items = items || [];
		params = params || {};

		params = $.extend({
			active : '',
			onclick : function(){}
		}, params);

		var html = $('<ul/>',{'class':'tabbed-panel'});

		for (var i=0;i<items.length;i++) {
			var itm = items[i];
			itm = itm || {};
			itm = $.extend({
				href : '',
				id : '',
				caption : ''
			}, itm);

			var el = $('<li/>',{'class':params.active==itm.id?'active':''}).append(
				$('<a/>',{
					href : itm.href ? itm.href : 'javascript:;',
					'data-id' : itm.id
				}).html(itm.caption).click(function(){
					var id = $(this).attr('data-id');

					if (params.active != id) {
						params.onclick(id);
						html.find('li').removeClass('active');
						$(this).parent().addClass('active');
						params.active = id;
					}
				})
			);

			html.append(el);
		}

		return html;
	},

	clear:function(){
		return mkE( {
			tag: 'div',
			className: 'clear'
		} );
	},

	checkBreadcrumbSearch : function(name, form) {
		var inp = $(form).find('input[name='+name+']');

		if (inp.val() == inp.attr('defaulttext')) {
			return false;
		}

		return true;
	},

	/**
	 * @param {T.sidebarTitle__par|Object} par
	 */
	sidebarTitle: function(par){
		var re = mkE({
			tag: 'h3',
			className: 'sidebarTitle',
			text: par.caption || ''
		});

		if( par.linkCaption ){
			var link = mkE({
				tag: 'a',
				className: 'right',
				href: par.linkHref,
				onclick: par.linkClick
			});
			mkE.appendTypeElement(link, par.linkCaption);
			link.append(re);
		}

		if( par.close ){
			mkE({
				tag: 'a',
				className: 'right close',
				onclick: par.onClose,
				els: [
					T.svgIcon({
						icon: 'close-10'
					})
				],
				attr: {
					title: par.closeTitle
				}
			}).append(re);
		}

		return re;
	},

	loadingCircle: function(){
		var re = mkE({
			tag: 'div',
			className: 'sk-fading-circle'
		});
		for( var i = 1; i <= 12; i++ ){
			mkE({
				tag: 'div',
				className: 'sk-circle sk-circle' + i
			}).append(re);
		}
		return re;
	}
};

T.ddMenu__par = function() {
	this.items = [];
};
T.ddMenu__par.prototype.id = '';
T.ddMenu__par.prototype.prefix = '';
T.ddMenu__par.prototype.caption = '';
T.ddMenu__par.prototype.selectable = false;
T.ddMenu__par.prototype.multiSelect = false;
T.ddMenu__par.prototype.changeCaption = false;
/** @type {Array.<Object>} */
T.ddMenu__par.prototype.items = [];
T.ddMenu__par.prototype.offsetEl = null;
T.ddMenu__par.prototype.relativeToWindow = false;
T.ddMenu__par.prototype.scroll = false;
T.ddMenu__par.prototype.scrollHeight = false;
T.ddMenu__par.prototype.onShow = function(){};
T.ddMenu__par.prototype.onclick = function(){};

T.sidebarTitle__par = function(){};
T.sidebarTitle__par.prototype.caption = '';
T.sidebarTitle__par.prototype.linkCaption = '';
T.sidebarTitle__par.prototype.linkHref = null;
T.sidebarTitle__par.prototype.linkClick = D.doNothing;
T.sidebarTitle__par.prototype.close = false;
T.sidebarTitle__par.prototype.onClose = D.doNothing;
T.sidebarTitle__par.prototype.closeTitle = '';

T.SVGIcon = Class( {

	onclick:null,

	__construct:function(par){
		this.icon = par.icon;
		this.onclick = par.onclick || this.onclick;
		this.node = mkE( {
			tag:'a',
			className:'SVGIcon',
			onclick:this._onclick,
			els:[
				this._svgNode = T.svgIcon( this.icon )
			]
		} );
		if( par.className ){
			addClassName( this.node, par.className );
		}
	},

	_onclick:function(e){
		if( this.onclick ){
			this.onclick(e);
		}
	},

	append:function(parent){
		this.node.append(parent);
		if( !this._updateOnAppend && D.browser.name == 'Explorer' ){
			setTimeout( this._replaceSvg, 50 );
			//this._replaceSvg();
			this._updateOnAppend = true;
		}
		return this;
	},

	_replaceSvg:function(){
		var svg = T.svgIcon( this.icon );
		D.insertBefore( svg, this._svgNode );
		removeNode( this._svgNode );
		this._svgNode = svg;
		if( $( this.node ).parents('body').length ){
			setTimeout( this._replaceSvg, 50 );
		}
	},

	appendChild:function(node){
		node.append( this.node );
	}

}, mkE.Base );
// --- T ---


Draugiem.shpicResize = function( el, par ){
	par = par || {};
	if( typeof par.centerVertical == 'undefined' ){
		par.centerVertical = true;
	}
	var parent = el.parentNode;
	if( el.width == 0 || el.height == 0 || el.width < parent.offsetWidth || el.height < parent.offsetHeight ){
		return;
	}
	var k = el.width / el.height;
	if( el.width / el.height < parent.offsetWidth / parent.offsetHeight ){
		el.width = parent.offsetWidth;
		el.height = parent.offsetWidth / k;
	}	else {
		el.height = parent.offsetHeight;
		el.width = parent.offsetHeight * k;
	}
	if( par.centerVertical ){
		el.style.marginTop = Math.round( ( parent.offsetHeight - el.height ) / 2 ) + 'px';
	}
	el.style.marginLeft = Math.round( ( parent.offsetWidth - el.width ) / 2 ) + 'px';
};

Draugiem.shpicResize2 = function( el ){
	var parent = el.parentNode;
	if( el.width == 0 || el.height == 0 ){
		return;
	}
	var k = el.width / el.height;
	el.width = parent.offsetWidth;
	el.height = parent.offsetWidth / k;
};

// --- base.js ---

// +++ forms.js +++
/**
 * @deprecated
 * @see {T.Form}
 */
T.Forms = {

	n:0,

	/**
	 * @deprecated
	 * @returns {*|Node|null}
	 */
	nonce:function(){
		return mkE( {
			tag:'input',
			prop:{
				type:'hidden',
				name:D.nonce.name,
				value:D.nonce.value
			}
		} );
	},

	/**
	 * @deprecated
	 * @param par
	 * @returns {*|Node|null}
	 */
	footer:function(par){
		par = par || {};
		var p = {
			tag:'div',
			className:'formFooter'
		};
		if( par.els ){
			p.els = par.els;
		}
		return mkE(p);
	},

	/**
	 * @deprecated
	 * @param par
	 * @returns {*|Node|null}
	 */
	hidden: function( par ) {
		var p = {
			tag: 'input',
			type: 'hidden'
		};
		O2O( p, par || {} );
		return mkE(p);
	},

	/**
	 * @deprecated
	 * @param par
	 * @returns {*}
	 */
	input:function( par ){
		par = par || {};
		par._js = true;
		var input = new T.Form.Input(par);
		return input._inputNode;
	},

	/**
	 * @deprecated
	 * @param par
	 * @returns {*}
	 */
	textarea:function( par ){
		par = par || {};
		par._js = true;
		var input = new T.Form.TextArea(par);
		return input._inputNode;
	},

	/**
	 * @deprecated
	 * @param par
	 */
	textareaLength:function(par){
		var textarea = document.getElementById( par.id );
		if( !textarea._lenfn ){
			textarea._lenfn = function(){
				var lenNode = document.getElementById( 'Forms_' + par.id + 'RC' );
				if(!lenNode){
					return;
				}
                var c = (textarea.getAttribute('maxlength') || par.maxLength) - textarea.value.length;
                var ml = textarea.getAttribute('maxlength');

				var lenWrapNode = lenNode.parentNode;

				if( par.maxLengthCut && c < 0 ){
					c = 0;
					textarea.value = textarea.value.substr( 0, ml );
				}
				lenNode.innerHTML = c;

                if( ((c / ml) * 100) < 10  ){
                    addClassName( lenNode, 'color1' );
                    lenWrapNode.style.display='block';
                } else {
                    removeClassName( lenNode, 'color1' );

                    if ( ml >= 300 ) {
                        lenWrapNode.style.display='none';
                    } else {
                        lenWrapNode.style.display='block';
                    }
                }
			};
		}
		if( textarea._drTimeout ){
			clearTimeout( textarea._drTimeout );
			textarea._drTimeout = 0;
		}
		textarea._drTimeout = setTimeout( textarea._lenfn, 100 );
	},

	/**
	 * @deprecated
	 * @param el
	 * @param id
	 */
	fileOnchange:function( el, id ){
		if( empty( el.value ) ){
			return;
		}
		var
			names = [],
			parent = document.getElementById('FormsFilenames' + id);

		$(parent).empty();

		if(el.files && el.files.length > 0){
			for(var j = 0; j < el.files.length; j++){
				names.push(el.files[j].name);
			}
		}else{
			var fn = el.value.split( '\\' );
			fn = fn[ fn.length - 1 ];
			fn = fn.split( '/' );
			fn = fn[ fn.length - 1 ];
			names.push(fn);
		}

		for(var i in names){
			mkE({
				tag : 'span',
				className : 'formItemFileName icon',
				prop : {
					style : {
						backgroundImage : "url('" + T.ext(names[i]) + "')"
					}
				},
				text : htmlspecialchars_decode(names[i])
			}).append(parent);
		}
	},

	/**
	 * @deprecated
	 * @param par
	 * @returns {*}
	 */
	checkbox:function(par){
		par = par || {};
		par.captionHTML = true; // bad, bet nu vēsture
		par._js = true;
		var input = new T.Form.CheckBox(par);
		delete par.type;
		delete par.caption;
		O2O( input._inputNode, par );
		return input._inputNode;
	},

	/**
	 * @deprecated
	 * @param par
	 * @returns {*}
	 */
	radio:function(par){
		par = par || {};
		par._js = true;
		par.captionHTML = true; // bad, bet nu vēsture
		var input = new T.Form.RadioBox(par);
		return input._inputNode;
	},

	/**
	 * @deprecated
	 * @param par
	 * @returns {*}
	 */
	select:function( par ){
		par = par || {};
		par._js = true;
		var input = new T.Form.Select(par);
		return input._inputNode;
	},

	/**
	 * @deprecated
	 * @param id
	 * @private
	 */
	_focus:function(id){
		var $item = document.getElementById( 'Forms_' + id );
        addClassName( $item, 'radius3' );
		$( 'input, select, textarea', $item ).bind( 'focus', function(){
			$($item).addClass('formItemFocus');
		} );
		$( 'input, select, textarea', $item ).bind( 'blur', function(){
			$($item).removeClass('formItemFocus');
		} );
		$( "#s" + id ).remove();
	},

	/**
	 * @deprecated
	 * @param jqueryOrNode
	 * @param text
	 * @returns {boolean}
	 */
	setError:function( jqueryOrNode, text ){
		if( typeof jqueryOrNode == 'string' ){
			var node = $(jqueryOrNode)[0];
		} else {
			var node = jqueryOrNode;
		}
		if(!node){
			D.console.error( 'T.Forms.setError "idOrNode"', jqueryOrNode, text );
			return;
		}
		// T.Form
		if( node._form ){
			node._form.error(text);
			return;
		}
		if( text === false ){
			$(node).removeClass('formItemError');
			$( '.help', node ).show();
			$( '.error', node ).hide();
			return;
		}
		$(node).addClass('formItemError');
		if( empty(text) ){
			return;
		}
		$( '.help', node ).hide();
		if( $( '.error', node ).length ){
			$( '.error', node ).html(text).show();
		} else {
			mkE( {
				tag:'span',
				className:'error',
				prop:{
					innerHTML:text
				}
			} ).append(node);
		}
		return true;
	},

	/**
	 * @deprecated
	 * @param jqueryOrNode
	 * @param text
	 */
	error:function( jqueryOrNode, text ){
		var jq = $(jqueryOrNode);
		// T.Form
		if( jq[0] && jq[0]._form ){
			jq[0]._form.error(text);
			return;
		}
		var jqp = jq.parents('.formItem');
		if( text === false ){
			jqp.removeClass('formItemError');
			jqp.find('.help').show();
			jqp.find('.error').hide();
			return;
		}
		jqp.addClass('formItemError');
		jqp.find('.help').hide();
		jqp.each( function(){
			if( $( '.error', this ).length ){
				$( '.error', this ).html(text).show();
			} else {
				mkE( {
					tag:'span',
					className:'error',
					prop:{
						innerHTML:text
					}
				} ).append(this);
			}
		} );
	},

	/**
	 * @deprecated
	 * @param jqueryOrNode
	 * @param val
	 */
	disable:function( jqueryOrNode, val ){
		var jq = $(jqueryOrNode);
		// T.Form
		if( jq[0]._form ){
			jq[0]._form.disable(val);
			return;
		}
		if(val){
			jq.attr( 'disabled', 'disabled' )
				.parents('.formItem')
				.addClass('formItemDisabled');
		} else {
			jq.attr( 'disabled', false )
				.parents('.formItem')
				.removeClass('formItemDisabled');
		}
	},

	/**
	 * @deprecated
	 * @param par
	 */
	item:function(par){
		var node = mkE( {
			tag:'div',
			className:'formItem formItemItem'
		} );
		if( par.stretch ){
			addClassName( node, 'formItemStretch' );
		}
		if( par.caption ){
			var label = mkE( {
				tag:'label',
				text:par.caption
			} ).append(node);
			if( par.require ){
				mkE( {
					tag:'span',
					className:'colorWarn',
					text:'*'
				} ).append(label);
			}
		}
		var re = mkE( {
			tag:'div',
			els:par.els || []
		} ).append(node);
		re.append = function(parent){
			node.append(parent);
			return this;
		};
		re.remove = function(){
			node.remove();
		};
		re.node = node;
		return re;
	}

};


// +++ T.Forms.Slider +++
/**
 * @param {Object} par
 * @constructor
 * @deprecated
 */
T.Forms.Slider = function( par ){
	par = par || {};
	par.showSliderValue = ( isset(par.showSliderValue) ? par.showSliderValue : true );
	var $slider = this;
	this.par = par;
	this.min = par.min || 0;
	this.max = par.max || 100;
	this.to = par.to || 0;
	this.to_ = this.to;
	this.from = par.from || 0;
	this.from_ = this.from;
	this.label = par.label || '';
	this.nameFrom = par.nameFrom || par.name + '[from]';
	this.nameTo = par.nameTo || par.name + '[to]';
	this.onChange = par.onChange || function(){};
	this.onSlideEnd = par.onSlideEnd || function(){};
	this.captionNode = mkE( {
		tag:'label',
		els:[
			this._captionNode = mkE( {
				tag:'span',
				text:( par.caption ? par.caption : '' )
			} ),
			this._sliderValueNode = mkE( {
				tag:'span',
				className:'formSliderValue',
				els:[
					mkE( {
						tag:'span',
						text:( empty( par.caption ) ? '' : ' ' )
					} ),
					this.fromValue = mkE( {
						tag:'span'
					} ),
					this.sepValues = mkE( {
						tag:'span',
						text:' - '
					} ),
					this.toValue = mkE( {
						tag:'span'
					} )
				]
			} )
		]
	} );
    if ( !par.showSliderValue ) {
        this._sliderValueNode.style.display = 'none';
    }
	this.node = mkE( {
		tag:'div',
		className:'formSlider formItemBorder radius3',
		prop:{
			onselectstart:function(){
				return false;
			}
		},
		els:[
			this.fromInput = mkE( {
				tag:'input',
				prop:{
					type:'hidden',
					name:par.from === false ? '' : this.nameFrom
				}
			} ),
			this.toInput = mkE( {
				tag:'input',
				prop:{
					type:'hidden',
					name:par.from === false ? par.name : this.nameTo
				}
			} ),
			this.cur = mkE( {
				tag:'div',
				className:'formSliderCur radius3'
			} ),
			this.fromNode = mkE( {
				tag:'div',
				className:'formSliderV formSliderFrom radius3',
				prop:{
					onmousedown:function(){
						this.style.zIndex = 1;
						$slider.toNode.style.zIndex = '';
						this.mouseX = D.mouseX;
						this._left = this.offsetLeft;
						$slider.fromMouseDown();
					}
				}
			} ),
			this.toNode = mkE( {
				tag:'div',
				className:'formSliderV formSliderTo radius3',
				prop:{
					onmousedown:function(){
						this.style.zIndex = '';
						$slider.toNode.style.zIndex = 1;
						this.mouseX = D.mouseX;
						this._left = this.offsetLeft;
						$slider.toMouseDown();
					}
				}
			} )
		]
	} );
	if( this.from == this.max ){
		this.fromNode.style.zIndex = 1;
	}
};

T.Forms.Slider.prototype = {

	append:function(parent){
		this.captionNode.append(parent);
		this.node.append(parent);
		this.setPos();
		return this;
	},

	appendTo:function( n ){
		this.captionNode.appendTo( n );
		this.node.appendTo( n );
		this.setPos();
		return this;
	},

	replace:function(node){
		this.captionNode.replace(node);
		D.insertAfter( this.node, this.captionNode );
		this.setPos();
		return this;
	},

	setPos:function(withoutEvent){
		var $slider = this;
		if( !this.node.offsetWidth ){
			if( this._appended && !$( this.node ).parents('body')[0] ){
				return;
			}
			setTimeout( function(){
				$slider.setPos();
			}, 100 );
			return;
		}
		this._appended = true;
		with( this ){
			var d = ( max - min );
			if( par.from === false ){
				fromNode.style.display = 'none';
				fromValue.style.display = 'none';
				sepValues.style.display = 'none';
			} else {
				fromNode.style.left = ( from - min ) / d * ( node.offsetWidth - toNode.offsetWidth ) + 'px';
			}
			toNode.style.left = ( to - min ) / d * ( node.offsetWidth - toNode.offsetWidth ) + 'px';
			update(withoutEvent);
		}
	},

	remove:function(){
		this.captionNode.remove();
		this.node.remove();
	},

	fromMouseDown:function(){
		T.Forms.Slider._slider = this;
		addClassName(document.body, 'no-select');
		var mouseup = function(){
			$( document.body ).unbind( 'mouseup', mouseup );
			$( document.body ).unbind( 'mousemove', T.Forms.Slider.fromMouseMove );
			T.Forms.Slider._slider.onSlideEnd();
			removeClassName(document.body, 'no-select');
		};
		$( document.body ).mousemove( T.Forms.Slider.fromMouseMove );
		$( document.body ).mouseup( mouseup );
	},

	toMouseDown:function(){
		T.Forms.Slider._slider = this;
		addClassName(document.body, 'no-select');
		var mouseup = function(){
			$( document.body ).unbind( 'mouseup', mouseup );
			$( document.body ).unbind( 'mousemove', T.Forms.Slider.toMouseMove );
			T.Forms.Slider._slider.onSlideEnd();
			removeClassName(document.body, 'no-select');
		};
		$( document.body ).mousemove( T.Forms.Slider.toMouseMove );
		$( document.body ).mouseup( mouseup );
	},

	update:function(withoutEvent){
		with( this ){
			var d = ( max - min );
			if( !node.offsetWidth || !toNode.offsetWidth ){
				return;
			}
			if( this.par.from === false ){
				from = min;
			} else {
				from = Math.round( fromNode.offsetLeft / ( node.offsetWidth - toNode.offsetWidth ) * d ) + min;
				from = Math.max( from, min );
				from = Math.min( from, max );
				fromInput.value = from;
				fromValue.innerHTML = ( this.displayFn ? this.displayFn(from) : from ) + ( empty(label) ? '' : ' ' + label );
			}
			to = Math.round( toNode.offsetLeft / ( node.offsetWidth - toNode.offsetWidth ) * d ) + min;
			to = Math.max( to, from );
			to = Math.min( to, max );
			toInput.value = to;
			if( from_ != from || to_ != to ){
				var dir = from_ != from ? 1 : -1;
				if(!withoutEvent){
					this.onChange(dir);
				}
				from_ = from;
				to_ = to;
			}
			toValue.innerHTML = ( this.displayFn ? this.displayFn(to) : to ) + ( empty(label) ? '' : ' ' + label );
			//fromNode.style.left = ( from - par.min ) / d * ( node.offsetWidth - toNode.offsetWidth ) - 2 + 'px';
			//toNode.style.left = ( to - par.min ) / d * ( node.offsetWidth - toNode.offsetWidth ) + 'px';
			cur.style.left = fromNode.offsetLeft + ( this.par.from === false ? 0 : 1 ) + 'px';
			cur.style.width = toNode.offsetLeft - fromNode.offsetLeft + 2 + 'px';
		}
	}

};

T.Forms.Slider.fromMouseMove = function(){
	with( T.Forms.Slider._slider ){
		var x = Math.max( -2, D.mouseX - fromNode.mouseX + fromNode._left );
		x = Math.min( x, toNode.offsetLeft );
		fromNode.style.left = x + 'px';
		update();
	}
};

T.Forms.Slider.toMouseMove = function(){
	with( T.Forms.Slider._slider ){
		var d = ( max - min );
		var x = Math.max( par.from === false ? -2 : fromNode.offsetLeft, D.mouseX - toNode.mouseX + toNode._left );
		x = Math.min( x, node.offsetWidth - toNode.offsetWidth );
		toNode.style.left = x + 'px';
		update();
	}
};
// --- T.Forms.Slider ---

// --- forms.js ---

// +++ form.js +++
T.Form = function(){
};

T.Form._phpFixSkip = {
	help:true,
	caption:true,
	error:true,
	href:true,
	editor:true
};

T.Form.phpFix = function( par, sub ){
	if(!sub){
		par._php = true;
		var _phpDebug = {};
	}
	for( var k in par ){
		if( !sub && this._phpFixSkip[k] ){
			continue
		}
		switch( typeof par[k] ){
			case 'object':
				if( par[k] === null ){
					continue;
				}
				this.phpFix( par[k], true );
				continue;
			case 'string':
				break;
			default:
				continue;
		}
		par[k] = htmlspecialchars_decode( par[k], true );
		if( k.substr( 0, 2 ) == 'on' ){
			if(!sub){
				_phpDebug[k] = par[k];
			}
			if( !par[k] ){
				delete par[k];
				continue;
			}
			try{
				par[k] = new Function( "event", par[k] );
			} catch(e){
				D.console.error( e, par[k] );
			}
		}
	}
	if( D.DEV && _phpDebug ){
		par._phpDebug = _phpDebug;
	}
	return par;
};

/**
 * @extends {mkE.Base}
 * @constructor
 */
T.Form.Base = function(){
};

T.Form.Base.prototype = {

	name:'Base',

	append:function(parent){
		this.node.append(parent);
		return this;
	},

	prepend:function(parent){
		this.node.prepend(parent);
		return this;
	},

	remove:function(){
		this.node.remove();
		return this;
	},

	replace:function(parent){
		if( typeof parent == 'string' ){
			parent = document.getElementById(parent);
		}
		this.node.replace(parent);
		var siblingElement = nextElementSibling(this.node);
		if ( siblingElement
			&& siblingElement.tagName.toLocaleLowerCase() == 'script' ) {
			removeNode( siblingElement );
		}
		return this;
	},

	_notImplemented:function(prop){
		D.log( '"' + prop + '" not implemented for T.Form.' + this.name, this );
	},

	_appendTypeElement:function( elem, v ){
		clearNode(elem);
		if( this._php && typeof v == 'string' ){
			elem.innerHTML = v;
		} else {
			mkE.appendTypeElement( elem, v );
		}
	},

	/**
	 * @param {*} v
	 * @param {Boolean} [html]
	 * @returns {String}
	 */
	caption:function( v, html ){
		if( !this._captionTextNode ){
			this._notImplemented('caption');
			return '';
		}
		if( isset(v) ){
			if(html){
				this._captionTextNode.innerHTML = v;
			} else {
				this._appendTypeElement( this._captionTextNode, v );
			}
			if( this._captionNode && this._captionNode.style.display ){
				this._captionNode.style.display = v ? 'block' : 'none';
			}
		}
		return this._captionTextNode.innerHTML;
	},

	addClassName:function(v){
		addClassName( this.node, v );
		return this;
	},

	removeClassName:function(v){
		removeClassName( this.node, v );
		return this;
	},

	hide:function(){
		this.node.style.display = 'none';
		return this;
	},

	show:function(){
		this.node.style.display = '';
		return this;
	},

	visible:function(v){
		if(isset(v)){
			if(v){
				this.show();
			} else {
				this.hide();
			}
		}
		return this.node.style.display != 'none';
	},

	disable:function(v){
		if( !this._inputNode ){
			this._notImplemented('disable');
			return false;
		}
		if(isset(v)){
			this._inputNode.disabled = v;
			this._disableClass(v);
		}
		return this._inputNode.disabled;
	},

	focus:function(){
		if( !this._inputNode ){
			this._notImplemented('focus');
			return;
		}
		this._inputNode.focus();
	},

	blur:function(){
		if( !this._inputNode ){
			this._notImplemented('blur');
			return;
		}
		this._inputNode.blur();
	},

	require:function(v){
		if(!isset(v)){
			return this._require || false;
		}
		this._require = Boolean(v);
		if( this._require ){
			if( !this._requireNode ){
				this._requireNode = mkE( {
					tag:'span',
					className:'colorWarn',
					text:' *'
				} );
			}
			this._requireNode.append( this._captionNode );
		} else if( this._requireNode ){
			this._requireNode.remove();
		}
		return this._require;
	},

	clear:function(){
		this._notImplemented('clear');
	},

	_disableClass:function(v){
		if(v){
			addClassName( this.node, 'formItemDisabled' );
		} else {
			removeClassName( this.node, 'formItemDisabled' );
		}
	},

	_focusClass:function(v){
		if(v){
			addClassName( this.node, 'formItemFocus' );
		} else {
			removeClassName( this.node, 'formItemFocus' );
		}
	},

	_errorClass:function(v){
		if(v){
			addClassName( this.node, 'formItemError' );
		} else {
			removeClassName( this.node, 'formItemError' );
		}
	},

	/**
	 * @param {Event} e
	 * @returns {*}
	 */
	_event:function(e){
		e = D.event(e);
		if(!e){
			if( D.DEV ){
				D.log('WTF? No event object!!!');
			}
			return;
		}
		var p = {
			shiftKey:e.shiftKey,
			ctrlKey:e.ctrlKey,
			metaKey:e.metaKey
		};
		if( e.keyCode ){
			p.keyCode = e.keyCode;
		}
		if( ( this._php || this._js ) && this[ 'on' + e.type ] ){
			if( this._inputNode ){
				return this[ 'on' + e.type ].call( this._inputNode, e );
			}
			if( this._buttonNode ){
				return this[ 'on' + e.type ].call( this._buttonNode, e );
			}
		}
		if( e.type == 'focus' || e.type == 'blur' ){
			$(this).trigger( 'on' + e.type );
			return;
		}
		$(this).trigger( $.Event( e, p ) );
	},

	_onfocus:function(e){
		this._focusClass(true);
		this._event(e);
	},

	_onblur:function(e){
		this._focusClass(false);
		this._event(e);
	},

	_createErrorHelpNodes:function(){
		this._errorNode = mkE( {
			tag:'span',
			className:'error'
		} );
		this._helpNode = mkE( {
			tag:'span',
			className:'help'
		} );
		this._tipNode = mkE({
			tag: 'div',
			className: 'formItemTip'
		});
	},

	help:function(v){
		if( !this._helpNode ){
			this._notImplemented('help');
			return;
		}
		if(v){
			this._appendTypeElement( this._helpNode, v );
			this._helpNode.append( this.node );
			return;
		}
		this._helpNode.remove();
	},

	tip:function(par, size){
		if( !this._tipNode ){
			this._notImplemented('tip');
			return;
		}
		if( typeof par === "string" ) {
			par = {text: par};
		}
		par.icon = par.icon || (size === 'small' ? 'info-16' : 'info-18');
		par.size = par.size || (size === 'small' ? 16 : 24);
		if( par.text ){
			addClassName(this.node, 'formItemWithTip');
			mkE({
				tag: 'span',
				className: 'formItemTipIcon',
				prop: {
					title: par.text
				},
				style: {
					color: par.color || ''
				},
				els: [
					T.svgIcon({
						icon: par.icon,
						size: par.size
					})
				]
			}).append(this._tipNode);
			this._tipNode.append(this._borderNode || this._captionNode);
		}else{
			removeClassName(this.node, 'formItemWithTip');
			this._topNode.remove();
		}
	},

	error:function(v){
		if( v === false ){
			this._errorClass(false);
		}	else {
			this._errorClass(true);
		}
		if( !this._errorNode ){
			this._notImplemented('error');
			return v;
		}
		if( v === false ){
			this._errorNode.remove();
			this._helpNode.append( this.node );
			return v;
		}
		this._errorNode.append( this.node );
		//this._helpNode.remove();
		this._appendTypeElement( this._errorNode, v || '' );
		return v;
	},

	icon:function( v, pos, svg, svgColor ){
		var node;
		if(this._borderNode) {
			node = this._borderNode;
		} else if (this._captionTextNode) {
			node = this._captionTextNode;
		} else {
			return;
		}
		var cn = node.className.split(' ');
		for( var k in cn ){
			if( cn[k].match( /.Icon$/ ) ){
				removeClassName( node, cn[k] );
			}
		}
		if(v || svg){
			addClassName( this.node, 'formInputIcon' );
			if( svg ){
				mkE({
					tag: 'span',
					className: 'formInputSVGIcon',
					style: {
						color: svgColor
					},
					els: [
						T.svgIcon(svg)
					]
				}).append(node);
			}else{
				addClassName( node, v + 'Icon' );
			}
		} else {
			removeClassName( this.node, 'formInputIcon' );
			pos = '';
		}
		if( isset(pos) ){
			removeClassName( node, 'formInputIcon_left' );
			removeClassName( node, 'formInputIcon_right' );
			if(pos){
				addClassName( node, 'formInputIcon_' + pos );
			}
		}
	},

	_par:function(par){
		// maina eventā this
		if( par._php ){
			this._php = true;
		}
		if( par.id ){
			this.node.id = 'Forms_' + par.id;
		}
		if( par.caption ){
			this.caption( par.caption, par.captionHTML );
		}
		if( isset( par.value ) ){
			this.value( par.value );
		}
		if( par.require ){
			this.require( par.require );
		}
		if( par.disabled ){
			this.disable(true);
		}
		if( par.help ){
			this.help( par.help );
		}
		if( par.tip ){
			this.tip( par.tip, par.size || null );
		}
		if( par.error ){
			this.error( par.error );
		}
		if( par.icon || par.SVGIcon ){
			this.icon( par.icon || false, par.iconPos || 'left', par.SVGIcon || false, par.SVGIconColor || '#aeaeae' );
		}
		if( par.className ){
			addClassName( this.node, par.className );
		} else if( par['class'] ){ // php
			addClassName( this.node, par['class'] );
		}
		if( par.size ){
			this.size(par.size);
		}
		// events
		if( par.onclick ){
			this.onclick = par.onclick;
		}
		if( par.onchange ){
			this.onchange = par.onchange;
		}
		if( par.onkeydown ){
			this.onkeydown = par.onkeydown;
		}
		if( par.onkeyup ){
			this.onkeyup = par.onkeyup;
		}
		if( par.onkeypress ){
			this.onkeypress = par.onkeypress;
		}
		if( par.onfocus ){
			this.onfocus = par.onfocus;
		}
		if( par.onblur ){
			this.onblur = par.onblur;
		}
		if (par.onmouseover) {
			this.node.onmouseover = par.onmouseover;
		}
		if (par.onmouseout) {
			this.node.onmouseout = par.onmouseout;
		}
		if( par.style ){
			this.node.setAttribute( 'style', par.style );
		}
		if( isset( par.visible ) ){
			this.visible( par.visible );
		}
		if( par._js ){
			this._js = true;
		}
		if( par.fullWidth ){
			addClassName(this.node, 'formItemFullWidth');
		}
		if( this._inputNode ){
			this._inputNode._form = this;
			// hack priekš T.Forms
			if( this._js ){
				this._inputNode.append = D.closure( this, function(parent){
					this.append(parent);
					return this._inputNode;
				} );
				this._inputNode.remove = D.closure( this, function(){
					this.remove();
					return this._inputNode;
				} );
				this._inputNode.node = this.node;
			}
			if( par.rel ){
				this._inputNode.setAttribute( 'rel', par.rel );
			}
			if( par.tabIndex ){
				this._inputNode.tabIndex = par.tabIndex;
			}
			for( var k in par ){
				if( k.substr( 0, 5 ) == 'data-' ){
					this._inputNode.setAttribute( k, par[k] );
				}
			}
		}
		if( par._phpDebug ){
			for( var k in par._phpDebug ){
				this.node.setAttribute( '_' + k, par._phpDebug[k] );
			}
		}
		this.node._form = this;
	},

	onclick:function(){
		//D.log('onclick');
	},

	onfocus:function(){
		//D.log('onfocus');
	},

	onblur:function(){
		//D.log('onblur');
	},

	/**
	 * @return {*}
	 */
	_onchange:function(){
		if( ( this._php || this._js ) && this._inputNode && this.onchange ){
			return this.onchange.call( this._inputNode );
		}
		$(this).trigger('change');
	},

	size: function(size){
		switch(size){
			case 'small':
				addClassName(this.node, 'formItemSmall');
				break;
			case 'large':
				addClassName(this.node, 'formItemLarge');
		}
	}

};

T.Form.Par = function() {};
T.Form.Par.prototype.id = '';
T.Form.Par.prototype.caption = '';
T.Form.Par.prototype.require = false;
T.Form.Par.prototype.disabled = false;
T.Form.Par.prototype.className = '';
T.Form.Par.prototype.visible = true;
/** @type {Function} */
T.Form.Par.prototype.onchange = null;


// +++ Option +++
/**
 * @param {String} [caption]
 * @param {String} [value]
 * @constructor
 */
T.Form.Option = function( caption, value ){
	if(caption){
		this.caption = caption;
	}
	if(value){
		this.value = value;
	}
};
/** @type {String} */
T.Form.Option.caption = '';
/** @type {String} */
T.Form.Option.value = '';
/** @type {String} For T.Form.RadioList */
T.Form.Option.name = '';
/** @type {Boolean} */
T.Form.Option.disabled = false;
// --- Option ---

// +++ CheckBox +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.CheckBoxPar = function(){};
T.Form.CheckBoxPar.prototype = new T.Form.Par;
/** @type {String|Object|Array|Node} */
T.Form.CheckBoxPar.prototype.help = '';
/** @type {Function} */
T.Form.CheckBoxPar.prototype.onclick = null;
/** @type {String} */
T.Form.CheckBoxPar.prototype.name = '';
/** @type {String} */
T.Form.CheckBoxPar.prototype.value = null;
/** @type {Boolean} */
T.Form.CheckBoxPar.prototype.checked = false;
/** @type {Boolean} */
T.Form.CheckBoxPar.prototype.toggleSwitch = false;
/** @type {String} */
T.Form.CheckBoxPar.prototype.toggleSwitchColor = '';
/** @type {String} */
T.Form.CheckBoxPar.prototype.type = 'checkbox';
/** @type {String} */
T.Form.CheckBoxPar.prototype.title = '';

/**
 * @extends T.Form.Base
 * @param {T.Form.CheckBoxPar|Object} par
 */
T.Form.CheckBox = function(par){
	par = par || {};
	if( par.type && par.type != 'checkbox' && par.type != 'radio' ){
		par.type = '';
	}
	this.node = mkE( {
		tag:'div',
		className:'formItem formItemCheckbox',
		els:[
			this._captionNode = mkE( {
				tag:'label',
				prop:{
					title:par.title || ''
				},
				els:[
					{
						tag: 'span',
						className: 'formCheckboxContainer',
						els: [
							this._inputNode = mkE( {
								tag:'input',
								prop:{
									id:par.id || '',
									name:par.name || '',
									type:par.type || 'checkbox',
									value:( isset( par.value ) ? par.value : '1' ),
									onclick:D.closure( this, this._onclick ),
									onfocus:D.closure( this, this._event ),
									onblur:D.closure( this, this._event )
								}
							} ),
							{
								tag: 'span',
								className: 'formCheckbox'
							}
						]
					},
					' ',
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ) // label
		]
	} );
	if( (par.type || 'checkbox') == 'checkbox' && par.toggleSwitch ){
		this._toggleSwitch = mkE({
			tag: 'span',
			className: 'toggleSwitch' + (par.toggleSwitchColor ? ' toggleSwitch' + ucfirst(par.toggleSwitchColor) : ''),
			prop: {
				title:par.title || ''
			}
		});
		D.insertAfter(this._toggleSwitch, this._inputNode);
		addClassName(this._captionNode, 'toggleSwitchContainer');
	}
	this._createErrorHelpNodes();
	if( !empty( par.checked ) ){
		//this.value(true);
		par.value = '1';
	} else {
		par.value = '';
	}
	this._par(par);
};

T.Form.CheckBox.prototype = new T.Form.Base;

T.Form.CheckBox.prototype.name = 'CheckBox';

T.Form.CheckBox.prototype._onclick = function(e){
	this._onchange();
	e = D.event(e);
	if( !e || e.type != 'click' ){
		e = { type:'click' };
	}
	return this._event(e);
};

T.Form.CheckBox.prototype.value = function(v){
	if(isset(v)){
		this._inputNode.defaultChecked = this._inputNode.checked = !empty(v);
	}
	return this._inputNode.checked;
};
T.Form.CheckBox.prototype.setTitle = function(v){
	this._captionNode.setAttribute('title', v);
	this._toggleSwitch.setAttribute('title', v);
};
// --- CheckBox ---

// +++ RadioBox +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.RadioBoxPar = function(){
};
T.Form.RadioBoxPar.prototype = new T.Form.Par;
/** @type {String|Object|Array|Node} */
T.Form.RadioBoxPar.prototype.help = '';
/** @type {Function} */
T.Form.RadioBoxPar.prototype.onclick;
/** @type {String} */
T.Form.RadioBoxPar.prototype.name = '';
/** @type {String} */
T.Form.RadioBoxPar.prototype.value = null;
/** @type {Boolean} */
T.Form.RadioBoxPar.prototype.checked = false;

/**
 * @extends T.Form.Base
 * @param {T.Form.RadioBoxPar|Object} par
 */
T.Form.RadioBox = function(par){
	par = par || {};
	this.node = mkE( {
		tag:'div',
		className:'formItem formItemCheckbox',
		els:[
			this._captionNode = mkE( {
				tag:'label',
				els:[
					{
						tag: 'span',
						className: 'formCheckboxContainer',
						els: [
							this._inputNode = mkE( {
								tag:'input',
								prop:{
									id:par.id || '',
									name:par.name || '',
									type:'radio',
									value:( isset( par.value ) ? par.value : '1' ),
									onclick:D.closure( this, this._onclick ),
									onfocus:D.closure( this, this._event ),
									onblur:D.closure( this, this._event )
								}
							} ),
							{
								tag: 'span',
								className: 'formCheckbox'
							}
						]
					},
					' ',
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ) // label
		]
	} );
	this._createErrorHelpNodes();
	if( !empty( par.checked ) ){
		//this.value(true);
		par.value = '1';
	} else {
		par.value = '';
	}
	this._par(par);
};

T.Form.RadioBox.prototype = new T.Form.Base;

T.Form.RadioBox.prototype.name = 'RadioBox';

T.Form.RadioBox.prototype._onclick = function(e){
	this._onchange();
	e = D.event(e);
	if( !e || e.type != 'click' ){
		e = { type:'click' };
	}
	return this._event(e);
};

T.Form.RadioBox.prototype.value = function(v){
	if(isset(v)){
		this._inputNode.defaultChecked = this._inputNode.checked = !empty(v);
	}
	return this._inputNode.checked;
};
// --- RadioBox ---

// +++ RadioList +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.RadioListPar = function(){
	this.options = [];
};
T.Form.RadioListPar.prototype = new T.Form.Par;
/** @type {String|Object|Array|Node} */
T.Form.RadioListPar.prototype.help = '';
/** @type {String} */
T.Form.RadioListPar.prototype.name = '';
/** @type {String} */
T.Form.RadioListPar.prototype.value = null;
/** @type {Array.<T.Form.Option>|Object.<String>} */
T.Form.RadioListPar.prototype.options;

/**
 * @extends T.Form.Base
 * @param {T.Form.RadioListPar|Object} par
 */
T.Form.RadioList = function(par){
	par = par || {};
	this.name = par.name || '';
	this.type = par.type || 'radio';
	/** @type {Array.<T.Form.RadioBox>} */
	this._items = {};
	this.node = mkE( {
		tag:'div',
		className:'formItem formRadioList',
		els:[
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ),
			this._containerNode = mkE( {
				tag:'div'
			} )
		]
	} );
	this._createErrorHelpNodes();
	if( par.options ){
		this.setOptions( par.options );
	}
	this._par(par);
};

T.Form.RadioList.prototype = new T.Form.Base;

T.Form.RadioList.prototype.setOptions = function(options){
	clearNode( this._containerNode );
	this._items = {};
	for( var k in options ){
		if(options.hasOwnProperty(k)) {
			this.appendOption(options[k], k);
		}
	}
};

T.Form.RadioList.prototype.appendOption = function(opt, k, replace, insertBefore){
	if( typeof opt != 'object' ){
		opt = {
			caption:opt,
			value:k
		};
	}
	if( this._items[ opt.value ] && !replace ){
		D.console.warn( 'RadioList.appendOption Duplicate value: ', opt.value, this );
		return;
	}
	var radio;
	if (this.type == 'radio') {
		radio = new T.Form.RadioBox( {
			caption:opt.caption,
			value:opt.value,
			disabled:opt.disabled || false,
			name:opt.name || this.name,
			checked: opt.checked || false,
			tip: opt.tip || false,
			onclick:D.closure( this, this._optClick, opt.value ),
			help: opt.help || false,
			captionHTML: opt.captionHTML || false
		} );
	} else {
		radio = new T.Form.CheckBox( {
			caption:opt.caption,
			value:opt.value,
			disabled:opt.disabled || false,
			name:opt.name || this.name,
			checked: opt.checked || false,
			tip: opt.tip || false,
			onclick:D.closure( this, this._cbxClick ),
			help: opt.help || false
		} );
	}

	if( this._disable ){
		radio.disable(true);
	}

	if( this._items[ opt.value ] && replace ) {
		radio.replace(this._items[ opt.value ].node);
	} else if ( insertBefore ) {
		if(!this._items[insertBefore]) {
			D.console.warn( 'RadioList.appendOption cant insert before: ', insertBefore, this );
			return;
		}
		D.insertBefore(radio.node, this._items[insertBefore].node);
	} else {
		radio.append(this._containerNode);
	}
	this._items[opt.value] = radio;
};

T.Form.RadioList.prototype._reset = function(){
	for( var k in this._items ){
		this._items[k].value(false);
	}
};

T.Form.RadioList.prototype._optClick = function(value){
	if( !this._items[value] ){
		D.console.warn( 'Unknown option value: ', value );
		return;
	}
	this._reset();
	this._items[value].value(true);
	this._onchange();
};

T.Form.RadioList.prototype._cbxClick = function(){
	this._onchange();
};

T.Form.RadioList.prototype.value = function(v){
	if(isset(v)){
		if( !this._items[v] ){
			D.console.warn( 'Unknown option value: ', v );
			return null;
		}
		this._reset();
		this._items[v].value(true);
	}
	for( var k in this._items ){
		if( this._items[k].value() ){
			return k;
		}
	}
	return null;
};

T.Form.RadioList.prototype.disable = function(v){
	if( isset(v) ){
		this._disable = Boolean(v);
		for( var k in this._items ){
			this._items[k].disable( this._disable );
		}
	}
	return this._disable || false;
};
// --- RadioList ---

// +++ TagList +++
/**
 * @extends T.Form.Base
 * @param {T.Form.RadioListPar|Object} par
 */
T.Form.TagList = function(par){
	T.Form.RadioList.call(this, par);
	addClassName(this.node, 'formRadioListTags');
	this._addActiveClassName();
};

T.Form.TagList.prototype =  Object.create(T.Form.RadioList.prototype);

T.Form.TagList.prototype._onchange = function () {
	T.Form.RadioList.prototype._onchange.call(this);
	this._addActiveClassName();
};

T.Form.TagList.prototype._addActiveClassName = function (  ) {
	for(var i in this._items) {
		if(this._items.hasOwnProperty(i)) {
			var item = this._items[i];
			if(item.value()) {
				addClassName(item.node, 'active');
			} else {
				removeClassName(item.node, 'active');
			}
		}
	}
};

T.Form.TagList.prototype.forEach = function (callback) {
	for( var k in this._items ){
		if(this._items.hasOwnProperty(k)) {
			if(callback(k, this._items[k]) === false) {
				break;
			}
		}
	}
};

T.Form.TagList.prototype.value = function(v){
	if(isset(v)){
		this._reset();
		if(is_array(v)) {
			this.forEach(function ( k, item ) {
				item.value(v);
			});
		} else {
			this._items[v].value(true);
		}
		return;
	}
	var isMulti = this.type === 'checkbox', re = [];
	this.forEach(function(k, item){
		if( item.value() ){
			if(isMulti) {
				re.push(k);
			} else {
				re = k;
				return false;
			}
		}
		return true;
	});
	return isMulti ? re : null;
};
// --- TagList ---

// +++ Permissions +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.PermissionsPar = function(){
};
T.Form.PermissionsPar.prototype = new T.Form.Par;
T.Form.PermissionsPar.prototype.uid = 0;
/** @type {String} */
T.Form.PermissionsPar.prototype.name = '';
/** @type {Number} */
T.Form.PermissionsPar.prototype.value = 0;
T.Form.PermissionsPar.prototype.biz = false;

/**
 * @extends T.Form.Base
 * @param {T.Form.PermissionsPar|Object} par
 */
T.Form.Permissions = function(par){
	par = par || {};
	this.uid = par.uid || D.ID;
	/** @type {Array.<T.Form.RadioBox>} */
	this._types = {};
	this.node = mkE( {
		tag:'div',
		className:'formItem formItemPermissions',
		els:[
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ),
			this._types.all = new T.Form.RadioBox( {
				caption:D.Lang.get('Perm all'),
				name:'perm'
			} ),
			this._types.reg = new T.Form.RadioBox( {
				caption:D.Lang.get('Perm reg'),
				name:'perm'
			} ),
			this._types.fr = new T.Form.RadioBox( {
				caption:D.Lang.get('Perm friends'),
				name:'perm'
			} ),
			this._types.frGroups = new T.Form.RadioBox( {
				caption:D.Lang.get('Perm groups'),
				name:'perm'
			} ),
			this._frGroupsNode = mkE( {
				tag:'div',
				style:{
					display:'none'
				},
				els:[
					{
						tag:'div',
						className:'permGroup'
					},
					{
						tag:'div',
						className:'permGroup'
					},
					T.clear()
				]
			} ),
			this._types.none = new T.Form.RadioBox( {
				caption:D.Lang.get('Perm none'),
				name:'perm'
			} )
		]
	} );
	this._types.none.value(true);
	var onchange = D.closure( this, this._click );
	for( var k in this._types ){
		this._types[k].onclick = onchange;
	}
	this._drawGroups();
	if( par.groups ){
		this.setGroups( par.groups );
	}
	if( par.biz ){
		for( var type in this._types ){
			if( !this._types.hasOwnProperty(type) ){
				continue;
			}
			if( type == 'all' || type == 'none' ){
				continue;
			}
			this._types[type].node.style.display = 'none';
		}
	}
	this._par(par);
};

T.Form.Permissions.prototype = new T.Form.Base;

T.Form.Permissions.prototype.name = 'Permissions';

T.Form.Permissions.prototype._drawGroups = function(){
	/** @type {Array.<T.Form.CheckBox>} */
	this._groupsCbx = [];
	for( var i = 1; i <= 11; ++ i ){
		var cbx = new T.Form.CheckBox( {
			caption:'Group ' + i,
			onclick:D.closure( this, this._click )
		} );
		this._groupsCbx[i] = cbx;
		cbx.append( this._frGroupsNode.childNodes[ ( i - 1 ) % 2 ] );
	}
};

T.Form.Permissions.prototype.setGroups = function(groups){
	this._groups = groups;
	if( !this.uid || this.uid == D.ID ){
		T.Form.Permissions._groupes = groups;
	}
	for( var k in this._groupsCbx ){
		this._groupsCbx[k].remove();
	}
	var n = 0;
	for( var k in groups ){
		if( this._groupsCbx[k] ){
			this._groupsCbx[k].caption( groups[k].name + ( groups[k].count ? ' (' + groups[k].count + ')' : '' ) );
			this._groupsCbx[k].append( this._frGroupsNode.childNodes[ n++ % 2 ] );
		}
	}
	this._groupsCbx[11].append( this._frGroupsNode.childNodes[0] );
	T.clear().append( this._frGroupsNode );
};

T.Form.Permissions.prototype._getGroups = function(){
	// cache
	if( ( !this.uid || this.uid == D.ID ) && T.Form.Permissions._groupes ){
		this.setGroups( T.Form.Permissions._groupes );
		return;
	}
	if( this._gettingGroups ){
		return;
	}
	this._gettingGroups = true;
	var rpc = new RPC('/rq/app.php');
	rpc.send(
		'userGroups',
		{
			uid:this.uid,
			ungrouped:true
		},
		this._getGroupsRe,
		this
	);
};

T.Form.Permissions.prototype._getGroupsRe = function(re){
	this.setGroups( re.groups );
};

T.Form.Permissions.prototype._click = function(){
	var val = this.value();
	this._changed();
	if( val != this.value() ){
		$(this).trigger('change');
	}
};

T.Form.Permissions.prototype.value = function(v){
	if(!isset(v)){
		return this._value;
	}
	this._value = Number(v);
	this._reset();
	switch( this._value ){
		case D.PERM_ALL:
			this._types.all.value(true);
			break;
		case D.PERM_REG:
			this._types.reg.value(true);
			break;
		case D.PERM_FR:
			this._types.fr.value(true);
			break;
		case D.PERM_NONE:
			this._types.none.value(true);
			break;
		default:
			this._types.frGroups.value(true);
			for( var k in this._groupsCbx ){
				this._groupsCbx[k].value( this._value & 1 << ( k - 1 ) );
			}
	}
	this._changed();
	return this._value;
};

T.Form.Permissions.prototype._value = 0;

T.Form.Permissions.prototype._reset = function(){
	for( var k in this._types ){
		this._types[k].value(false);
	}
};

T.Form.Permissions.prototype.onchange = function(){
};

T.Form.Permissions.prototype._selectAllGroups = function(v){
	for( var k in this._groupsCbx ){
		this._groupsCbx[k].value(v);
	}
};

T.Form.Permissions.prototype._changed = function(){
	this._value = 0;
	if( this._types.frGroups.value() ){
		$( this._frGroupsNode ).show();
		if( !this._groups ){
			this._getGroups();
		}
	} else {
		$( this._frGroupsNode ).hide();
	}
	if( this._types.all.value() ){
		this._value = D.PERM_ALL;
		this._selectAllGroups(true);
	} else if( this._types.reg.value() ){
		this._value = D.PERM_REG;
		this._selectAllGroups(true);
	} else if( this._types.fr.value() ){
		this._value = D.PERM_FR;
		this._selectAllGroups(true);
	} else if( this._types.none.value() ){
		this._value = D.PERM_NONE;
		this._selectAllGroups(false);
	} else if( this._types.frGroups.value() ){
		for( var k in this._groupsCbx ){
			if( this._groupsCbx[k].value() ){
				this._value |= 1 << ( k - 1 );
			}
		}
	}
};

T.Form.Permissions.prototype.toStr = function(){
	for( var k in this._types ){
		if( this._types[k].value() ){
			return this._types[k].caption();
		}
	}
	return '';
};

T.Form.Permissions.prototype._disabled = false;

T.Form.Permissions.prototype.disable = function(v){
	if( !isset(v) ){
		return this._disabled;
	}
	this._disabled = Boolean(v);
	for( var k in this._types ){
		this._types[k].disable(v);
	}
	for( var k in this._groupsCbx ){
		this._groupsCbx[k].disable(v);
	}
	this._disableClass(v);
	return this._disabled;
};

T.Form.Permissions.prototype.focus = function(){
	this._types.all.focus();
};

T.Form.Permissions.prototype.frGroups = function(){
	return this._types.frGroups.value()
};
// --- Permissions ---

// +++ Input +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.InputBtnPar = function(){};
T.Form.InputBtnPar.prototype = new T.Form.Par;
T.Form.InputBtnPar.prototype.icon = '';
/** @type {Function} */
T.Form.InputBtnPar.prototype.onclick;

/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.InputPar = function(){
};
T.Form.InputPar.prototype = new T.Form.Par;
/** @type {String|Object|Array|Node} */
T.Form.InputPar.prototype.help = '';
/** @type {String|Object|Array|Node} */
T.Form.InputPar.prototype.error = '';
/** @type {Function} */
T.Form.InputPar.prototype.onclick;
/** @type {Function} */
T.Form.InputPar.prototype.onkeyup;
/** @type {Function} */
T.Form.InputPar.prototype.onkeydown;
/** @type {Function} */
T.Form.InputPar.prototype.onkeypress;
/** @type {Function} */
T.Form.InputPar.prototype.onfocus;
/** @type {Function} */
T.Form.InputPar.prototype.onblur;
/** @type {String} */
T.Form.InputPar.prototype.name = '';
/** @type {String} */
T.Form.InputPar.prototype.value = null;
/** @type {String} */
T.Form.InputPar.prototype.type = 'text';
/** @type {String} */
T.Form.InputPar.prototype.icon = '';
/** @type {Boolean} */
T.Form.InputPar.prototype.readOnly = false;
/** @type {Boolean|Object|D.DatePickerPar} */
T.Form.InputPar.prototype.datepicker = null;
/** @type {String} */
T.Form.InputPar.prototype.rel = '';
/** @type {String} */
T.Form.InputPar.prototype.className = '';
T.Form.InputPar.prototype.placeholder = '';
T.Form.InputPar.prototype.iconPos = 'left';
T.Form.InputPar.prototype.SVGIcon = false;
T.Form.InputPar.prototype.SVGIconColor = '#aeaeae';
T.Form.InputPar.prototype.tabIndex = 0;
/** @type {T.Form.InputBtnPar} */
T.Form.InputPar.prototype.btnPar = null;
T.Form.InputPar.prototype.tip = null;

/**
 * @extends T.Form.Base
 * @param {T.Form.InputPar|Object} par
 */
T.Form.Input = function(par){
	par = par || {};
	par.className = par.className || '';
	// php
	if( par.datepickerpar ){
		try{
			par.datepickerpar = eval( '({' + par.datepickerpar + '})' );
			if( par.datepickerpar.dateFormat ){
				par.datepickerpar.dateFormat = par.datepickerpar.dateFormat.replace( 'yy', 'Y' ).replace( 'mm', 'm' ).replace( 'dd', 'd' );
				D.console.warn('use "format" instead datepickerpar.dateFormat');
			}
			if( par.datepickerpar.minDate ){
				par.datepickerpar.disableBefore = par.datepickerpar.minDate;
				D.console.warn('use "disableBefore" instead datepickerpar.minDate');
			}
			if( par.datepickerpar.maxDate ){
				par.datepickerpar.disableAfter = par.datepickerpar.maxDate;
				D.console.warn('use "disableAfter" instead datepickerpar.maxDate');
			}
		} catch(e){
			D.console.error(e);
		}
	}
	this.datepicker = par.datepickerpar || par.datepicker || false;
	if( this.datepicker && typeof this.datepicker != 'object' ){
		this.datepicker = {};
	}

	this._inputBtn = false;
	if (par.btnPar) {
		this._inputBtn = mkE({
			tag: 'div',
			className: 'formItemBtn ' + (par.btnPar.icon ? par.btnPar.icon + 'Icon' : ''),
			onclick: par.btnPar.onclick
		});
	}

	var onchangeEvent = D.closure( this, this._onchangeEvent );
	this.node = mkE( {
		tag:'div',
		className:'formItem formItemInput radius2 ' + par.className,
		els:[
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				],
				attr: par.id ? {
					'for': par.id
				} : {}
			} ),
			this._borderNode = mkE( {
				tag:'div',
				className:'formItemBorder radius2',
				els:[
					{
						tag:'div',
						className:'formItemPadding radius2',
						els:[
							this._inputNode = mkE( {
								tag:'input',
								prop:{
									id:par.id || '',
									name:par.name || '',
									type:par.type || '',
									onfocus:D.closure( this, this._onfocus ),
									onblur:D.closure( this, this._onblur ),
									// other
									onclick:onchangeEvent,
									onkeyup:onchangeEvent,
									onkeydown:onchangeEvent,
									onkeypress:onchangeEvent,
									onpaste:onchangeEvent,
									onchange:onchangeEvent
								}
							} ),
							this._inputBtn
						]
					}
				]
			} ) // .formItemBorder
		]
	} );
	this._createErrorHelpNodes();
	if( par.autocomplete ){
		this._inputNode.autocomplete = par.autocomplete;
	}
	if ( par.autofocus ) {
		this._inputNode.autofocus = par.autofocus;
	}
	if( par.readonly || par.readOnly ){ // php support
		this.readOnly(true);
	}
	if( par.maxLength ){
		this.maxLength( par.maxLength );
	}
	if( par.defaultText || par.placeholder ){
		this.placeholder( par.defaultText || par.placeholder );
	}
	if( this.datepicker ){
		this._initDatePicker();
	}
	if( par.size == 'large' ){
		addClassName( this.node, 'formInputLarge' );
	}
	if( par.caption ){
		addClassName(this.node, 'withLabel');
	}
	this._par(par);
};

T.Form.Input.prototype = new T.Form.Base;

T.Form.Input.prototype.name = 'Input';

T.Form.Input.prototype._onchangeEvent = function(e){
	if( this._prevValue != this._inputNode.value ){
		this._prevValue = this._inputNode.value;
		this._onchange();
	}
	return this._event(e);
};

T.Form.Input.prototype.value = function(v){
	if(isset(v)){
		v = v || '';
		this._prevValue = v;
		this._inputNode.value = v;
	}
	return this._inputNode.value;
};

T.Form.Input.prototype.clear = function() {
	this.value('');
	return this;
};

T.Form.Input.prototype.readOnly = function(v){
	if(isset(v)){
		this._inputNode.readOnly = v;
		this._disableClass(v);
	}
	return this._inputNode.readOnly;
};

T.Form.Input.prototype.maxLength = function(v){
	if(isset(v)){
		this._inputNode.maxLength = v;
	}
	return this._inputNode.maxLength;
};

T.Form.Input.prototype.placeholder = function(v){
	if(isset(v)){
		this._inputNode.placeholder = v;
	}
	return this._inputNode.placeholder;
};

T.Form.Input.prototype._initDatePicker = function(){
	D.onLoad( 'DatePicker', D.closure( this, this._initDatePicker_ ) );
//	if( !D.onLoad( 'jqueryUI', D.closure( this, D.EN ? this._initDatePicker_ : this._initDatePickerLang ) ) ){
//		D.addJS('js/jquery-ui/1.9.0/js/jquery-ui-1.9.0.custom.min.js');
//		D.addCSS('js/jquery-ui/css/custom-theme/jquery-ui-1.8.9.custom.css');
//	}
};

//T.Form.Input.prototype._initDatePickerLang = function(){
//	if( !D.onLoad( 'jqueryDatePicker', D.closure( this, this._initDatePicker_ ) ) ){
//		D.addJS('js/jquery-ui/jquery.ui.datepicker-' + D.LANG + '.js');
//	}
//};

T.Form.Input.prototype._initDatePicker_ = function(){
//	this.datepicker.dateFormat = this.datepicker.dateFormat || 'dd.mm.yy';
//	$( this._inputNode ).datepicker( this.datepicker );
	//var par = new D.DatePickerPar;
	this.datepicker.format = this.datepicker.format || this.datepicker.dateFormat || 'd.m.Y';
	this.datepicker.value = this.value();
	this._dp = new D.DatePicker( this.datepicker );
	this._dp.bindToInput( this._inputNode );
};

T.Form.Input.prototype.select = function(){
	if( this._inputNode.select ){
		return this._inputNode.select();
	}
};
// --- Input ---

// +++ Select +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.SelectPar = function(){
	this.options = [];
};
T.Form.SelectPar.prototype = new T.Form.Par;
/** @type {String|Object|Array|Node} */
T.Form.SelectPar.prototype.help = '';
/** @type {Boolean} */
T.Form.SelectPar.prototype.require = false;
/** @type {Function} */
T.Form.InputPar.prototype.onfocus = null;
/** @type {Function} */
T.Form.InputPar.prototype.onblur = null;
/** @type {String} */
T.Form.SelectPar.prototype.name = '';
/** @type {String} */
T.Form.SelectPar.prototype.value = null;
/** @type {Array.<T.Form.Option>|Object.<String>} */
T.Form.SelectPar.prototype.options = null;
/** @type {String} */
T.Form.SelectPar.prototype.icon = '';

/**
 * @extends T.Form.Base
 * @param {T.Form.SelectPar|Object} par
 */
T.Form.Select = function(par){
	par = par || {};
	this.node = mkE( {
		tag:'div',
		className:'radius2 formItem formItemSelect',
		els:[
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ),
			this._borderNode = mkE( {
				tag:'div',
				className:'radius2 formItemBorder',
				els:[
					{
						tag:'div',
						className:'radius2 formItemPadding',
						els:[
							this._inputNode = mkE( {
								tag:'select',
								prop:{
									id:par.id || '',
									name:par.name || '',
									onfocus:D.closure( this, this._onfocus ),
									onblur:D.closure( this, this._onblur ),
									// other
									onchange:D.closure( this, this._event )
								}
							} )
						]
					} // formItemPadding
				]
			} ) // .formItemBorder
		]
	} );
	this._createErrorHelpNodes();
	if( par.options ){
		this.setOptions( par.options );
	} else if( par.values ){ // T.Forms
		this.setOptions( par.values );
	}
	if( par.icon ){
		this.icon( par.icon );
	}
	this._par(par);
};

T.Form.Select.prototype = new T.Form.Base;

T.Form.Select.prototype.name = 'Select';

T.Form.Select.prototype.value = function(v){
	if(isset(v)){
		this._inputNode.value = v;
	}
	return this._inputNode.value;
};

T.Form.Select.prototype._options = {};

T.Form.Select.prototype._addOptions = function( options, parent ){
	parent = parent || this._inputNode;
	for( var k in options ){
		var opt = options[k];
		if( typeof opt != 'object' ){
			opt = {
				caption:opt,
				value:k
			};
		}
		if( opt.items ){
			var group = mkE( {
				tag:'optgroup'
			} ).append(parent);
			this._addOptions( opt.items, group );
			continue;
		}
		mkE( {
			tag:'option',
			text:opt.caption,
			value:opt.value,
			prop:{
				disabled:opt.disabled || false,
				_value:opt.value // īstā vērtība, nevis string
			}
		} ).append(parent);
	}
};

T.Form.Select.prototype.setOptions = function(options){
	clearNode( this._inputNode );
	this._options = options;
	this._addOptions(options);
};
// --- Select ---

// +++ TextArea +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.TextAreaPar = function(){
};
T.Form.TextAreaPar.prototype = new T.Form.Par;
/** @type {Number} */
T.Form.TextAreaPar.prototype.maxLength = 0;
/** @type {String|Object|Array|Node} */
T.Form.TextAreaPar.prototype.help = '';
/** @type {Function} */
T.Form.TextAreaPar.prototype.onfocus;
/** @type {Function} */
T.Form.TextAreaPar.prototype.onblur;
/** @type {String} */
T.Form.TextAreaPar.prototype.name = '';
/** @type {String} */
T.Form.TextAreaPar.prototype.value = null;
/** @type {String} */
T.Form.TextAreaPar.prototype.placeholder = '';
/** @type {Object} */
T.Form.TextAreaPar.prototype.editor = null;
/** @type {Boolean} */
T.Form.TextAreaPar.prototype.autoHeight = false;
/** @type {Boolean} */
T.Form.TextAreaPar.prototype.largeFooter = false;
/** @type {Object} */
T.Form.TextAreaPar.prototype.sayEditor = null;
/** @type {Function} */
T.Form.TextAreaPar.prototype.maxLengthCallback = null;
/** @type {Function} */
T.Form.TextAreaPar.prototype.onEnter = null;

/**
 * @extends T.Form.Base
 * @param {T.Form.TextAreaPar|Object} par
 */
T.Form.TextArea = function(par){
	par = par || {};
	this._editorPar = par.editor || null;
	this._sayEditorPar = par.sayEditor || null;
	this.onEnter = par.onEnter || null;
	this.node = mkE( {
		tag:'div',
		className:'formItem formItemTextarea radius3',
		els:[
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ),
			this._borderNode = mkE({
				tag:'div',
				className:'formItemBorder radius3',
				els:[
					{
						tag:'div',
						className:'formItemPadding radius3',
						els:[
							this._inputNode = mkE( {
								tag:'textarea',
								prop:{
									id:par.id || '',
									name:par.name || '',
									onfocus:D.closure( this, this._onfocus ),
									onblur:D.closure( this, this._onblur ),
									// other
									onkeyup:D.closure( this, this._onkeyup ),
									onkeydown:D.closure( this, this._onchangeEvent ),
									onkeypress:D.closure( this, this._onchangeEvent ),
									//onpaste:D.closure( this, this._onchangeEvent ),
									// change
									onmouseup:D.closure( this, this._onkeyup ),
									onpaste:D.closure( this, this._onkeyup )
								}
							} )
						]
					}, // .formItemPadding
					this._infoNode = mkE( {
						tag:'div',
						className:'formTextareaInfo radius3bottom' + (par.largeFooter?' largeFooter SIconHovered':''),
						els:[
							this._infoTextNode = mkE( {
								tag:'span'
							} ),
							this._infoRightNode = mkE( {
								tag:'div',
								className:'formTextareaInfoRight',
								els:[
									D.Lang.get('Remaining characters'), ': ',
									this._rcNode = mkE( {
										tag:'span',
										text:0
									} )
								],
								style:{
									display:'none'
								}
							} )
						],
						style:{
							display:'none'
						}
					} ) // ._infoNode
				]
			}) // .formItemBorder
		]
	} );
	if (par.largeFooter) {
		mkE({
			tag: 'a',
			className: 'SIcon smileySIcon',
			prop: {
				onclick: D.closure(this, this._insertSmiley)
			}
		}).append(this._infoNode);
		this._infoNode.style.display = "block";
	}
	this._createErrorHelpNodes();
	if( par.placeholder ){
		this.placeholder( par.placeholder );
	}
	if( par.infoText ){
		this.infoText( par.infoText );
	}
	if( par.readonly || par.readOnly ){
		this.readOnly(true);
	}
	if ( isset(par.maxLengthCallback) ) {
		this.maxLengthCallback = par.maxLengthCallback;
	}
	if( par.maxLength ){
		this.maxLength( par.maxLength );
	}
	if ( isset(par.maxLengthCut) ) {
		this.maxLengthCut = par.maxLengthCut;
	}
	this._par(par);
	if( this._editorPar ){
		this._initEditor();
		addClassName( this.node, 'formItemEditor' );
	} else if( this._sayEditorPar ){
		this._initSayEditor();
		addClassName( this.node, 'formItemEditor' );
	} else if( par.autoHeight ){
		T.textareaAutoHeight( this._inputNode );
	}
};

T.Form.TextArea.prototype = new T.Form.Base;

T.Form.TextArea.prototype.name = 'TextArea';

T.Form.TextArea.prototype._insertSmiley = function(e){
	T.insertSmiley( null, this._inputNode );
};
T.Form.TextArea.prototype._onchangeEvent = function(e){
	if( this._prevValue != this._inputNode.value ){
		this._prevValue = this._inputNode.value;
		this._onchange();
	}
	return this._event(e);
};

T.Form.TextArea.prototype.readOnly = function(v){
	if(isset(v)){
		this._inputNode.readOnly = v;
		this._disableClass(v);
	}
	return this._inputNode.readOnly;
};

T.Form.TextArea.prototype.value = function(v){
	if(isset(v)){
		v = String(v);
		if( this._maxLength && this.maxLengthCut ){
			v = v.substr( 0, this._maxLength );
		}
		this._inputNode.value = v;
		this._prevValue = v;
		this._maxLengthCheck();
	}
//	if( this._inputNode.selectedIndex > -1 && isset( this._inputNode.options[ this._inputNode.selectedIndex ]._value ) ){
//		return this._inputNode.options[ this._inputNode.selectedIndex ]._value;
//	}
	return this._inputNode.value;
};

T.Form.TextArea.prototype.clear = function() {
	this.value('');
	return this;
};

T.Form.TextArea.prototype._onkeyup = function(e){
	if( this._maxLength ){
		clearTimeout( this._maxLengthTO );
		this._maxLengthTO = setTimeout( D.closure( this, this._maxLengthCheck ), 100 );
	}
	e = D.event(e);
	if( !e || e.type != 'keyup' ){
		e = { type:'keyup' };
	}
	if( e.keyCode == 13 && this.onEnter ){
		if( this.onEnter() === false ){
			return false;
		}
	}
	return this._onchangeEvent(e);
};

T.Form.TextArea.prototype._maxLength = 0;

T.Form.TextArea.prototype.maxLengthCut = true;

T.Form.TextArea.prototype.maxLengthCallback = null;

T.Form.TextArea.prototype._maxLengthCheck = function(){
	if( this._inputNode.getAttribute('maxlength') ){
		this._maxLength = Number( this._inputNode.getAttribute('maxlength') );
	}
	if( !this._maxLength ){
		return;
	}
	var c = this._maxLength - this._inputNode.value.length;
	var newLineC = this._inputNode.value.split(/\r\n|\r|\n/).length-1;
	c -= newLineC;

	if( this.maxLengthCut && c < 0 ){
		this._inputNode.value = this._inputNode.value.substr( 0, this._maxLength - newLineC );
		c = 0;
	}

	if( this.maxLengthCallback ) {
		this.maxLengthCallback(c);
		return;
	}

	this._rcNode.innerHTML = c;
	if( ( c / this._maxLength ) * 100 < 10 ){
		addClassName( this._rcNode, 'color1' );
		this._rcNode.parentNode.style.display = 'block';
	} else {
		removeClassName( this._rcNode, 'color1' );
		if( this._maxLength >= 300 ){
			this._rcNode.parentNode.style.display = 'none';
		} else {
			this._rcNode.parentNode.style.display = 'block';
		}
	}
};

T.Form.TextArea.prototype.maxLength = function(v){
	if(isset(v)){
		this._maxLength = Number(v);
		this._inputNode.removeAttribute('maxlength');
		this._maxLengthCheck();
		this._infoNode.style.display = !this.maxLengthCallback && (v || this._infoTextNode.firstChild) ? '' : 'none';
		this._infoRightNode.style.display = v ? 'block' : 'none';
		if ( !this.maxLengthCut ) {
			this._inputNode.setAttribute( 'maxlength', this._maxLength ? this._maxLength : '' );
		}
	}
	return this._maxLength;
};

T.Form.TextArea.prototype.placeholder = function(v){
	if(isset(v)){
		this._inputNode.placeholder = v;
	}
	return this._inputNode.placeholder;
};

T.Form.TextArea.prototype._initEditor = function(){
	D.onLoad( 'Textarea', D.closure( this, this._initEditorReady ) );
};

T.Form.TextArea.prototype._initEditorReady = function(){
	this._editor = new D.Textarea( this._editorPar );
	this._editor.replace( this._inputNode );
	this._editor.onChange2 = D.closure( this, this._editorOnchange );
};

T.Form.TextArea.prototype._editorOnchange = function(html){
	if( this._inputNode.value != html ){
		this._inputNode.value = html;
		this._onchange();
	}
};

T.Form.TextArea.prototype._initSayEditor = function(){
	this._sayEditorPar.onChange = D.closure(this, function(){
		this._inputNode.value = this._sayEditor.value();
	});
	this._sayEditorPar.onMentionMenuHide = D.closure(this, function(){
		this._inputNode.value = this._sayEditor.value();
	});
	this._sayEditorPar.onFocus = D.closure( this, this._onfocus );
	this._sayEditorPar.onBlur = D.closure( this, this._onblur );
	this._sayEditor = new D.SayEditor( this._sayEditorPar );
	this._sayEditor.value(nl2br(this._sayEditorPar.value));

	this._inputNode.value = this._sayEditor.value();
	this._inputNode.style.display = 'none';
	if( this._inputNode.parentNode ){
		removeClassName( this._inputNode.parentNode, 'formItemPadding' );
	}
	D.insertAfter( this._sayEditor.node, this._inputNode );
};

T.Form.TextArea.prototype.infoText = function(v){
	clearNode( this._infoTextNode );
	this._infoNode.style.display = v || this._maxLength ? '' : 'none';
	if(!v){
		return;
	}
	this._appendTypeElement( this._infoTextNode, v );
};
// --- TextArea ---

// +++ Row +++
T.Form.Row = function(par){
	par = par || {};
	par.els = par.els || [];
	this.node = mkE( {
		tag:'table',
		className:'formTable',
		els:[
			{
				tag:'tbody',
				els:[
					this._tr = mkE( {
						tag:'tr'
					} )
				]
			}
		]
	} );
	for( var k in par.els ){
		this.appendChild( par.els[k] );
	}
	if( par.className ){
		addClassName( this.node, par.className );
	}
};

T.Form.Row.prototype = new mkE.Base;

T.Form.Row.prototype.appendChild = function(child){
	mkE( {
		tag:'td',
		els:[
			child
		]
	} ).append( this._tr );
};

T.Form.Row.prototype.clear = function(){
	clearNode( this._tr );
	return this;
};
// --- Row ---

// +++ Item +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.ItemPar = function(){
	this.els = [];
};
T.Form.ItemPar.prototype = new T.Form.Par;
/** @type {String|Object|Array|Node} */
T.Form.ItemPar.prototype.help = '';
/** @type {Array.<String|Object|Array|Node>} */
T.Form.ItemPar.prototype.els = [];
/** @type {T.Form.Item.TYPE_DEFAULT|T.Form.Item.TYPE_ROW} */
T.Form.ItemPar.prototype.type = '';
T.Form.ItemPar.prototype.stretch = false;

/**
 * @extends {T.Form.Base}
 * @param {T.Form.ItemPar|Object} par
 * @constructor
 */
T.Form.Item = function(par){
	par = par || {};
	par.els = par.els || [];
	this.type = par.type || '';
	this.node = mkE( {
		tag:'div',
		className:'formItem formItemItem',
		els:[
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ),
			this._containerNode = mkE( {
				tag:'div'
			} )
		]
	} );
	if( this.type == T.Form.Item.TYPE_ROW ){
		this._row = new T.Form.Row();
		this._row.append( this._containerNode );
	}
	this._createErrorHelpNodes();
	if( this._row ){
		mkE.appendTypeElement( this._row, par.els );
	} else {
		mkE.appendTypeElement( this._containerNode, par.els );
	}
	if( par.stretch ){
		addClassName( this.node, 'formItemStretch' );
	}
	this._par(par);
};

T.Form.Item.TYPE_DEFAULT = '';
T.Form.Item.TYPE_ROW = 'row';

T.Form.Item.prototype = new T.Form.Base;

T.Form.Item.prototype.name = 'T.Form.Item';

T.Form.Item.prototype.appendChild = function(child){
	if( this._row ){
		child.append( this._row );
		return;
	}
	child.append( this._containerNode );
};

T.Form.Item.prototype.clear = function(){
	if( this._row ){
		this._row.clear();
		return this;
	}
	clearNode( this._containerNode );
	return this;
};
// --- Item ---

// +++ MultiItems +++
T.Form.MultiItemsPar = function(){
	this.els = [];
};
/** @type {Function} */
T.Form.MultiItemsPar.prototype.creator;
/** @type {Number} */
T.Form.MultiItemsPar.prototype.min = 0;
/** @type {Number} */
T.Form.MultiItemsPar.prototype.max = 0;
/** @type {Array} */
T.Form.MultiItemsPar.prototype.els;
/** @type {Function} */
T.Form.MultiItemsPar.prototype.onchange = null;

/**
 * @extends mkE.Base
 * @param {T.Form.MultiItemsPar|Object} par
 */
T.Form.MultiItems = function(par){
	this._items = [];
	this.creator = par.creator;
	this.min = par.min || 0;
	this.max = par.max || 0;
	this.onchange = par.onchange || null;
	par.els = par.els || [];
	this.node = mkE( {
		tag:'div',
		className:'multiItems',
		els:[
			this._containerNode = mkE( {
				tag:'div',
				className:'container'
			} ),
			this._addButtonNode = mkE( {
				tag:'a',
				className:'addButton',
				text:D.Lang.get('Add more'),
				prop:{
					onclick:D.closure( this, this._addClick )
				}
			} )
		]
	} );
	for( var k in par.els ){
		this.addItem( par.els[k] );
	}
	if( empty( par.els ) && this.min ){
		for( var i = 0; i < this.min; ++ i ){
			this.createItem();
		}
	}
	if( count( this._items ) == this.min ){
		addClassName( this._containerNode, 'empty' );
	}
};

T.Form.MultiItems.prototype = new mkE.Base;

T.Form.MultiItems.prototype.onchange = null;

/**
 * @type {Array.<T.Form.MultiItemsItem>}
 * @private
 */
T.Form.MultiItems.prototype._items = null;

T.Form.MultiItems.prototype._addClick = function(){
	this.createItem();
	$(this).trigger('change');
};

T.Form.MultiItems.prototype.createItem = function(v){
	var item = new T.Form.MultiItemsItem( this.creator(v) );
	this.addItem(item);
};

T.Form.MultiItems.prototype.addItem = function(item){
	item._mi = this;
	this._items.push(item);
	item.node.append( this._containerNode );
	if( count( this._items ) == this.max ){
		this._addButtonNode.style.display = 'none';
	}
	removeClassName( this._containerNode, 'empty' );
};

T.Form.MultiItems.prototype.removeItem = function(item){
	var i = array_search( item, this._items, true );
	if( i === false ){
		return;
	}
	this._items.splice( i, 1 );
	item.node.remove();
	if( count( this._items ) == this.min ){
		addClassName( this._containerNode, 'empty' );
	}
	this._addButtonNode.style.display = '';
};

T.Form.MultiItems.prototype.getItems = function(){
	return this._items.slice(0);
};

T.Form.MultiItems.prototype.getObjects = function(){
	var re = [];
	for( var k in this._items ){
		re.push( this._items[k].object );
	}
	return re;
};

T.Form.MultiItems.prototype.value = function(){
	var re = [];
	for( var k in this._items ){
		var item = this._items[k];
		if( !item.object.value ){
			D.console.error( "Object doesn't support method 'value'", item.object );
			continue;
		}
		re.push( item.object.value() );
	}
	return re;
};

T.Form.MultiItems.prototype.disable = function(v){
	if(isset(v)){
		var objects = this.getObjects();
		for( var k in objects ){
			if( !objects[k].disable ){
				D.console.info( "Objects doesn't support \"disable\" method", objects[k] );
				continue;
			}
			objects[k].disable(v);
		}
		this._disabled = Boolean(v);
	}
	return this._disabled || false;
};

T.Form.MultiItemsItem = function(object){
	this.object = object;
	this.node = mkE( {
		tag:'div',
		className:'item',
		els:[
			{
				tag:'a',
				className:'removeButton',
				prop:{
					onclick:D.closure( this, this._removeClick )
				}
			},
			object
		]
	} );
};

/** @type {T.Form.MultiItems} */
T.Form.MultiItemsItem.prototype._mi;

T.Form.MultiItemsItem.prototype._removeClick = function(){
	this.remove();
	$( this._mi ).trigger('change');
};

T.Form.MultiItemsItem.prototype.remove = function(){
	if( !this._mi ){
		return;
	}
	this._mi.removeItem(this);
};
// --- MultiItems ---

// +++ Slider +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.SliderPar = function(){};
T.Form.SliderPar.prototype = new T.Form.Par;
T.Form.SliderPar.prototype.value = 0;
T.Form.SliderPar.prototype.min = 0;
T.Form.SliderPar.prototype.max = 100;
/** @type {Function|null} */
T.Form.SliderPar.prototype.displayFn = null;
T.Form.SliderPar.prototype.showSliderValue = true;

/**
 * @param {T.Form.SliderPar|Object} par
 * @constructor
 * @extends {T.Form.Base}
 */
// TODO uzrakstīt no 0, lai neizmantojas T.Forms.Slider
T.Form.Slider = function(par){
	par = par || {};
	this.onChange = par.onChange || this.onChange;
	this.onSlideEnd = par.onSlideEnd || this.onSlideEnd;
	if( typeof par.value == 'object' ){
		par.from = par.value.from;
	}
	if( par.type == T.Form.Slider.TYPE_SINGLE ){
		par.from = false;
		this.type = T.Form.Slider.TYPE_SINGLE;
	}
	// uztaisa par single
	if( !isset( par.from ) ){
		par.from = false;
	}
	if( par.from === false ){
		this.type = T.Form.Slider.TYPE_SINGLE;
	} else {
		this.type = T.Form.Slider.TYPE_RANGE;
	}
	if( !par._php && par.name && !par.nameFrom && !par.nameTo && par.from === false ){
		par.nameTo = par.name;
	}
	this.node = mkE( {
		tag:'div',
		className:'formItem formItemSlider',
		els:[
			this._replacemant = mkE( {
				tag:'div'
			} )
		]
	} );
	par.showSliderValue = ( isset(par.showSliderValue) ? par.showSliderValue : true );
	this._slider = new T.Forms.Slider( {
		caption:par.caption,
		name:par.name || '',
		min:par.min,
		max:par.max,
		to:par.to,
		from:par.from,
		nameFrom:par.nameFrom,
		nameTo:par.nameTo,
		onChange:D.closure( this, this._onChange ),
		onSlideEnd:D.closure( this, this._onSlideEnd ),
		showSliderValue: par.showSliderValue
	} );
	this._slider.displayFn = D.closure( this, this._displayFn );
	if( par.displayFn ){
		this.displayFn = par.displayFn;
	}
	this._createErrorHelpNodes();
	par.caption = '';
	this._par(par);
	this._slider.replace( this._replacemant );
	// init values
	if( this._php ){
		this.from = this._slider.from;
		this.to = this._slider.to;
	}
};

T.Form.Slider.TYPE_RANGE = 'range';
T.Form.Slider.TYPE_SINGLE = 'single';

T.Form.Slider.prototype = new T.Form.Base;

T.Form.Slider.prototype.name = 'Slider';

T.Form.Slider.prototype._onChange = function(direction){
	if( this._php ){
		this.from = this._slider.from;
		this.to = this._slider.to;
	}
	$(this).trigger('change');
	this.onChange(direction); // fix
};

T.Form.Slider.prototype.onChange = function(){
};

T.Form.Slider.prototype._onSlideEnd = function(){
	if( this._php ){
		this.from = this._slider.from;
		this.to = this._slider.to;
	}
	$(this).trigger('SlideEnd');
};

T.Form.Slider.prototype.onSlideEnd = function(){
};

T.Form.Slider.prototype._displayFn = function(v){
	return this.displayFn(v);
};

T.Form.Slider.prototype.displayFn = function(v){
	return v;
};

T.Form.Slider.prototype._between = function(v){
	if( v < this._slider.min ){
		D.console.error( 'Wrong slider value (' + String( this._slider.min ) + '-' + String( this._slider.max ) + '): ', v );
		return this._slider.min;
	}
	if( v > this._slider.max ){
		D.console.error( 'Wrong slider value (' + String( this._slider.min ) + '-' + String( this._slider.max ) + '): ', v );
		return this._slider.max;
	}
	return v;
};

T.Form.Slider.prototype.value = function(v){
	if(isset(v)){
		if( typeof v == 'object' ){
			this._slider.to = this._between( v.to );
			this._slider.from = this._between( v.from );
		} else {
			this._slider.to = this._between(v);
		}
		this._slider.setPos(true);
	}
	if( this._slider.par.from === false ){
		return this._slider.to;
	}
	return {
		from:this._slider.from,
		to:this._slider.to
	};
};
// --- Slider ---

// +++ Footer +++
T.Form.FooterPar = function() {
	this.els = [];
};
T.Form.FooterPar.prototype.className = '';
T.Form.FooterPar.prototype.els = [];
/**
 * @param {T.Form.FooterPar|Object} [par]
 * @constructor
 * @extends {mkE.Base}
 */
T.Form.Footer = function(par){
	par = par || {};
	this.node = mkE( {
		tag:'div',
		className:'formFooter',
		els:par.els
	} );
	if( par.className ){
		addClassName( this.node, par.className );
	}
	if (par.align) {
		this.node.style.textAlign = par.align;
	}
};

T.Form.Footer.prototype = new mkE.Base;

T.Form.Footer.prototype.hide = function(){
	this.node.style.display = 'none';
	return this;
};

T.Form.Footer.prototype.show = function(){
	this.node.style.display = '';
};

T.Form.Footer.prototype.appendChild = function(child){
	child.append( this.node );
};
// --- Footer ---

// +++ Button +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.ButtonPar = function(){
};
T.Form.ButtonPar.prototype = new T.Form.Par;
T.Form.ButtonPar.prototype.icon = '';
T.Form.ButtonPar.prototype.svgIcon = '';
T.Form.ButtonPar.prototype.type = '';
T.Form.ButtonPar.prototype.target = '';
T.Form.ButtonPar.prototype.size = '';
T.Form.ButtonPar.prototype.href = '';
T.Form.ButtonPar.prototype.color = '';
T.Form.ButtonPar.prototype.badge = 0;
T.Form.ButtonPar.prototype.tabIndex = 0;
T.Form.ButtonPar.prototype.stretch = false;
T.Form.ButtonPar.prototype.ajax = false;
/** @type {Function} */
T.Form.ButtonPar.prototype.onclick;

/**
 * @param {T.Form.ButtonPar|Object} [par]
 * @constructor
 */
T.Form.Button = function(par){
	par = par || {};
	this.href = par.href || '';
	if( !par.type && this.href ){
		par.type = 'link';
	}
	if( par.size == 'large' ){
		par.color = par.color || 'submit';
	}
	var tag;
	switch( par.type || '' ){
		case 'link':
			tag = 'a';
			this.color = par.color || 'link';
			break;
		case 'html':
			tag = 'div';
			this.color = par.color || 'submit';
			break;
		default:
			tag = 'button';
			this.color = par.color || 'submit';
	}
	var buttonProp = {
		target:par.target || '',
		onclick:D.closure( this, this._onclick )
	};
	if( par.name ){
		buttonProp.name = par.name;
	}
	if( par.type ){
		buttonProp.type = par.type;
	}
	if( par.value ){
		buttonProp.value = par.value;
	}
	if( par.title ){
		buttonProp.title = par.title;
	}
	this.node = mkE( {
		tag:'span',
		className:'button',
		els:[
			this._buttonWrapNode = mkE( {
				tag:'div',
				className:'radius3',
				els:[
					this._buttonNode = mkE( {
						tag:tag,
						className:'buttonC radius3 ' + (par.ajax ? 'ajax' : ''),
						prop:buttonProp,
						els:( par.els || [] )
					} )
				]
			} )
		]
	} );
	this._buttonNode._form = this;
	this.node.button = this._buttonNode; // hack for T.submitButton
	if( par.value ){
		this._buttonNode.value = par.value;
	}
	if( par.id ){
		this.node.id = par.id;
		delete par.id;
	}
	if( this.href ){
		this._buttonNode.href = this.href;
	}
	if( par.target ){
		this._buttonNode.target = par.target;
	}
	this._captionTextNode = this._buttonNode;
	if( par.icon ){
		if( par.SVGIcon ){
			mkE({
				tag: 'span',
				els: [
					T.svgIcon({
						icon: par.icon
					}),
					this._captionTextNode = mkE({
						tag: 'span'
					})
				]
			}).append( this._buttonNode );
			if( empty(par.caption) ){
				addClassName( this.node, 'buttonOnlySVGIcon' );
			}
		}else{
			this._captionTextNode = mkE( {
				tag:'span',
				className:par.icon + 'Icon icon'
			} ).append( this._buttonNode );
		}
	}
	if ( par.svgIcon ) {
		T.svgIcon({
			icon: par.svgIcon
		}).append( this._buttonNode );
		this._captionTextNode = mkE( {
			tag:'span'
		} ).append( this._buttonNode );
	}
	if( par.className ){
		addClassName( this.node, par.className );
	}
	if( par.stretch ){
		addClassName( this.node, 'buttonStretch' );
	}
	switch( this.color ){
		case 'link':
			addClassName( this.node, 'buttonLink' );
			break;
		case 'blue':
		  addClassName( this.node, 'buttonBlue' );
		  break;
		case 'buy':
			addClassName( this.node, 'buttonBuy' );
			break;
		case 'purple':
			addClassName( this.node, 'buttonPurple' );
			break;
	}
	if( par.badge ){
		this.badge( par.badge );
	}
	if( par.tabIndex ){
		this._buttonNode.tabIndex = par.tabIndex;
	}
	this._par(par);
};

T.Form.Button.TYPE_SUBMIT = 'submit';
T.Form.Button.TYPE_LINK = 'link';
T.Form.Button.TYPE_HTML = 'html';

T.Form.Button.prototype = new T.Form.Base;

T.Form.Button.prototype.name = 'Button';

/** @type {Function} */
T.Form.Button.prototype.onclick = null;//D.doNothing;

T.Form.Button.prototype._onclick = function(e){
	if( this._disabled ){
		D.stopPropagation(e);
		return false;
	}
	return this._event(e);
};

T.Form.Button.prototype.disable = function(v){
	if( isset(v) ){
		this._disabled = Boolean(v);
		if( this._disabled ){
			if( !this._disabledOverlayNode ){
				this._disabledOverlayNode = mkE( {
					tag:'span',
					className:'buttonDisabledO'
				} );
			}
			this._disabledOverlayNode.append( this.node );
			addClassName( this.node, 'buttonDisabled' );
		} else if( this._disabledOverlayNode ){
			this._disabledOverlayNode.remove();
			removeClassName( this.node, 'buttonDisabled' );
		}
		this._buttonNode.disabled = this._disabled;
	}
	return this._disabled || false;
};

T.Form.Button.prototype.badge = function(v){
	if(v){
		addClassName( this.node, 'hasBadge' );
		if( !this._badgeNode ){
			this._badgeNode = mkE( {
				tag:'span',
				className:'badge'
			} );
		}
		this._appendTypeElement( this._badgeNode, v );
		this._badgeNode.append( this._buttonWrapNode );
		return;
	}
	if( this._badgeNode ){
		removeClassName( this.node, 'hasBadge' );
		this._badgeNode.remove();
	}
};

T.Form.Button.prototype.value = D.doNothing;

T.Form.Button.prototype.appendChild = function(child){
	this._buttonNode.appendChild(child);
};

T.Form.Button.prototype.size = function(size){
	if( size == 'large' ){
		addClassName( this.node, 'buttonLarge' );
	}else if( size == 'medium' ){
		addClassName( this.node, 'buttonMedium' );
	}
};

T.Form.Button.prototype.hrefSet = function(v){
	if(!this._buttonNode){
		return '';
	}
	if(isset(v)){
		this.href = v;
		this._buttonNode.href = v;
	}
	return this._buttonNode.href || '';
};
// --- Button ---


// +++ AutoComplete +++
/**
 * @callback TFormPar_onGetList
 * @param {string} text
 * @param {T.Form.ACList} list
 */
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.ACPar = function(){
	this.disabledValues = {};
};
T.Form.ACPar.prototype = new T.Form.Par;
/** @type {Boolean|Function} */
T.Form.ACPar.prototype.userCustomValues = false;
/** @type {Object} */
T.Form.ACPar.prototype.disabledValues;
/** @type {RPC} */
T.Form.ACPar.prototype.rpc = null;
T.Form.ACPar.prototype.method = '';
/** @type {TFormPar_onGetList} */
T.Form.ACPar.prototype.onGetList = null;
T.Form.ACPar.prototype.onlyOnline = false;
T.Form.ACPar.prototype.hideOnlineStatus = false;
/** @type {Object|Array.<T.Form.Option>} */
T.Form.ACPar.prototype.options = null;
T.Form.ACPar.prototype.placeholder = '';
T.Form.ACPar.prototype.customPrefix = '';
T.Form.ACPar.prototype.contacts = false;
T.Form.ACPar.prototype.maxLength = 0;
T.Form.ACPar.prototype.inputName = '';
/** @type {Object} */
T.Form.ACPar.prototype.param = null;
T.Form.ACPar.prototype.groups = false;
T.Form.ACPar.prototype.sex = null;
/** @type {Node} */
T.Form.ACPar.prototype.contactsButton = null;
T.Form.ACPar.prototype.tabIndex = 0;
T.Form.ACPar.prototype.allowInputOverride = false;
T.Form.ACPar.prototype.onAddValue = false;
T.Form.ACPar.prototype.onRemoveValue = false;
/**
 * @param {T.Form.ACPar|Object} par
 * @constructor
 * @extends T.Form.Base
 */
T.Form.AC = function(par){
	par = par || {};
	this.userCustomValues = par.userCustomValues || false;
	this.onChange = par.onChange || function(){};
	this.disabledValues = par.disabledValues || {};
	this.rpc = par.rpc || new RPC('/rq/app.php');
	this.method = par.method || 'searchFriends';
	this._methodCache = {};
	this.onlyOnline = par.onlyOnline || false;
	this.hideOnlineStatus = par.hideOnlineStatus || false;
	this.options = par.options || false;
	this.placeholder = par.placeholder || '';
	this.dynamicPlaceHolder = par.dynamicPlaceHolder || false;
	this.customPrefix = par.customPrefix || ( par._php ? 'custom' : '' );
	this.contacts = par.contacts || false;
	/** @type {D.FriendList|null} */
	this.friendList = par.friendList || null;
	this.maxLength = par.maxLength || 0;
	this.addScroll = par.addScroll || false;
	this.inputName = par.inputName || '';
	this._readOnly = false;
	this._triggerOnchange = true;
	this.onListChanged = par.onListChanged || function(){};
	if( par.onGetList ){
		this.onGetList = par.onGetList;
	}
	this.allowInputOverride = par.allowInputOverride || false;
	this._onAddValue = par.onAddValue || false;
	this._onRemoveValue = par.onRemoveValue || false;
	this.fixToInput = par.fixToInput || false;
	// merge
	this.param = par.param || {
		linkSort:true,
		groups:par.groups || null,
		gr:par.gr || null,
		sex:par.sex || null,
		data:par.data || null,
		age:par.age || null,
		filter:par.filter || null,
		l:par.l || null,
		extra:par.extra || null
	};
	this._items = new D.SortedMap;
	this._prevValue = '';
	this.node = mkE( {
		tag:'div',
		className:'formItem formItemAC',
		prop:{
			onclick:D.closure( this, this.focus )
		},
		els:[
			this._hiddenInputNode = mkE( {
				tag:'input',
				type:'hidden',
				name:this.inputName
			} ),
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ),
			this._borderNode = mkE( {
				tag:'div',
				className:'formItemBorder radius2',
				els:[
					this._container = mkE( {
						tag:'div',
						className:'formItemPadding radius2'
					} )
				]
			} ) // border
		]
	} );
	this._inputWrapNode = mkE( {
		tag:'span',
		className:'ACInput',
		els:[
			this._inputNode = mkE( {
				tag:'input',
				prop:{
					autocomplete:'off',
					onkeyup:D.closure( this, this._onkeyup ),
					onkeydown:D.closure( this, this._onkeydown ),
					onfocus:D.closure( this, this._onfocus ),
					onblur:D.closure( this, this._onblur )
				}
			} )
		]
	} ).append( this._container );
	if( this.contacts || par.contactsButton ){
		addClassName( this.node, 'formItemAutocompleteButton' );
		if( par.contactsButton && typeof par.contactsButton == 'object' ){
			par.contactsButton.append( this._borderNode );
		} else {
			this._contactsButton = new T.Form.Button( {
				icon:'friends',
				onclick:D.closure( this, this._contentButtonClick ),
				type:'link',
				size:'medium'
			} ).append( this._borderNode );
		}
	}
	this._placeHoderNode = mkE( {
		tag:'div',
		className:'ACPlaceHolder color2',
		text:( this.placeholder || par.infoText || D.Lang.get('multiAc info') )
	} ).append( this.dynamicPlaceHolder ? this._inputWrapNode : this._container );
	this._listNode = mkE( {
		tag:'div',
		style:{
			position:'absolute'
		}
	} );
	this._list = new T.Form.ACList(this);
	this._createErrorHelpNodes();
	this._par(par);
};

T.Form.AC.prototype = new T.Form.Base;

/**
 * @returns {Array}
 */
T.Form.AC.prototype.value = function(){
	var re = [];
	this._items.each( function( k, item ){
		re.push( item.value );
	} );
	return re;
};

T.Form.AC.prototype.valueObj = function(){
	return this._items.toObject();
};

/**
 * @param {Array} items
 * @deprecated
 */
T.Form.AC.prototype.setList = function(items){
	this._list.setList(items);
};

T.Form.AC.prototype._onfocus = function(e){
	clearTimeout( this._onblurTO );
	if ( this.fixToInput || $( this.node ).parents('.InfoBox')[0] ){
		// infoboxii kabinam pie input nodes, lai scrolleejot paliek pie inputa
		this._listNode.append( this.node );
	} else {
		this._listNode.append( document.body );
	}
	this._setPos();
	this._event(e);
	this._focusClass(true);
};

T.Form.AC.prototype._onblur = function(e){
	this._onblurTO = setTimeout( D.closure( this, this._onblur_ ), 200 );
	this._event(e);
	this._focusClass(false);
	this._checkPlaceHolder();
};

T.Form.AC.prototype._onblur_ = function(){
	if( this.userCustomValues ){
		this._onEnter(true);
	}
	this._listNode.remove();
};

T.Form.AC.prototype._setPos = function(){
	var pos = D.position( this._inputNode );
	if ( this.fixToInput || $( this.node ).parents('.InfoBox')[0] ) {
		this._listNode.style.top = this.node.offsetHeight + 'px';
		this._listNode.style.left = 0;
	} else if( this.addScroll ){
		this._listNode.style.top = pos.y + this._inputNode.offsetHeight + 3 + 'px';
		this._listNode.style.left = pos.x + 'px';
	} else {
		this._listNode.style.top = pos.top + this._inputNode.offsetHeight + 3 + 'px';
		this._listNode.style.left = pos.left + 'px';
	}
};

T.Form.AC.prototype.reset = function(){
	if(!this.allowInputOverride) {
		this._inputNode.value = '';
	}
	this._prevValue = '';
	this._list.remove();
	this._list = new T.Form.ACList(this);
	this._checkPlaceHolder();
};

T.Form.AC.prototype._onchange = function(){
	var value = this.value();
	this._hiddenInputNode.value = value.join(',');
	this._checkPlaceHolder();
	if( this._triggerOnchange ){
		this.onChange(value);
		$(this).trigger('change');
	}
};
/**
 * @param {Object|T.Form._ACItem} item
 * @returns {boolean}
 */
T.Form.AC.prototype.addValue = function(item){
	if( this._items.get( item.value ) ){
		return false;
	}
	if( this.maxLength && this._items.length() == this.maxLength ){
		return false;
	}
	if( !( item instanceof T.Form._ACItem ) ){
		item = new T.Form._ACItem(item);
	}
	item._ac = this;
	this._items.set( item.value, item );
	D.insertBefore( item.node, this._inputWrapNode );
	this._onchange();
	if( this._onAddValue && this._triggerOnchange ) {
		this._onAddValue( item.value );
	}
	if( this.friendList ){
		this.friendList.value( item.value, true );
	}
	if( this.maxLength && this._items.length() == this.maxLength ){
		this._inputNode.readOnly = true;
		this._inputWrapNode.style.width = '5px';
	}
	return true;
};

T.Form.AC.prototype.getValues = function(){
	return this._items.toArray();
};

T.Form.AC.prototype.addValues = function(values){
	if( empty(values) ){
		return;
	}
	this._triggerOnchange = false;
	for( var k in values ){
		this.addValue( values[k] );
	}
	this._triggerOnchange = true;
	this._onchange();
};

T.Form.AC.prototype.removeValue = function(value){
	var item = this._items.get(value);
	if(!item){
		return false;
	}
	this._items.del(value);
	item.node.remove();
	this._onchange();
	if( this._onRemoveValue && this._triggerOnchange  ) {
		this._onRemoveValue( value );
	}
	if( this.friendList ){
		this.friendList.value( item.value, false );
	}
	this._inputNode.readOnly = false;
	this._inputWrapNode.style.width = '';
	return true;
};

T.Form.AC.prototype._checkPlaceHolder = function(v){
	if( this.dynamicPlaceHolder ){
		this._placeHoderNode.style.display = ( v || this._inputNode.value ? 'none' : '' );
		return;
	}
	if( v || this._inputNode.value || !this._items.empty() ){
		this._placeHoderNode.style.display = 'none';
	} else {
		this._placeHoderNode.style.display = '';
	}
};

T.Form.AC.prototype._onkeyup = function(){
	this._checkPlaceHolder();
	if( this._inputNode.value == this._prevValue ){
		return;
	}
	this._prevValue = this._inputNode.value;
	clearTimeout( this._getListTO );
	this._getListTO = setTimeout( D.closure( this, this._getList ), 200 );
};

T.Form.AC.prototype._getList = function(){
	this._list.remove();
	this._list = new T.Form.ACList(this);
	if( !this._inputNode.value ){
		this.onListChanged();
		return;
	}
	this.onGetList( this._inputNode.value, this._list );
};

/**
 * @param {String} v
 * @param {T.Form.ACList} list
 */
T.Form.AC.prototype.onGetList = function( v, list ){
	if( this.options ){
		var opts = [];
		for( var k in this.options ){
			var opt = this.options[k];
			if( typeof opt != 'object' ){
				opt = {
					caption:opt,
					value:k
				};
			}
			if( opt.caption.toLowerCase().indexOf( v.toLowerCase() ) == -1 ){
				continue;
			}
			opts.push(opt);
		}
		list.setList(opts);
		return;
	}
	var data = {
		v:v
	};
	for( var k in this.param ){
		if( !isset( this.param[k] ) ){
			continue;
		}
		data[k] = this.param[k];
	}
	if( this._methodCache[v] ){
		this._methodRe( v, list, this._methodCache[v] );
		return;
	}
	this.rpc.send(
		this.method,
		data,
		D.closure( this, this._methodRe, v, list ),
		this
	);
};

T.Form.AC.prototype._methodRe = function( v, list, re ){
	this._methodCache[v] = re;
	var items = [];
	if( re.gr ){
		for( var k in re.gr ){
			var gr = re.gr[k];
			items.push( {
				caption:gr.n,
				value:'gr' + gr.i,
				className:'multiAcItemGroup'
			} );
		}
	}
	for( var k in re.fr ){
		var fr = re.fr[k];
		items.push( {
			caption:fr.n,
			value:fr.i,
			online:fr.o,
			disabled:fr.d || false,
			title:fr.title || '',
			icon:fr.icon || false,
			iconClass:fr.iconClass || false,
			isFriend:fr.isFriend || false,
			className:fr.className,
			type:fr.type || ''
		} );
	}
	list.setList(items);
	this.onListChanged();
};


/**
 *
 * @param {Event} e
 * @returns {*}
 */
T.Form.AC.prototype._onkeydown = function(e){
	e = D.event(e);
	switch( e.keyCode ){
		case 8: // backspace
			if( !this._inputNode.value ){
				this._removeLastValue()
			}
			break;
		case 27: // esc
			this.reset();
			break;
		case 13:
			this._onEnter();
			return false;
		case 38: // up
			this._list.up();
			return false;
		case 40: // down
			this._list.down();
			return false;
		default:
			this._checkPlaceHolder(true);
	}
};

T.Form.AC.prototype._onEnter = function(skipFocus){
	if( !skipFocus && this._list.select() ){
		return;
	}
	if( !this.userCustomValues ){
		return;
	}
	if( !this._inputNode.value ){
		return;
	}
	if( typeof this.userCustomValues != 'function' ){
		this.addValue( {
			caption:this._inputNode.value,
			value:this.customPrefix + this._inputNode.value
		} );
		this.reset();
		if(!skipFocus){
			this.focus();
		}
		return;
	}
	var v = this.userCustomValues( this._inputNode.value );
	if( v === false ){
		return;
	}
	if( typeof v == 'object' ){
		if( isset( v.ok ) && !v.ok ){
			return;
		}
		if( !isset( v.value ) ){
			return;
		}
		this.addValue( {
			caption:v.caption || v.value,
			value:this.customPrefix + v.value
		} );
	} else {
		this.addValue( {
			caption:v,
			value:this.customPrefix + v
		} );
	}
	this.reset();
	if(!skipFocus){
		this.focus();
	}
};

T.Form.AC.prototype._removeLastValue = function(){
	var item = this._items.last();
	if( !item || item.disabled ){
		return;
	}
	this.removeValue( item.value );
};

T.Form.AC.prototype.disable = function(v){
	return this.readOnly(v);
};

T.Form.AC.prototype.readOnly = function(v){
	if(isset(v)){
		this._readOnly = Boolean(v);
		this._disableClass( this._readOnly );
		if( this._contactsButton ) {
			this._contactsButton.disable(v);
		}
	}
	return this._readOnly;
};

T.Form.AC.prototype._contentButtonClick = function(){
	D.onLoad( 'FriendList', D.closure( this, this._friendListReady ) );
};

T.Form.AC.prototype._friendListReady = function(){
	var values = this.getValues();
	var save = false;
	var onClose = D.closure( this, function(){
		if(save){
			return;
		}
		this.clear();
		this.addValues(values);
	} );
	var modal = new D.Modal( {
		width:600,
		onClose:onClose
	} );
	modal.els( [
		this.friendList = new D.FriendList( {
			multiAc:this
		} ),
		{ tag:'br' },
		new T.Form.Footer( {
			els:[
				new T.Form.Button( {
					caption:D.Lang.get( 'Save', 'xGlobal' ),
					onclick:function(){
						save = true;
						InfoBox.close();
					}
				} )
			]
		} )
	] );
};

T.Form.AC.prototype.clear = function(){
	this._triggerOnchange = false;
	var keys = this._items.keys();
	for( var k in keys ){
		this.removeValue( keys[k] );
	}
	this._triggerOnchange = true;
	this._inputNode.readOnly = false;
	this._onchange();
};

/**
 * @param {T.Form.ACListItem|T.Form._ACItem} par
 */
T.Form._ACItem = function(par){
	this.value = par.value;
	this.disabled = par.disabled || false;
	this.icon = par.icon || false;
	this.caption = par.caption || '';
	this.title = par.title || '';
	this.onclick = par.onclick || this.onclick;
	/** @type {T.Form.AC} */
	this._ac = null;
	this.node = mkE( {
		tag:'span',
		className:'ACValue radius3',
		prop:{
			title:this.title,
			onclick:D.closure( this, this._onclick )
		},
		els:[
			{
				tag:'div',
				className:'cut',
				text:par.caption
			},
			{
				tag:'a',
				className:'closeIcon',
				prop:{
					onclick:D.closure( this, this._del )
				}
			}
		]
	} );
	if( this.icon ){
		this.node.title = '<img src="' + this.icon + '" />';
	}
	if( this.disabled ){
		addClassName( this.node, 'ACValueDisabled' );
	}
};

T.Form._ACItem.prototype._del = function(e){
	D.stopPropagation(e);
	if( this._ac ){
		this._ac.removeValue( this.value );
	}
};

T.Form._ACItem.prototype._onclick = function(){
	this.onclick();
};

T.Form._ACItem.prototype.onclick = function(){
};

T.Form.ACList = function(ac){
	/** @type {T.Form.AC} */
	this._ac = ac;
	/** @type {Array.<T.Form.ACListItem>} */
	this._items = [];
	/** @type {T.Form.ACListItem} */
	this._prev = null;
	this.node = mkE( {
		tag:'div',
		id:'multiACList',
		className:'multiACList',
		style:{
			zIndex:( window.InfoBox ? ++ InfoBox.zIndex : '' )
		}
	} );
	clearNode( this._ac._listNode );
	this.node.append( this._ac._listNode );
};

T.Form.ACList.prototype._index = -1;

T.Form.ACList.prototype.remove = function(){
	this.node.remove();
	return this;
};

T.Form.ACList.prototype.up = function(){
	if( empty( this._items ) ){
		return;
	}
	var stop = false;
	for(;;){
		-- this._index;
		if( this._index < 0 ){
			if(stop){
				return;
			}
			stop = true;
			this._index = this._items.length;
			continue;
		}
		var item = this._items[ this._index ];
		if( item.disabled ){
			continue;
		}
		this._itemHover();
		return;
	}
};

T.Form.ACList.prototype.down = function(){
	if( empty( this._items ) ){
		return;
	}
	var stop = false;
	for(;;){
		++ this._index;
		if( this._index > this._items.length - 1 ){
			if(stop){
				return;
			}
			stop = true;
			this._index = -1;
			continue;
		}
		var item = this._items[ this._index ];
		if( item.disabled ){
			continue;
		}
		this._itemHover();
		return;
	}
};

T.Form.ACList.prototype.select = function(){
	if( !this._items[ this._index ] ){
		return false;
	}
	this._items[ this._index ].select();
	return true;
};

/**
 * @param {T.Form.ACListItem} listItem
 */
T.Form.ACList.prototype.onSelect = function(listItem){
	this._ac.addValue( new T.Form._ACItem(listItem) );
	this._ac.reset();
	this._ac.focus();
};

T.Form.ACList.prototype.setList = function(items){
	var i = 0;
	var sel = false;
	for( var k in items ){
		var v = items[k];
		if( v.type == 'title' ){
			mkE( {
				tag:'div',
				els:[
					{
						tag:'b',
						text:v.caption
					}
				],
				style:{
					paddingLeft:'5px',
					paddingRight:'5px'
				}
			} ).append( this.node );
			continue;
		}
		v.disabled = v.disabled || this._ac.disabledValues[ v.value ] || this._ac._items.get( v.value ) || false;
		if( this._ac.onlyOnline && !v.online ){
			v.disabled = true;
		}
		var item = this._items[i] = new T.Form.ACListItem( this, {
			caption:v.caption,
			subcaption:v.subcaption,
			icon:v.icon,
			online:v.online,
			value:v.value,
			disabled:v.disabled,
			className:v.className,
			onmouseover:D.closure( this, this._itemHover, i ),
			title:v.title || '',
			onclick:v.onclick || null
		} );
		if( !this._ac.userCustomValues && !sel && !item.disabled ){
			sel = true;
			this._itemHover(i);
		}
		++ i;
	}
	this._ac._setPos();
};

T.Form.ACList.prototype._itemHover = function(index){
	if(!isset(index)){
		index = this._index;
	}
	this._index = index;
	if( this._prev ){
		removeClassName( this._prev.node, 'hover' );
	}
	this._prev = this._items[index];
	addClassName( this._prev.node, 'hover' );
};

/**
 * @param {T.Form.ACList} [list]
 * @param {Object} [par]
 * @constructor
 */
T.Form.ACListItem = function( list, par ){
	/** @type {T.Form.ACList} */
	this._list = list;
	if(!par){
		return;
	}
	this.caption = par.caption || '';
	this.icon = par.icon || '';
	this.iconClass = par.iconClass || '';
	this.online = par.online || false;
	this.value = par.value || '';
	this.disabled = par.disabled || false;
	this.title = par.title || '';
	this.onmouseover = par.onmouseover || function(){};
	this.onclick = par.onclick || null;
	this.node = mkE( {
		tag:'div',
		className:'multiACListItem cut',
		prop:{
			title:this.title || '',
			onclick:D.closure( this, this.select ),
			onmouseover:D.closure( this, this._onmouseover )
		},
		els:[
			this._iconNode = mkE( {
				tag:'span'
			} ),
			this.caption
		]
	} );
	if( par.subcaption ) {
		mkE({
			tag: 'div',
			className: 'subcaption',
			text: par.subcaption
		}).append(this.node);
	}
	if( par.className ){
		addClassName( this.node,  par.className );
	}
	if( this.icon ){
		mkE( {
			tag:'img',
			className:'thumb',
			src:this.icon
		} ).append( this._iconNode );
	} else if( this.iconClass ){
		addClassName( this._iconNode, 'thumbIcon' );
		addClassName( this._iconNode, this.iconClass );
	}
	if( !this._list._ac.hideOnlineStatus && this.online ){
		mkE( {
			tag:'div',
			className:'icon onlineWWWIcon'
		} ).append( this.node );
	}
	if( this.disabled ){
		addClassName( this.node, 'disabled' );
	}
	this.node.append( this._list.node );
};

T.Form.ACListItem.prototype.select = function(){
	if( this.disabled ){
		return;
	}
	this._list.onSelect(this);
};

T.Form.ACListItem.prototype._onmouseover = function(){
	if( this.disabled ){
		return;
	}
	this.onmouseover();
};
// --- AutoComplete ---


// +++ MapRadius +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.MapRadiusPar = function(){};
T.Form.MapRadiusPar.prototype = new T.Form.Par;
/** @type {String} For T.Form.RadioList */
T.Form.MapRadiusPar.name = '';
T.Form.MapRadiusPar.prototype.minRadius = 3000;
T.Form.MapRadiusPar.prototype.maxRadius = 50000;
T.Form.MapRadiusPar.prototype.onChange = function() {};
T.Form.MapRadiusPar.prototype.maxLength = 0;
T.Form.MapRadiusPar.prototype.initLat;
T.Form.MapRadiusPar.prototype.initLng;
T.Form.MapRadiusPar.prototype.initZoom;
/**
 * @param {T.Form.MapRadiusPar|Object} par
 * @constructor
 * @extends T.Form.Base
 */
T.Form.MapRadius = function(par) {
	par = par || {};
	this.inputName = par.name || '';
	this.inputId = par.id || '';
	this.onChange = par.onChange || function() {};
	this.maxLength = par.maxLength || 0;
	this.initLat = par.initLat || 56.951341;
	this.initLng = par.initLng || 24.10984;
	this.initZoom = par.initZoom || 7;
	this._circles = [];
	this._values = [];
	this.minRadius = parseInt( par.minRadius );
	this.maxRadius = parseInt( par.maxRadius );
	this.LATLNG_DECIMAL_LEN = 4;
	this.circleStyle = {
		strokeColor: '#FF0000',
		strokeOpacity: 0.8,
		strokeWeight: 2,
		fillColor: '#FF0000',
		fillOpacity: 0.35
	};
	this.circleStyleActive = {
		strokeColor: '#FF0000',
		strokeOpacity: 0.8,
		strokeWeight: 2,
		fillColor: '#0000FF',
		fillOpacity: 0.35
	};
	this._contextMenu = null;

	/**
	 * The Map object.
	 * @type {google.maps.Map}
	 */
	this.map = null;

	this.node = mkE( {
		tag:'div',
		className:'formItem formItemInput formItemAC formItemMR',
		els:[
			this._hiddenInputNode = mkE( {
				tag: 'input',
				type: 'hidden',
				name: this.inputName
			} ),
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ),
			this._borderNode = mkE( {
				tag:'div',
				className:'formItemBorder radius3',
				els:[
					this._container = mkE( {
						tag:'div',
						className:'formItemPadding radius3'
					} )
				]
			} )
		]
	} );
	if ( this.inputId ) {
		this._hiddenInputNode.id = this.inputId;
	}
	this._inputNode = mkE( {
		tag:'input',
		onclick: D.closure( this, this._openMap ),
		prop: {
			readOnly: true
		}
	} ).append( this._container );

	addClassName( this.node, 'formItemAutocompleteButton' );
	new T.Form.Button( {
		svgIcon: 'location',
		onclick: D.closure( this, this._openMap ),
		type: 'link'
	} ).append( this._borderNode );
	this._createErrorHelpNodes();
	this._par(par);

	// load values from par
	if ( !empty(par.values) ) {
		this._values = par.values;
		this._showValuesInInput();
		this._hiddenInputNode.value = D.JSON.encode({
			items: this._values,
			lat: this.initLat,
			lng: this.initLng,
			zoom: this.initZoom
		});
	}
};

T.Form.MapRadius.prototype = new T.Form.Base;

/**
 * @returns {Array}
 */
T.Form.MapRadius.prototype.value = function(){
	var re = [];
	for ( var i in this._values ) {
		re.push( this._values[i] );
	}
	return re;
};
T.Form.MapRadius.prototype._valueFromCircles = function() {
	var re = [];
	for ( var i in this._circles ) {
		var circle = this._circles[i];
		var latLng = circle.getCenter();
		re.push({
			lat: latLng.lat(),
			lng: latLng.lng(),
			radius: circle.getRadius(),
			text: circle._text
		});
	}
	return re;
};
T.Form.MapRadius.prototype.addValues = function(values){
	if( empty( values ) ){
		return;
	}
	for( var k in values ){
		this.addValue( values[k] );
	}
};
T.Form.MapRadius.prototype._openMap = function() {
	this._modal = new D.Modal({
		width: 900,
		className: 'FormMapRadiusWnd'
	});

	this._modal.els([
		this._mapCont = mkE({
			tag: 'div',
			className: 'mapCont'
		}),
		this._rightCont = mkE({
			tag: 'ul',
			className: 'rightCol',
			els: [{
				tag: 'li',
				text: D.Lang.get('map_radius_start_help')
			}]
		}),
		T.clear(),
		this._infoBlock = mkE({
			tag: 'div',
			className: 'infoBlock',
			style: {
				visibility: 'hidden'
			},
			els:[
				{
					tag: 'span',
					text: 'Lat, Lng: '
				},
				this._infoLatLng = mkE({
					tag: 'span',
					className: 'value'
				}),
				{
					tag: 'span',
					text: '; Rādiuss: '
				},
				this._infoDistance = mkE({
					tag: 'span',
					className: 'value'
				})
			]
		}),
		this._drawFooter()
	]);

	// load google maps
	if ( typeof google === 'object' && typeof google.maps === 'object' ) {
		this.initMap();
	} else {
		// globaals callbacks
		window.TFormMapRadius = this;
		mkE({
			tag: 'script',
			src: '//maps.googleapis.com/maps/api/js?callback=TFormMapRadius.initMap&key=' + T.GKEY
		} ).append( this._modal.content );
	}
};
T.Form.MapRadius.prototype.initMap = function() {
	this.map = new google.maps.Map( this._mapCont, {
		center: new google.maps.LatLng( this.initLat, this.initLng ),
		zoom: this.initZoom,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		//mapTypeId: google.maps.MapTypeId.TERRAIN,
		streetViewControl: false,
		zoomControl: true,
		scaleControl: false,
		mapTypeControl: false
	});

	this.map.addListener('click', D.closure( this, this._mapOnClick) );

	// load existing data
	this._circles = [];
	this.addValues( this._values );
};
T.Form.MapRadius.prototype._mapOnClick = function( event ) {
	this.addValue({
		lat: event.latLng.lat(),
		lng: event.latLng.lng()
	});
};
T.Form.MapRadius.prototype.addValue = function( par ) {
	par = par || {};
	if ( !isset( par.lat ) || !isset( par.lng ) ) {
		return false;
	}
	if( this.maxLength && this._circles.length == this.maxLength ){
		return false;
	}
	if ( !isset( par.radius ) ) {
		var currentZoom = this.map.getZoom();
		if ( currentZoom < 7 ) {
			par.radius = 70000;
		} else if ( currentZoom < 8 ) {
			par.radius = 35000;
		} else if ( currentZoom < 9 ) {
			par.radius = 25000;
		} else if ( currentZoom < 10 ) {
			par.radius = 10000;
		} else if ( currentZoom < 11 ) {
			par.radius = 5000;
		} else if ( currentZoom < 12 ) {
			par.radius = 3000;
		} else if ( currentZoom < 13 ) {
			par.radius = 1500;
		} else {
			par.radius = this.minRadius;
		}
	}
	if ( par.radius > this.maxRadius ) {
		par.radius = this.maxRadius;
	} else if ( par.radius < this.minRadius ) {
		par.radius = this.minRadius;
	}

	var newCircle = new google.maps.Circle({
		map: this.map,
		center: {
			lat: par.lat,
			lng: par.lng
		},
		radius: par.radius,
		draggable: true,
		editable: true
	});
	google.maps.event.addListener( newCircle, 'radius_changed', D.closure( this, this._mapCircleRadiusChanged, newCircle ));
	google.maps.event.addListener( newCircle, 'dragstart', D.closure( this, this._mapCircleDragStart, newCircle ));
	google.maps.event.addListener( newCircle, 'dragend', D.closure( this, this._mapCircleDragEnd, newCircle ));
	google.maps.event.addListener( newCircle, 'rightclick', D.closure( this, this._mapCircleRightClick, newCircle ));
	google.maps.event.addListener( newCircle, 'click', D.closure( this, this._mapCircleClick, newCircle ));

	if ( par.text ) {
		newCircle._text = par.text;
		this._onAddValue( newCircle );
	} else {
		this._geoDecode( par, D.closure( this, this._onAddValue ), newCircle );
	}

	return true;
};
T.Form.MapRadius.prototype._geoDecode = function( par, callback, circle ) {
	var rpc = new RPC('/rq/app.php');
	rpc.send(
		'geoDecode',
		{
			lat: par.lat,
			lng: par.lng
		},
		D.closure( this, function(re){
			if ( re === false ) {
				circle._text = '';
				callback( circle );
			}
			if ( re != -1 ) {
				circle._text = re;
				callback( circle );
				return;
			}

			var geocoder = new google.maps.Geocoder;
			geocoder.geocode({
				location: {
					lat: par.lat,
					lng: par.lng
				},
				language: 'lv'
				}, D.closure( this, function(results, status) {
					if ( status !== google.maps.GeocoderStatus.OK || !results.length ) {
						circle._text = '';
						callback( circle );
						return;
					}

					var r = [];
					var admLevel2 = '';
					var admLevel2Parish = '';
					var neighborhood = '';

					for ( var i in results ) {
						var addreses = results[i].address_components;
						for ( var k in addreses ) {
							if ( addreses[k].types[0] == 'administrative_area_level_2' ) {
								if ( addreses[k].short_name.indexOf('parish') != -1 ) {
									admLevel2Parish = addreses[k].short_name;
								} else {
									admLevel2 = addreses[k].short_name;
								}
							}
							if ( addreses[k].types[0] == 'neighborhood' ) {
								neighborhood = addreses[k].short_name;
							}
						}
					}
					if ( neighborhood ) {
						r.push( neighborhood );
					}
					if ( admLevel2 || admLevel2Parish ) {
						if ( admLevel2 ) {
							r.push( admLevel2 );
						} else {
							r.push( admLevel2Parish );
						}
					}

					if ( !r ) {
						circle._text = '';
						callback( circle );
						return;
					}

					var text = r.join(', ');

					rpc.send(
						'geoDecodeSave',
						{
							lat: par.lat,
							lng: par.lng,
							text: text
						}
					);

					circle._text = text;
					callback( circle );
				}
			));
		}),
		this
	);
};
T.Form.MapRadius.prototype._onAddValue = function( newCircle ) {
	if ( this._circles.length == 0 ) {
		clearNode( this._rightCont );
	}
	this._circles.push( newCircle );
	this._addCircleToList( newCircle );
	this._mapCircleSetActive( newCircle );
};
T.Form.MapRadius.prototype._addCircleToList = function( circle ) {
	var closeNode;
	circle._liNode = mkE({
		tag: 'li',
		els: [
			circle._liNodeInfo = mkE({
				tag: 'span'
			}),
			closeNode = mkE({
				tag: 'a',
				className: 'icon closeIcon'
			})
		]
	} ).append( this._rightCont );
	closeNode.onclick = D.closure( this, this._removeCircle, circle );
};
T.Form.MapRadius.prototype._removeCircle = function( circle ) {
	var removeFromArr = D.closure( this, function() {
		for ( var i = 0, len = this._circles.length; i < len; i++ ) {
			if ( this._circles[i] != circle ) {
				continue;
			}
			this._circles.splice(i, 1);
			return;
		}
	});
	removeFromArr();

	circle.setMap(null);

	removeNode( circle._liNode );

	if ( !this._circles.length ) {
		this._infoBlock.style.visibility = 'hidden';
	}
};
T.Form.MapRadius.prototype._mapCircleSetActive = function( circle ) {
	for ( var i = 0, len = this._circles.length; i < len; i++ ) {
		if ( this._circles[i] == circle ) {
			this._circles[i].setOptions( this.circleStyleActive );
		} else {
			this._circles[i].setOptions( this.circleStyle );
		}
	}

	this._setInfo( circle );
};
T.Form.MapRadius.prototype._mapCircleClick = function( circle, event ) {
	this._mapCircleSetActive( circle );
};
T.Form.MapRadius.prototype._mapCircleRightClick = function( circle, event ) {
	this._mapCircleSetActive( circle );

	this._contextMenuOverlay = mkE({
		tag: 'div',
		className: 'contextMenuOverlay'
	} ).append( this._mapCont );
	this._contextMenu = mkE({
		tag: 'div',
		className: 'contextMenu radius3',
		els:[
			{
				tag: 'a',
				className: 'InfoBoxClose',
				onclick: D.closure( this, this._closeContextMenu )
			},
			this._inputDistance = new T.Form.Input({
				caption: 'Rādiuss (km) '+ (this.minRadius / 1000) + '-' + (this.maxRadius / 1000) + ':',
				value: (circle.getRadius() / 1000).toFixed(2),
				onkeyup: D.closure( this, function( e ) {
					var key = e.which || e.keyCode;
					if ( key == 13 ) {
						this._saveContextDistance( circle );
					}
				})
			}),
			new T.Form.Button({
				caption: D.Lang.get('Save'),
				onclick: D.closure( this, this._saveContextDistance, circle )
			}),
			{
				tag: 'a',
				className: 'btnDelete',
				text: 'Dzēst objektu',
				onclick: D.closure( this, function() {
					this._removeCircle( circle );
					this._closeContextMenu();
				})
			}
		]
	});
	var modalPos = D.position( this._modal.content );
	// search for contextmenu object
	var ev = false;
	for ( var k in event ) {
		if ( typeof event[k] != 'object' || event[k].type != 'contextmenu' ) {
			continue;
		}

		ev = event[k];
		break;
	}
	var clientX, clientY;
	if ( ev !== false ) {
		clientX = ev.clientX;
		clientY = ev.clientY;
	} else {
		var pos = D.position( this._mapCont );
		clientX = pos.left;
		clientY = pos.top;
	}
	this._contextMenu.style.left = clientX - modalPos.left + 'px';
	this._contextMenu.style.top = clientY - modalPos.top + 'px';
	this._contextMenu.append( this._modal.content );
	this._inputDistance.select();
};
T.Form.MapRadius.prototype._closeContextMenu = function() {
	removeNode( this._contextMenu );
	removeNode( this._contextMenuOverlay );
};
T.Form.MapRadius.prototype._saveContextDistance = function( circle ) {
	circle.setRadius( this._inputDistance.value() * 1000 );
	this._setInfo( circle );
	this._closeContextMenu();
};
T.Form.MapRadius.prototype._mapCircleDragStart = function( circle, event ) {
	this._mapCircleSetActive( circle );
};
T.Form.MapRadius.prototype._mapCircleDragEnd = function( circle, event ) {
	var latLng = circle.getCenter();
	var par = {
		lat: latLng.lat(),
		lng: latLng.lng()
	};
	this._geoDecode( par, D.closure( this, this._setInfo ), circle );
};
T.Form.MapRadius.prototype._mapCircleRadiusChanged = function( circle ) {
	var radius = circle.getRadius();
	if ( radius > this.maxRadius ) {
		circle.setRadius( this.maxRadius );
	} else if ( radius < this.minRadius ) {
		circle.setRadius( this.minRadius );
	}

	this._setInfo( circle );
};
T.Form.MapRadius.prototype._setInfo = function( circle ) {
	this._infoBlock.style.visibility = 'visible';

	var radius = circle.getRadius();
	setNodeText( this._infoDistance, (radius / 1000 ).toFixed(2) + 'km' );

	var latLng = circle.getCenter();
	setNodeText( this._infoLatLng, latLng.lat().toFixed( this.LATLNG_DECIMAL_LEN ) + ', ' + latLng.lng().toFixed( this.LATLNG_DECIMAL_LEN ) );

	var infoString = '';
	if ( circle._text ) {
		infoString += htmlspecialchars( circle._text ) + '<br>';
	}
	infoString += '('+ latLng.lat().toFixed( this.LATLNG_DECIMAL_LEN ) + ', '+ latLng.lng().toFixed( this.LATLNG_DECIMAL_LEN ) + ', ' + (radius / 1000).toFixed(2) + 'km' +')';
	circle._liNodeInfo.innerHTML = infoString;
};
T.Form.MapRadius.prototype._drawFooter = function() {
	return [{
		tag: 'div',
		className: 'formFooter',
		els: [
			T.submitButton({
				caption: D.Lang.get('ok'),
				onclick: D.closure( this, function () {
					this._onSave();
					this._modal.close();
				})
			}),
			T.submitButton({
				caption: D.Lang.get('Cancel'),
				color: 'link',
				onclick: D.closure( this, function () {
					this._modal.close();
				})
			})
		]
	}];
};
T.Form.MapRadius.prototype._onSave = function() {
	var oldData = D.JSON.encode( this._values );
	this._values = this._valueFromCircles();
	var newData = D.JSON.encode( this._values );

	var center = this.map.getCenter();
	this.initLat = center.lat();
	this.initLng = center.lng();
	this.initZoom = this.map.getZoom();
	this._hiddenInputNode.value = D.JSON.encode({
		items: this._values,
		lat: this.initLat,
		lng: this.initLng,
		zoom: this.initZoom
	});
	this._showValuesInInput();
	this._modal.close();

	if ( oldData != newData ) {
		this.onChange();
	}
};
T.Form.MapRadius.prototype._showValuesInInput = function() {
	var len = this._values.length;
	this._inputNode.value = len ? len + ' ' + D.Lang.get('locations_' + (len == 1 ? '1' : '2')) : '';
};
// --- MapRadius ---

// +++ IndexField +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.IndexFieldPar = function(){};
T.Form.IndexFieldPar.prototype = new T.Form.Par;
/**
 * @param {T.Form.IndexFieldPar|Object} par
 * @constructor
 * @extends T.Form.Base
 */
T.Form.IndexField = function(par) {
	par = par || {};
	this.inputName = par.name || '';
	this.inputId = par.id || '';
	this._inputs = [];
	this._rowCounter = 0;

	this.node = mkE( {
		tag:'div',
		className:'formItem formItemInput formItemIndexField',
		els:[
			this._hiddenInputNode = mkE( {
				tag: 'input',
				type: 'hidden',
				name: this.inputName
			} ),
			this._captionNode = mkE( {
				tag:'label',
				style:{
					display:'none'
				},
				els:[
					this._captionTextNode = mkE( {
						tag:'span',
						text:''
					} )
				]
			} ),
			this._borderNode = mkE( {
				tag:'div',
				className:'radius3',
				els:[
					this._container = mkE( {
						tag:'div'
					} )
				]
			} )
		]
	} );
	if ( this.inputId ) {
		this._hiddenInputNode.id = this.inputId;
	}

	mkE({
		tag: 'a',
		text: '+ index field',
		onclick: D.closure( this, function() {
			this._addInput();
		})
	}).append( this.node );

	this._par(par);

	// load values
	if ( !empty( par.values ) ) {
		for ( var i = 0; i < par.values.length; i++ ) {
			this._addInput( par.values[i] );
		}

		this._valuesToHiddenInput();
	}
};
T.Form.IndexField.prototype = new T.Form.Base;

T.Form.IndexField.prototype._addInput = function( values ) {
	var inputs = {
		index: null,
		descr: null
	};

	var row = mkE({
		tag: 'div',
		className: 'indexFieldRow'
	}).append( this._container );
	row._rowCounter = this._rowCounter;

	mkE({
		tag: 'div',
		className: 'formItemBorder formItemPadding radius3 col1',
		els: [
			inputs.index = mkE({
				tag:'input',
				type: 'text',
				placeholder: 'index',
				onchange: D.closure( this, function() {
					this._valuesToHiddenInput();
				})
			})
		]
	}).append( row );

	mkE({
		tag: 'div',
		className: 'formItemBorder formItemPadding radius3 col2',
		els: [
			inputs.descr = mkE({
				tag:'input',
				type: 'text',
				placeholder: 'description',
				onchange: D.closure( this, function() {
					this._valuesToHiddenInput();
				})
			})
		]
	}).append( row );

	if ( values ) {
		inputs.index.value = values.index;
		inputs.descr.value = values.descr;
	}

	mkE({
		tag: 'a',
		text: 'Delete',
		onclick: D.closure( this, function() {
			this._inputs[ row._rowCounter ] = null;
			removeNode( row );
			this._valuesToHiddenInput();
		})
	}).append( row );

	this._inputs[ this._rowCounter ] = inputs;
	this._rowCounter++;
};
T.Form.IndexField.prototype._valuesToHiddenInput = function() {
	var values = [];

	for ( var i in this._inputs ) {
		if ( !this._inputs[i] ) {
			continue;
		}

		var row = {
			index: Number( trim( this._inputs[i].index.value ) ),
			descr: trim( this._inputs[i].descr.value )
		};

		values.push( row );
	}

	this._hiddenInputNode.value = D.JSON.encode( values );
};
// --- IndexField ---


// +++ Calendar +++

/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.CalendarPar = function(){};
T.Form.CalendarPar.prototype = new T.Form.Par;
T.Form.CalendarPar.prototype.type = '';
T.Form.CalendarPar.prototype.name = 'date';
T.Form.CalendarPar.prototype.format =  '';
T.Form.CalendarPar.prototype.value = null;
T.Form.CalendarPar.prototype.onMonthChange = function(){};
/**
 * @param {T.Form.CalendarPar|Object} par
 * @constructor
 */
T.Form.Calendar = function(par){
	par = par || {};
	this.type = par.mode || par.type || 'single';
	this.name = par.name || 'date';
	this.format = par.format || 'Y-m-d';
	this.onchange = par.onchange  || this.onchange;
	this.onMonthChange = par.onMonthChange || this.onMonthChange;
	this.node = mkE( {
		tag:'div',
		className:'datepicker-large FormCalendar'
	} );
	/** @type {D.Form.DatePickerPar} */
	this._dpPar = {}; //new D.Form.DatePickerPar;
	if( this.type == 'range' ){
		this._valueFromInput = mkE( {
			tag:'input',
			type:'hidden',
			name:par.fromName || this.name + '[from]'
		} ).append( this.node );
		this._valueToInput = mkE( {
			tag:'input',
			type:'hidden',
			name:par.toName || this.name + '[to]'
		} ).append( this.node );
		if( par.from && par.to ){
			par.value = {
				from:par.from,
				to:par.to
			};
		}
	} else {
		this._valueInput = mkE( {
			tag:'input',
			type:'hidden',
			name:this.name
		} ).append( this.node );
	}
	this._dpPar.type = this.type;
	this._dpPar.onchange = D.closure( this, this._onchange );
	this._dpPar.onMonthChange = D.closure( this, this._onMonthChange );
	D.onLoad( 'DatePicker', D.closure( this, this._datePickerReady ) );
	this._par(par);
};

T.Form.Calendar.prototype = new T.Form.Base;

T.Form.Calendar.prototype._datePickerReady = function(){
	this._dp = new D.DatePicker( this._dpPar );
	this._dp.append( this.node );
};

T.Form.Calendar.prototype.value = function(v){
	if(isset(v)){
		if( this._dp ){
			this._dp.value(v);
		} else {
			this._dpPar.value = v;
		}
		this._updateInputs();
	}
	if( this._dp ){
		return this._dp.value();
	}
	return this._dpPar.value;
};

T.Form.Calendar.prototype._updateInputs = function(){
	var v = this.value();
	switch( this.type ){
		case 'range':
			this._valueFromInput.value = v ? v.from : '';
			this._valueToInput.value = v ? v.to : '';
			break;
		case 'single':
			this._valueInput.value = v;
			break;
		case 'multi':
			this._valueInput.value = v instanceof Array ? v.join(',') : '';
			break;
	}
};

T.Form.Calendar.prototype.onchange = function(){
};

T.Form.Calendar.prototype._onchange = function(){
	if( this.type == 'range' && !this._dp.value().from ){
		return;
	}
	this.form = ( this._valueInput || this._valueFromInput ).form; // hax priekš PHP
	this._updateInputs();
	$(this).trigger('change');
};

T.Form.Calendar.prototype.onMonthChange = function(date){
};

T.Form.Calendar.prototype._onMonthChange = function(date){
	this.onMonthChange(date);
};
// --- Calendar ---

// +++ DatePeriodPicker +++
/**
 * @extends {T.Form.Par}
 * @constructor
 */
T.Form.DatePeriodPar = function(){
};
T.Form.DatePeriodPar.prototype = new T.Form.Par;
T.Form.DatePeriodPar.prototype.name = 'date';
T.Form.DatePeriodPar.prototype.format = ''; // d.m.Y
T.Form.DatePeriodPar.prototype.from = '';
T.Form.DatePeriodPar.prototype.to = '';
T.Form.DatePeriodPar.prototype.periodYesterday = false;
T.Form.DatePeriodPar.prototype.periodToday = true;
T.Form.DatePeriodPar.prototype.periodTomorrow = true;
T.Form.DatePeriodPar.prototype.periodNext7 = false;
T.Form.DatePeriodPar.prototype.periodNext30 = false;


/**
 * @param {T.Form.DatePeriodPar|Object} par
 * @constructor
 */
T.Form.DatePeriod = function(par){
	this.format = par.format || 'd.m.Y';
	this._from = new D.Date();
	if( par.from ){
		this._from.fromFormat( this.format, par.from );
	}
	this._to = new D.Date();
	if( par.to ){
		this._to.fromFormat( this.format, par.to );
	}
	this.periodYesterday = par.periodYesterday || false;
	this.periodToday = par.periodToday || false;
	this.periodTomorrow = par.periodTomorrow || false;
	this.periodNext7 = par.periodNext7 || false;
	this.periodNext30 = par.periodNext30 || false;
	this.name = par.name || 'date';
	this.node = mkE( {
		tag:'div',
		className:'formDatePeriod',
		els:[
			this._fromInputValue = mkE( {
				tag:'input',
				type:'hidden',
				name:this.name + '[from]'
			} ),
			this._toInputValue = mkE( {
				tag:'input',
				type:'hidden',
				name:this.name + '[to]'
			} ),
			this._captionNode = mkE( {
				tag:'label',
				els:[
					this._captionTextNode = mkE( {
						tag:'span'
					} )
				]
			} ),
			{
				tag:'div',
				className:'formItemBorder radius3',
				els:[
					this._table()
				]
			}
		]
	} );
	this._datePickerNode = mkE( {
		tag:'div',
		className:'formDatePeriodDP radius3'
	} );
	this._par(par);
	this._update();
};

T.Form.DatePeriod.prototype = new T.Form.Base;

T.Form.DatePeriod.prototype._table = function(){
	return mkE( {
		tag:'table',
		className:'formDatePeriodTable radius3',
		els:[
			{
				tag:'tbody',
				els:[
					{
						tag:'tr',
						els:[
							{
								tag:'td',
								className:'prev',
								prop:{
									align:'center',
									onclick:D.closure( this, this._prev )
								},
								els:[
									{
										tag:'a',
										className:'icon greyArrowBackIcon'
									}
								]
							},
							{
								tag:'td',
								prop:{
									onclick:D.closure( this, this._toggleDatePicker )
								},
								els:[
									this._textNode = mkE( {
										tag:'div',
										className:'icon caption darkCalendarIcon',
										text:'...'
									} )
								]
							},
							{
								tag:'td',
								className:'next',
								prop:{
									align:'center',
									onclick:D.closure( this, this._next )
								},
								els:[
									{
										tag:'a',
										className:'icon greyArrowNextIcon'
									}
								]
							}
						]
					} // tr
				]
			} // tbody
		]
	} ); // table
};

T.Form.DatePeriod.prototype._prev = function(){
	this._from.setTime( this._from.getTime() - this._days * 86400 );
	this._to.setTime( this._to.getTime() - this._days * 86400 );
	this._update();
	this._onchange();
};

T.Form.DatePeriod.prototype._next = function(){
	this._from.setTime( this._from.getTime() + this._days * 86400 );
	this._to.setTime( this._to.getTime() + this._days * 86400 );
	this._update();
	this._onchange();
};

T.Form.DatePeriod.prototype._update = function(){
	this._fromInputValue.value = this._from.format( this.format );
	this._toInputValue.value = this._to.format( this.format );
	this._updateText();
};

T.Form.DatePeriod.prototype._updateText = function(){
	var now = new D.Date();
	var tomorrow = new D.Date();
	tomorrow.setTime( now.getTime() + 3600*24 );
	var yesterday = new D.Date();
	yesterday.setTime( now.getTime() - 3600*24 );
	this._days = Math.floor( ( this._to.getTime() - this._from.getTime() ) / 86400 ) + 1;
	if( this._from.toSqlDate() == this._to.toSqlDate() ){
		if( now.toSqlDate() == this._from.toSqlDate() ){
			setNodeText( this._textNode, D.Lang.get('today') );
			return;
		}
		if( yesterday.toSqlDate() == this._from.toSqlDate() ){
			setNodeText( this._textNode, D.Lang.get('yesterday') );
			return;
		}
		if( tomorrow.toSqlDate() == this._from.toSqlDate() ){
			setNodeText( this._textNode, D.Lang.get('tomorrow') );
			return;
		}
		setNodeText( this._textNode, this._from.format( this.format ) );
		return;
	}
	if( this._from.toSqlDate() == now.toSqlDate() ){
		if( this._days == 7 || this._days == 30 ){
			setNodeText( this._textNode, 'Tuvākās ' + this._days + ' dienas' );
			return;
		}
	}
	if( D.LV && this._from.getYear() == this._to.getYear() && this._from.getMonth() == this._to.getMonth() ){
		setNodeText( this._textNode, this._from.getDate() + '. - ' + this._to.getDate() + '. ' + this._from.getMonthName() );
		return;
	}
	setNodeText( this._textNode, this._from.format( this.format ) + ' - ' + this._to.format( this.format ) );
};

T.Form.DatePeriod.prototype._toggleDatePicker = function(){
	if( this._datePickerVisible ){
		this._datePickerNode.remove();
		this._datePickerVisible = false;
		return;
	}
	this._datePickerVisible = true;
	this._datePickerNode.append( this.node );
	if( this._datePickerNode.firstChild ){
		return;
	}
	this._drawDatePicker();
};

T.Form.DatePeriod.prototype._periodClick = function( start, days ){
	this._from.setTime(start);
	this._to.setTime( start + ( days - 1 ) * 86400 );
	this._update();
	this._datePickerNode.remove();
	this._datePickerVisible = false;
	this._onchange();
	if( this._dp ){
		this._dp.value( {
			from:this._from.toSqlDate(),
			to:this._to.toSqlDate()
		} )
	}
};

T.Form.DatePeriod.prototype._drawDatePicker = function(){
	mkE( {
		tag:'div',
		className:'arrow'
	} ).append( this._datePickerNode );
	mkE( {
		tag:'table',
		els:[
			{
				tag:'tbody',
				els:[
					{
						tag:'tr',
						els:[
							this._dpNode = mkE( {
								tag:'td'
							} ),
							this._periodsNode = mkE( {
								tag:'td',
								className:'periods'
							} )
						]
					} // tr
				]
			} //
		]
	} ).append( this._datePickerNode );
	this._drawPeriods();
	D.onLoad( 'DatePicker', D.closure( this, this._dataPickerReady ) );
};
T.Form.DatePeriod.prototype._drawPeriods = function(){
	var now = new D.Date();
	if( this.periodYesterday ){
		mkE( {
			tag:'a',
			text:D.Lang.get('yesterday'),
			prop:{
				onclick:D.closure( this, this._periodClick, now.getTime() - 86400, 1 )
			}
		} ).append( this._periodsNode );
	}
	if( this.periodToday ){
		mkE( {
			tag:'a',
			text:D.Lang.get('today'),
			prop:{
				onclick:D.closure( this, this._periodClick, now.getTime(), 1 )
			}
		} ).append( this._periodsNode );
	}
	if( this.periodTomorrow ){
		mkE( {
			tag:'a',
			text:D.Lang.get('tomorrow'),
			prop:{
				onclick:D.closure( this, this._periodClick, now.getTime() + 86400, 1 )
			}
		} ).append( this._periodsNode );
	}
	if( this.periodNext7 ){
		mkE( {
			tag:'a',
			text:'Tuvākās 7 dienas',
			prop:{
				onclick:D.closure( this, this._periodClick, now.getTime(), 7 )
			}
		} ).append( this._periodsNode );
	}
	if( this.periodNext30 ){
		mkE( {
			tag:'a',
			text:'Tuvākās 30 dienas',
			prop:{
				onclick:D.closure( this, this._periodClick, now.getTime(), 30 )
			}
		} ).append( this._periodsNode );
	}
};

T.Form.DatePeriod.prototype._dataPickerReady = function(){
	var par = new D.DatePickerPar;
	par.format = 'Y-m-d';
	par.type = D.DatePicker.TYPE_RANGE;
	par.onchange = D.closure( this, this._datePickerChange );
	par.value = {
		from:this._from.toSqlDate(),
		to:this._to.toSqlDate()
	};
	this._dp = new D.DatePicker(par);
	this._dp.append( this._dpNode );
};

T.Form.DatePeriod.prototype._datePickerChange = function(){
	var v = this._dp.value();
	if( !v.from || !v.to || this._dp._tmpStart ){
		return;
	}
	this._datePickerNode.remove();
	this._datePickerVisible = false;
	this._from.fromSqlDate( v.from );
	this._to.fromSqlDate( v.to );
	this._update();
	this._onchange();
};

T.Form.DatePeriod.prototype.value = function(v){
	if( isset(v) ){
		if( v.from && v.to ){
			this._from.fromFormat( this.format, v.from );
			this._to.fromFormat( this.format, v.to );
			this._update();
		}
	}
	return {
		from:this._from.format( this.format ),
		to:this._to.format( this.format )
	};
};
// --- DatePeriodPicker ---

// +++ SwitchButton +++
/**
 * @constructor
 */
T.Form.SwitchButtonPar = function(){};
T.Form.SwitchButtonPar.prototype.color = null;
T.Form.SwitchButtonPar.prototype.size = null;
T.Form.SwitchButtonPar.prototype.options = [];
T.Form.SwitchButtonPar.prototype.disable = false;

/**
 * @param {T.Form.SwitchButtonPar|Object} par
 * @constructor
 */
T.Form.SwitchButton = function(par){
	par = par || new T.Form.SwitchButtonPar;
	this.par = par;
	this.options = par.options || [];
	this.value = null;

	this.node = mkE({
		tag: 'span',
		className: 'switchButton'
	});

	this.value = reset(this.options);

	this._button = new T.Form.Button({
		color: par.color,
		size: par.size,
		caption: this.value ? this.value.caption : '',
		className: 'buttonSwitch',
		onclick: D.closure(this, this.onclick)
	}).append(this.node);

	this._buttonSwitch = new T.Form.Button({
		color: par.color,
		size: par.size,
		icon: 'pointer-ddw',
		SVGIcon: true,
		onclick: D.closure(this, this.toggleOptions)
	}).append(this.node);

	if( this.options.length < 2 ){
		this._buttonSwitch.remove();
		addClassName(this.node, 'noOptions');
	}else{
		addClassName(this.node, 'withOptions');
	}

	if( par.disable ){
		this.disable(par.disable);
	}
};
T.Form.SwitchButton.prototype = new mkE.Base();
T.Form.SwitchButton.prototype.disable = function(v){
	this._button.disable(v);
	this._buttonSwitch.disable(v);
};
T.Form.SwitchButton.prototype.onclick = function(){
	if( !this.value ){
		return;
	}
	if( this.value.onclick ){
		this.value.onclick();
	}
};
T.Form.SwitchButton.prototype.toggleOptions = function(){
	if( !this._options ){
		this._options = new T.Options();
		this._optionItems = {};
		var options = this.options.slice(1);
		for( var i in options ){
			if( !options.hasOwnProperty(i) ){
				continue;
			}
			var option = options[i];
			var item = new T.Options.Item({
				caption: option.caption,
				onclick: D.closure(this, this.optionClick, option)
			});
			this._options.addItem(item);
			this._optionItems[option.value] = item;
		}
	}
	this._options.toggle(this.node);
};
T.Form.SwitchButton.prototype.optionClick = function(option){
	if( option.onclick ){
		option.onclick();
	}
};
T.Form.SwitchButton.prototype.caption = function(v){
	this._button.caption(v);
};
// --- SwitchButton ---

// +++ DropdownButton +++
/**
 * @constructor
 */
T.Form.DropDownButtonPar = function(){};
T.Form.DropDownButtonPar.prototype.color = null;
T.Form.DropDownButtonPar.prototype.size = null;
T.Form.DropDownButtonPar.prototype.disable = false;
T.Form.DropDownButtonPar.prototype.stretch = false;
T.Form.DropDownButtonPar.prototype.caption = '';
T.Form.DropDownButtonPar.prototype.items = [];
/** @type {{value: Number, onChange: function}}|null */
T.Form.DropDownButtonPar.prototype.perms = null;
T.Form.DropDownButtonPar.prototype.dropDownTop = false;
T.Form.DropDownButtonPar.prototype.icon = '';
T.Form.DropDownButtonPar.prototype.svgIcon = null;
T.Form.DropDownButtonPar.prototype.className = '';
T.Form.DropDownButtonPar.prototype.showOnHover = true;

/**
 * @param {T.Form.DropDownButtonPar|Object} par
 * @constructor
 */
T.Form.DropDownButton = function(par){
	par = par || new T.Form.DropDownButtonPar;
	this.par = par;

	this.node = mkE({
		tag: 'span',
		className: 'dropDownButton' + (par.className ? ' ' + par.className : '')
	});

	if( par.stretch ){
		addClassName(this.node, 'dropDownButtonStretch');
	}

	this._button = new T.Form.Button({
		color: par.color,
		size: par.size,
		className: 'buttonDropDown',
		stretch: par.stretch,
		onclick: function(){
			return false;
		}
	}).append(this.node);

	this.setCaption(par.caption ? par.caption : '');
	if( par.icon ) {
		this.setIcon(par.icon, false);
	} else if( par.svgIcon ) {
		this.setIcon(par.svgIcon, true);
	}

	var ddPar = new T.DropDown__par;
	ddPar.caption = this._button;
	ddPar.onHover = isset(par.showOnHover) ? par.showOnHover : true;
	ddPar.withoutHideDelay = true;
	ddPar.withoutArrow = true;
	ddPar.selectable = false;
	ddPar.ignoreCaption = true;
	ddPar.items = [];

	if( this.par.perms ){
		this._perm = new T.Form.Permissions( {
			value: isset(this.par.perms.value) ? this.par.perms.value : D.PERM_ALL,
			onchange: D.closure( this, this.onPermChange ),
			biz: this.par.perms.biz || false
		} );
		this.setCaption(this._perm.toStr());
		ddPar.forceTop = this.par.dropDownTop;
		ddPar.withoutHideDelay = false;
	}else{
		for( var i = 0, l = this.par.items.length; i < l; i++ ){
			var item = this.par.items[i];
			var ddItem;
			if( item.sep ){
				ddItem = new T.DropDownSep();
				ddPar.items.push(ddItem);
			}else if( item.group ){
				ddItem = new T.DropDownGroupTitle({
					caption: item.caption
				});
				ddPar.items.push(ddItem);
			}else{
				ddItem = new T.DropDownItem(item);
				ddPar.items.push(ddItem);
			}
		}
	}

	this._dropDown = new T.DropDown(ddPar);
	this._dropDown._dropDown._showOnHover = par.showOnHover;
	this._dropDown.append(this.node);

	if( this.par.perms ){
		this._perm.append(this._dropDown._dropDown);
	}

	if( par.disable ){
		this.disable(par.disable);
	}
};
T.Form.DropDownButton.prototype = new mkE.Base();
T.Form.DropDownButton.prototype.disable = function(v){
	this._button.disable(v);
	this._dropDown._dropDown.disable(v);
};
T.Form.DropDownButton.prototype.setCaption = function(v){
	this._button.caption(mkE({
		tag: 'span',
		className: 'caption',
		els: [
			{
				tag: 'span',
				text: v
			},
			T.svgIcon({
				icon: 'pointer-ddw'
			})
		]
	}));
};
T.Form.DropDownButton.prototype.setIcon = function(v, isSvg){
	this._button.icon(v, 'left', isSvg ? v : '', '');
};
T.Form.DropDownButton.prototype.onPermChange = function(){
	this.setCaption(this._perm.toStr());
	if( this.par.perms.onChange ){
		this.par.perms.onChange(this._perm);
	}
	this._dropDown._dropDown.hideMenu();
	if( this._perm.frGroups() ){
		this._dropDown._dropDown._position();
	}
};
T.Form.DropDownButton.prototype.getPermissions = function(){
	if( !this._perm ){
		return 0;
	}
	return this._perm.value();
};
T.Form.DropDownButton.prototype.remove = function(){
	this.node.remove();
	this._dropDown.hideMenu();
	return this;
};
// --- DropdownButton ---

// +++ MultiCheckbox +++
T.Form.MultiCheckbox__par = function(){};
T.Form.MultiCheckbox__par.prototype.caption = '';
T.Form.MultiCheckbox__par.prototype.items = [];
T.Form.MultiCheckbox__par.prototype.openClick = false;
T.Form.MultiCheckbox__par.prototype.onChange = D.doNothing;

/**
 * @param {T.Form.MultiCheckbox__par|Object} par
 * @constructor
 */
T.Form.MultiCheckbox = function(par){
	this.par = par || {};
	this.items = [];
	this.open = false;
	var prop = {};
	if( !par.openClick ){
		prop.onmouseover = D.closure(this, this._onMouseOver);
		prop.onmouseout = D.closure(this, this._onMouseOut);
	}
	this.node = mkE({
		tag: 'div',
		className: 'formItem formItemMultiCheckbox',
		prop: prop
	});

	this._button = new T.Form.Button({
		caption: par.caption,
		color: 'link',
		onclick: D.closure(this, this._onClick)
	}).append(this.node);

	this._content = mkE({
		tag: 'div',
		className: 'multiCbxContent radius3',
		prop: prop
	}).append(this.node);

	this._list = mkE({
		tag: 'ul'
	}).append(this._content);

	for( var i = 0, l = par.items.length; i < l; i++ ){
		var item = new T.Form.MultiCheckbox.Item(par.items[i], D.closure(this, this._onChange)).append(this._list);
		this.items.push(item);
	}

	this._resultNode = mkE({
		tag: 'div',
		className: 'multiCbxResult colorOk'
	}).append(this._content);
};
T.Form.MultiCheckbox.prototype = new mkE.Base;
T.Form.MultiCheckbox.prototype._onMouseOver = function(){
	clearTimeout( this._showTimeout );
	if( this.open ){
		return;
	}
	this._showTimeout = setTimeout(D.closure(this, function(){
		this.show();
	}), 100 );
};
T.Form.MultiCheckbox.prototype._onMouseOut = function(){
	clearTimeout( this._showTimeout );
	if( !this.open ){
		return;
	}
	this._showTimeout = setTimeout(D.closure(this, function(){
		this.hide();
	}), 200 );
};
T.Form.MultiCheckbox.prototype._onClick = function(){
	if( this.open ){
		this.hide();
	}else{
		this.show();
	}
};
T.Form.MultiCheckbox.prototype.show = function(){
	addClassName(this._content, 'open');
	this.open = true;

	var scrollTop = document.body.scrollTop || document.documentElement.scrollTop || 0;
	var max_height = window.innerHeight + scrollTop;

	var dropdown_xy = this.position(this.node);
	var dropdown_height = this.node.offsetHeight;
	var current_height = dropdown_xy.top + dropdown_height + this._content.offsetHeight + 24; // + 24, lai var redzeet "saglabaats"

	if ( current_height > max_height ) {
		this._resultNode.prepend(this._content);
		addClassName(this._resultNode, 'top');
		this._content.style.top = '';
		this._content.style.bottom = Math.max(0, window.innerHeight - dropdown_xy.top) + 'px';
	}else{
		this._resultNode.append(this._content);
		removeClassName(this._resultNode, 'top');
		this._content.style.top = dropdown_xy.top + dropdown_height + 'px';
		this._content.style.bottom = '';
	}
	this._content.style.minWidth = this._button.node.offsetWidth + 'px';
	this._content.style.left = dropdown_xy.left + 'px';
	this._content.style.zIndex = ++InfoBox.zIndex;
	this._content.append(document.body);
};
T.Form.MultiCheckbox.prototype.hide = function(){
	removeClassName(this._content, 'open');
	this.open = false;
};
T.Form.MultiCheckbox.prototype._onChange = function(value, checked){
	if( this.par.onChange ){
		this.par.onChange(value, checked);
	}
};
T.Form.MultiCheckbox.prototype.position = function(element) {
	var top = 0, left = 0;
	do {
		top += element.offsetTop  || 0;
		left += element.offsetLeft || 0;
		element = element.offsetParent;
	} while(element);

	return {
		top: top,
		left: left
	};
};
T.Form.MultiCheckbox.prototype.setResult = function(text){
	setNodeText(this._resultNode, text);
	this._resultNode.style.display = 'block';
};
T.Form.MultiCheckbox.prototype.hideResult = function(){
	setNodeText(this._resultNode, '');
	this._resultNode.style.display = '';
};

T.Form.MultiCheckbox.Item = function(data, onChange){
	data = data || {};
	this._onChangeCb = onChange || D.doNothing;
	this.value = data.value;
	this.caption = data.caption;
	this.checked = data.checked || false;

	this.node = mkE({
		tag: 'li',
		els: [
			{
				tag: 'label',
				els: [
					this._input = mkE({
						tag: 'input',
						type: 'checkbox',
						value: this.value,
						prop: {
							checked: this.checked
						},
						onchange: D.closure(this, this._onChange)
					}),
					{
						tag: 'span',
						text: this.caption
					}
				]
			}
		]
	});
};
T.Form.MultiCheckbox.Item.prototype = new mkE.Base;
T.Form.MultiCheckbox.Item.prototype._onChange = function(){
	this.checked = this._input.checked;
	this._onChangeCb(this.value, this.checked);
};
// --- MultiCheckbox ---

// --- PermButton ---
/**
 * @class {T.Form.PermButton}
 * @extends {mkE.Base}
 * @param {T.Form.PermButton.Par|Object} [par]
 */
T.Form.PermButton = Class(
	/**
	 * @lends {T.Form.PermButton#}
	 */
	{
		/**
		 * @param {T.Form.PermButton.Par|Object} [par]
		 * @constructs
		 */
		__construct: function(par){
			par = par || new T.Form.PermButton.Par();
			this._change = par.onChange || D.doNothing;
			this.par = par;
			this.permissions = par.permissions;

			this.node = mkE({
				tag: 'span',
				className: 'PermButton',
				els: [
					par.name ? this._input = mkE({
						tag: 'input',
						value: this.permissions,
						attr: {
							name: par.name,
							type: 'hidden'
						}
					}) : ''
				]
			});

			if( par.className ){
				addClassName(this.node, par.className);
			}

			this._button = new T.Form.Button({
				color: par.color || 'link',
				type: 'link',
				size: par.size,
				stretch: true
			});

			this._drawDropDown();
			this._drawCaption();
		},

		_drawDropDown: function(){
			var par = new T.DropDown__par();
			par.caption = this._button;
			par.onHover = false;
			par.withoutHideDelay = false;
			par.withoutArrow = true;
			par.selectable = false;
			par.ignoreCaption = true;
			par.items = [];
			par.forceBottom = true;

			this._dropDown = new T.DropDown(par);
			this._dropDown.append(this.node);

			var permPar = new T.Form.ListPermissions.Par();
			permPar.onChange = this._onChange;
			permPar.value = this.permissions;
			permPar.allOrNone = this.par.allOrNone || false;
			this._permissions = new T.Form.ListPermissions(permPar);
			this._permissions.append(this._dropDown._dropDown);
		},

		_drawCaption: function(){
			var icon;
			var caption = permissionsText(this.permissions);
			switch( this.permissions ){
				case D.PERM_ALL:
					icon = 'public';
					break;
				case D.PERM_REG:
					icon = 'registered';
					break;
				case D.PERM_FR:
					icon = 'friends';
					break;
				case D.PERM_NONE:
					icon = 'private';
					break;
				default:
					icon = 'friends';
					break;
			}
			this._button.caption(mkE({
				tag: 'span',
				className: 'PermButtonCaption',
				els: [
					T.svgIcon({
						icon: icon
					}),
					{
						tag: 'span',
						text: caption
					},
					T.svgIcon({
						icon: 'pointer-ddw'
					})
				]
			}));
		},

		_onChange: function(permissions){
			this.permissions = permissions;
			this._drawCaption();
			this._dropDown.hideMenu();
			this._change(permissions);
			if( this._input ) {
				this._input.value = permissions;
			}
		},

		value: function(v){
			if( !isset(v) ){
				return this.permissions;
			}
			this.permissions = v;
			this._permissions.value(v);
		}
	},
	mkE.Base
);

/**
 * @class {T.Form.PermButton.Par}
 */
T.Form.PermButton.Par = Class(
	/**
	 * @lends {T.Form.PermButton.Par#}
	 */
	{
		className: '',
		color: 'link',
		size: null,
		permissions: D.PERM_ALL,
		onChange: D.doNothing,
		name: null
	}
);

/**
 * @class {T.Form.ListPermissions}
 * @extends {mkE.Base}
 * @param {T.Form.ListPermissions.Par|Object} [par]
 */
T.Form.ListPermissions = Class(
	/**
	 * @lends {T.Form.ListPermissions#}
	 */
	{
		map: {},

		/**
		 * @param {T.Form.ListPermissions.Par|Object} [par]
		 * @constructs
		 */
		__construct: function(par){
			par = par || new T.Form.ListPermissions.Par();
			this.uid = par.uid || D.ID;
			this._value = isset(par.value) ? par.value : D.PERM_ALL;
			this._change = par.onChange || D.doNothing;
			this._allOrNone = par.allOrNone || false;

			this.map[D.PERM_ALL] = 'all';
			this.map[D.PERM_REG] = 'reg';
			this.map[D.PERM_FR] = 'fr';
			this.map[D.PERM_NONE] = 'none';

			this._types = {};

			var permissionTypes = [
				this._types.all = new T.Form.ListPermissions.Item({
					icon: 'public',
					caption: D.Lang.get('Perm all')
				}),
				this._types.reg = new T.Form.ListPermissions.Item({
					icon: 'registered',
					caption: D.Lang.get('Perm reg')
				}),
				this._types.fr = new T.Form.ListPermissions.Item({
					icon: 'friends',
					caption: D.Lang.get('Perm friends')
				}),
				this._types.frGroups = new T.Form.ListPermissions.Item({
					icon: 'friends',
					caption: D.Lang.get('Perm groups')
				}),
				this._types.none = new T.Form.ListPermissions.Item({
					icon: 'private',
					caption: D.Lang.get('Perm none')
				})
			];
			if ( this._allOrNone ) {
				permissionTypes.splice(1, 3); // Leave only All or None
			}

			this.node = mkE({
				tag: 'div',
				className: 'ListPermissions',
				els: permissionTypes
			});

			this._frGroupsNode = mkE({
				tag: 'div',
				className: 'ListPermissionsGroups',
				els: [
					{
						tag: 'div',
						className: 'permGroup'
					},
					{
						tag: 'div',
						className: 'permGroup'
					}
				]
			});

			this._drawGroups();

			for( var type in this._types ){
				if( !this._types.hasOwnProperty(type) ){
					continue;
				}
				this._types[type]._click = this._onPermClick;
			}
			this.value(this._value);
		},

		_onPermClick: function(item){
			for( var type in this._types ){
				if( !this._types.hasOwnProperty(type) ){
					continue;
				}
				this._types[type].active(false);
			}
			item.active(true);
			if( this._types.frGroups.isActive ){
				if( !this._groupsModal ){
					this._groupsModal = new D.Modal({
						width: 500,
						title: D.Lang.get('publish_for_groups'),
						withoutPadding: true,
						onClose: this._groupsClose
					});

					this._groupButtonsNode = mkE({
						tag: 'div',
						className: 'ListPermissionsGroupButtons',
						els: [
							new T.Form.Button({
								caption: D.Lang.get('Cancel'),
								color: 'link',
								onclick: this._closeGroups
							}),
							new T.Form.Button({
								caption: D.Lang.get('Save'),
								color: 'submit',
								onclick: this._saveGroups
							})
						]
					});
				}
				this._groupsModal.els([this._frGroupsNode, this._groupButtonsNode]);
				this._getGroups();
				this._change(this._value);
				return;
			}
			this._changed();
		},

		value: function(v){
			if( !isset(v) ){
				return this._value;
			}
			for( var type in this._types ){
				if( !this._types.hasOwnProperty(type) ){
					continue;
				}
				this._types[type].active(false);
			}
			if( this.map[v] ){
				this._types[ this.map[v] ].active(true);
			}else{
				this._types.frGroups.active(true);
				for( var k in this._groupsCbx ){
					if( !this._groupsCbx.hasOwnProperty(k) ){
						continue;
					}
					this._groupsCbx[k].value( v & 1 << ( k - 1 ) );
				}
			}
			this._changed();
		},

		_changed: function(){
			if( this._frGroupEditNode ){
				this._frGroupEditNode.remove();
			}
			this._value = D.PERM_NONE;
			if( this._types.all.isActive ){
				this._value = D.PERM_ALL;
				this._selectAllGroups(true);
			}else if( this._types.reg.isActive ){
				this._value = D.PERM_REG;
				this._selectAllGroups(true);
			}else if( this._types.fr.isActive ){
				this._value = D.PERM_FR;
				this._selectAllGroups(true);
			}else if( this._types.none.isActive ){
				this._selectAllGroups(false);
				this._value = D.PERM_NONE;
			}else if( this._types.frGroups.isActive ){
				this._frGroupEditNode = mkE({
					tag: 'span',
					className: 'ListPermissionsGroupsEdit',
					text: D.Lang.get('edit')
				}).append(this._types.frGroups._captionNode);
				for( var k in this._groupsCbx ){
					if( !this._groupsCbx.hasOwnProperty(k) ){
						continue;
					}
					if( this._groupsCbx[k].value() ){
						this._value |= 1 << ( k - 1 );
					}
				}
			}
			this._change(this._value);
		},

		_groupsClose: function(){
			if( this._groupsSaved ){
				this._groupsSaved = false;
				return;
			}
			this.value(this._value);
		},

		_closeGroups: function(){
			this._groupsModal.close();
		},

		_saveGroups: function(){
			this._changed();
			this.value(this._value);
			this._groupsSaved = true;
			this._groupsModal.close();
		},

		_drawGroups: function(){
			/** @type {Object.<T.Form.CheckBox>} */
			this._groupsCbx = {};
			for( var i = 1; i <= 11; ++ i ){
				var cbx = new T.Form.CheckBox({
					caption: 'Group ' + i
				});
				this._groupsCbx[i] = cbx;
				cbx.append(this._frGroupsNode.childNodes[ ( i - 1 ) % 2 ]);
			}
		},

		_getGroups: function(){
			// cache
			if( ( !this.uid || this.uid == D.ID ) && T.Form.Permissions._groupes ){
				this.setGroups( T.Form.Permissions._groupes );
				return;
			}
			if( this._gettingGroups ){
				return;
			}
			this._gettingGroups = true;
			var rpc = new RPC('/rq/app.php');
			rpc.send(
				'userGroups',
				{
					uid: this.uid,
					ungrouped: true
				},
				this._getGroupsRe
			);
		},

		_getGroupsRe: function(re){
			this.setGroups(re.groups);
		},

		setGroups: function(groups){
			this._groups = groups;
			if( !this.uid || this.uid == D.ID ){
				T.Form.Permissions._groupes = groups;
			}
			for( var i in this._groupsCbx ){
				if( !this._groupsCbx.hasOwnProperty(i) ){
					continue;
				}
				this._groupsCbx[i].remove();
			}
			var n = 0;
			for( var k in groups ){
				if( this._groupsCbx[k] ){
					this._groupsCbx[k].caption( groups[k].name + ( groups[k].count ? ' (' + groups[k].count + ')' : '' ) );
					this._groupsCbx[k].append( this._frGroupsNode.childNodes[ n++ % 2 ] );
				}
			}
			this._groupsCbx[11].append( this._frGroupsNode.childNodes[0] );
			T.clear().append( this._frGroupsNode );
		},

		_selectAllGroups: function(v){
			for( var k in this._groupsCbx ){
				if( !this._groupsCbx.hasOwnProperty(k) ){
					continue;
				}
				this._groupsCbx[k].value(v);
			}
		},

		isFrGroups: function(){
			if( !this._types.frGroups ){
				return false;
			}
			return this._types.frGroups.isActive;
		}
	},
	mkE.Base
);

/**
 * @class {T.Form.ListPermissions.Par}
 */
T.Form.ListPermissions.Par = Class(
	/**
	 * @lends {T.Form.ListPermissions.Par#}
	 */
	{
		uid: D.ID,
		value: D.PERM_ALL,
		onChange: D.doNothing,
		allOrNone: false
	}
);

/**
 * @class {T.Form.ListPermissions.Item}
 * @extends {mkE.Base}
 */
T.Form.ListPermissions.Item = Class(
	/**
	 * @lends {T.Form.ListPermissions.Item#}
	 */
	{
		isActive: false,

		/**
		 * @param {Object} par
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};

			this.node = mkE({
				tag: 'div',
				className: 'ListPermissionsItem',
				onclick: this._onclick,
				els: [
					T.svgIcon({
						icon: par.icon
					}),
					this._captionNode = mkE({
						tag: 'span',
						className: 'caption',
						text: par.caption
					})
				]
			});
		},

		active: function(v){
			if( v ){
				this._activeCheck = mkE({
					tag: 'span',
					className: 'active',
					els: [
						T.svgIcon({
							icon: 'check'
						})
					]
				}).append(this.node);
				this.isActive = true;
				return;
			}
			if( this._activeCheck ){
				removeNode(this._activeCheck);
				this.isActive = false;
			}
		},

		_click: function(){},

		_onclick: function(){
			this._click(this);
		}
	},
	mkE.Base
);
// --- PermButton ---

/**
 * @class {T.Form.Nonce}
 * @extends {mkE.Base}
 */
T.Form.Nonce = Class(
	/**
	 * @lends {T.Form.Nonce#}
	 */
	{
		/**
		 * @constructs
		 */
		__construct: function(){
			this.node = mkE({
				tag: 'input',
				prop: {
					type: 'hidden',
					name: D.nonce.name,
					value: D.nonce.value
				}
			});
		}
	},
	mkE.Base
);

T.Form.MetaInfoText = Class(
	{
		onBeforeUpdate: function() {},
		onAfterUpdate: function() {},
		onTagClick: function() {},

		__construct: function ( par ) {
			if ( par.onBeforeUpdate ){
				this.onBeforeUpdate = par.onBeforeUpdate;
			}
			if ( par.onAfterUpdate ){
				this.onAfterUpdate = par.onAfterUpdate;
			}
			if ( par.onTagClick ) {
				this.onTagClick = par.onTagClick;
			}

			this.node = mkE({
				tag: 'div',
				className: 'metaInfo'
			});
		},

		update: function( data ) {
			this.onAfterUpdate();

			clearNode( this.node );
			var parts = [];
			if( !empty( data.location ) ){
				if( !empty(parts) ){
					parts.push(' '  + D.Lang.get('and') + ' ');
				}
				parts.push({
					tag: 'span',
					els: [
						D.Lang.get('checked_in') + ' ',
						{
							tag: 'a',
							href: '/places/' + data.location.value,
							text: htmlspecialchars_decode(data.location.caption),
							target: '_blank'
						}
					]
				});
			}
			if( !empty(data.friends) ){
				if( empty(parts) ){
					parts.push(D.Lang.get('with') + ' ');
				}else{
					parts.push(' '  + D.Lang.get('with') + ' ');
				}
				for( var i = 0, l = data.friends.length; i < l; i++ ){
					if( i > 0 && i + 1 != l && (l <= 3 || i < 2) ){
						parts.push(', ');
					}else if( l > 1 && ( i == l - 1 || (i == 2 && l > 3) )  ){
						parts.push(' ' + D.Lang.get('and') + ' ');
					}
					if(  i == 2 && l > 3 ){
						var moreFriendsLink = mkE({
							tag: 'a',
							onclick: D.closure(this, this.onTagClick),
							text: D.Lang.nget(l - 2, 'friends_ins')
						});
						parts.push(moreFriendsLink);
						break;
					}
					var withName = data.friends[i];
					if( (!withName.value || withName.extra.type == D.TYPE_UNKNOWN) && withName.caption ){
						parts.push({
							tag: 'span',
							className: 'notUser',
							text: htmlspecialchars_decode(withName.caption)
						});
						continue;
					}
					var userNode = mkE({
						tag: 'a',
						onclick: this.onTagClick,
						text: htmlspecialchars_decode(withName.extra.aktitle)
					});
					/*D.Say.addUserTooltip(userNode, {
						id: withName.value,
						type: withName.extra.type
					});*/
					parts.push(userNode);
				}
			}
			if( !empty(parts) ){
				this.node.appendChild(document.createTextNode(' — '));
				mkE.appendTypeElement(this.node, parts);
			}

			this.onAfterUpdate();
		}
	},
	mkE.Base
);

// --- form.js ---

// +++ actual.js +++
T.actual = {

	open:function( par ){
		var parent = document.getElementById('specialBox');
		if( parent._popover ){
			parent._popover.hide();
			delete parent._popover;
			return;
		}
		var p = new T.Popover.Par().setParent(parent).setPosition('right top').setScrollIntoView(true).setOnClose(function(){
			delete parent._popover;
		}).setTitle(D.Lang.get('actual'));
		var popover = new T.Popover(p);

		var actualPopover = mkE({
			tag: 'div',
			className: 'ActualPopover'
		}).append(popover.content);

		for( var j = 0, l2 = par.actual.length; j < l2; j++ ){
			var actualData = par.actual[j];
			T.actual.drawActualItem(popover, actualData).append(actualPopover);
			if ( l2 >= 2 && j < l2 - 1) {
				T.sep().append( actualPopover );
			}
		}

		popover.show();
		parent._popover = popover;
		$('#specialBox .badge').removeClass('on').addClass('off');
		if(!par.badgeOn){
			return;
		}
		var rpc = new RPC('/main/rq/app.php');
		rpc.send(
			'actualOpen',
			{
				maxId:par.maxId,
				pollId:par.pollId
			},
			function(){
			}
		);
	},

	close:function( id, closeText ){
		var li = document.getElementById( 'actual' + id );
		var count = li ? li.parentNode.childNodes.length : 0;
		var doClose = function(){
			if(li){
				if( count == 1 ){
					$( '#specialBox' ).fadeOut(function(){
						$( '#specialBox').remove();
					});
				}
				$( '#specialBox .badge' ).html( count - 1 );
				$(li).fadeOut( function(){
					removeNode(li);
				} );
			}
			var rpc = new RPC('/main/rq/app.php');
			rpc.send(
				'actualClose',
				{
					id:id
				},
				function(){
				}
			);
			D.smallPopUp.close();
		};
		if( empty( closeText ) ){
			doClose();
			return;
		}
		D.smallPopUp.html( '', { width:250 } );
		mkE( {
			tag:'p',
			text:closeText
		} ).append( D.smallPopUp.content );
		T.submitButton( {
			caption:D.Lang.get( 'close', 'xGlobal' ),
			onclick:doClose
		} ).append( D.smallPopUp.content );
	},

	click:function( el, id ){
		var rpc = new RPC('/main/rq/app.php');
		rpc.async = false;
		rpc.send(
			'actualClick',
			{
				id:id,
				maxId:T.actual.maxId,
				pollId:T.actual.pollId
			},
			function(){
				/*
				if(el.target){
					window.open(el.href, '_blank');
					window.focus();
				}else{
					document.location.href = el.href;
				}
				*/
			}
		);
		return true;
	},

	freeGal:function(){
		var re = mkE( {
			tag:'div',
			id:'freeGal',
			els:[
				{
					tag:'div',
					id:'freeGalBg',
					prop:{
						onclick:function(){
							re.remove();
						}
					}
				},
				{
					tag:'div',
					id:'freeGalC',
					els:[
						{
							tag:'a',
							className:'icon closeIcon',
							prop:{
								onclick:function(){
									re.remove();
								}
							}
						},
						T.submitButton( {
							size:'large',
							stretch:true,
							caption:D.Lang.get('Create album'),
							href:'/gallery/?tab=3'
						} )
					]
				}
			]
		} ).append( document.body );
	},

	drawActualItem: function(popover, data){
		var img = D.PIMG + 'main/img/temp_actual_image.png';
		var target = '_self';
		if( data.newTab == 'y' ){
			target = '_blank';
		}
		if (data.icon) {
			img = D.PIMG + data.icon;
			if (data.icon.substring(0, 4) == 'http') {
				img = data.icon;
			}
		}
		var info;
		var item = mkE({
			tag: 'div',
			id: 'actual' + data.id,
			className: 'MainActualItem MainActual',
			els: [
				{
					tag: 'a',
					href: data.href,
					onclick: function(){
						return T.actual.click(this, data.id);
					},
					target: target,
					className: 'img',
					els: [
						{
							tag: 'img',
							src: img
						}
					]
				},
				info = mkE({
					tag: 'a',
					href: data.href,
					onclick: function(){
						return T.actual.click(this, data.id);
					},
					target: target,
					className: 'info',
					els: [
						{
							tag: 'div',
							className: 'title',
							text: data.text
						},
						{
							tag: 'div',
							className: 'description',
							text: data.description
						}
					]
				})/*,
				{
					tag: 'a',
					className: 'close',
					onclick: function(){
						T.actual.close(data.id, data.closeText);
					},
					els: [
						T.svgIcon({
							icon: 'close-10'
						})
					]
				}*/
			]
		});
		if( data.highLight ){
			mkE({
				tag: 'div',
				className: 'highLight',
				text: D.Lang.get('New')
			}).append(info);
		}
		return item;
	}

};

// --- actual.js ---

// +++ comments.js +++
T.comments = {
	replyLink:false,

	reply:function( el, cid ){
		if( $('#infobox3').length > 0 ){
			var infoboxOpen = true;
			var addComment = $('#infobox3 #commentsAddComment')[0];
		}else{
			var infoboxOpen = false;
			var addComment = document.getElementById( 'commentsAddComment' );
		}
		if( this.commentsReplyLink === el ){
			this.commentsReplyLink.innerHTML = xGlobal[ 'reply' ] || 'Reply';
			this.commentsReplyLink = false;
			removeClassName( addComment, 'answer' );
			addComment.parentNode.appendChild( addComment );
			if(infoboxOpen){
				$(addComment).val(0);
			}else{
				document.getElementById( 'commantsAddParent' ).value = '0';
			}
		} else {
			if( this.commentsReplyLink ){
				this.commentsReplyLink.innerHTML = xGlobal[ 'reply' ] || 'Reply';
			}
			this.commentsReplyLink = el;
			this.commentsReplyLink.innerHTML = xGlobal[ 'Cancel' ] || 'Cancel reply';
			addClassName( addComment, 'answer' );
			if(infoboxOpen){
				D.insertAfter( addComment,  $('#infobox3 #commentsItem' + cid )[0] );
				$('#infobox3 #commantsAddParent').val(cid);
			}else{
				D.insertAfter( addComment, document.getElementById( 'commentsItem' + cid ) );
				document.getElementById( 'commantsAddParent' ).value = cid;
			}

		}
		var textarea = addComment.getElementsByTagName('textarea')[0];
		if( D.browser.name == 'Safari' && textarea && textarea._drTa ){ // shit Safari!
			textarea._drTa.append();
		}
		textarea.focus();
		return false;
	},

	order:function( par ){
		var url = '/rq/comments.php?comId=' + par.id + '&comType=' + par.type  + '&commentsOrder=' + par.order;
		rq( url, 'comments' + par.type + '_' + par.id, {overlay:true,replace:true} );
		return false;
	},

	more:function( par ){
		var url = '/rq/comments.php?comId=' + par.id + '&comType=' + par.type + '&comPg=' + par.pg + '&comItems&comLastCid=' + par.lastCid;
		rq( url, 'comments' + par.type + '_' + par.id + 'More', {overlay:true,replace:true} );
		return false;
	},

	onsubmit:function( el, par ){
		var url = '/rq/comments.php?comId=' + par.id + '&comType=' + par.type;
		if( this.pg > 1 ){
			url += '&comPg=' + this.pg;
		}
		D.ajaxPost( el, url, 'comments' + par.type + '_' + par.id, {overlay:true,replace:true} );
		return false;
	},

	'delete':function( par ){
		if( ! D.confirmDelete() ){
			return false
		};
		var url = '/rq/comments.php?comId=' + par.id +
			'&comType=' + par.type +
			'&' + par.p.name + '=' + par.p.value +
			'&commentsDel=' + par.cid + '&comPg=' + par.pg;
			if(par.ext_id){
				url = url+'&ext_id='+par.ext_id;
			}
		rq( url, 'comments' + par.type + '_' + par.id, {overlay:true,replace:true} );
		return false;
	},

	onkeyup:function( el, event ){
		if( D.checkCtrlEnter(event) && el.form ){
			if( el.form.onsubmit && el.form.onsubmit() === false ){
				return false;
			};
			if( BrowserDetect.browser == 'Explorer' && BrowserDetect.version == 8 ){
				return;
			}
			el.form.submit();
		}
	},

	hide:function(el){
		el.onfocus = function(){};
		$(el).parents('.commentAutoHide').removeClass('commentAutoHide');
		$(el).html('');
	}
};

// --- comments.js ---

// +++ emo.js +++
var emotionsIcons = {
	0:'no_emotion',
	1:'abroad',
	2:'angry',
	3:'cry',
	4:'do_not_disturb',
	5:'hangower',
	6:'happy',
	7:'in_love',
	8:'kiss',
	9:'lets_go_dance',
	10:'meet_someone',
	11:'new_galery',
	12:'sick',
	13:'sos',
	14:'write_me',
	15:'zb',
	16:'revolution',
	17:'batman',
	18:'working',
	19:'cool',
	20:'devil',
	21:'emo',
	22:'sexy',
	23:'skull',
	24:'sleep',
	25:'thumb_up',
	26:'rapper',
	27:'pirate',
	28:'peace',
	29:'basketball',
	31:'lacplesis',
	30:'lucky',
	32:'santa',
	33:'angel',
	34:'tree',
	35:'bored',
	36:'clown',
	37:'MR_T',
	38:'heart',
	39:'LT',
	40:'moto',
	41:'police',
	42:'bmw',
	43:'girl',
	44:'hu',
	45:'rabbit',
	46:'morda',
	47:'party',
	48:'liigo',
	49:'wizard',
	50:'witch',
	51:'zombie',
	52:'pumpkin',
	53:'cyclops',
	54:'alien',
	55:'army',
	56:'cards',
	57:'bomb',
	58:'briedis',
	59:'kachok',
	60:'hockey',
	61:'snowy',
	62:'rose',
	63:'headphones',
	64:'drink',
	65:'bartender',
	66:'8ball',
	67:'hockeyhu',
	68:'valentine',
	69:'blonde',
	70:'fire',
	71:'bomzis',
	72:'robo',
	73:'flower',
	74:'vampire',
	75:'guitar',
	76:'farm',
	77:'hot',
	78:'ice',
	88:'rain'
};

T.emo = {
	hovered: false,
	hoverText: '',
	hoverUserlistNode: false,
	node: false,

	loadFirstpage: function(emo, par){
		var elm = document.getElementById('fpemo');
		var so1 = new SWFObject('//i.ifrype.com/emo/v'+ D.EMOV +'/emo_'+ emo +'_big.swf', 'emotion_swf', 40, 40, 6, '#ffffff');
		so1.addParam('wmode', 'transparent');
		so1.write(elm);

		this.hovered = mkE( {
			tag: 'a',
			id: 'clickableEmo',
			href: '/account/?tab=8&emo=' + emo,
			prop: {
				onmousemove: D.closure( this, this.fpHover ),
				onmouseout: D.closure( this, this.removeHover )
			}
		} ).append( elm );
		this.hoverText = par.text;
	},
	loadWithoutFlash: function(emo, par){
		var elm = document.getElementById('fpemo');
		elm.onmouseover = function(){
			elm.onmouseover = function(){};
			T.emo.loadFirstpage(emo, par);
		}
	},
	showAll: function(eid){
		if(typeof(eid) == 'undefined'){
			window.location.href = '/account/?tab=8';
		}else{
			window.location.href = '/account/?tab=8&emo='+ eid;
		}
	},
	changeEmo: function(emo){
		D.rq('/account/layout/emo.php?emo='+ emo + '&ajax=true', 'ajaxResponse', {
			hash: false
		});
	},
	fpHover: function(){
		if ( this.hoverText ) {
			if ( !this.node ) {
				this.node = mkE( {
					tag:'div',
					id:'emoCallout',
					style:{
						display:'none'
					},
					els:[
						mkE( {
						tag:'div',
						className:'mid',
						prop:{
							innerHTML:T.emo.hoverText
						}
						} ),
						mkE( {
							tag:'div',
							className:'bot'
						} )
					]
				} );
				T.emo.node.append( document.body );
			}

			clearTimeout( this.node._timeout );
			D.FX(this.node).fadeIn( 200 );
			var pos = D.position( this.hovered );
			this.node.style.left = pos.left + 25 + 'px';
			this.node.style.top = (pos.top - this.node.offsetHeight + 10) + 'px';
		}
	},
	removeHover: function(){
		if( T.emo.node ){
			T.emo.node._timeout = setTimeout( function(){
				D.FX(T.emo.node).fadeOut();
				//T.emo.node.style.display = 'none';
			}, 200 );
		}
	},
	hover: function(elm, par){
		if(!elm.onmouseout){
			elm.onmouseout = T.emo.mouseout;
		}
		if(T.emo.hoverUserlistNode){
			$(T.emo.hoverUserlistNode).remove();
		}

		var elm = elm.parentNode.parentNode;

		T.emo.hoverUserlistNode = mkE( {
			tag:'div',
			className:'emoBigWrap'
		} );
		T.emo.hoverUserlistNode.innerHTML = '<div class="emoBig"><div class="emoBig emo_b'+ par.emo +'"></div></div>';
		T.emo.hoverUserlistNode.append(elm);
		if(par.text){
			T.emo.callout = mkE( {
				tag:'div',
				id:'emoCallout',
				els:[
					mkE( {
						tag:'div',
						className:'mid',
						innerHTML:par.text
					} ),
					mkE( {
						tag:'div',
						className:'bot'
					} )
				]
			} ).append(document.body);
		}
		var so1 = new SWFObject('//i.ifrype.com/emo/v'+D.EMOV+'/emo_'+par.emo+'_big.swf','emotion_swf',60,60,6,'#ffffff');
		so1.addParam('wmode','transparent');
		so1.write( T.emo.hoverUserlistNode.firstChild );
		var pos = D.position( elm );
		if(T.emo.callout){
			T.emo.callout.style.left = pos.left + 40 + 'px';
			T.emo.callout.style.top = pos.top - T.emo.callout.offsetHeight +80 + 'px';
		}

	},
	mouseout: function(){
		$(T.emo.hoverUserlistNode).remove();
		$(T.emo.callout).remove();
	},
	buildList: function(data, newEmos) {
		var emo;
		var area = document.getElementById('emolist');
		if(data) {
			// Reverse order, json_encode on behalf sorts array by key.
			var arr = [];
			for (var key in data) {
				arr.push(key);
			}

			for (var i=arr.length-1; i>=0; i--) {
				emo = new Emo(arr[i], data[arr[i]], newEmos.indexOf(arr[i]));
				emo.append(area);
			}
		}
	}
};

Emo = function(id, text, newEmo){
	newEmo = ((newEmo == undefined) ? -1 : newEmo);
	D.EMOV = D.EMOV || 1;
	this.id = id;
	this.node = mkE({
		tag: 'div',
		className: 'emoItem',
		els: [
			{
				tag: 'span',
				className: 'badge '+((newEmo != -1) ? 'on' : ''),
				text: ((newEmo != -1) ? D.Lang.get('New', 'xGlobal') : '')
			},
			this.image = mkE({
				tag:'div',
				className: 'emoImage',
				els: [
					this.static = mkE({
						tag: 'img',
						src: '//i.ifrype.com/emo/v'+ D.EMOV+'/emo_'+id+'_big.png'
					})
				]}),
			{
				tag: 'span',
				className: 'text',
				text: text
			}
		],
		prop: {
			onclick: D.closure(this,this._onClick),
			onmouseover: D.closure(this,this._onMouseOver),
            title: text
		}
	});
};

Emo.prototype = {};
Emo.prototype._onClick = function() {
	if (this.id) {
		InfoBox.open('/account/rq/emo_customize.php?emo='+this.id,{width:500});
	}
	return false;
};
Emo.prototype._onMouseOver = function() {
	if (!this.swf) {
		this.swf = new SWFObject('//i.ifrype.com/emo/v'+ D.EMOV+'/emo_'+this.id+'_big.swf',10,60,60,'#ffffff');
		this.swf.addParam('wmode','transparent');
		this.swf.write(this.image);
	}
};
Emo.prototype.append = function(parent) {
	this.node.append(parent);
};
// --- emo.js ---

// +++ like.js +++
T.like = {

	send:function( el, par ){
		if( !this.rpc ){
			this.rpc = new RPC( '/rq/app.php' );
		}
		this.rpc.send(
			'like',
			par,
			function( re ){
				addClassName( el.parentNode, 'youLike' );
				addClassName( el.parentNode, 'color2' );
				var diff = par.iLike?0:1;
				el.innerHTML = D.Lang.get( 'Dislike it', 'xGlobal' );
				if(par.count != undefined){
					var likeCount = $(el).parent().find('i a');
					if($(likeCount).length != 0){
						el.innerHTML += ': ';
						$(likeCount).html((parseInt(par.count) + diff));
					}else{
						el.innerHTML += ': ';
						$(el).after('<i><a href="javascript:;">' + (parseInt(par.count) + diff) + '</a></i>');
					}
				}
				if(par.onlyCount == true && par.count != undefined){
					el.innerHTML = parseInt(par.count) + diff;
					$(el).next('i').remove();
				}
				if(par.dislikeIcon){
					$(el).parent().find('.' + par.likeIcon + 'Icon').removeClass(par.likeIcon + 'Icon').addClass(par.dislikeIcon + 'Icon');
				}
				var get = new Get({});
				get.add( 'likeType', par.type ).add( 'likeId', par.id );
				var id = 'likeBlock' + String(par.type) + '_' + String(par.id);
				if( document.getElementById(id) ){
					rq( '/rq/like.php?' + get, id, {overlay:true, hash:false} );
				}
				el.onclick = function(){
					T.like.dislike( el, par );
				};
				if( par.callback ){
					var cb = eval( par.callback );
					if( typeof cb == 'function' ){
						cb(true);
					}
				}
				if(re.wannaFollow){
					D.smallPopUp.open('/lapas/rq/wannafollow.php?page_id=' + re.pageID, {'title':re.pageName});
				}
			},
			this
		);
	},

	dislike:function( el, par ){
		if( !this.rpc ){
			this.rpc = new RPC( '/rq/app.php' );
		}
		this.rpc.send(
			'dislike',
			par,
			function( re ){
				removeClassName( el.parentNode, 'youLike' );
				removeClassName( el.parentNode, 'color2' );
				var diff = par.iLike?-1:0;
				el.innerHTML = par.text || D.Lang.get( 'I like it', 'xGlobal' );
				if(parseInt(par.count) > 0){
					var likeCount = $(el).parent().find('i a');
					if($(likeCount).length != 0){
						el.innerHTML += ': ';
						$(likeCount).html(parseInt(par.count) + diff);
					}
					//el.innerHTML += ': <i>' + parseInt(par.count) + '</i>'
				}else{
					$(el).parent().find('i a').remove();
				}
				if(par.onlyCount == true && par.count != undefined){
					el.innerHTML = parseInt(par.count + diff);
				}
				if(par.dislikeIcon){
					$(el).parent().find('.' + par.dislikeIcon + 'Icon').removeClass(par.dislikeIcon + 'Icon').addClass(par.likeIcon + 'Icon');
				}
				var get = new Get({});
				get.add( 'likeType', par.type ).add( 'likeId', par.id );
				var id = 'likeBlock' + String(par.type) + '_' + String(par.id);
				if( document.getElementById(id) ){
					rq( '/rq/like.php?' + get, id, {overlay:true, hash:false} );
				}
				el.onclick = function(){
					T.like.send( el, par );
				};
				if( par.callback ){
					var cb = eval( par.callback );
					if( typeof cb == 'function' ){
						cb(false);
					}
				}
			},
			this
		);
	},

	more:function( el, par ){
		if( existsClassName(el, 'buttonC') && el.parentNode && el.parentNode.parentNode ){
			el = el.parentNode.parentNode;
		}
		var get = new Get({});
		get.add( 'likeType', par.type ).add( 'likeId', par.id ).add( 'likePg', par.pg );
		rq( '/rq/like.php?' + get, el, { replace:true, hash:false } );
	}

};
// --- like ---

// +++ likeBlock +++
T.likeBlock = function(par){
	this.type = par.type;
	this.id = par.id;
	this.iLike = par.iLike || false;
	this.icon = par.icon || 'likeIcon';
	this.node = null;
	this.cb = par.cb;
	this.stopPropagation = par.stopPropagation || false;
};

T.likeBlock.prototype._draw = function(){
	if(this.node){
		clearNode( this.node );
	}
	if( this.iLike ){
		this.drawLiked();
		return;
	}
	this.node = mkE( {
		tag:'a',
		href: 'javascript:;',
		className: this.icon + ' icon',
		text: D.Lang.get('I like it', 'xGlobal'),
		prop:{
			onclick:D.closure( this, this.like )
		}
	} );

};

T.likeBlock.prototype.like = function(){
	if (this.stopPropagation) {
		D.stopPropagation();
	}
	return T.like.send(this.node, {
		id : this.id,
		type: this.type,
		callback: this.cb
	});
};

T.likeBlock.prototype.dislike = function(){
	if (this.stopPropagation) {
		D.stopPropagation();
	}
	return T.like.dislike(this.node, {
		id : this.id,
		type: this.type,
		callback: this.cb
	});
};

T.likeBlock.prototype.drawLiked = function(){
	this.node = mkE( {
		tag:'a',
		href: 'javascript:;',
		className: this.icon + ' icon',
		text: D.Lang.get('Dislike it', 'xGlobal'),
		prop:{
			onclick: D.closure( this, this.dislike )
		}
	} );
};
T.likeBlock.prototype.append = function(parent){
	this._draw();
	this.node.append(parent);
	return this;
};

// +++

/**
 * @param item Object
 * @param par {}
 * @constructor
 */
T.LikeButton = function(item, par){
	this.item = item;
	if (!item || !item.like) {
		return;
	}
	this.par = par || {};
	this.canLike = this.item.like.canLike;
	this.liked = this.item.like.liked;

	if( !D.ID ){
		this.canLike = true;
		this.liked = false;
	}

	this.node = mkE({
		tag: 'div',
		className: 'like'
	});
	this.likeNode = mkE({
		tag: 'a',
		className: 'icon sayLikeIcon' + (this.liked ? ' liked' : ''),
		text: this.par.noCaption ? '' : this.canLike && !this.liked ? D.Lang.get('I like it', 'xGlobal') : D.Lang.get('Dislike it', 'xGlobal'),
		prop: {
			onclick: D.closure(this, this.onclick)
		}
	}).append(this.node);

	this.countNode = mkE({
		tag: 'a',
		className: 'likeCount',
		text: this.item.like.count,
		onclick: D.closure(this, this.showLikes)
	});

	if( this.item.like.count ){
		this.countNode.append(this.node);
	}
};
T.LikeButton.prototype = new mkE.Base();
T.LikeButton.prototype.onclick = function(e){
	if( !D.ID ){
		D.today.hlLogin(e);
		return false;
	}
	if( this.canLike && !this.liked ){
		this.like();
	}else if( this.liked ){
		this.dislike();
	}
};
T.LikeButton.prototype.like = function(){
	if( this._mLike && this._mLike.processing ){
		return;
	}
	var apiCall = new DR.ApiCall();

	this._mLike = new DR.like.Like();
	this._mLike.id = this.item.like.id;
	this._mLike.type = this.item.like.type;
	this._mLike.select = [
		new DR.like.select.GetRe().canLike().count().liked()
	];
	this._mLike.onLoad = D.closure(this, this.onLikeDislike);

	apiCall.addMethod(this._mLike);
	apiCall.call();
};
T.LikeButton.prototype.dislike = function(){
	if( this._mLike && this._mLike.processing ){
		return;
	}
	this._mLike = new DR.like.Dislike();
	this._mLike.id = this.item.like.id;
	this._mLike.type = this.item.like.type;
	this._mLike.select = [
		new DR.like.select.GetRe().canLike().count().liked()
	];
	this._mLike.onLoad = D.closure(this, this.onLikeDislike);
	this._mLike.call();
};
T.LikeButton.prototype.onLikeDislike = function(){
	var re = this._mLike.re;
	this.update(re);
	if( this.item._popup && this.item._popup.popupLike ){
		this.item._popup.popupLike.update(re);
	}
};
T.LikeButton.prototype.update = function(data){
	this.item.like.canLike = data.canLike;
	this.item.like.count = data.count;
	this.item.like.liked = data.liked;
	this.canLike = data.canLike;
	this.liked = data.liked;

	if( this.liked ){
		addClassName(this.likeNode, 'liked');
		if (!this.par.noCaption) {
			setNodeText(this.likeNode, D.Lang.get('Dislike it', 'xGlobal'));
		}
	}else{
		removeClassName(this.likeNode, 'liked');
		if (!this.par.noCaption) {
			setNodeText(this.likeNode, D.Lang.get('I like it', 'xGlobal'));
		}
	}

	setNodeText(this.countNode, data.count);
	if( data.count ){
		this.countNode.append(this.node);
	}else{
		this.countNode.remove();
	}
};
T.LikeButton.prototype.showLikes = function(){
	InfoBox.open('/rq/like_modal.php?likeType=' + this.item.like.type + '&likeId=' + this.item.like.id, {
		title:D.Lang.get('like'),
		width:820,
		modal:true,
		overlayClose:true,
		closeParent: false
	});
	D.today.checkPostsVisibility()
};
// --- like.js ---

// +++ more.js +++
/*
par = {
	url:string,
	id:[string], - wraps,
	node:[node] - wraps
	pgs:[int] - max page count
}
*/
T.More = function(par){
	D.defaults( par, {
		pg: new Get().v('pg') || 1,
		pgLimit: 4,
		hash: false,
		offset: 2,
		disableAuto: false
	} );
	this.par = par;
	this.pg = par.pg;
	this.pgs = par.pgs;
	this.pgLimit = par.pgLimit;
	this.hash = par.hash;
	this.offset = par.offset;
	this.noOverlay = par.noOverlay || false;
	if( isset(this.pgs) && this.pg >= this.pgs ){
		return;
	}
	var get = new Get();
	this._moreButton = new T.Form.Button( {
		caption: par.caption || D.Lang.get('more'),
		onclick: D.closure( this, this.loadPage ),
		color: 'link',
		stretch: true,
		className: 'buttonLoadMore',
		href:'?' + get.add('pg', Number(get.v('pg') || this.pg || 1) + 1)
	} );
	if( !par.disableAuto ){
		this.onscroll = D.closure( this, this._onScroll );
		$(window).scroll( this.onscroll );
	}
	this.node = par.node || document.getElementById(par.id);
	this._moreButton.append( this.node );
};

T.More.prototype = {

	_onScroll: function() {
		if( T.tour.open ){
			return;
		}
		if( this.pg > 2 ){
			this.pgLimit = 100;
		}
		if( ( ( this.pg + this.offset ) % this.pgLimit ) == 0 ){
			return;
		}
		var j = $(window);
		var h = j.scrollTop() + j.height();
		var morePos = D.position( this._moreButton.node );
		if( morePos.top && h + 400 >= morePos.top ){
			this.loadPage();
		}
	},

	loadPage:function(){
		if( this._loading ){
			return false;
		}
		this._loading = true;
		if( !this.noOverlay ){
			D.loadingOverlay( this.node );
		}
		var node = mkE( {
			tag:this.node.tagName
		} );
		D.insertBefore( node, this.node );
		if (this.par.load) {
			++ this.pg;
			this.par.load();
			this._onLoadPage();
			return false;
		}
		if( this.par.onLoad ){
			++ this.pg;
			if( this.par.onLoad() === false ){
				this.reset();
			}
			return false;
		}
		var get = new Get( this.par.url );
		get.add( 'pg', ++ this.pg );
		D.rq( get.toUrl(), node, {
			withoutLoading:true,
			replace:true,
			hash:this.hash,
			onload: D.closure(this, this._onLoadPage)
		} );
		return false;
	},

	_onLoadPage: function() {
		if( this.pgs && this.pgs == this.pg ){
			this.remove();
		}
		this.reset();
		if(this.par.callback) {
			eval(this.par.callback);
		}
		var get = new Get();
		this._moreButton.hrefSet('?' + get.add('pg', this.pg + 1));
	},

	remove:function(){
		$(window).unbind( 'scroll', this.onscroll );
		if( this._moreButton ) {
			this._moreButton.remove();
		}
	},

	reset:function(){
		this._loading = false;
		D.removeLoadingOverlay( this.node );
	}

};

// --- more.js ---

// +++ mosaic.js +++
T.Mosaic = function(width, noScalingForSquareImage){
	this.width = T.Mosaic.round(width);
	this.noScalingForSquareImage = noScalingForSquareImage;
	this._items = [];
	this.node = mkE( {
		tag:'span',
		className:'Mosaic',
		style:{
			width:this.width + 'px'
		}
	} );
};

T.Mosaic.WH = 0.84;

T.Mosaic.round = function(v){
	v = Math.floor(v);
	if( v % 2 ){
		-- v;
	}
	return v;
};

T.Mosaic.prototype.title = '';

T.Mosaic.prototype.margin = 2;

T.Mosaic.prototype.add = function(item){
	this._items.push(item);
};

T.Mosaic.prototype.draw = function(){
	switch( this._items.length ){
		case 1:
			///this.node.style.width = 'auto';
		case 2:
		case 3:
		case 4:
			this[ '_draw' + this._items.length ]();
			break;
		default:
			D.console.error( 'Mosaic - unsupported count', this._items.length );
			break;
	}
	this._sizes();
	for( var k in this._items ){
		this._items[k].append( this.node );
	}
	this._linksNode = mkE( {
		tag:'div',
		className:'MosaicLinks'
	} ).append( this.node );
	for( var k in this._items ){
		var item = this._items[k];
		item.clickNode.append( this._linksNode );
		var cns = item.clickNode.style;
		var ns = item.node.style;
		cns.width = ns.width;
		cns.height = ns.height;
		cns.marginLeft = ns.marginLeft;
		cns.marginTop = ns.marginTop;
	}
	if( this.title ){
		mkE( {
			tag:'div',
			className:'title',
			text:this.title
		} ).append( !this._items[1] ? this._items[0].node : this.node )
	}
};

T.Mosaic.prototype.append = function(parent){
	this.draw();
	this.node.append(parent);
	return this;
};

T.Mosaic.prototype.prepend = function(parent){
	this.draw();
	this.node.prepend(parent);
	return this;
};

T.Mosaic.prototype._sizes = function(){
	for( var k = 0; k < this._items.length; ++ k ){
		var item = this._items[k];
		if( !item.width || !item.height ){
			continue;
		}
		item.getNode();
		if( item.marginLeft ){
			item.node.style.marginLeft = item.node.style.marginLeft || this.margin + 'px';
			item.width -= this.margin;
		}
		if( item.marginTop ){
			item.node.style.marginTop = item.node.style.marginTop || this.margin + 'px';
			item.height -= this.margin;
		}
		var useGM = false;
		if( item.urlGM ){
			if( item.width == item.height && item.width <= 175 ){
				item.src( item.urlGM );
				useGM = true;
			} else if( item.width < 160 && item.height < 160 ){
				item.src( item.urlGM );
				useGM = true;
			}
		}
		// say size
		var r = Math.min( 500 / item.w, 500 / item.h );
		var w = item.w * r;
		var h = item.h * r;
		item.node.style.width = item.width + 'px';
		item.node.style.height = item.height + 'px';
		if( !useGM && !k && !item._img && item.width ){
			if( item.width / item.height > item.w / item.h ){
				if( item.width / w < 1.01 && item.width / w > 0.8 ){
					continue;
				}
			} else {
				if( item.height / h < 1.01 && item.height / h > 0.8 ){
					continue;
				}
			}
		}
		/*
		if( item.w > this.width ){
			item.width = Math.ceil( item.width / 4 ) * 4;
			item.height = Math.ceil( item.height / 4 ) * 4;
		}*/
		if( item.scale ){
			item.width = item.width * item.scale;
			item.height = item.height * item.scale;
		}
		if(useGM){
			if( item.width > item.height ){
				item.node.style.backgroundSize = item.width + 'px auto';
				if( item._img ){
					item._img.style.width = item.width + 'px';
					//item._img.style.marginTop = -T.Mosaic.round( ( item.width - item.height ) / 2 ) + 'px';
				}
			} else {
				item.node.style.backgroundSize = 'auto ' + item.height + 'px';
				if( item._img ){
					item._img.style.height = item.height + 'px';
					item._img.style.marginLeft = -T.Mosaic.round( ( item.height - item.width ) / 2 ) + 'px';
				}
			}
		} else {
			if( item.width / item.height > item.w / item.h ){
				item.node.style.backgroundSize = item.width + 'px auto';
				if( item._img ){
					item._img.style.width = item.width + 'px';
					var h = item.width / ( item.w / item.h );
					item._img.style.marginTop = -T.Mosaic.round( ( h - item.height ) / 3 ) + 'px';
				}
			} else {
				item.node.style.backgroundSize = 'auto ' + item.height + 'px';
				if( item._img ){
					item._img.style.height = item.height + 'px';
					var w = item.height * ( item.w / item.h );
					item._img.style.marginLeft = -T.Mosaic.round( ( w - item.width ) / 2 ) + 'px';
				}
			}
		}
	}
};

T.Mosaic.prototype._counts = function(){
	var re = {
		v:0,
		h:0
	};
	for( var k in this._items ){
		if( this._items[k].isVertical ){
			++ re.v;
		} else {
			++ re.h;
		}
	}
	return re;
};

T.Mosaic.prototype._draw1 = function(){
	var item = this._items[0];
	if( item.w < this.width && item.h < this.width * 0.666 ){
		item.width = item.w;
		item.height = item.h;
		return;
	}
	var wh = item.w / item.h;
	if( item.isVertical ){
		item.height = Math.min( item.h, 500 );
		item.width = T.Mosaic.round( (item.height / item.h) * item.w );
		/*item.width = Math.min( item.w, T.Mosaic.round( this.width / 2 ) );
		item.height = T.Mosaic.round( Math.min( item.width / wh, item.width / 0.666 ) );*/
		return;
	}
	if ( this.noScalingForSquareImage && item.w == item.h && this._items.length == 1) {
		item.width = Math.min(item.w, this.width);
		item.height = item.width;
	} else {
		item.width = Math.min(item.w, this.width);
		item.height = T.Mosaic.round(Math.min(item.width / wh, item.width * 0.666));
	}
};

T.Mosaic.prototype._draw2 = function(){
	if( this._items[0].isVertical != this._items[1].isVertical ){
		var w = T.Mosaic.round( this.width * ( this._items[0].isVertical ? 1/3 : 2/3 ) );
		this._items[0].width = w;
		this._items[1].width = this.width - w;
		var h = Math.max( this._items[0].width, this._items[1].width ) * T.Mosaic.WH;
		h = T.Mosaic.round(h);
		this._items[0].height = h;
		this._items[1].height = h;
		this._items[1].marginLeft = true;
		return;
	}
	var w = T.Mosaic.round( this.width / 2 );
	this._items[0].width = w;
	this._items[1].width = this.width - w;
	var h = ( this._items[0].isVertical ?  w / T.Mosaic.WH : w * T.Mosaic.WH );
	//h = Math.max( h, w );
	h = T.Mosaic.round(h);
	this._items[0].height = h;
	this._items[1].height = h;
	this._items[1].marginLeft = true;
};

T.Mosaic.prototype._draw3 = function(){
	var counts = this._counts();
	if( counts.v == 3 ){
		var w = T.Mosaic.round( this.width * 5/8 );
		this._items[0].width = w;
		var h = T.Mosaic.round( w / T.Mosaic.WH );
		this._items[0].height = h;
		w = this.width - w;
		this._items[1].width = w;
		this._items[1].height = h / 2;
		this._items[2].width = w;
		this._items[2].height = h - this._items[1].height;
		this._items[1].marginLeft = true;
		this._items[2].marginLeft = true;
		this._items[2].marginTop = true;
		return;
	}
	if( counts.h == 3 ){
		var w = T.Mosaic.round( this.width * 5/8 );
		var h = w;//Math.round( w * 3/4 );
		this._items[0].width = w;
		this._items[0].height = h;
		this._items[1].width = this.width - w;
		this._items[1].height = T.Mosaic.round( h / 2 );
		this._items[2].width = this.width - w;
		this._items[2].height = h - this._items[1].height;
		this._items[1].marginLeft = true;
		this._items[2].marginLeft = true;
		this._items[2].marginTop = true;
		return;
	}
	//if( !this._items[0].isVertical && counts.v == 2 ){
		var w = T.Mosaic.round( this.width / 2 );
		var h = T.Mosaic.round( w * T.Mosaic.WH );
		this._items[0].width = w;
		this._items[0].height = h;
		this._items[1].width = T.Mosaic.round( w / 2 );
		this._items[1].height = h;
		this._items[2].width = this.width - w - T.Mosaic.round( w / 2 );
		this._items[2].height = h;
		this._items[1].marginLeft = true;
		this._items[2].marginLeft = true;
		//return;
	//}
	/*
	var w = Math.round( this.width / 3 );
	this._items[0].width = w;
	this._items[0].height = w;
	this._items[1].width = w;
	this._items[1].height = w;
	this._items[2].width = this.width - w * 2;
	this._items[2].height = w;
	this._items[1].marginLeft = true;
	this._items[2].marginLeft = true;
	*/
};

T.Mosaic.prototype._draw4 = function(){
	for( var i = 1; i < 4; ++ i ){
		this._items[i].marginLeft = true;
	}
	var counts = this._counts();
	if( this._items[0].isVertical && !this._items[1].isVertical ){
		var w = T.Mosaic.round( this.width * 1/2 );
		var h = T.Mosaic.round( w / T.Mosaic.WH );
		this._items[0].width = w;
		this._items[0].height = h;
		var hp = 0;
		for( var i = 1; i < 4; ++ i ){
			this._items[i].width = this.width - w;
			if( this._items[i].isVertical ){
				hp += 2;
			} else {
				hp += 1;
			}
		}
		this._items[2].marginTop = true;
		this._items[3].marginTop = true;
		var partH = T.Mosaic.round( h / hp );
		var sumH = 0;
		for( var i = 1; i < 3; ++ i ){
			if( this._items[i].isVertical ){
				this._items[i].height = 2 * partH;
				sumH += 2 * partH;
			} else {
				this._items[i].height = partH;
				sumH += partH;
			}
		}
		this._items[3].height = h - sumH;
		return;
	}
	// 1. items landscape
	if( this._items[0].isVertical ){
		var w = T.Mosaic.round( this.width * 4/7 );
		var h = T.Mosaic.round( w / T.Mosaic.WH );
		this._items[0].width = w;
		this._items[0].height = h;
		var w2 = T.Mosaic.round( ( this.width - w ) / 2 );
		var h2 = T.Mosaic.round( h / 2 );
		this._items[1].width = this.width - w;
		this._items[1].height = h2;
		this._items[2].width = w2;
		this._items[2].height = h - h2;
		this._items[3].width = this.width - w - w2;
		this._items[3].height = h - h2;
		this._items[2].marginTop = true;
		this._items[3].marginTop = true;
		return;
	}
	var w = T.Mosaic.round( this.width * 2/3 );
	var h = T.Mosaic.round( w * T.Mosaic.WH );
	this._items[0].width = w;
	this._items[0].height = h;
	var w2 = T.Mosaic.round( ( this.width - w ) / 2 );
	var h2 = T.Mosaic.round( h / 2 );
	if( !this._items[1].isVertical && !this._items[2].isVertical && this._items[3].isVertical ){
		this._items[1].width = w2;
		this._items[1].height = h2;
		this._items[2].width = w2;
		this._items[2].height = h - h2;
		this._items[2].getNode().style.marginLeft = ( -w2 + this.margin ) + 'px';
		this._items[2].getNode().style.marginTop = ( h2 + this.margin ) + 'px';
		this._items[2].marginTop = true;
		//this._items[2].getNode().style.clear = 'right';
		this._items[3].width = this.width - w - w2;
		this._items[3].height = h;
		//this._items[3].getNode().style.marginTop = -h2 + 'px';
		return;
	}
	if( counts.h == 4 || !this._items[1].isVertical ){
		this._items[1].width = this.width - w;
		this._items[1].height = h2;
		this._items[2].width = w2;
		this._items[2].height = h - h2;
		this._items[3].width = this.width - w - w2;
		this._items[3].height = h - h2;
		this._items[2].marginTop = true;
		this._items[3].marginTop = true;
		return;
	}
	if( this._items[1].isVertical && this._items[2].isVertical && !this._items[3].isVertical ){
		this._items[1].width = w2;
		this._items[1].height = h2;
		this._items[2].width = this.width - w - w2;
		this._items[2].height = h2;
		this._items[3].width = this.width - w;
		this._items[3].height = h - h2;
		this._items[3].marginTop = true;
		return;
	}
	this._items[1].width = w2;
	this._items[1].height = h;
	w = this.width - w - w2;
	this._items[2].width = w;
	this._items[2].height = h2;
	this._items[3].width = w;
	this._items[3].height = h - h2;
	this._items[3].marginTop = true;
};

T.MosaicItem = function( url, w, h ){
	this.url = url;
	this.w = w;
	this.h = h;
	this.href = '';
	this.target = '';
	this.isVertical = h > w;
	this.onclick = function(){};
};

T.MosaicItem.prototype.append = function(parent){
	this.getNode().append(parent);
	return this;
};
T.MosaicItem.prototype.getNode = function(){
	if( this.node ){
		return this.node;
	}
	this.node = mkE( {
		tag:'div',
		className:'MosaicItem'
	} );
	this.clickNode = mkE( {
		tag:'a',
		href:this.href,
		prop:{
			onclick:D.closure( this, this._onclick )
		}
	} );
	if ( this.target ) {
		this.clickNode.target = this.target;
	}
	this.src( this.url );
	return this.node;
};
T.MosaicItem.prototype.getClickNode = function() {
	this.getNode();
	return this.clickNode;
};

T.MosaicItem.prototype._onclick = function(){
	return this.onclick();
};

T.MosaicItem.prototype.src = function(src){
	this.getNode();
	if( !this.scale || D.browser.name == 'Explorer' && D.browser.version < 9 ){
		if( !this._img ){
			this._img = mkE( {
				tag:'img'
			} ).append( this.node );
		}
		this._img.src = src;
		return;
		//this.node.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + src + "',sizingMethod='scale')";
	}
	this.node.style.backgroundImage = "url('" + src + "')";
};

// --- mosaic.js ---

// +++ pg.js +++
/**
 * JavaScript implementation of T::pg()
 *
 * Usage example:
 * var paginator = new T.Pg ({ container: document.getElementById("pgcont"), pgs: 10, callback: function(pg) { D.log(pg); } });
 *
 * @param par [<br>
 *   container [HTML object] - paginator container (required)
 *   pgs [int] - total pages
 *   pg [int] - current page
 *   callback [function] - function( pg ) {} - called on paginator page change
 *   backNext [bool] - show/hide back/next buttons (default: true)
 *   count [int] - count of pages to show in paginator (default: 7)
 * ]
 * @constructor
 */
T.Pg = function( par ) {

	// current page
	this.pg = par.pg || 1;

	// total pages
	this.pgs = par.pgs || 1;

	// pass to callback function current page
	this.callback = par.callback || function ( pg ) {};

	// back/next buttons
	this.backNext = typeof par.backNext != 'undefined' ? par.backNext : true;

	// page count show in paginator
	this.count = par.count || 7;

	// container of paginator
	this.container = par.container || false;

	this.node = mkE( {
		tag: 'div',
		className: 'navigBg'
	} );

	if( this.container ){
		clearNode( this.container );
		this.node.appendTo( this.container )
	}

	// make paginator
	this.draw();
};

T.Pg.prototype.nextPage = function() {
	if( this.pg == this.pgs ){
		return;
	}
	if( this.callback( this.pg + 1 ) === false ){
		return;
	}
	++ this.pg;
	this.draw();
};

T.Pg.prototype.prevPage = function() {
	if( this.pg <= 1 ){
		return;
	}
	if( this.callback( this.pg - 1 ) === false ){
		return;
	}
	-- this.pg;
	this.draw();
};

T.Pg.prototype.gotoPage = function( pg ) {
	if( this.callback(pg) === false ){
		return;
	}
	this.pg = pg;
	this.draw();
};

/**
 * @param {number} [v]
 * @returns {number}
 */
T.Pg.prototype.value = function(v){
	if( isset(v) && v > 0 && v <= this.pgs ){
		if( this.pg == v ){
			return this.pg;
		}
		this.pg = v;
		this.draw();
	}
	return this.pg;
};

T.Pg.prototype.draw = function () {
	var $this = this;
	if ( this.pgs < 2 ) {
		return;
	}
	var table_tr;
	clearNode( this.node );
	mkE({
		tag: 'table',
		className: 'navig',
		els: [
			table_tr = mkE({
				tag: 'tr'
			})
		]
	}).append( this.node );
	var get = new Get();
	if ( this.backNext ) {
		mkE({
			tag: 'td',
			className: this.pg == 1 ? 'hidden' : 'first',
			els: [
				mkE({
					tag: 'a',
					href: '?' + get.add('pg', this.pg - 1),
					text: D.Lang.get('pg_prev'),
					prop: {
						onclick: function() {
							$this.prevPage();
							return false;
						}
					}
				})
			]
		}).appendTo( table_tr );
	}

	var total = this.count;
	var pause = false;

	for ( var i = 1; i <= this.pgs; i++ ) {
		if ( total == 2 && i < ( this.pgs - 1 ) ) {
			pause = true;
		}
		if ( pause ) {
			var txt = '...';
			pause = false;
		} else {
			var txt = i;
		}

		var className = '';
		if ( i == 1 && ( i == this.pg || !this.backNext ) ) {
			className = this.pgs == 1 ? 'first last' : 'first';
		} else if ( i == this.pgs && ( i == this.pg || !this.backNext ) ) {
			className = 'last';
		}

		mkE({
			tag: 'td',
			className: className,
			els: [
				mkE({
					tag: 'a',
					className: this.pg == i ? 'active' : '',
					href: '?' + get.add('pg', i),
					text: txt,
					prop: {
						onclick: (function( ii ) {
							return function() {
								$this.gotoPage( ii );
								return false;
							};
						})( i )
					}
				})
			]
		}).appendTo( table_tr );

		total--;
		if ( i == 1 ) {
			i = Math.max( 1, Math.min( this.pgs - total, this.pg - 2 ) );
			if ( i > 1 ) {
				pause = true;
			}
		} else if ( total == 1 && i < this.pgs ) {
			i = this.pgs - 1;
		}
	}

	if ( this.backNext ) {
		mkE({
			tag: 'td',
			className: this.pg == this.pgs ? 'hidden' : 'last',
			els: [
				mkE({
					tag: 'a',
					href: '?' + get.add('pg', this.pg + 1),
					text: D.Lang.get('pg_next'),
					prop: {
						onclick: function() {
							$this.nextPage();
							return false;
						}
					}
				})
			]
		}).appendTo( table_tr );
	}
};

/**
 * @param {Node} parent
 * @returns {T.Pg}
 */
T.Pg.prototype.append = function(parent){
	this.node.append(parent);
	return this;
};

T.Pg.prototype.remove = function(){
	this.node.remove();
	return this;
};

// --- pg.js ---

// +++ time.js +++
T.Time = function(ts){
	this.ts = ts;
	this.node = document.createTextNode( D.ddate2(ts) );
	T.Time._init();
	if( D.TIME - ts > 3600*24 ){
		return;
	}
	this._id = ++ T.Time._instN;
	T.Time._insts[ this._id ] = this;
};

T.Time.prototype.append = function(parent){
	parent.appendChild( this.node );
	return this;
};

T.Time.prototype.remove = function(){
	removeNode( this.node );
	return this;
};

T.Time.prototype.update = function(){
	this.node.nodeValue = D.ddate2( this.ts );
};

T.Time._instN = 0;
T.Time._insts = {};

T.Time._init = function(){
	if( this._init.ok ){
		return;
	}
	this._init.ok = true;
	this._interval = setInterval( D.closure( this, this._onInterval ), 1000 );
	T.Time._n = 0;
};

T.Time._n = 0;

T.Time._onInterval = function(){
	++ this._n;
	for( var k in this._insts ){
		var time = this._insts[k];
		// cleanup
		if( this._n == 10 && $( time.node ).closest( document.body ).length == 0 ){
			delete this._insts[k];
			continue;
		}
		time.update();
	}
	if( this._n == 10 ){
		this._n = 0;
	}
};

// --- time.js ---

// +++ tooltipbox.js +++
T.ToolTipBox = function(){
	this.closeTimeout = 150;
	this.showTimeout = 200;
};

T.ToolTipBox.prototype.open = function( par ) {
	this.sender = par.sender;

	this.canClose = true;
	this.close(true);
	this.opened = true;
	this.parentOffset = 0;
	if( typeof par.parent == 'function' ){
		this.parentOffset = par.parent();
	}

	if( typeof par.offsetY == 'undefined' ){
		this.offsetY = 25;
	} else {
		this.offsetY = par.offsetY;
	}
	this.onClose = par.onClose || function(){};
	this.senderPosition = $(this.sender).offset();
	this.senderDimensions = {
		width:  $(this.sender).outerWidth(),
		height: $(this.sender).outerHeight()
	};
	this.x = par.x || D.position( this.sender ).left;
	this.y = par.y || D.position( this.sender ).top;
	this.location = par.location || 'bottom';
	if( this.node ){
		this.node.remove();
	}

	this.node = mkE( {
		tag:'div',
		prop:{
			className:'radius3 toolTipBox position-'+(this.location),
			style:{
				top:this.y + this.offsetY + 'px',
				width:( par.width ? par.width + 'px' : '' ),
				height:( par.height ? par.height + 'px' : '' ),
				zIndex:InfoBox.zIndex ++
			},
			onmouseover: D.closure(this, this._onmouseover),
			onmouseout: D.closure(this, this._onmouseout)
		},
		els:[
			this.content = mkE( {
				tag:'div'
			} ),
			this.arrow = mkE( {
				tag:'div',
				className:'arrow'
			} )
		]
	} );

	this.node.append( document.body );
	if( par.url ){
		this._load( par.url );
	} else if( par.html ) {
		this.content.innerHTML = par.html ? par.html : '';
	} else if( par.node ){
		par.node.append( this.content );
	}
	this.move();

	this.sender.onmouseout = D.closure(this, this._onmouseout);
};

T.ToolTipBox.prototype.openWithTimeout = function( par ) {
	this.sender = par.sender;

	this.showTimeoutID = setTimeout(D.closure(this, function() {
		this.open( par );
	}), this.showTimeout);

	this.sender.onmouseout = D.closure(this, function() {
		clearTimeout(this.showTimeoutID);
	});
};

T.ToolTipBox.prototype._onmouseover = function() {
	clearTimeout(this.closeTimeoutID);
	this.canClose = false;
};

T.ToolTipBox.prototype._onmouseout = function() {
	this.canClose = true;
	this.closeTimeoutID = setTimeout(D.closure(this, function() { this.close() }), this.closeTimeout);
};

T.ToolTipBox.prototype._load = function( url ) {
	if ( this.sender._ttbox2data ) {
		this.content.innerHTML = this.sender._ttbox2data.innerHTML;
	} else {
		rq( url, this.content, {
			hash:false,
			onload: D.closure(this, this._onLoadUrl)
		} );
	}
};

T.ToolTipBox.prototype._onLoadUrl = function() {
	this.move();

	// make data cache in node
	this.sender._ttbox2data = this.content;
};

T.ToolTipBox.prototype.close = function ( withoutEvent ) {
	if ( !this.canClose ) {
		return;
	}

	this.opened = false;

	if( this.node ){
		this.node.remove();
		if(!withoutEvent){
			this.onClose();
		}
	}
	this.onClose = function(){};
	clearTimeout(this.closeTimeoutID);
};

T.ToolTipBox.prototype.move = function () {
	var bxLeft = 0;
	var bxTop = 0;
	if (this.location == 'bottom') {
		this.arrow.style.left = '50%';
		this.arrow.style.marginLeft = '-6px';

		// ja teksts paardalaas divaas rindaas, tooltipu atteelo pie peles kursora
		var senderLineHeight = parseInt( $(this.sender).css('line-height').replace('px', ''), 10 );
		var top = 0;
		var offset = 0;
		if ( this.sender.offsetHeight > senderLineHeight ) {
			this.node.style.left = (this.senderPosition.left + (this.senderDimensions.width / 2)) - (this.node.offsetWidth / 2) + 'px';
			top = D.mouseY + $(document).scrollTop() - this.parentOffset + senderLineHeight;
			offset = senderLineHeight * 2;
			this.node.style.top = top + 'px';
		} else {
			this.node.style.left = this.senderPosition.left - ($(this.node).outerWidth() / 2) + (this.senderDimensions.width / 2) + 'px';
			top = D.mouseY + $(document).scrollTop() - this.parentOffset + this.offsetY;
			offset = this.offsetY + 5;
			this.node.style.top = top + 'px'; // reset top ( lai pareizi paraadiitu, ja bultinja ir apakshaa )
		}

		if( top - $(document).scrollTop() + this.node.offsetHeight > $(window).height() ){
			top -= offset;
			this.node.style.top = top - this.node.offsetHeight + 'px';
			addClassName( this.node, 'toolTipBoxAD' );
		} else {
			removeClassName( this.node, 'toolTipBoxAD' );
		}
	}

	if (this.location == 'top') {
		bxLeft = this.senderPosition.left - ($(this.node).outerWidth() / 2) + (this.senderDimensions.width / 2);
		bxTop = (this.senderPosition.top - $(this.node).outerHeight()) - this.offsetY;

		this.node.style.left = bxLeft + 'px';
		this.node.style.top = bxTop + 'px';

		var t = parseInt($(this.node).css('top'));
		if ($(window).scrollTop() - t > 0) {
			this.location = 'left';
			$(this.node).removeClass('position-top').addClass('position-left');
		}
	}

	if (this.location == 'right' || this.location == 'left') {
		var senderOffset = $( this.sender ).offset();
		var senderWidth = $( this.sender ).outerWidth();
		var location = this.location;
		var halfHeight = this.node.offsetHeight / 2;

		if (location == 'right' && senderOffset.left + this.sender.offsetWidth + this.node.offsetWidth - $(document).scrollLeft() > document.body.offsetWidth) {
			location = 'left';
		}

		if (location == 'left' && senderOffset.left < this.node.offsetWidth) {
			location = 'right';
		}

		if( location == 'left' ){
			addClassName( this.node, 'toolTipBoxLeft' );
			bxLeft = this.senderPosition.left - this.node.offsetWidth - 10;
		} else {
			addClassName( this.node, 'toolTipBoxRight' );
			bxLeft = this.senderPosition.left + senderWidth + 10;
		}

		bxTop = this.senderPosition.top - halfHeight - 7; // 7 = arrow / 2
		var senderHeight = this.senderDimensions.height;
		bxTop = bxTop + (senderHeight / 2);

		var topCorrection = 0;
		// paarbauda, vai neiet uz leju ekraanam
		if( bxTop + this.node.offsetHeight - $(document).scrollTop() > $(window).height() ){
			topCorrection = $(window).height() - (bxTop + this.node.offsetHeight - $(document).scrollTop());
			if (Math.abs(topCorrection) + 25 > halfHeight) {
				topCorrection = (halfHeight - 25) * -1;
			}
			bxTop += topCorrection;
		// paarbauda, vai neiet uz augshu ekraanam
		} else if (bxTop - $(document).scrollTop() < 0) {
			topCorrection = bxTop - $(document).scrollTop();
			if (Math.abs(topCorrection) + 25 > halfHeight) {
				topCorrection = (halfHeight - 25) * -1;
			}
			bxTop -= topCorrection;
			// lai bultinja buutu pareizaa vietaa
			topCorrection = topCorrection * -1;
		}

		this.arrow.style.top = halfHeight - topCorrection + 'px';
		this.node.style.left = bxLeft + 'px';
		this.node.style.top = bxTop + 'px';
	}
};

T.ToolTipBox.open = function( par ){
	if ( !par.sender._ttbox2data ) {
		T.ToolTipBox._inst = new T.ToolTipBox();
	}

	clearTimeout( this._inst.showTimeoutID );

	if ( par.withoutTimeout ) {
		this._inst.open( par );
	} else {
		this._inst.openWithTimeout( par );
	}

	return this._inst;
};

T.ToolTipBox.openTT = function( sender ) {
	if ( !sender._ttbox2data ) {
		T.ToolTipBox._inst = new T.ToolTipBox();
	}

	this._inst.open( { sender: sender, url: sender.rel } );
};

T.ToolTipBox.close = function(){
	this._inst.close();
};

// --- tooltipbox.js ---

// +++ tour.js +++
T.tour = {
	rpc: new RPC('/tour/app.php'),

	SMALL_WIDTH: 350,
	LARGE_WIDTH: 500,
	asInfoBox: false,

	_elNode: null,
	_elNodeTop: null,
	_elNodeHeight: 0,
	_pTop: 0,
	_parWidth: 0,
	_scrollOffset: 0,
	miniadsHeightHack: false,
	n: {},

	intro: function( section, step, par ) {
		var modal = new D.Modal({
			width: 400,
			title: par.title
		});

		var els = [];
		els.push( mkE({
			tag: 'div',
			className: 'tourIntroContent',
			innerHTML: par.html
		}) );

		els.push(
			mkE({
				tag: 'div',
				className: 'formFooter',
				els:[
					new T.Form.Button({
						caption: D.Lang.get('Start tour'),
						onclick: function() {
							modal.close();

							// hacks
							if ( section == 'miniads_wallet' && step == '' ) {
								D.MiniAds.showNewPagePopup({ tour: true });
								return;
							}

							T.tour.show(section, step);
						}
					}),
					new T.Form.Button({
						caption: D.Lang.get('close'),
						color: 'link',
						onclick: function() {
							modal.close();
						}
					})
				]
			})
		);

		modal.els( els );
	},

	show:function( section, step ){
		this.section = section;
		rq(
			'/tour/tour.php?section=' + section + ( step ? '&step=' + step : '' ),
			mkE({tag:'div'}),
			{
				onload:function( html ){
					if( !T.tour.infoboxContent ){
						return;
					}
					T.tour.infoboxContent.innerHTML = html;
					evalScriptHTML(html);
				},
				hash:false
			}
		);
	},

	open:false,

	crop:function( jquery, par ){
		var p = {
			top: 0,
			left: 0,
			width: this.SMALL_WIDTH,
			large: false,
			scrollOffset: 0,
			fixedEl: false,
			animate: true
		};
		par = par || {};
		O2O( p, par );
		if ( p.large && this.SMALL_WIDTH == p.width ) {
			p.width = this.LARGE_WIDTH;
		}
		this.fixedEl = p.fixedEl;
		this.animate = p.animate;
		this.width = p.width;
		this.noScroll = p.noScroll;
		this.close();

		// ja ir node, tad piesaista elementam
		// ja nav node, tad centree ekraanam
		var node = null;
		if ( jquery ) {
			var nodeJq = $( jquery );
			if ( nodeJq.length ) {
				node = nodeJq[0];
			}
		}
		if ( node ) {
			var pos = D.position( node );
			if ( p.fixedEl ) {
				//$( p.fixedEl ).scrollTop( pos.top - 100 );

				pos.left = pos.x - $( p.fixedEl ).scrollLeft();
				pos.top = pos.y - $( p.fixedEl ).scrollTop();
			}
			var node_ = {
				top:pos.top + p.top,
				left:pos.left + p.left,
				height:node.offsetHeight - p.top,
				width:node.offsetWidth - p.left
			};
			this._elNode = node;
			this._elNodeTop = pos.top;
			this._elNodeHeight = node.offsetHeight;
			this._pTop = p.top;
			this._parWidth = par.width;
			this.asInfoBox = false;
			this.miniadsHeightHack = par.miniadsHeightHack;
			if ( this.miniadsHeightHack ) {
				node.height += 20;
			}
		} else {
			this.asInfoBox = true;
		}
		var outermost = p.fillScreen ? document.documentElement : document.getElementById('outermost');
		this._scrollOffset = par.scrollOffset || 0;
		var offset = typeof par.offset == 'undefined' ? 10 : par.offset;
		this._parOffset = offset;
		var overlayStyle = {};
		if ( !this.asInfoBox ) {
			overlayStyle = {
				position: 'absolute',
				width:outermost.offsetWidth + 'px',
				height:outermost.offsetHeight + 'px'
			};
		}
		if ( par.withoutBG ) {
			overlayStyle.display = 'none';
		}
		if (!par.arrowBottom) { //sodien hacks
			this.overlays = [
				mkE( {
					tag:'div',
					className:'tourBg' + ( this.asInfoBox ? ' tourOverlay tourInfoBoxOverlay' : '' ),
					style: overlayStyle
				} )
			];
		} else {
			this.overlays = [];
		}

		if ( !this.asInfoBox && !par.withoutOverlay ) {
			this.overlays.push(
				this.n.overlayTop = mkE( {
					tag:'div',
					className:'tourOverlay',
					style:{
						left:'0',
						top:'0',
						width:outermost.offsetWidth + 'px',
						height:node_.top - offset + 'px'
					}
				} )
			);
			this.overlays.push(
				this.n.overlayLeft = mkE( {
					tag:'div',
					className:'tourOverlay',
					style:{
						left:'0',
						top:node_.top - offset + 'px',
						width:node_.left - offset + 'px',
						height:node_.height + offset * 2 + 'px'
					}
				} )
			);
			this.overlays.push(
				this.n.overlayRight = mkE( {
					tag:'div',
					className:'tourOverlay',
					style:{
						left:offset + node_.left + node_.width + 'px',
						top:node_.top - offset + 'px',
						width:outermost.offsetWidth - ( node_.left + node_.width ) - offset + 'px',
						height:node_.height + offset * 2 + 'px'
					}
				} )
			);
			this.overlays.push(
				this.n.overlayBottom = mkE( {
					tag:'div',
					className:'tourOverlay',
					style:{
						left:'0',
						top:node_.top + node_.height + offset + 'px',
						width:'100%',
						height:outermost.offsetHeight - ( node_.top + node_.height ) - offset + 'px'
					}
				} )
			);
		}
		var infoboxStyles = {
			position:'absolute',
			overflow:'visible',
			top:'auto',
			left:'auto',
			right:'auto',
			bottom:'auto'
		};
		if ( this.asInfoBox ) {
			infoboxStyles = {
				position:'fixed',
				overflow:'auto',
				top: 0,
				left: 0,
				right: 0,
				bottom: 0
			}
		}
		this.infobox = mkE( {
			tag:'div',
			className:'radius3 InfoBox InfoBoxReady tourBox' + ( p.large ? ' tourLarge' : '' ),
			prop:{
				style: infoboxStyles
			},
			els:[
				this.borderNode = mkE({
					tag:'span',
					className:'radius3 InfoBoxBorder',
					els:[
						{
							tag:'a',
							prop:{
								className:'tourClose closeIcon',
								href:'javascript:',
								onclick:function(){
									T.tour.close();
									if( par.onClose ){
										if(typeof par.onClose == 'string') {
											eval(par.onClose);
										} else if(typeof par.onClose == 'function') {
											par.onClose();
										}
									}
									return false;
								}
							}
						},
						this._infoBoxWrap = mkE( {
							tag:'div',
							className:'InfoBoxContentWrap'
						} )
					]
				})
			]
		} );
		this.overlays.push( this.infobox );

		if( this.infoboxContent ){
			$(this.infoboxContent).width(p.width);
			this.infoboxContent.append( this._infoBoxWrap );
		} else {
			this.infoboxContent = mkE( {
				tag:'div',
				prop:{
					id:'infobox3_box_content'
				},
				style:{
					width: p.width + 'px',
					height: 'auto'
				}
			} ).append( this._infoBoxWrap );
		}
		if( par.contentHTML ){
			this.infoboxContent.innerHTML = par.contentHTML;
			evalScriptHTML( par.contentHTML );
		} else if ( par.tourText ) {
			clearNode( this.infoboxContent );
			mkE({
				tag: 'div',
				className: 'tourContent',
				els:[{
					tag: 'p',
					className: 'tourText',
					innerHTML: par.tourText
				}]
			} ).append( this.infoboxContent );
		}
		var zIndex = ( ++ InfoBox.zIndex );
		for( var k in this.overlays ){
			this.overlays[k].append( document.body );
			this.overlays[k].style.zIndex = zIndex;
		}
		if ( !this.asInfoBox ) {
			if( par.position == 'top' ){
				node_.top -= 20;
				this.infobox.style.top = node_.top - this.infobox.offsetHeight + 'px';
				this.infobox.style.left = node_.left + (node.offsetWidth / 2) - (this.infobox.offsetWidth / 2) + 'px';
				addClassName( this.borderNode, 'tourArrowBottomFxd');
			}else if( pos.left < par.width && node_.left + node_.width > outermost.offsetWidth ){
				this.infobox.style.top = node_.top + node_.height + 50 + 'px';
				this.infobox.style.left = node_.left + 'px';
			} else {
				var nodeTop = node_.top + ( node_.height - 60 ) / 2;
				this.infobox.style.top = nodeTop  + 'px';
				if ( p.fixedEl ) {
					var screenHeight = $(window.top).height();
					var infoboxTopLeft = $(this.infobox).offset();
					var infoboxHeight = $(this.infobox).height();
					var infoboxBottom = infoboxTopLeft.top + infoboxHeight - $(document).scrollTop();
					if ( infoboxBottom > screenHeight ) {
						var bottomAlign = nodeTop - infoboxHeight + 50;
						if ( bottomAlign + infoboxHeight - $(document).scrollTop() > screenHeight ) {
							this.infobox.style.top = nodeTop - (infoboxBottom - screenHeight) + 'px';
						} else {
							this.infobox.style.top = nodeTop - $(this.infobox).height() + 50 + 'px';
						}

						addClassName( this.borderNode, 'tourArrowBottom' );
					}
				}

				if(node_.left + node_.width - 100 < outermost.offsetWidth / 2 ){
					this.infobox.style.left = node_.left + node_.width + 25 + 'px';
					addClassName( this.borderNode, 'tourArrowLeft' );
				} else {
					this.infobox.style.right = outermost.offsetWidth - node_.left + 25 + 'px';
					addClassName( this.borderNode, 'tourArrowRight' );
				}

				if (par.arrowBottom) {
					addClassName( this.borderNode, 'tourArrowBottomFxd');
				}
				if (par.offsetLeft) {
					this.infobox.style.left = node_.left + node_.width + 25 + (par.offsetLeft) + 'px';
				}
			}
			if ( !p.fixedEl && p.animate) {
				if( par.position == 'top' ){
					$('html, body').animate( { scrollTop:node_.top - this.infobox.offsetHeight - this._scrollOffset } );
				} else {
					$('html, body').animate( { scrollTop:node_.top - 100 - this._scrollOffset } );
				}
			}

			this._bindEvents();
		} else {
			D.Modal.hideBodyScroll();
			this._bindEventsIB();

			var wh = $(window).height();
			var marginTop = Math.max( 20, wh - this.infobox.offsetHeight ) / 2;
			var mt = parseInt( this.infobox.style.top );
			if( !mt || marginTop < mt ){
				this.infobox.style.top = marginTop + 'px';
			}
		}
		if( par.onclickClose ){
			this.onClick = function(){
				T.tour.close();
			};
			$( document.body ).click( this.onClick );
		}
		this.open = true;
	},

	cropl:function( jquery, par ){
		$( function(){
			T.tour.crop( jquery, par );
		} );
	},

	close:function(){
		if( this.onClick ){
			$( document.body ).unbind( 'click', this.onClick );
		}
		if ( this.asInfoBox ) {
			D.Modal.showBodyScroll();
			this._unbindEventsIB();
		} else {
			this._unbindEvents();
		}
		if( this.overlays ){
			for( var k in this.overlays ){
				this.overlays[k].remove();
			}
			this.overlays = [];
		}
		this.open = false;
	},

	next:function(){
		rq( '/tour/tour.php?section=' + this.section + '&step=' + this.nextStep, this.infoboxContent, { overlay:true, hash:false } );
		return false;
	},

	prev:function(){
		rq( '/tour/tour.php?section=' + this.section + '&step=' + this.prevStep, this.infoboxContent, { overlay:true, hash:false } );
		return false;
	},

	end:function(){
		if( T.tour.section == '' ){
			document.location.href = '/?closeTour';
		} else {
			rq( '/tour/tour.php?section='+ encodeURIComponent(T.tour.section)+'&end', this.infoboxContent, { hash:false } );
			this.close();
		}
	},

	init:function(){
		if( !D.ID ){
			return;
		}
		var get = new Get();
		if( get.v('tourStep') !== null ){
			T.tour.show( ( get.v('tour') || document.location.pathname.split('/')[1] ), get.v('tourStep') );
		}
	},

	// poziiciju resetoshana, ja mainaas noraadiitaa elementa augstuma poziicija
	_bindEvents: function() {
		this._resizeTO = setInterval( D.closure( this, this._reposition ), 100 );
		this._reposition();
	},

	_unbindEvents: function(){
		clearTimeout( this._resizeTO );
	},

	_reposition: function() {
		// fix: ja atveerta tuure un aiziet uz kaadu js sadalju, tad neljauj skrolleet
		if ( !this._elNode.offsetWidth ) {
			this.close();
			return;
		}

		var pos = D.position( this._elNode );
		if ( this._elNodeTop == pos.top && this._elNodeHeight == this._elNode.offsetHeight ) {
			return;
		}

		if ( this.fixedEl ) {
			$( this.fixedEl ).scrollTop( pos.top - 100 );

			pos.left = pos.x - $( this.fixedEl ).scrollLeft();
			pos.top = pos.y - $( this.fixedEl ).scrollTop();
		}

		var node_ = {
			top: pos.top + this._pTop,
			height: this._elNode.offsetHeight - this._pTop
		};
		if ( this.miniadsHeightHack ) {
			node_.height += 20;
		}

		var outermost = document.getElementById('outermost');
		if (this.n.overlayTop) {
			this.n.overlayTop.style.height    = node_.top - this._parOffset + 'px';
			this.n.overlayLeft.style.top      = node_.top - this._parOffset + 'px';
			this.n.overlayLeft.style.height   = node_.height + this._parOffset * 2 + 'px';
			this.n.overlayRight.style.top     = node_.top - this._parOffset + 'px';
			this.n.overlayRight.style.height  = node_.height + this._parOffset * 2 + 'px';
			this.n.overlayBottom.style.top    = node_.top + node_.height + this._parOffset + 'px';
			this.n.overlayBottom.style.height = outermost.offsetHeight - ( node_.top + node_.height ) - this._parOffset + 'px';
		}

		if( pos.left < this._parWidth && node_.left + node_.width > outermost.offsetWidth ){
			this.infobox.style.top = node_.top + node_.height + 50 + 'px';
		} else {
			var nodeTop = node_.top + ( node_.height - 60 ) / 2;
			this.infobox.style.top = nodeTop  + 'px';
			if ( this.fixedEl ) {
				var screenHeight = $(window.top).height();
				var infoboxTopLeft = $(this.infobox).offset();
				var infoboxHeight = $(this.infobox).height();
				var infoboxBottom = infoboxTopLeft.top + infoboxHeight - $(document).scrollTop();
				if ( infoboxBottom > screenHeight ) {
					var bottomAlign = nodeTop - infoboxHeight + 50;
					if ( bottomAlign + infoboxHeight - $(document).scrollTop() > screenHeight ) {
						this.infobox.style.top = nodeTop - (infoboxBottom - screenHeight) + 'px';
					} else {
						this.infobox.style.top = nodeTop - $(this.infobox).height() + 50 + 'px';
					}

					addClassName( this.borderNode, 'tourArrowBottom' );
				}
			}
		}

		if ( !this.fixedEl && !this.noScroll ) {
			$('html, body').animate( { scrollTop:node_.top - 100 - this._scrollOffset }, ( this.animate ? 400 : 0 ) );
		}else if( this.noScroll ){
			this.noScroll = false;
		}

		this._elNodeTop = pos.top;
	},

	// funkcijas kaa D.Modal- izpildaas pie asInfoBox
	_bindEventsIB: function() {
		this._resizeWin = D.closure( this, this._resizeIB );
		$(window).bind( 'resize', this._resizeWin );
		this._resizeTO = setInterval( D.closure( this, this._resizeIB ), 100 );
		this._resizeIB();
	},

	_unbindEventsIB: function(){
		$(window).unbind( 'resize', this._resizeWin );
		clearTimeout( this._resizeTO );
	},

	_resizeIB: function() {
		if( parseInt( this.infoboxContent.style.width ) ){
			this.infoboxContent.style.width = this.width + 'px';
		}
		var wh = $(window).height();
		var marginTop = Math.max( 20, wh - this.borderNode.offsetHeight ) / 2;
		var mt = parseInt( this.borderNode.style.top );
		if( !mt || marginTop < mt ){
			this.borderNode.style.top = marginTop + 'px';
		}
	},

	sendFeedback: function( par ) {
		var voteVal = $('input[name=feedbackVote]:checked').val();
		var vote = 0;
		if ( voteVal == 'y' ) {
			vote = 1;
		} else if ( voteVal == 'n' ) {
			vote = 2;
		}
		this.rpc.send('feedback', {
			tourName: par.tourName,
			vote: vote,
			feedback: document.getElementById('tourFeedback').value
		}, function() {
			par.callback();
		});
	}
};
$(document).ready( function(){
	setTimeout( function(){ // while loading ads
		T.tour.init();
	}, 1000 );
} );

// --- tour.js ---

// +++ other.js +++
T.tree = function( el ){
	$(el).closest('li').find('ul').toggle('fast', function(){$(this).closest('li').toggleClass('opened');});
};
// --- T.tree ---

// +++ filename icons +++
T.ext = function( filename ){
	var parts = filename.toLowerCase().split( '.' );
	var re = 'def';
	switch( parts[ parts.length - 1 ] ){
		case 'bmp':
		case 'jpg':
		case 'jpeg':
		case 'gif':
		case 'png':
		case 'wbmp':
		case 'psd':
			re = 'pic';
			break;
		case 'doc':
		case 'docx':
		case 'odt':
		case 'rft':
		case 'pages':
			re = 'doc';
			break;
		case 'xls':
		case 'ods':
		case 'numbers':
		case 'xlsx':
			re = 'xls';
			break;
		case 'mp3':
		case 'mp4':
		case 'wav':
		case 'ogg':
		case 'wma':
		case 'aif':
			re = 'mus';
			break;
		case 'ppt':
		case 'pot':
		case 'ppa':
		case 'pps':
		case 'pwz':
		case 'key':
			re = 'ppt';
			break;
		case 'pdf':
			re = 'pdf';
			break;
		case 'zip':
		case 'rar':
		case '7z':
			re = 'zip';
			break;
		case 'exe':
		case 'msi':
		case 'bat':
		case 'com':
		case 'dll':
			re = 'exe';
			break;
		case 'mov':
		case 'gp3':
		case 'gp4':
		case 'gp5':
		case '3gp':
		case 'qt':
		case 'avi':
		case 'mpg':
		case 'dvx':
		case 'wmv':
		case 'mpeg':
		case 'flv':
		case 'divx':
		case 'rm':
		case 'mkv':
			re = 'mov';
			break;
	}
	return D.PIMG + 'i/ext/small/' + re + '.png';
};
// -- filename icons ---

// +++ events +++
T.eventInfoBoxOnClose = function(){
	if( document.getElementById( 'eventserverList' ) ){
		rq( '/main/rq/events.php', 'eventserverList', {overlay:true, hash:false} );
		return;
	}
	if( document.getElementById( 'friendEvents' ) ){
		rq( '/account/rq/friends_events.php', 'friendEvents', {overlay:true, hash:false} );
		return;
	}
};
T.hideMyNormalEvent = function(evId){
	if( document.getElementById( 'eventserverList' ) ){
		rq('/main/rq/events.php?myevent=true&addfilter=0&typeoff=' + evId + '&' + Get.nonce(), 'eventserverList', {withoutLoading:true, hash:false});
	}
};
T.hideNormalEvent = function(evId) {
	if( document.getElementById( 'eventserverList' ) ){
		rq('/main/rq/events.php?addfilter=0&typeoff=' + evId + '&' + Get.nonce(), 'eventserverList', {withoutLoading:true, hash:false});
		//rq('/account/rq/my_events.php?typeoff='+evId+'&addfilter=true','eventserverList',{withoutLoading:true, hash:false});
	}
	//if( document.getElementById( 'friendEvents' ) ){
	//	rq('/account/rq/friends_events.php?action=typeoff&type=' + evId, 'friendEvents');
	//}

	//T.eventInfoBoxOnClose();
};
T.hideEvent = function(id, type, creator) {
	rq('/main/rq/events.php?addfilter=0&useroff=' + type + '&userId=' + creator + '&eventId=' + id + '&' + Get.nonce(), 'eventserverList', {withoutLoading:true, hash:false});
	T.eventInfoBoxOnClose();
};

// -- events ---

// +++ Business Poll +++
D.BizPoll = {
	setVote:function(id, answer) {
		document.getElementById('pollAnswer' + id).value = answer;
	},
	postPollVote:function(id) {
		var answer = parseInt(document.getElementById('pollAnswer' + id).value);
		var bid = parseInt(document.getElementById('pollBid' + id).value);
		if(answer > 0 && bid > 0) {
			rq('/rq/bizpolls.php?poll=' + id + '&answer=' + answer + '&bid=' + bid, 'sayBizPoll' + id, {withoutLoading:true, hash:false});
		}
		return false;
	},
	showResults:function(id) {
		rq('/rq/bizpolls.php?poll=' + id, 'sayBizPoll' + id, {withoutLoading:true, hash:false});
	}
};
// --- Business Poll ---

D.invitations = {
    rpc: new RPC( '/invitations/rq/app.php' ),

    _onChatEvent: function( data ) {
        T.realoadMyInvitations = true;

        var badge = $( '.badge', '#myInvitationsBox' )[0];
	    if( !badge ){
		    return;
	    }
        badge.className = badge.className.replace('off', 'on');
        var total = ( data.total > 10 ? '10+' : data.total );
        if ( !total ) {
            addClassName(badge, 'hidden');
        } else {
            removeClassName(badge, 'hidden');
            setNodeText(badge, total);
        }
    },
    accept: function( el, invitationId, extra) {
		extra = extra || {};
        el.onclick = function(){};
        this.rpc.send( 'accept', {
            id: invitationId,
			extra : extra
        }, D.closure(this, this._onAccept, invitationId) );
    },
	acceptFriendship: function(el, invitationId){
		var extra = {};
		$('.groups-' + invitationId).each(function(){
			if(this.checked){
				extra[this.value] = this.value;
			}
		});
		this.accept(el, invitationId, {groups : extra});
	},
    _onAccept: function(invitationId, re) {
        if ( re.error ) {
            if ( re.errorMsg ) {
                D.alert( re.errorMsg );
            }
            return;
        }

        document.location = re.redirect;
    },
    reject: function( el, invitationId ) {
        el.onclick = function(){};
        this.rpc.send( 'reject', {
            id: invitationId
        }, D.closure(this, this._onReject, invitationId) );
    },
    _onReject: function(invitationId, re) {
        if ( re.error ) {
            return;
        }

        var item = document.getElementById('invitationsItem_' + invitationId);
        var list = item.parentNode;
        $( item ).fadeOut( 'fast', function() {
            removeNode(item);

            var badge = $( '.badge', '#myInvitationsBox' )[0];
            if ( !re.total ) {
                addClassName(badge, 'hidden');
            } else {
                setNodeText( badge, (re.total > 10 ? '10+' : re.total) );
                removeClassName( badge, 'hidden' );
            }

            if ( !re.total && !list.childNodes.length ) {
                var viewMore = document.getElementById('myInvitationsWrapper');
                var cb = function() {

                    D.insertBefore( mkE( {
                        tag: 'p',
                        text: D.Lang.get('no_invites', 'xInvite')
                    } ), viewMore.firstChild );
                };
                if ( !D.onLoad('xInvite', cb) ) {
                    D.addLang( 'xInvite' );
                }
            }
        } );
    }
};

/* Friends & Groups */
D.friend = {
	rpc:new RPC( '/friend/rq/app.php' ),
	check : function(el, fid) {
		el.disabled = true;
		this.rpc.send(
			el.checked ? 'addToGroup' : 'delFromGroup',
			{fid:fid,gr:el.value},
			function(re) {
				el.disabled = false;
			}
		);
		$('#multiBox_' + fid + ' .multiCbxResult').html(D.Lang.get('Saved')).show();
		clearTimeout(el._timeout);
		el._timeout = setTimeout( function(){
			$('#multiBox_' + fid + ' .multiCbxResult').hide();
		}, 2000 );
		var caption = '';
		$('#multiBox_' + fid + ' li' ).each( function(){
			if( $( 'input', this )[0].checked ){
				if(caption){
					caption += ', ';
				}
				caption += $( 'span', this ).html();
			}
		} );
		if(!caption){
			caption = D.Lang.get('friend_is');
		}
		if( caption.length > 35 ){
			caption = caption.substr( 0, 35 ) + '...';
		}
		$('#multiBox_' + fid + ' .buttonC' ).html(caption);
	},
	remove : function(fid, gid) {
		this.rpc.send(
			'delFromGroup',
			{fid:fid,gr:gid},
			function(re) {
				D.reload();
			}
		);
	},
	clone : function(fid, gid) {
		this.rpc.send(
			'addToGroup',
			{fid:fid,gr:gid},
			function(re) {

			}
		);
	},
	'delete' : function(fid) {

	}
};

// +++ weather skin +++
function setTemp(){
	D.Weather.getWeather(null, null, _setTempData);
}

function _setTempGet(position){
	var lat = position.coords.latitude;
	var lon = position.coords.longitude;
	if( !D.store.get('chosen', 'weather') ){
		var rpc = new RPC('/skins/rq/app.php');
		rpc.send('trackLocationStats', {allow: true});
		D.store.set('chosen', true, 'weather');
	}
	D.Weather.getWeather(lat, lon, _setTempData);
}

function _setTempError(lat, lon, e){
	if( e.code && e.code == 1 ){
		if( !D.store.get('chosen', 'weather') ){
			var rpc = new RPC('/skins/rq/app.php');
			rpc.send('trackLocationStats', {});
			D.store.set('chosen', true, 'weather');
		}
	}
	D.Weather.getWeather(lat, lon, _setTempData);
}

function _setTempData(data){
	if( !data.cache || !D.ID ){
		D.onLoad('DR.skins', function(){
			var m = new DR.skins.GetUrl;
			m.id = 1;
			m.onLoad = function(){
				if( Section.getSkinId() != 1 ){
					return;
				}
				var url = new Get(m.re.url);
				url.add('async', '');
				Section.setSkin(url.toUrl());
			};
			m.call();
		})
	}
	$('#weather-skin-temp').html( ( data.temperature > 0 ? '+' : '' ) + String(data.temperature) + '<span>°</span>' );
}

function draugiemTemp(t){
	D.console.info(t);
	D.store.set( 'temp', t );
	D.store.set( 'tempT', new Date().getTime() );
	_setTempV(t);
}

function _setTempV(t){
	$('#weather-skin-temp').html( ( t > 0 ? '+' : '' ) + String(t) + '<span>°</span>' );
}
// --- weather skin ---

// +++ scroll top button +++
T.scrollButton = {

	init:function(){
		if( this._init ){
			return;
		}
		var node;
		if( D.chat && D.chat.notifyNode ){
			node = D.chat.notifyNode;
		} else {
			node = document.getElementById('chatContent');
		}
		if(!node){
			return;
		}
		if( this.node ){
			this.node.append(node);
			return;
		}
		this.node = mkE( {
			tag:'div',
			className:'scrollTopButton',
			style:{
				top:0
			},
			prop:{
				title:( D.Lang.exists('top') ? D.Lang.get('top') : '' ),
				onclick:function(){
					$('html,body').animate( { scrollTop:0 } );
					$(this).animate( { opacity:0, top:-100 }, function(){
						//this.style.top = '0px';
					} );
					var rpc = new RPC('/rq/app.php');
					rpc.send( 'userScrollToTop', {} );
				}
			}
		} ).append(node)
	},

	onscroll:function(el){
		var outer = document.getElementById('outermost');
		if(!outer){
			return;
		}
		var h = outer.offsetHeight;
		if( h < 500 ){
			return;
		}
		if( !this._init2 && $(el).scrollTop() < 200 ){
			return;
		}
		this._init2 = true;
		this.init();
		if( !this.node ){
			return;
		}
		if( $(el).scrollTop() > h / 2 || $(el).scrollTop() > 200 ){
			this.show();
			return;
		}
		this.hide();
	},

	show:function(){
		if( !this._visible ){
			this._visible = true;
			$( this.node ).css( { top:0, opacity:0 } ).animate( { top:-45, opacity:1 } );
		}
	},

	hide:function(){
		if( this._visible && !this._fadeout ){
			this._fadeout = true;
			$( this.node ).animate( { opacity:0, top:0 }, function(){
				T.scrollButton._visible = false;
				T.scrollButton._fadeout = false;
			} );
		}
	}
};
$(window).scroll( function(){ T.scrollButton.onscroll(this) } );
// --- scroll top button ---

// +++ custom scroll bar +++
/**
 * @class {T.ScrollBar}
 * @param {T.ScrollBarPar} par
 */
T.ScrollBar = Class(
	/**
	 * @lends {T.ScrollBar#}
	 */
	{
		/**
		 * @param {T.ScrollBarPar} par
		 * @constructs
		 */
		__construct: function(par){
			this.parent = par.parent;
			if( typeof this.parent == 'string' ){
				this.parent = document.getElementById(this.parent);
			}
			this.element = par.element;
			if( typeof this.element == 'string' ){
				this.element = document.getElementById(this.element);
			}
			this._onScroll = par.onScroll || D.doNothing;
			this.speed = par.speed || 30;
			this.native = par.native || false;
			this.nativeMac = par.nativeMac || false;
			this.direction = par.direction || T.ScrollBar.VERTICAL;
			if( isset(par.trackMargin) ){
				this.trackMargin = par.trackMargin;
			}else{
				this.trackMargin = this.direction === T.ScrollBar.VERTICAL ? 4 : 12;
			}
			this.showButtons = par.showButtons || false;
			this.buttonOffsetX = par.buttonOffsetX || 0;
			this.buttonOffsetY = par.buttonOffsetY || 0;
			this.scrollItemWidth = par.scrollItemWidth || 100;

			if( this.native || (window.navigator && window.navigator.platform.indexOf('Mac') > -1 && this.nativeMac) ){
			    this.native = true;
				this.initNative();
				return;
			}
			this.init();
		},

		initNative: function(){
			addClassName(this.parent, 'scrollBarParent scrollBarParentNative');
			addClassName(this.element, 'scrollBarContent');

			if( this.showButtons ){
				this.initButtons();
			}

			this.refresh();

			this._bindScrollEvent();
		},

		init: function(){
			this.track = mkE({
				tag: 'div',
				className: 'scrollBarTrack',
				els: [
					this.trackThumb = mkE({
						tag: 'div',
						className: 'scrollBarTrackThumb radius3',
						prop: {
							onmouseup: this.onMouseOut
						}
					})
				]
			}).append(this.parent);

			addClassName(this.parent, 'scrollBarParent');
			addClassName(this.parent, 'scrollBarParent' + ucfirst(this.direction));
			addClassName(this.element, 'scrollBarContent');

			if( this.showButtons ){
				this.initButtons();
			}

			this.refresh();
			this.bindEvents();
			$(window).trigger('scroll');
		},

		scrollToPercent: function ( percent ) {
			this.refresh();
			var scrollTop = this.parent.scrollTop = this.parent.scrollHeight / 100 * percent;
			this.parent.scrollTop = Math.min(this.elementHeight - this.parentHeight, scrollTop * this.speed);
			this.track.style.top = this.parent.scrollTop + 'px';
			this.trackThumb.style.top = (this.parent.scrollTop / this.elementHeight * this.parentHeight) + 'px';
			this._onScroll();
			$(window).trigger('scroll');
		},

		initButtons: function(){
			this._prevButton = mkE({
				tag: 'div',
				className: 'scrollBarButton scrollBarPrev',
				els: [
					T.svgIcon({
						icon: 'arrow-1-le',
						size: 24,
						fill: false
					})
				],
				style: {
					display: 'none'
				},
				onclick: this._scrollBack
			}).prepend(this.parent);
			this._nextButton = mkE({
				tag: 'div',
				className: 'scrollBarButton scrollBarNext',
				els: [
					T.svgIcon({
						icon: 'arrow-1-ri',
						size: 24,
						fill: false
					})
				],
				style: {
					display: 'none'
				},
				onclick: this._scrollForward
			}).append(this.parent);
		},

		_hideButtons: function(){
			if( !this.showButtons ){
				return;
			}
			this._prevButton.style.display = 'none';
			this._nextButton.style.display = 'none';
		},

		_showButtons: function(){
			if( !this.showButtons ){
				return;
			}
			this._prevButton.style.display = '';
			this._nextButton.style.display = '';
			this._positionButtons();
		},

		_positionButtons: function(left, animate){
			if( !this.showButtons ){
				return;
			}
			this._prevButton.style.display = '';
			this._nextButton.style.display = '';
			animate = animate === true;
			left = left || 0;
			this._prevButton.style.marginTop = this.buttonOffsetY - 16 + 'px';
			this._nextButton.style.marginTop = -16 + this.buttonOffsetY + 'px';
			if( animate ){
				$(this._prevButton).animate({left: left + this.buttonOffsetX + 'px'}, 250);
				$(this._nextButton).animate({left: left + this.parentSize - this._nextButton.offsetWidth - this.buttonOffsetX + 'px'}, 250);
			}else{
				this._prevButton.style.left = left + this.buttonOffsetX + 'px';
				this._nextButton.style.left = left + this.parentSize - this._nextButton.offsetWidth - this.buttonOffsetX + 'px';
			}

			if( left === this.elementSize - this.parentSize ){
				this._nextButton.style.display = 'none';
			}else{
				this._nextButton.style.display = '';
			}

			if( left === 0 ){
				this._prevButton.style.display = 'none';
			}else{
				this._prevButton.style.display = '';
			}
		},

		_scrollBack: function(){
			var currentWidth = this.parent.scrollLeft + this.parentSize;
			var visibleCount = Math.floor(currentWidth / this.scrollItemWidth);
			var viewportCount = Math.floor(this.parentSize / this.scrollItemWidth);
			var newCount = Math.max(0, visibleCount - viewportCount * 2);
			this.scrollTo(newCount * this.scrollItemWidth, true);
		},

		_scrollForward: function(){
			var currentWidth = this.parent.scrollLeft + this.parentSize;
			var visibleCount = Math.floor(currentWidth / this.scrollItemWidth);
			var totalCount = this.element.childNodes.length;
			this.scrollTo(Math.min(totalCount, visibleCount) * this.scrollItemWidth, true);
		},

		scrollTo: function(position, animate){
			animate = animate === true;
			if( this.direction === T.ScrollBar.VERTICAL ){
				position = Math.min(this.elementSize - this.parentSize, position);
				this.parent.scrollTop = position;
				if( !this.native ){
					this.track.style.top = this.parent.scrollTop + 'px';
					this.trackThumb.style.top = (position / this.elementSize * (this.parentSize - (this.trackMargin * 2))) + 'px';
				}
			}else{
				position = Math.min(this.elementSize - this.parentSize, position);
				if( animate ){
					$(this.parent).animate({scrollLeft: position}, 250);
					if( !this.native ){
						$(this.track).animate({left: position + 'px'}, 250);
						$(this.trackThumb).animate({left: (position / this.elementSize * (this.parentSize - (this.trackMargin * 2))) + 'px'}, 250);
					}
				}else{
					this.parent.scrollLeft = position;
					if( !this.native ){
						this.track.style.left = position + 'px';
						this.trackThumb.style.left = (position / this.elementSize * (this.parentSize - (this.trackMargin * 2))) + 'px';
					}
				}
			}
			this._positionButtons(position, animate);
		},

		scrollToEnd: function(animate){
			animate = animate === true;
			this.scrollTo(this.elementSize - this.parentSize, animate);
		},

		refresh: function(){
			if( this.direction === T.ScrollBar.VERTICAL ){
				this.parentSize = parseInt(this.parent.offsetHeight, 10);
				this.elementSize = parseInt(this.element.clientHeight, 10);
			}else{
				this.parentSize = parseInt(this.parent.offsetWidth, 10);
				this.elementSize = parseInt(this.element.clientWidth, 10);
			}
		    if( this.native || !this.parentSize || !this.elementSize ){
		        return;
		    }
			if( this.direction === T.ScrollBar.VERTICAL ){
				this.track.style.height = this.parentSize - (this.trackMargin * 2) + 'px';
			}else{
				this.track.style.width = this.parentSize - (this.trackMargin * 2) + 'px';
			}
			this.trackSize = Math.round(this.parentSize / this.elementSize * (this.parentSize - (this.trackMargin * 2)));
			if ( this.trackSize < 15 ) {
				this.trackSize = 15; // lai nebuutu mikroskopisks
			}
			if( isNaN(this.parentSize) ){
				return;
			}
			if( this.parentSize >= this.elementSize ){
				this._hideButtons();
				this.track.style.display = 'none';
			}else {
				this.track.style.display = '';
				this._showButtons();
			}
			if( this.direction === T.ScrollBar.VERTICAL ){
				this.trackThumb.style.height = this.trackSize + 'px';
				this.parent.scrollTop = Math.min(this.elementSize - this.parentSize, this.parent.scrollTop);
			}else{
				this.trackThumb.style.width = this.trackSize + 'px';
				this.parent.scrollLeft = Math.min(this.elementSize - this.parentSize, this.parent.scrollLeft);
			}
			var position = this.direction === T.ScrollBar.VERTICAL ? this.parent.scrollTop : this.parent.scrollLeft;
			this.scrollTo(position, false);
		},

		bindEvents: function(){
			$(this.parent).on('mousewheel DOMMouseScroll', this.onScroll);
			$(this.parent).on('touchstart', this.onTrackActivate);
			$(this.parent).on('touchmove', this.onMouseMove);
			$(this.parent).on('touchend', this.onMouseOut);

			this.trackActive = false;
			$(this.trackThumb).on('mousedown', this.onTrackActivate);

			$(window).on('mousemove.cscroll', this.onMouseMove);
			$(window).on('mouseup.cscroll', this.onMouseOut);
		},

		unbindEvents: function(){
			$(this.parent).off('mousewheel DOMMouseScroll');
			$(this.parent).off('touchstart');
			$(this.parent).off('touchmove');
			$(this.parent).off('touchend');

			this.trackActive = false;
			$(this.trackThumb).off('mousedown');

			$(window).off('mousemove.cscroll');
			$(window).off('mouseup.cscroll');
		},

		onScroll: function(e){
			this.refresh();
			e = window.event || e;
			if( !isset(e.wheelDelta) && !isset(e.detail) && e.originalEvent && (isset(e.originalEvent.wheelDelta) || isset(e.originalEvent.detail)) ){
				e = e.originalEvent;
			}
			var wheelDelta = e.wheelDelta || 0;
			var detail = e.detail || 0;
			var delta = Math.max(-1, Math.min(1, (wheelDelta || -detail)));
			if( e.webkitDirectionInvertedFromDevice ){
				delta *= -1;
			}
			var currentScroll;
			if( this.direction === T.ScrollBar.VERTICAL ){
				currentScroll = this.parent.scrollTop;
			}else{
				currentScroll = this.parent.scrollLeft;
			}
			var newScroll = Math.min(this.elementSize - this.parentSize, currentScroll - delta * this.speed);
			newScroll = Math.max(0, newScroll);
			this.scrollTo(newScroll);
			this._onScroll();
			if( e.preventDefault ){
				e.preventDefault();
			}else{
				e.returnValue = false;
			}
			$(window).trigger('scroll');
		},

		onTrackActivate: function(e){
			e = D.event(e);
			var touches = e.touches || (e.originalEvent ? e.originalEvent.touches : null);
			if( touches && touches.length > 1) {
				this.trackActive = false;
				return;
			}else if( touches ){
				if( this.direction === T.ScrollBar.VERTICAL ){
					this.mousePosition = touches[0].screenY * -1;
				}else{
					this.mousePosition = touches[0].screenX * -1;
				}
			}else {
				if( this.direction === T.ScrollBar.VERTICAL ){
					this.mousePosition = e.screenY;
				}else{
					this.mousePosition = e.screenX;
				}
			}
			this.trackActive = true;
			if( touches ){
				return;
			}
			if( e.preventDefault ){
				e.preventDefault();
			}else{
				e.returnValue = false;
			}
		},

		onMouseMove: function(e){
			if( !this.trackActive ){
				return;
			}
			e = D.event(e);
			var touches = e.touches || (e.originalEvent ? e.originalEvent.touches : null);
			if( touches && touches.length > 1 ){
				this.trackActive = false;
				return;
			}
			var ratio = this.parentSize / this.trackSize;
			var pos;
			if( this.direction === T.ScrollBar.VERTICAL ){
				pos = touches ? touches[0].screenY * -1 : e.screenY;
			}else{
				pos = touches ? touches[0].screenX * -1 : e.screenX;
			}
			var delta = pos - this.mousePosition;
			this.mousePosition = pos;
			if( this.direction === T.ScrollBar.VERTICAL ){
				var top = Math.min(this.parent.scrollTop + delta * ratio, this.elementSize - this.parentSize);
				top = Math.max(top, 0);
				this.scrollTo(top);
			}else{
				var left = Math.min(this.parent.scrollLeft + delta * ratio, this.elementSize - this.parentSize);
				left = Math.max(left, 0);
				this.scrollTo(left);
			}
			this._onScroll();
			if( this.direction === T.ScrollBar.VERTICAL ){
				if( touches && (this.parent.scrollTop + this.parentSize == this.elementSize || this.parent.scrollTop == 0 ) ){
					return true;
				}
			}else{
				if( touches && (this.parent.scrollLeft + this.parentSize == this.elementSize || this.parent.scrollLeft == 0 ) ){
					return true;
				}
			}
			if( e.preventDefault ){
				e.preventDefault();
			}else{
				e.returnValue = false;
			}
		},

		onMouseOut: function(){
			if( !this.trackActive ){
				return;
			}
			this.trackActive = false;
		},

		_bindScrollEvent: function(){
			$(this.parent).on('scroll.cscroll', this._onParentScroll);
		},

		_unbindScrollEvent: function(){
			$(this.parent).off('scroll.cscroll');
		},

		_onParentScroll: function(){
			var position;
			if( this.direction === T.ScrollBar.VERTICAL ){
				position = this.parent.scrollTop;
			}else{
				position = this.parent.scrollLeft;
			}
			this._positionButtons(position);
			this._onScroll();
		},

		remove: function(){
			this.track.remove();
			removeClassName(this.parent, 'scrollBarParent');
			removeClassName(this.parent, 'scrollBarParent');
			removeClassName(this.element, 'scrollBarContent');
			this.unbindEvents();
			this._unbindScrollEvent();
		}
	}
);
T.ScrollBar.VERTICAL = 'vertical';
T.ScrollBar.HORIZONTAL = 'horizontal';

/**
 * @class {T.ScrollBarPar}
 */
T.ScrollBarPar = Class(
	/**
	 * @lends {T.ScrollBarPar#}
	 */
	{
		parent: null,
		element: null,
		onScroll: D.doNothing,
		speed: 30,
		native: false,
		nativeMac: false,
		direction: T.ScrollBar.VERTICAL,
		trackMargin: 0,
		showButtons: false,
		buttonOffsetX: 0,
		buttonOffsetY: 0,
		scrollItemWidth: 100
	}
);
// --- custom scroll bar ---
// --- other.js ---

// +++ dropdown.js +++
// +++ DropDown +++
T.DropDownBase__par = function() {
	this.els = [];
};
T.DropDownBase__par.prototype.caption = '';
T.DropDownBase__par.prototype.onHover = '';
T.DropDownBase__par.prototype.withoutHideDelay = '';
T.DropDownBase__par.prototype.withoutArrow = '';
T.DropDownBase__par.prototype.withoutPadding = false;
T.DropDownBase__par.prototype.align = 'left';
T.DropDownBase__par.prototype.els = [];
T.DropDownBase__par.prototype.onShow = D.doNothing;

/**
 * @extends {mkE.Base}
 * @param {T.DropDownBase__par} par
 * @constructor
 */
T.DropDownBase = function(par){
	par = par || {};
	this._showOnHover = false;
	this._onHover = par.onHover;
	this._withoutDelay = par.withoutHideDelay;
	this._withoutArrow = par.withoutArrow;
	this._withoutPadding = par.withoutPadding;
	this._align = par.align;
	this._forceTop = par.forceTop;
	this._forceBottom = par.forceBottom;
	this._onShow = par.onShow;
	this._disabled = false;
	this._onEmptyOpen = par.onEmptyOpen || D.doNothing;
	this.node = mkE( {
		tag:'span',
		className:'ddMenu' + (this._withoutArrow ? ' ddMenuNoArrow' : ''),
		els:[
			this._captionNode = mkE( {
				tag:'span',
				className:'ddMenuCaption'
			} )
		],
		prop:{
			onclick:D.closure( this, this._onclick ),
			onmouseenter:D.closure( this, this._onmouseover ),
			onmouseleave:D.closure( this, this._onmouseout )
		}
	} );
	if ( par.caption ) {
		this.setCaption( par.caption );
	}
	this.menuNode = mkE( {
		tag:'div',
		className:'ddMenuList radius3' + (this._withoutPadding ? ' ddMenuNoPadding' : ''),
		prop:{
			onmouseenter:D.closure( this, this._onmouseover ),
			onmouseleave:D.closure( this, this._onmouseout )
		},
		style:{
			position:'absolute'
		},
		els:[
			this._menuItemsNode = mkE( {
				tag:'div',
				els:par.els || []
			} )
		]
	} );
};

T.DropDownBase.prototype = new mkE.Base;

T.DropDownBase.prototype.appendChild = function(child){
	child.append( this._menuItemsNode );
	return this;
};

T.DropDownBase.prototype._onclick = function(e){
	D.stopPropagation(e);
	if(this._menuVisible) {
		this.hideMenu();
		return;
	}
	this._showOnHover = true;
	this._onmouseover();
};

T.DropDownBase.prototype._onmouseover = function(){
	if( this._hideTimeout ){
		clearTimeout(this._hideTimeout);
	}
	if( this._disabled ){
		return;
	}
	if( !this._showOnHover && !this._onHover ){
		return;
	}
	if ( !this._menuItemsNode.childNodes.length ) {
		this._onEmptyOpen();
		return;
	}
	this._position();
};

T.DropDownBase.prototype._position = function(){
	var pos = D.position( this.node );
	var scrollTop = document.body.scrollTop || document.documentElement.scrollTop || 0;
	if( !this._menuVisible ){
		this.menuNode.style.minWidth = Math.max(this.node.offsetWidth, 150) + 'px';
		this.menuNode.style.zIndex = ++ InfoBox.zIndex;
		this.menuNode.append( document.body );
		this._menuVisible = true;
	}
	if( this._forceTop ){
		this.menuNode.style.bottom = document.documentElement.offsetHeight - pos.top + 5 + 'px';
		this.menuNode.style.top = '';
	} else if ( this._forceBottom ) {
		this.menuNode.style.top = pos.top + this.node.offsetHeight + (InfoBox.opened ? scrollTop : 0) + 5 + 'px';
		this.menuNode.style.bottom = '';
	} else if( pos.top + this.node.offsetHeight + this.menuNode.offsetHeight > window.innerHeight + scrollTop - 20 ){
		this.menuNode.style.top = pos.top - this.menuNode.offsetHeight - 5 + 'px';
		this.menuNode.style.bottom = '';
	}else{
		this.menuNode.style.top = (!InfoBox.opened ? 0 : scrollTop) + pos.top + this.node.offsetHeight + 5 + 'px';
		this.menuNode.style.bottom = '';
	}
	if( this._align == 'right' ){
		this.menuNode.style.right = '';
		this.menuNode.style.left = pos.left - this.menuNode.offsetWidth + this.node.offsetWidth + 'px';
	}else{
		this.menuNode.style.right = '';
		this.menuNode.style.left = pos.left + 'px';
	}
	addClassName(this.node, 'ddMenuActive');
	this._onShow();
	clearTimeout( this._hideTimeout );
};

T.DropDownBase.prototype._onmouseout = function(){
	clearTimeout( this._hideTimeout );
	if( this._withoutDelay ){
		this._hideTimeout = setTimeout( D.closure( this, this.hideMenu ), 5 );
	}else{
		this._hideTimeout = setTimeout( D.closure( this, this.hideMenu ), 300 );
	}
};

T.DropDownBase.prototype.hideMenu = function(){
	clearTimeout( this._hideTimeout );
	this.menuNode.remove();
	this._menuVisible = false;
	this._showOnHover = false;
	removeClassName(this.node, 'ddMenuActive');
	return this;
};

T.DropDownBase.prototype.setCaption = function(v){
	clearNode( this._captionNode );
	mkE.appendTypeElement( this._captionNode, v );
	return this;
};

T.DropDownBase.prototype.disable = function(v){
	this._disabled = Boolean(v);
	return this._disabled;
};
// --- DropDown ---

// +++ DropDownDefault +++
T.DropDown__par = function( par ) {
	this.items = [];
	O2O( this, par || {} );
};
T.DropDown__par.prototype.caption = '';
T.DropDown__par.prototype.selectable = true;
T.DropDown__par.prototype.visible = true;
T.DropDown__par.prototype.onHover = false;
T.DropDown__par.prototype.withoutHideDelay = false;
T.DropDown__par.prototype.forceTop = false;
T.DropDown__par.prototype.forceBottom = false;
T.DropDown__par.prototype.withoutArrow = false;
T.DropDown__par.prototype.ignoreCaption = false;
T.DropDown__par.prototype.items = [];

/**
 * @extends {mkE.Base}
 * @param {T.DropDown__par} par
 * @constructor
 */
T.DropDown = function( par ) {
	par = new T.DropDown__par( par );
	this._items = [];
	this.ignoreCaption = par.ignoreCaption;
	var p = new T.DropDownBase__par;
	var k, l;
	if ( empty(par.caption) ){
		for ( k = 0, l = par.items.length; k < l; k++ ) {
			if ( par.items[k].selected ) {
				par.caption = par.items[k].caption;
				break;
			}
		}
		var first = reset( par.items );
		if ( empty( par.caption ) && first ) {
			par.caption = first.caption;
		}
	}
	p.caption = par.caption;
	p.onHover = par.onHover;
	p.withoutHideDelay = par.withoutHideDelay;
	p.withoutArrow = par.withoutArrow;
	p.forceTop = par.forceTop;
	p.forceBottom = par.forceBottom;
	this._dropDown = new T.DropDownBase( p );
	if ( par.selectable ) {
		addClassName( this._dropDown.menuNode, 'ddMenuSelectable' );
	}
	for ( k = 0, l = par.items.length; k < l; k++ ) {
		this.addItem( par.items[k] );
	}
	this.node = this._dropDown.node;
	if ( !par.visible ) {
		addClassName( this.node, 'hidden' );
	}
};

T.DropDown.prototype = new mkE.Base;
T.DropDown.prototype._items = [];

T.DropDown.prototype.show = function() {
	removeClassName( this.node, 'hidden' );
};
T.DropDown.prototype.hide = function() {
	addClassName( this.node, 'hidden' );
};
T.DropDown.prototype.setCaption = function( caption ) {
	this._dropDown.setCaption( caption );
	var item;
	for ( var k = 0, l = this._items.length; k < l; k++ ) {
		if ( this._items[k].caption == caption ) {
			item = this._items[k];
		}
		removeClassName( this._items[k].node, 'ddMenuSelected' );
	}
	addClassName( item.node, 'ddMenuSelected' );
};
T.DropDown.prototype.addItem = function( item ) {
	item._dd = this;
	this._items.push( item );
	item.append( this._dropDown );
};
T.DropDown.prototype.selectItem = function( item ) {
	if( !this.ignoreCaption ){
		this.setCaption( item.caption );
	}
	this._dropDown.hideMenu();
};
T.DropDown.prototype.hideMenu = function(){
	this._dropDown.hideMenu();
};

T.DropDown.prototype.hideMenu = function(){
	this._dropDown.hideMenu();
};

T.DropDownItem__par = function( par ) {
	this.els = [];
	O2O( this, par || {} );
};
T.DropDownItem__par.prototype.caption = '';
T.DropDownItem__par.prototype.className = '';
T.DropDownItem__par.prototype.href = '';
T.DropDownItem__par.prototype.selectable = true;
T.DropDownItem__par.prototype.selected = false;
T.DropDownItem__par.prototype.els = [];
/** @type {Function} */
T.DropDownItem__par.prototype.onclick = function(){};

/**
 * @extends {mkE.Base}
 * @param {T.DropDownItem__par} par
 * @constructor
 */
T.DropDownItem = function( par ) {
	par = new T.DropDownItem__par( par );
	this.caption = par.caption || '';
	this.node = mkE( {
		tag: 'div',
		className: 'ddMenuListItem',
		els: [ {
			tag: 'a',
			innerHTML: this.caption || '&nbsp;',
			href: par.href || 'javascript:'
		} ],
		prop: {
			onclick: D.closure( this, this._click )
		}
	} );
	mkE.appendTypeElement( this.node, par.els );
	if ( par.className ) {
		addClassName(this.node, par.className);
	}
	if ( par.selected ) {
		par.selectable = true;
		addClassName(this.node, 'ddMenuSelected');
	}
	this.onclick = par.onclick;
};
T.DropDownItem.prototype = new mkE.Base;
T.DropDownItem.prototype._click = function() {
	if(this.onclick() === false) {
		return false;
	}
	if ( this._dd ) {
		this._dd.selectItem(this);
	}
};

/**
 * @extends {mkE.Base}
 * @constructor
 */
T.DropDownSep = function() {
	this.node = mkE( {
		tag: 'div',
		className: 'ddMenuListSep'
	} );
};
T.DropDownSep.prototype = new mkE.Base;

/**
 * @extends {mkE.Base}
 * @param {Object} par
 * @constructor
 */
T.DropDownGroupTitle = function(par) {
	this.node = mkE({
		tag: 'div',
		className: 'ddMenuListItem ddMenuListTitle',
		text: par.caption || ''
	});
};
T.DropDownGroupTitle.prototype = new mkE.Base;
// --- DropDownPerm ----

// +++ DropDownPerm +++
T.DropDownPerm = function(par){
	par = par || {};
	this.permWindow = par.permWindow || false;
	this._perm = new T.Form.Permissions( {
		onchange:D.closure( this, this._onchange )
	} );
	var p = new T.DropDownBase__par;
	p.align = 'right';
	p.forceBottom = true;
	if( this.permWindow ){
		p.onEmptyOpen = D.closure(this, this._onEmptyOpen);
	}else{
		p.onShow = D.closure(this, this._onShow);
		p.els = [
			{
				tag:'form',
				els:[
					this._perm
				]
			}
		];
	}
	this._dropDown = new T.DropDownBase(p);
	this.node = this._dropDown.node;
	if( par.value ){
		this.value( par.value );
	}
	if( par.onchange ){
		this.onchange = par.onchange;
	}
	this.setCaption();
};

T.DropDownPerm.prototype = new mkE.Base;

T.DropDownPerm.prototype.value = function(v){
	if(isset(v)){
		this._perm.value(v);
		this.setCaption();
	}
	return this._perm.value();
};

T.DropDownPerm.prototype.setCaption = function(){
	this._dropDown.setCaption( mkE({
		tag: 'span',
		text: this._perm.toStr(),
		style: {
			whiteSpace: 'nowrap'
		}
	}) );
};

T.DropDownPerm.prototype._onchange = function(){
	this.setCaption();
	if( !this._perm.frGroups() ){
		this._dropDown.hideMenu();
	}else if(!this.permWindow){
		this._onShow();
	}
	$(this).trigger('change');
};

T.DropDownPerm.prototype.onchange = function(){
};

T.DropDownPerm.prototype._onEmptyOpen = function(){
	var w = D.newWindow( '/say/ext/like_permissions.php?perm=' + this.value(), 'sayPermissions', {
		resizable:false,
		scrollbars:false,
		toolbar:false,
		directories:false,
		width:310,
		height:400
	} );
	if( window.screen ){
		w.moveTo( screen.width / 2 - 200, screen.height / 2 - 173 );
	}
};

T.DropDownPerm.prototype._onShow = function(){
	if( typeof saySend != 'function' ){
		return;
	}
	var height = this._dropDown.menuNode.offsetHeight;
	if( this._perm.frGroups() ){
		height = 350;
	}
	saySend({
		action: 'resize',
		height: document.body.offsetHeight + height
	});
	if( !this._positioned ){
		this._positioned = true;
		this._dropDown._position();
	}
};
// --- DropDownPerm ----


// T.Options
T.Options = function(par){
	par = par || {};
	this.node = mkE( {
		tag:'div',
		className:'Options radius3',
		prop:{
			onmouseout:D.closure( this, this._onmouseout ),
			onmouseover:D.closure( this, this._onmouseover ),
			onclick:D.stopPropagation
		}
	} );
	if( par.left ){
		addClassName(this.node, 'OptionsLeft');
	}
	if( par.top ) {
		addClassName(this.node, 'up');
	}
	this._remove = D.closure( this, this.remove );
	this._onRemove = par.onRemove || D.doNothing;
	this._onShow = par.onShow || D.doNothing;
};

T.Options.prototype.isVisible = function(){
	return this.node.offsetHeight > 0;
};

T.Options.prototype.append = function(parent){
	if( T.Options._last ){
		T.Options._last.remove();
	}
	T.Options._last = this;
	this.node.append(parent);
	this._bindTO = setTimeout( D.closure( this, function(){
		$( document.body ).bind( 'click', this._remove );
	} ), 100 );
	this._onShow();
	return this;
};

T.Options.prototype.remove = function(){
	//return;
	clearTimeout( this._bindTO );
	$( document.body).unbind( 'click', this._remove );
	this.node.remove();
	this._onRemove();
};

T.Options.prototype.toggle = function(parent){
	if( this.node.parentNode == parent ){
		this.remove();
		return;
	}
	this.append(parent);
};

T.Options.prototype._onmouseout = function(){
	this._removeTO = setTimeout( D.closure( this, this.remove ), 3000 );
};

T.Options.prototype._onmouseover = function(){
	clearTimeout( this._removeTO );
};

/**
 * @param {T.Options.Item} item
 */
T.Options.prototype.addItem = function(item){
	item._dropDown = this;
	item.node.append( this.node );
};

T.Options.prototype.addSep = function(){
	mkE( {
		tag:'div',
		className:'itemSep'
	} ).append( this.node );
};

T.Options.prototype.openUp = function(v){
	if( v ){
		addClassName(this.node, 'openUp');
	}else{
		removeClassName(this.node, 'openUp');
	}
};

// +++ Item
T.Options.Item = function(par){
	this.onmouseover = par.onmouseover || D.doNothing;

	this.node = mkE( {
		tag:'div',
		className:'OptionsItem',
		onclick:D.closure( this, this._onclick ),
		onmouseover:D.closure( this, this._onmouseover )
	} );
	this.caption(par.caption);
	if( par.title ){
		this.setTitle(par.title);
	}
	this.onclick = par.onclick || this.onclick;
};

T.Options.Item.prototype.remove = function(){
	this.node.remove();
};

/** @type {null|T.Options} */
T.Options.Item.prototype._dropDown = null;

T.Options.Item.prototype.onclick = D.doNothing;

T.Options.Item.prototype._onclick = function(e){
	D.stopPropagation(e);
	this._dropDown.remove();
	this.onclick();
	return false;
};

T.Options.Item.prototype._onmouseover = function(e){
	this.onmouseover();
};
T.Options.Item.prototype.caption = function(caption){
	clearNode(this.node);
	mkE.appendTypeElement(this.node, caption);
};
T.Options.Item.prototype.setTitle = function(title){
	this.node.setAttribute('title', title)
};
// --- dropdown.js ---

// +++ icon_list.js +++
T.IconListItemPar = function(){
};

T.IconListItemPar.prototype.caption = '';
/**
 * @param v
 * @returns {T.IconListItemPar}
 */
T.IconListItemPar.prototype.setCaption = function(v){
	this.caption = v;
	return this;
};
T.IconListItemPar.prototype.href = '';
/**
 * @param v
 * @returns {T.IconListItemPar}
 */
T.IconListItemPar.prototype.setHref = function(v){
	this.href = v;
	return this;
};
T.IconListItemPar.prototype.icon = '';
/**
 * @param v
 * @returns {T.IconListItemPar}
 */
T.IconListItemPar.prototype.setIcon = function(v){
	this.icon = v;
	return this;
};
/** @type {Function} */
T.IconListItemPar.prototype.onclick = null;
/**
 * @param v
 * @returns {T.IconListItemPar}
 */
T.IconListItemPar.prototype.setOnclick = function(v){
	this.onclick = v;
	return this;
};
/**
 * @param {T.IconListItemPar|Object} [par]
 * @constructor
 */
T.IconListItem = function(par){
	par = par || new T.IconListItemPar;
	this.node = mkE( {
		tag:'li',
		els:[
			this._a = mkE( {
				tag:'a',
				prop:{
					onclick:D.closure( this, this._onclick )
				}
			} )
		]
	} );
	if( par.caption ){
		this.caption( par.caption );
	}
	if( par.href ){
		this.href( par.href );
	}
	if( par.icon ){
		this.icon( par.icon );
	}
	if( par.onclick ){
		this.onclick = par.onclick;
	}
	if( par.target ){
		this._a.target = par.target;
	}
	if( par.download ){
		this._a.setAttribute( 'download', '' );
	}
};

T.IconListItem.prototype.caption = function(v){
	clearNode( this._a );
	mkE.appendTypeElement( this._a, v );
};

T.IconListItem.prototype.href = function(v){
	this._a.href = v || 'javascript:';
};

T.IconListItem.prototype.icon = function(v){
	this._a.className = v ? 'icon ' + v + 'Icon' : '';
};

T.IconListItem.prototype._onclick = function(e){
	$(this).trigger('click');
};

T.IconListItem.prototype.onclick = function(){};

T.IconListItem.prototype.remove = function(){
	this.node.remove();
};


// +++ T.IconList +++
T.IconListPar = function(){
};
T.IconListPar.prototype.inlineList = true;
T.IconListPar.prototype.className = '';
/** @type {Array.<T.IconListItem>} */
T.IconListPar.prototype.items = null;

/**
 * @param {T.IconListPar|Object} [par]
 * @constructor
 */
T.IconList = function(par){
	par = par || {};
	var className = 'iconListNew';
	if(par.inlineList) {
		className += ' inlineList';
	}
	this.node = mkE( {
		tag:'ul',
		className: className
	} );
	for( var k in par.items ){
		this.addItem( par.items[k] );
	}
	if( par.className ){
		addClassName( this.node, par.className );
	}
	if ( par.id ) {
		this.node.id = par.id;
	}
};

T.IconList.prototype = new mkE.Base;

T.IconList.prototype.clear = function(){
	clearNode( this.node );
};

T.IconList.prototype.addItem = function(item){
	item.node.append( this.node );
};
// --- T.IconList ---
// --- icon_list.js ---

// +++ tabs.js +++
// +++ Tabs +++

T.TabsItemPar = function(){};
T.TabsItemPar.index = '';
T.TabsItemPar.caption = '';
T.TabsItemPar.className = '';
T.TabsItemPar.selected = false;
T.TabsItemPar.href = '';
/** @type {Function} */
T.TabsItemPar.onclick = null;

/**
 * @param {T.TabsItemPar|Object} [par]
 * @constructor
 */
T.TabsItem = function(par){
	par = par || new T.TabsItemPar;
	this.index = par.index;
	this.container = par.container;
	this.selected = par.selected || false;
	this.node = mkE( {
		tag:'li',
		els:[
			this._a = mkE( {
				tag:'a',
				prop:{
					onclick:D.closure( this, this._onclick )
				}
			} )
		]
	} );
	if( par.caption ){
		this.caption( par.caption );
	}
	if( par.href ){
		this.href( par.href );
	}
	if( par.onclick ){
		this.onclick = par.onclick;
	}
	if( par.className ){
		this.className = par.className;
	}
	if( par.selected ){
		addClassName(this.node, "selected");
	}
};

T.TabsItem.prototype.caption = function(v){
	clearNode( this._a );
	mkE.appendTypeElement( this._a, v );
};

T.TabsItem.prototype.href = function(v){
	this._a.href = v || 'javascript:';
};

T.TabsItem.prototype._onclick = function(e){
	removeClassName(this.container.currTab.node, 'selected');
	this.container.currTab = this;
	addClassName(this.node, 'selected');
	$(this).trigger('click');
};

T.TabsItem.prototype.onclick = function(){};


T.TabsPar = function(){};
T.TabsPar.prototype.className = '';
/** @type {T.TabsItem} */
T.TabsPar.prototype.items = null;

/**
 * @param {T.TabsPar|Object} [par]
 * @constructor
 */
T.Tabs = function(par){
	par = par || {};
	this.index = [];
	this.node = mkE( {
		tag:'div',
		className:par.className,
		els: [
			this.list = mkE({tag: 'ul', className: 'tabs'})
		]
	} );
	for( var k in par.items ){
		this.addItem( par.items[k] );
		if (par.items[k].selected) {
			this.select(par.items[k].index);
		}
	}
	if( par.className ){
		addClassName( this.node, par.className );
	}
};

T.Tabs.prototype = new mkE.Base;

T.Tabs.prototype.select = function(i, preset){
	if (!empty(this.currTab)) {
		if (i == this.currTab.index) {
			return;
		}
		removeClassName(this.currTab.node, 'selected');
	}
	this.currTab = this.index[i];
	if(!preset) {
		this.currTab.onclick();
	}
	addClassName(this.currTab.node, 'selected');
};

T.Tabs.prototype.clear = function(){
	clearNode( this.node );
};

T.Tabs.prototype.addItem = function(item){
	this.index[item.index] = item;
	item.container = this;
	item.node.append( this.list );
};

// --- Tabs ---
// --- tabs.js ---

// +++ table.js +++
/**
 * @param par
 * @extends {mkE.Base}
 * @constructor
 */
T.Table = function(par){
	if( par instanceof Array ){
		par = {
			rows:par
		};
	} else {
		par = par || {};
	}
	//this.rows = [];
	this._head = null;
	this.node = mkE( {
		tag:'table',
		prop:par.prop || {},
		style:par.style || {},
		els:[
			this._body = mkE( {
				tag:'tbody'
			} )
		]
	} );
	if( par.simple ){
		addClassName( this.node, 'simpleTable' );
	}
	var k;
	for( k in par.rows ){
		this.addRow( par.rows[k] );
	}
	if( par.cells ){
		this.addRow( new T.TableRow( {
			cells:par.cells
		} ) );
	}
	var parCopy = {};
	for( k in par ){
		parCopy[k] = par;
	}
	delete parCopy.prop;
	delete parCopy.style;
	delete parCopy.rows;
	delete parCopy.cells;
	delete parCopy.simple;
	for( k in parCopy ){
		if( k in this.node ){
			if( typeof par[k] == 'object' && !( par[k] instanceof Array ) ){
				O2O( this.node[k], par[k] );
			} else {
				this.node[k] = par[k];
			}
		} else {
			D.console.warn( 'T.Table par[' + k + ']' );
		}
	}
};

T.Table.prototype = new mkE.Base;

T.Table.prototype.appendChild = function(child){
	this._body.appendChild(child);
};

/**
 * @param {T.TableRow|Array} row
 */
T.Table.prototype.addRow = function(row){
	if( !( row instanceof T.TableRow ) ){
		row = new T.TableRow( {
			cells:row
		} );
	}
	if( row.header ){
		if( !this._head ){
			this._head = mkE( { tag:'thead' } );
			D.insertBefore( this._head, this._body );
		}
		row.append( this._head );
		mkE( {
			tag:'tr'
		} ).append( this._head ); // border fix
		return;
	}
	row.append( this._body );
};

T.Table.prototype.clear = function(){
	clearNode( this._body );
	if( this._head ){
		this._head.remove();
		this._head = null;
	}
};

T.TableRow = function(par){
	if( par instanceof Array ){
		par = {
			cells:par
		};
	} else {
		par = par || {};
	}
	//this.cells = [];
	this.header = par.header || false;
	this.node = mkE( {
		tag:'tr'
	} );
	for( var k in par.cells ){
		if( this.header && par.cells[k] instanceof T.TableCell && !isset( par.cells[k].header ) ){
			par.cells[k].header = true;
		}
		this.addCell( par.cells[k] );
	}
};

T.TableRow.prototype = new mkE.Base;

T.TableRow.prototype.addCell = function(cell){
	if( !( cell instanceof T.TableCell ) ){
		cell = new T.TableCell( {
			els:[cell],
			header:this.header
		} );
	}
	cell.append( this.node );
};

T.TableCell = function(par){
	par = par || {};
	this.node = mkE( {
		tag:( par.header ? 'th' : 'td' ),
		els:par.els || [],
		prop:par.prop || {}
	} );
	for( var k in par ){
		if( k == 'els' || k == 'prop' || k == 'header' ){
			continue;
		}
		if( k in this.node ){
			if( typeof( par[k] ) == 'object' ){
				O2O( this.node[k], par[k] );
			} else {
				this.node[k] = par[k];
			}
			continue;
		}
		D.console.warn( 'what? T.TableCell par[' + k + ']' );
	}
};

T.TableCell.prototype = new mkE.Base;

/** @type {Boolean} */
T.TableCell.prototype.header = null;

T.TableCell.prototype.appendChild = function(child){
	child.append( this.node );
};

// --- table.js ---

// +++ steps.js +++
"use strict";

T.Steps = function( par ) {
	this.current = par.step || 0;
	this.items = par.items || [];
	this.haveVisited = [];
	this.canClickNext = par.canClickNext || true;

	this.node = mkE( {
		tag: 'div',
		className: 'steps'
	} );

	for (var i = 0, len = this.items.length; i < len; i++ ) {
		this.haveVisited[i] = 0;
	}

	this.setStep( this.current );

	return this;
};

T.Steps.prototype.draw = function() {
	clearNode( this.node );

	var tr = mkE({
		tag: 'table',
		prop: {
			cellspacing: 0
		},
		els:[{
			tag: 'tr'
		}]
	} ).append( this.node );

	for ( var i = 0, len = this.items.length; i < len; i++ ) {
		var row = mkE({
			tag: 'td'
		}).append( tr );

		if ( (i <= this.current || this.haveVisited[i] || (this.canClickNext && i == this.current + 1)) && (isset( this.items[i].href ) || isset( this.items[i].onclick )) ) {
			var a = mkE({
				tag: 'a',
				prop: {
					title: isset( this.items[i].title ) ? this.items[i].title : ''
				},
				text: i + 1
			}).append( row );
			if ( this.current == i ) {
				a.className = 'active';
			}
			if ( isset( this.items[i].href ) ) {
				a.href = this.items[i].href;
			}
			if ( isset( this.items[i].onclick ) ) {
				a.onclick = this.items[i].onclick;
				if ( typeof this.items[i].onclick == 'string' ) {
					a.onclick = new Function( this.items[i].onclick );
				} else {
					a.onclick = this.items[i].onclick;
				}
			}
		} else {
			var span = mkE({
				tag: 'span',
				prop: {
					title: isset( this.items[i].title ) ? this.items[i].title : ''
				},
				text: i + 1
			}).append( row );
			if ( this.current == i ) {
				span.className = 'active';
			}
		}
	}
};

T.Steps.prototype.setStep = function( step ) {
	if ( step < 0 || step > this.items.length - 1 ) {
		return;
	}

	this.current = step;
	this.haveVisited[step] = 1;
	this.draw();
};

T.Steps.prototype.append = function(parent){
	this.node.append(parent);
};
// --- steps.js ---

// +++ tooltip.js +++
/**
 * @constructor
 * @param {T.Tooltip__par|Object} par
 */
T.Tooltip = function(par){
	this.position = par.position || 'top';
	this.element = par.node;
	this.content = par.content || null;
	this.visible = false;
	this.node = mkE({
		tag: 'div',
		id: 'Tooltip',
		className: 'radius3 ' + this.position
	});
	this.init();
};
T.Tooltip.prototype = {
	init: function(){
		this.element.onmouseover = D.closure(this, this.onMouseOver);
		this.element.onmouseout = D.closure(this, this.onMouseOut);
	},
	getPosition: function(){
		var pos = this.element.getBoundingClientRect();
		var top = Math.ceil(pos.top + document.documentElement.scrollTop + document.body.scrollTop);
		var left = pos.left + document.body.scrollLeft + document.documentElement.scrollLeft;
		return {
			top: top,
			left: left
		};
	},
	_drawContent: function(){
		clearNode(this.node);
		if( this.content ){
			mkE.appendTypeElement(this.node, this.content);
		}else{
			setNodeText(this.node, this.element.getAttribute('tooltip'));
		}
		this._arrowNode = mkE({
			tag: 'div',
			className: 'arrow'
		}).append(this.node);
	},
	_position: function(){
		this.node.style.display = 'none';
		var position = this.getPosition();
		this.node.style.display = 'block';
		this.node.style.zIndex = InfoBox.zIndex + 1;
		var positionTop = position.top + ((this.element.offsetHeight - this.node.offsetHeight) / 2);
		var positionLeft = position.left + ((this.element.offsetWidth - this.node.offsetWidth) / 2);
		switch(this.position) {
			case 'right':
				positionLeft = position.left + this.element.offsetWidth + 10;
				break;
			case 'left':
				positionLeft = position.left - this.node.offsetWidth - 10;
				break;
			case 'top':
				positionTop = position.top - this.node.offsetHeight - 10;
				break;
			case 'bottom':
				positionTop = position.top + this.element.offsetHeight + 10;
				break;
		}
		this.node.style.top = positionTop + 'px';
		if( this.position === 'top' || this.position === 'bottom' ){
			var maxLeft = window.innerWidth - this.node.offsetWidth - 5;
			if( maxLeft < positionLeft ){
				this._arrowNode.style.marginLeft = positionLeft - maxLeft + 'px';
				positionLeft = maxLeft;
			}
		}
		this.node.style.left = positionLeft + 'px';
	},
	onMouseOver: function(e){
		if( this.visible && e.target && this.element.contains(e.target) ){
			return;
		}
		T.Tooltip._inst = this;
		this._drawContent();
		this.node.append(document.body);
		this._position();
		addClassName(this.node, 'animated bounceInRight');
		this.visible = true;
	},
	onMouseOut: function(e){
		if( e && e.relatedTarget && this.element.contains(e.relatedTarget) ){
			return;
		}
		removeClassName(this.node, 'animated');
		removeClassName(this.node, 'bounceInRight');
		T.Tooltip._inst = null;
		this.node.remove();
		this.visible = false;
	},
	refresh: function(){
		this._drawContent();
		this._position();
	}
};
T.Tooltip.refresh = function(){
	if( !T.Tooltip._inst ){
		return;
	}
	T.Tooltip._inst.refresh();
};
T.Tooltip.hide = function(){
	if( !T.Tooltip._inst ){
		return;
	}
	T.Tooltip._inst.onMouseOut();
};

/**
 * @constructor
 */
T.Tooltip__par = function(){};
/**
 * @type {Node}
 */
T.Tooltip__par.prototype.node = null;
T.Tooltip__par.prototype.position = 'top';
T.Tooltip__par.prototype.content = null;
// --- tooltip.js ---

// +++ side_menu.js +++
/**
 * @param {T.SideMenu.Par} [par]
 * @constructor
 */
T.SideMenu = function(par){
	/** @member {Array.<T.SideMenuItem>} */
	this._items = [];
	this.node = mkE( {
		tag:'ul',
		className:'sideMenu'
	} );
	for( var k in par.items ){
		this.addItem( par.items[k] );
	}
};

T.SideMenu.Par = function(){
	this.items = [];
};
/**
 * @param {Array} v
 * @returns {T.SideMenu.Par}
 */
T.SideMenu.Par.prototype.setItems = function(v){
	this.items = v;
	return this;
};


T.SideMenu.prototype.append = function(parent){
	this.node.append(parent);
};

T.SideMenu.prototype.remove = function(){
	this.node.remove();
};

/** @param {T.SideMenuItem} item */
T.SideMenu.prototype.addItem = function(item){
	item._menu = this;
	this._items.push(item);
	item.node.append( this.node );
};

/** @param {T.SideMenuItem} item */
T.SideMenu.prototype.removeItem = function(item){
	item._menu = null;
	item.node.remove();
	var i = array_search( item, this._items );
	if( i !== false ){
		this._items.splice( i, 1 );
	}
};

/** @param {T.SideMenuItem} item */
T.SideMenu.prototype._itemOnclick = function(item){
	for( var k in this._items ){
		this._items[k].selected( this._items[k] === item );
	}
};

/**
 * @constructor
 * @param {T.SideMenuItem.Par} par
 */
T.SideMenuItem = function(par){
	this.node = mkE( {
		tag:'li',
		els:[
			this._wNode = mkE( {
				tag:'div',
				els:[
					this._aNode = mkE( {
						tag:'a',
						className:'ajax',
						text:par.caption || '',
						href:par.href || '',
						prop:{
							onclick:D.closure( this, this._onclick )
						}
					} ),
					par.captionOption || '',
					par.help ? {tag: 'span', className: 'help', text: par.help} : ''
				]
			} ) // duv
		]
	} );
	if (par.subMenu) {
		par.subMenu.append(this.node);
	}
	if( !empty( par.icon ) ){
		addClassName( this._wNode, par.icon + 'Icon' );
	}
	if( !empty( par.image ) ){
		this._wNode.style.backgroundImage = 'url(' + par.image + ')';
	}
	if( par.badge ){
		this.badge( par.badge, par.badgeOff || false );
	}
	if( par.selected ){
		this.selected( par.selected );
	}
};

T.SideMenuItem.Par = function(){
};
T.SideMenuItem.Par.prototype.caption = '';
/**
 * @param {string} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setCaption = function(v){
	this.caption = v;
	return this;
};
T.SideMenuItem.Par.prototype.icon = '';
/**
 * @param {string} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setIcon = function(v){
	this.icon = v;
	return this;
};
T.SideMenuItem.Par.prototype.href = '';
/**
 * @param {string} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setHref = function(v){
	this.href = v;
	return this;
};
T.SideMenuItem.Par.prototype.badge = 0;
/**
 * @param {number} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setBadge = function(v){
	this.badge = v;
	return this;
};
T.SideMenuItem.Par.prototype.badgeOff = 0;
/**
 * @param {bool} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setBadgeOff = function(v){
	this.badgeOff = v;
	return this;
};
T.SideMenuItem.Par.prototype.selected = false;
/**
 * @param {boolean} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setSelected = function(v){
	this.selected = v;
	return this;
};
T.SideMenuItem.Par.prototype.subMenu = null;
/**
 * @param {T.SideMenu} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setSubMenu = function(v){
	this.subMenu = v;
	return this;
};
T.SideMenuItem.Par.prototype.image = '';
/**
 * @param {string} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setImage = function(v){
	this.image = v;
	return this;
};
T.SideMenuItem.Par.prototype.help = '';
/**
 * @param {string} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setHelp = function(v){
	this.help = v;
	return this;
};
T.SideMenuItem.Par.prototype.captionOption = '';
/**
 * @param {object} v
 * @returns {T.SideMenuItem.Par}
 */
T.SideMenuItem.Par.prototype.setCaptionOption = function(v){
	this.captionOption = v;
	return this;
};

/** @type {T.SideMenu} */
T.SideMenuItem.prototype._menu = null;

T.SideMenuItem.prototype.remove = function(){
	this._menu.removeItem(this);
};

T.SideMenuItem.prototype._onclick = function(e){
	//this._menu._itemOnclick(this);
	return this.onclick();
};

T.SideMenuItem.prototype.onclick = D.doNothing;

/** @param {boolean} [v] */
T.SideMenuItem.prototype.selected = function(v){
	if( isset(v) ){
		if(v){
			addClassName( this.node, 'activeMenu' );
		} else {
			removeClassName( this.node, 'activeMenu' );
		}
		return v;
	}
	return existsClassName( this.node, 'activeMenu' );
};

T.SideMenuItem.prototype.badge = function( v, off ){
	if( !this._badgeNode ){
		this._badgeNode = mkE( {
			tag:'span',
			className:'badge on'
		} );
	}
	if(!v){
		this._badgeNode.remove();
		return;
	}
	if(off){
		this._badgeNode.className = 'badge off';
	} else {
		this._badgeNode.className = 'badge on';
	}
	clearNode( this._badgeNode );
	mkE.appendTypeElement( this._badgeNode, v );
	this._badgeNode.append( this._aNode );
};

// --- side_menu.js ---

// +++ top_menu.js +++
/**
 * @class
 * @param {T.TopMenu.Par} par
 * @extends mkE.Base
 */
T.TopMenu = Class(
	/**
	 * @lends {T.TopMenu#}
	 */
	{
		/** @type {T.TopMenu.Par} */
		par: null,

		/** @member {Array.<T.TopMenuItem>} */
		_items: [],

		/** @param {T.TopMenu.Par} par */
		__construct: function ( par ) {
			this.node = mkE( {
				tag:'div',
				className:'topMenu',
				els: [
					this._left = mkE({
						tag: 'div',
						className: 'left'
					}),
					this._right = mkE({
						tag: 'div',
						className: 'right'
					})
				]
			} );
			for( var k = 0, l = par.items.length; k < l; k++ ){
				this.addItem( par.items[k] );
			}
			if( par.addButton ){
				par.addButton.append(this._right);
			}
		},

		/** @param {T.TopMenuItem} item */
		addItem: function(item){
			item._menu = this;
			this._items.push(item);
			item.node.append( this._left );
		},

		/** @param {T.TopMenuItem} item */
		removeItem: function(item){
			item._menu = null;
			item.node.remove();
			var i = array_search( item, this._items );
			if( i !== false ){
				this._items.splice( i, 1 );
			}
		},

		/** @param {T.TopMenuItem} item */
		_itemOnclick: function(item){
			for( var k = 0, l = this._items.length; k < l; k++ ){
				this._items[k].selected( this._items[k] === item );
			}
		},

		select: function ( index, trigger ) {
			for ( var i = 0; i < this._items.length; i++ ) {
				var item = this._items[i];
				if(item.par.index === index) {
					if(trigger) {
						item._onclick();
					} else {
						item.selected(true);
					}
				} else {
					item.selected(false);
				}
			}
		}
	},
	mkE.Base
);

/**
 * @class
 */
T.TopMenu.Par = Class(
	/**
	 * @lends {T.TopMenu.Par#}
	 */
	{
		items: [],
		/** @type {T.Form.Button} */
		addButton: null,

		/**
		 * @param {Array} v
		 * @returns {T.TopMenu.Par}
		 */
		setItems: function(v){
			this.items = v;
			return this;
		},

		/**
		 * @param {T.Form.Button} v
		 * @returns {T.TopMenu.Par}
		 */
		setButton: function(v){
			this.addButton = v;
			return this;
		}
	}
);

T.TopMenuItem = Class(
	/**
	 * @lends {T.TopMenuItem#}
	 */
	{
		/** @type {T.TopMenu} */
		_menu: null,
		onclick: D.doNothing,
		/** @type {T.TopMenuItem.Par} */
		par: null,

		/**
		 * @constructor
		 * @param {T.TopMenuItem.Par} par
		 */
		__construct: function(par){
			this.par = par;

			this.node = mkE( {
				tag:'div',
				className: 'item',
				els:[
					this._wNode = mkE( {
						tag:'div',
						els:[
							this._aNode = mkE( {
								tag:'a',
								className:'ajax',
								text:par.caption || '',
								href:par.href || '',
								prop:{
									onclick:D.closure( this, this._onclick )
								}
							} )
						]
					} )
				]
			} );
			if( !empty( par.icon ) ){
				addClassName( this._wNode, par.icon + 'Icon' );
			}
			if( par.badge ){
				this.badge( par.badge, par.badgeOff || false );
			}
			if( par.selected ){
				this.selected( par.selected );
			}
		},

		remove: function(){
			this._menu.removeItem(this);
		},

		_onclick: function(){
			if(this.par.onClick) {
				this._menu._itemOnclick(this);
				this.par.onClick(this);
				return;
			}
			//this._menu._itemOnclick(this);
			return this.onclick();
		},

		/** @param {bool} [v] */
		selected: function(v){
			if( isset(v) ){
				if(v){
					addClassName( this.node, 'active' );
				} else {
					removeClassName( this.node, 'active' );
				}
				return v;
			}
			return existsClassName( this.node, 'active' );
		},

		badge: function( v, off ){
			if( !this._badgeNode ){
				this._badgeNode = mkE( {
					tag:'span',
					className:'badge on'
				} );
			}
			if(!v){
				this._badgeNode.remove();
				return;
			}
			if(off){
				this._badgeNode.className = 'badge off';
			} else {
				this._badgeNode.className = 'badge on';
			}
			clearNode( this._badgeNode );
			mkE.appendTypeElement( this._badgeNode, v );
			this._badgeNode.append( this._aNode );
		}
	}
);

/**
 * @class
 */
T.TopMenuItem.Par = Class(
	/**
	 * @lends {T.TopMenuItem.Par#}
	 */
	{
		caption: '',
		icon: '',
		href: '',
		badge: 0,
		badgeOff: 0,
		selected: false,
		onClick: null,
		index: null,

		/**
		 * @param {string} v
		 * @returns {T.TopMenuItem.Par}
		 */
		setCaption: function(v){
			this.caption = v;
			return this;
		},

		/**
		 * @param {string} v
		 * @returns {T.TopMenuItem.Par}
		 */
		setIcon: function(v){
			this.icon = v;
			return this;
		},

		/**
		 * @param {string} v
		 * @returns {T.TopMenuItem.Par}
		 */
		setHref: function(v){
			this.href = v;
			return this;
		},

		/**
		 * @param {number} v
		 * @returns {T.TopMenuItem.Par}
		 */
		setBadge: function(v){
			this.badge = v;
			return this;
		},

		/**
		 * @param {number} v
		 * @returns {T.TopMenuItem.Par}
		 */
		setBadgeOff: function(v){
			this.badgeOff = v;
			return this;
		},

		/**
		 * @param {bool} v
		 * @returns {T.TopMenuItem.Par}
		 */
		setSelected: function(v){
			this.selected = v;
			return this;
		},

		/**
		 * @param {function} v
		 * @return {T.TopMenuItem.Par}
		 */
		setOnClick: function ( v ) {
			this.onClick = v;
			return this;
		},

		/**
		 * @param {string} v
		 * @return {T.TopMenuItem.Par}
		 */
		setIndex: function ( v ) {
			this.index = v;
			return this;
		}
	}
);
// --- top_menu.js ---

// +++ category_filter.js +++
T.CategoryFilter = Class(
	/**
	 * @lends {T.CategoryFilter#}
	 */
	{
		/**
		 *
		 * @param {Array<Object>} items
		 * @param {T.CategoryFilter.Par} [par]
		 * @private
		 */
		__construct: function(items, par){
			this.items = items;
			this.par = par || new T.CategoryFilter.Par();
			this._items = [];

			this.node = mkE({
				tag: 'table',
				className: 'filterCategories',
				attr: {
					cellpadding: 0,
					cellspacing: 0
				}
			});

			this._draw();
		},

		_draw: function(){
			this.totalItems = this.items.length;
			this.totalRows = Math.ceil(this.totalItems / this.par.perRow);
			this.size = this.totalItems > this.par.perRow ? 100 / this.par.perRow : 100 / this.totalItems;
			this.rows = [];
			for( var i = 0; i < this.totalRows; i++ ){
				var row = mkE({
					tag: 'tr'
				}).append(this.node);
				this.rows.push(row);
			}
			for( var k = 0, l = this.items.length; k < l; k++ ){
				var rowNumber = Math.floor( k / this.par.perRow );
				if( !this.items[k] ){
					mkE({
						tag: 'td'
					}).append(this.rows[rowNumber]);
					continue;
				}
				var item = new T.CategoryFilter.Item(this.items[k], {
					width: this.size,
					onclick: this._onclick
				});
				item.node.append(this.rows[rowNumber]);
				this._items.push(item);
			}
		},

		_onclick: function(item, e){
			if( this.currentItem && this.currentItem.subCats ){
				this.currentItem.subCats.clearActive();
			}
			this.currentItem = item;
			if( this.currentChild ){
				this.currentChild.remove();
			}
			for( var i = 0, l = this._items.length; i < l; i++ ){
				removeClassName(this._items[i].node, 'active');
			}
			addClassName(item.node, 'active');
			if( item.subCats ){
				this.currentChild = mkE({
					tag: 'tr',
					className: 'additionalRow',
					els: [
						{
							tag: 'td',
							className: 'childHolder',
							attr: {
								colspan: this.totalItems > this.par.perRow ? this.par.perRow : this.totalItems
							},
							els: [
								{
									tag: 'div',
									els: [
										item.subCats.node
									]
								}
							]
						}
					]
				}).append(this.node);
			}
		}
	}
);

T.CategoryFilter.Par = Class(
	/**
	 * @lends {T.CategoryFilter.Par#}
	 */
	{
		childCols: 4,
		perRow: 8,

		/**
		 *
		 * @param {Number} v
		 * @returns {T.CategoryFilter.Par}
		 */
		setChildCols: function(v){
			this.childCols = v;
			return this;
		},

		/**
		 *
		 * @param {Number} v
		 * @returns {T.CategoryFilter.Par}
		 */
		setPerRow: function(v){
			this.perRow = v;
			return this;
		}
	}
);

T.CategoryFilter.Item = Class(
	/**
	 * @lends {T.CategoryFilter.Item#}
	 */
	{
		/**
		 *
		 * @param {Object} item
		 * @param {Object} par
		 * @private
		 */
		__construct: function(item, par){
			this.item = item;
			this.par = par;

			this.node = mkE({
				tag: 'td',
				style: {
					width: par.width + '%'
				}
			});

			this.link = mkE({
				tag: 'a',
				text: item.caption,
				href: item.href,
				onclick: this._onclick
			}).append(this.node);

			if( item.type ){
				this.link.style.backgroundImage = 'url(' + D.PIMG + 'i/icons/32/' + item.type + '.png)';
			}else if( item.iconUrl ){
				this.link.style.backgroundImage = 'url(' + item.iconUrl + ')';
			}

			if( item.childs ){
				var p = new T.CategoryFilter.SubCat.Par();
				var items = [];
				for( var i = 0, l = item.childs.length; i < l; i++ ){
					var child = item.childs[i];
					items.push(child);
				}
				this.subCats = new T.CategoryFilter.SubCat(items, p);
			}

			if( item.selected ){
				if( item.childs ){
					this._onclick();
				}else{
					addClassName(this.node, 'active');
				}
			}
		},

		_onclick: function(e){
			if( existsClassName(this.node, 'active') ){
				e = D.event(e);
				D.stopPropagation(e);
				return false;
			}
			this.par.onclick(this, e);
			if( this.item.onclick ){
				return this.item.onclick(e);
			}
		}
	}
);

T.CategoryFilter.SubCat = Class(
	/**
	 * @lends {T.CategoryFilter.SubCat#}
	 */
	{
		/**
		 *
		 * @param {Array.<Object>} items
		 * @param {T.CategoryFilter.SubCat.Par} [par]
		 * @private
		 */
		__construct: function(items, par){
			this.items = items;
			this.par = par || new T.CategoryFilter.SubCat.Par();
			this._items = [];

			this.node = mkE({
				tag: 'table',
				className: 'filterSubCat',
				attr: {
					cellpadding: 0,
					cellspacing: 0,
					orientation: this.par.orientation
				}
			});

			this._draw();
		},

		_draw: function(){
			this.totalItems = this.items.length;
			this.totalRows = Math.ceil(this.totalItems / this.par.cols);
			this.rows = [];
			for( var i = 0; i < this.totalRows; i++ ){
				var row = mkE({
					tag: 'tr'
				}).append(this.node);
				this.rows.push(row);
			}
			for( var k = 0, l = this.totalRows * this.par.cols; k < l; k++ ){
				var rowNumber = Math.floor( k / this.par.cols );
				var n = k % this.par.cols * this.totalRows + rowNumber;
				if( this.par.orientation != 'vertical' ){
					n = k;
				}
				if( !this.items[n] ){
					mkE({
						tag: 'td',
						className: 'empty'
					}).append(this.rows[rowNumber]);
					continue;
				}
				var item = new T.CategoryFilter.SubCat.Item(this.items[n], {
					cols: this.par.cols,
					onclick: this._onclick
				});
				item.node.append(this.rows[rowNumber]);
				this._items.push(item);
			}
		},

		clearActive: function(){
			for( var i = 0, l = this._items.length; i < l; i++ ){
				removeClassName(this._items[i].node, 'activeSub');
			}
		},

		_onclick: function(item, e){
			this.clearActive();
			addClassName(item.node, 'activeSub');
		}
	}
);

T.CategoryFilter.SubCat.Par = Class(
	/**
	 * @lends {T.CategoryFilter.SubCat.Par#}
	 */
	{
		cols: 4,
		orientation: 'vertical',

		/**
		 *
		 * @param {Number} v
		 * @returns {T.CategoryFilter.SubCat.Par}
		 */
		setCols: function(v){
			this.cols = v;
			return this;
		},

		/**
		 *
		 * @param {String} v
		 * @returns {T.CategoryFilter.SubCat.Par}
		 */
		setOrientation: function(v){
			this.orientation = v;
			return this;
		}
	}
);

T.CategoryFilter.SubCat.Item = Class(
	/**
	 * @lends {T.CategoryFilter.SubCat.Item#}
	 */
	{
		/**
		 *
		 * @param {Object} item
		 * @param {Object} par
		 * @private
		 */
		__construct: function(item, par){
			this.item = item;
			this.par = par;

			this.node = mkE({
				tag: 'td',
				style: {
					width: 100 / this.par.cols + '%'
				}
			});

			if( item.className ){
				addClassName(this.node, item.className);
			}

			if( item.selected ){
				addClassName(this.node, 'activeSub');
			}

			if( item.type ){
				this.node.style.backgroundImage = 'url(' + D.PIMG + 'i/icons/grey16/' + item.type + '.png)';
			}else if( item.iconUrl ){
				this.node.style.backgroundImage = 'url(' + item.iconUrl + ')';
			}else if( item.icon ){
				addClassName(this.node, item.icon + 'Icon');
			}

			if( item.badge ){
				mkE({
					tag: 'span',
					className: 'badge',
					text: 'badge'
				}).append(this.node);
			}

			mkE({
				tag: 'a',
				text: item.caption,
				href: item.href,
				onclick: this._onclick
			}).append(this.node);
		},

		_onclick: function(e){
			if( existsClassName(this.node, 'activeSub') ){
				e = D.event(e);
				D.stopPropagation(e);
				return false;
			}
			this.par.onclick(this, e);
			if( this.item.onclick ){
				return this.item.onclick(e);
			}
		}
	}
);
// --- category_filter.js ---

// +++ popover.js +++
/**
 * @class
 * @param {T.Popover.Par} par
 */
T.Popover = Class(
	/**
	 * @lends {T.Popover#}
	 */
	{
		margin: 12,

		/**
		 * @param {T.Popover.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this._parent = par.parent;
			this._position = par.position || 'top center';
			this._disableOverlayClick = par.disableOverlayClick || false;
			this._onOverlayClick = par.onOverlayClick || D.doNothing;
			this._scrollIntoView = par.scrollIntoView || false;
			this._onCloseFn = par.onClose || D.doNothing;
			this._title = par.title || '';
			this._noHeader = par.noHeader || false;

			var pos = this._position.split(' ');
			this.position1 = pos[0];
			this.position2 = pos[1];

			this.node = mkE({
				tag: 'div',
				className: 'Popover' + ' pos-1-' + this.position1 + ' pos-2-' + this.position2,
				els: [
					{
						tag: 'div',
						className: 'content',
						els: [
							this._headerNode = mkE({
								tag: 'div',
								className: 'header',
								els: [
									this._titleNode = mkE({
										tag: 'span'
									}),
									{
										tag: 'a',
										className: 'close',
										onclick: this.hide,
										els: [
											T.svgIcon({
												icon: 'close-12'
											})
										],
										attr: {
											title: D.Lang.get('close')
										}
									}
								]
							}),
							this.content = mkE({
								tag: 'div'
							})
						]
					},
					{
						tag: 'div',
						className: 'arrow'
					}
				],
				style: {
					zIndex: ++InfoBox.zIndex
				}
			});
			mkE.appendTypeElement(this._titleNode, this._title);
			this.overlay = mkE({
				tag: 'div',
				className: 'PopoverOverlay',
				onclick: this._overlayClick
			});
			if( this._noHeader ){
				removeNode(this._headerNode);
			}
			if( par.alt ){
				addClassName(this.node, 'alt');
			}
		},

		show: function(){
			this.showed = true;
			var node = document.body;
			if( InfoBox.opened ){
				node = InfoBox._i.node;
			}
			this.overlay.append(node);
			this.node.append(node);
			this.position();
			$(document).on('click.popover', this._documentClick);
			$(document.body).on('keyup.popover', this._onKeyUp);
			document.addEventListener('Cleanup', this.hide);
		},

		hide: function(){
			this.overlay.remove();
			this.node.remove();
			$(document).off('click.popover', this._documentClick);
			$(document.body).off('keyup.popover', this._onKeyUp);
			this._onClose();
			document.removeEventListener('Cleanup', this.hide);
		},

		_onKeyUp: function(event){
			if( event.keyCode == 27 ){
				this.hide();
			}
		},

		_documentClick: function(e){
			if( this.showed ){
				this.showed = false;
				return;
			}
			if( existsClassName(e.target, 'multiACListItem') ){
				return;
			}
			if( this.node.contains(e.target) ){
				return;
			}
			if( T.Popover.ignoreClick ){
				T.Popover.ignoreClick = false;
				return;
			}
			this.hide();
		},

		_overlayClick: function(){
			if( this._disableOverlayClick ){
				return;
			}
			this.hide();
			this._onOverlayClick();
		},

		_onClose: function(){
			this._onCloseFn();
		},

		setTitle: function(title){
			this._title = title;
			mkE.appendTypeElement(this._titleNode, this._title);
		},

		position: function(noScroll){
			var parentWidth = this._parent.offsetWidth;
			var parentHeight = this._parent.offsetHeight;
			var node = document.documentElement;
			if( InfoBox.opened ){
				node = InfoBox._i.node;
			}
			var pos = D.position(this._parent, node);
			var top, left;
			switch( this.position1 ){
				case 'top':
					top = pos.top - this.node.offsetHeight - this.margin;
					break;
				case 'bottom':
					top = pos.top + parentHeight + this.margin;
					break;
				case 'left':
					left = pos.left - this.node.offsetWidth - this.margin;
					break;
				case 'right':
					left = pos.left + parentWidth + this.margin;
					break;
			}
			switch( this.position2 ){
				case 'top':
					top = pos.top;
					break;
				case 'bottom':
					top = pos.top + parentHeight - this.node.offsetHeight;
					break;
				case 'left':
					left = pos.left - 10;
					break;
				case 'right':
					left = pos.left + parentWidth - this.node.offsetWidth;
					break;
				case 'center':
					if( this.position1 === 'top' || this.position1 === 'bottom' ){
						left = pos.left + (parentWidth / 2) - (this.node.offsetWidth / 2);
					}else{
						top = pos.top + (parentHeight / 2) - (this.node.offsetHeight / 2);
					}
					break;
			}
			this.node.style.top = top + 'px';
			this.node.style.left = left + 'px';

			if( this._scrollIntoView && noScroll !== true && !InfoBox.opened ){
				var windowHeight = window.innerHeight;
				var scrollTop = document.body.scrollTop || document.documentElement.scrollTop || 0;
				if( top + this.node.offsetHeight - scrollTop > windowHeight ){
					$('html, body').animate({
						scrollTop: Math.min(top, scrollTop + (top + this.node.offsetHeight - scrollTop - windowHeight) + 20)
					}, 300, 'swing');
					//document.body.scrollTop = document.documentElement.scrollTop = Math.min(top, scrollTop + (top + this.node.offsetHeight - scrollTop - windowHeight) + 20);
				}
			}
		},

		positionInView: function(){
			if( InfoBox.opened ){
				this.position();
				return;
			}
			var prev = this._scrollIntoView;
			this._scrollIntoView = true;
			this.position();
			this._scrollIntoView = prev;
		}
	}
);
T.Popover.ignoreClick = false;

/**
 * @class
 */
T.Popover.Par = Class(
	/**
	 * @lends {T.Popover.Par#}
	 */
	{
		position: 'top center',
		parent: null,
		disableOverlayClick: false,
		onOverlayClick: D.doNothing,
		scrollIntoView: false,
		onClose: D.doNothing,
		title: '',
		noHeader: false,
		alt: false,

		/**
		 * @param {String} v
		 * @returns {T.Popover.Par}
		 */
		setPosition: function(v){
			this.position = v;
			return this;
		},

		/**
		 * @param {Node} v
		 * @returns {T.Popover.Par}
		 */
		setParent: function(v){
			this.parent = v;
			return this;
		},

		/**
		 * @param {Boolean} v
		 * @returns {T.Popover.Par}
		 */
		setDisableOverlayClick: function(v){
			this.disableOverlayClick = v;
			return this;
		},

		/**
		 * @param {Function} v
		 * @returns {T.Popover.Par}
		 */
		setOnOverlayClick: function(v){
			this.onOverlayClick = v;
			return this;
		},

		/**
		 * @param {Boolean} v
		 * @returns {T.Popover.Par}
		 */
		setScrollIntoView: function(v){
			this.scrollIntoView = v;
			return this;
		},

		/**
		 * @param {Function} v
		 * @returns {T.Popover.Par}
		 */
		setOnClose: function(v){
			this.onClose = v;
			return this;
		},

		/**
		 * @param {String} v
		 * @returns {T.Popover.Par}
		 */
		setTitle: function(v){
			this.title = v;
			return this;
		},

		/**
		 * @param {Boolean} v
		 * @returns {T.Popover.Par}
		 */
		setNoHeader: function(v){
			this.noHeader = v;
			return this;
		},

		/**
		 * @param {Boolean} v
		 * @returns {T.Popover.Par}
		 */
		setAlt: function(v){
			this.alt = v;
			return this;
		}
	}
);
// --- popover.js ---

// +++ button_group.js +++
/**
 * @param {T.ButtonGroup.Par} [par]
 * @constructor
 */
T.ButtonGroup = function(par){
	/** @member {Array.<T.ButtonGroupItem>} */
	this._items = [];
	/** @member {Array.<T.ButtonGroupSubItem>} */
	this._sub_items = [];
	this.node = mkE( {
		tag:'div',
		className:'btnGroupCT',
		style: par.style + (par.width?'width:'+par.width:''),
		els: [
			this.nodeCT = mkE({
				tag:'div',
				className:'btnGroup',
				style: par.style + (par.width?'width:'+par.width:'')
			})
		]
	} );
	var metric = 'px';
	var itemWidth = false;
	if(par.width){
		if(par.width.substr(-1) == '%'){
			metric = '%';
			par.width = par.width.trim('%');
		}
		itemWidth = (parseFloat(par.width) / parseFloat(par.items.length)).toFixed(5) + metric;
	}
	var item;
	for( var k in par.items ){
		if(itemWidth) {
			par.items[k].setWidth(itemWidth);
		}
		item = new T.ButtonGroupItem(par.items[k]);
		this.addItem( item );
	}
	T.clear().append(this.node);
	this._subItemsNode = mkE({
		tag: 'div',
		className: 'membersPreview'
	}).append(this.node);
	for( var k in par.sub_items ){
		item = new T.ButtonGroupSubItem(par.sub_items[k]);
		this.addSubItem( item );
	}
};

T.ButtonGroup.Par = function(){
	this.items = [];
	this.sub_items = [];
	this.style = [];
	this.width = [];
};
/**
 * @param {Array} v
 * @returns {T.ButtonGroup.Par}
 */
T.ButtonGroup.Par.prototype.setItems = function(v){
	this.items = v;
	return this;
};

T.ButtonGroup.prototype.append = function(parent){
	this.node.append(parent);
	return this;
};

T.ButtonGroup.prototype.remove = function(){
	this.node.remove();
};

/** @param {T.ButtonGroupItem} item */
T.ButtonGroup.prototype.addItem = function(item){
	item._menu = this;
	this._items.push(item);
	item.node.append( this.nodeCT );
};

/** @param {T.ButtonGroupItem} item */
T.ButtonGroup.prototype.removeItem = function(item){
	item._menu = null;
	item.node.remove();
	var i = array_search( item, this._items );
	if( i !== false ){
		this._items.splice( i, 1 );
	}
};

/**
 * @param {Array} v
 * @returns {T.ButtonGroup.Par}
 */
T.ButtonGroup.Par.prototype.setSubItems = function(v){
	this._sub_items = v;
	return this;
};

/** @param {T.ButtonGroupSubItem} item */
T.ButtonGroup.prototype.addSubItem = function(item){
	item._menu = this;
	this._sub_items.push(item);
	item.node.append( this._subItemsNode );
};

/** @param {T.ButtonGroupItem} item */
T.ButtonGroup.prototype.removeSubItem = function(item){
	item._menu = null;
	item.node.remove();
	var i = array_search( item, this._sub_items );
	if( i !== false ){
		this._sub_items.splice( i, 1 );
	}
};

/**
 * @constructor
 * @param {T.ButtonGroupItem.Par} par
 */
T.ButtonGroupItem = function(par){
	this._valueNode = mkE({
		tag: 'strong',
		text: par.value
	});
	this._textNode = mkE({
		text: par.text
	});
	if(par.onclick) {
		this.onclick = par.onclick;
	}
	if(par.link) {
		this.node = mkE( {
			tag: 'a',
			className: 'btn',
			href: par.link || '',
			style: (par.width?'width: ' + par.width:''),
			prop: {
				onclick: D.closure(this, this._onclick)
			},
			els: [
				this._valueNode,
				this._textNode
			]
		} );
	} else {
		this.node = mkE( {
			tag: 'div',
			className: 'btn',
			style: (par.width?'width:' + par.width:''),
			els: [
				this._valueNode,
				this._textNode
			]
		} );
	}
};

T.ButtonGroupItem.Par = function(){
};
T.ButtonGroupItem.Par.prototype.text = '';
/**
 * @param {string} v
 * @returns {T.ButtonGroupItem.Par}
 */
T.ButtonGroupItem.Par.prototype.setText = function(v){
	this.text = v;
	return this;
};
T.ButtonGroupItem.Par.prototype.link = '';
/**
 * @param {string} v
 * @returns {T.ButtonGroupItem.Par}
 */
T.ButtonGroupItem.Par.prototype.setLink = function(v){
	this.link = v;
	return this;
};
T.ButtonGroupItem.Par.prototype.value = '';
/**
 * @param {string} v
 * @returns {T.ButtonGroupItem.Par}
 */
T.ButtonGroupItem.Par.prototype.setValue = function(v){
	this.value = v;
	return this;
};
T.ButtonGroupItem.Par.prototype.width = '';
/**
 * @param {int} v
 * @returns {T.ButtonGroupItem.Par}
 */
T.ButtonGroupItem.Par.prototype.setWidth = function(v){
	this.width = v;
	return this;
};
T.ButtonGroupItem.Par.prototype.onclick = null;
/**
 * @param {function} v
 * @returns {T.ButtonGroupItem.Par}
 */
T.ButtonGroupItem.Par.prototype.setOnClick = function(v){
	this.onclick = v;
	return this;
};


/** @type {T.ButtonGroup} */
T.ButtonGroupItem.prototype._menu = null;

T.ButtonGroupItem.prototype.remove = function(){
	this._menu.removeItem(this);
};

T.ButtonGroupItem.prototype._onclick = function(e){
	return this.onclick();
};

T.ButtonGroupItem.prototype.onclick = D.doNothing;

/**
 * @constructor
 * @param {T.ButtonGroupSubItem.Par} par
 */
T.ButtonGroupSubItem = function(par){
	if(par.link) {
		this.node = mkE( {
			tag: 'a',
			className: '',
			href: par.link || '',
			prop: {
				onclick: D.closure(this, this._onclick)
			},
			els: [
				{
					tag: 'img',
					src: par.src,
					title: par.title
				}
			]
		} );
	} else {
		this.node = mkE( {
				tag: 'img',
				src: par.src,
				title: par.title
		} );
	}
};

T.ButtonGroupSubItem.Par = function(){
};
T.ButtonGroupSubItem.Par.prototype.src = '';
/**
 * @param {string} v
 * @returns {T.ButtonGroupSubItem.Par}
 */
T.ButtonGroupSubItem.Par.prototype.setSrc = function(v){
	this.src = v;
	return this;
};
T.ButtonGroupSubItem.Par.prototype.link = '';
/**
 * @param {string} v
 * @returns {T.ButtonGroupSubItem.Par}
 */
T.ButtonGroupSubItem.Par.prototype.setLink = function(v){
	this.link = v;
	return this;
};
T.ButtonGroupSubItem.Par.prototype.title = '';
/**
 * @param {string} v
 * @returns {T.ButtonGroupSubItem.Par}
 */
T.ButtonGroupSubItem.Par.prototype.setTitle = function(v){
	this.title = v;
	return this;
};
/** @type {T.ButtonGroup} */
T.ButtonGroupSubItem.prototype._menu = null;

T.ButtonGroupSubItem.prototype.remove = function(){
	this._menu.removeItem(this);
};

T.ButtonGroupSubItem.prototype._onclick = function(e){
	return this.onclick();
};

T.ButtonGroupSubItem.prototype.onclick = D.doNothing;
// --- button_group.js ---

// +++ categories_filter.js +++
/**
 * @param {T.CategoriesFilter.Par} [par]
 * @constructor
 */
T.CategoriesFilter = function(par){
  /** @member {Array.<T.CategoriesFilterItem>} */
  this._items = [];
  /** @member {T.CategoriesFilter.Par} */
  this.node = mkE({
    tag: 'table',
    className: 'filterSubCat',
    els: [
      this._bodyCT = mkE({
        tag: 'tbody'
      })
    ]
  });

  var itemsInRow = 0;
  for (var k in par.items) {
    if (!itemsInRow) {
      this._trEl = mkE({
        tag: 'tr'
      }).append(this._bodyCT);
    }
    par.items[k].categoriesFilter = this;
    par.items[k].node.append(this._trEl);
    par.items[k].node.style.width = Math.ceil(100 / par.itemsPerRow) + '%';
    this._items.push(par.items[k]);

    itemsInRow++;
    if (itemsInRow >= par.itemsPerRow) {
      itemsInRow = 0;
    }
  }
};
/**
 * @param {T.CategoriesFilterItem} item
 */
T.CategoriesFilter.prototype.catalogueMenuClick = function(item) {
  for(var k in this._items) {
    removeClassName(this._items[k].node, 'activeSub');
  }
  addClassName(item.node, 'activeSub');
};
T.CategoriesFilter.prototype.append = function(parent) {
  this.node.append(parent);
};


/**
 * @param {T.CategoriesFilterItem.Par} par
 * @constructor
 */
T.CategoriesFilterItem = function(par) {
  this._par = par;
  this.node = mkE({
    tag: 'td',
    className: par.active ? 'activeSub' : '',
    style: {
      backgroundImage: 'url("' + D.PIMG + 'i/icons/grey16/' + par.icon + '.png")'
    },
    els: [
      {
        tag: 'a',
        text: par.title,
        onclick: D.closure(this, this._onClick),
        href: par.href
      }
    ]
  });
};
T.CategoriesFilterItem.prototype.categoriesFilter = null;

T.CategoriesFilterItem.prototype._onClick = function() {
  this.categoriesFilter.catalogueMenuClick(this);
  if (this._par.onClick) {
    this._par.onClick(this._par.id);
    return false;
  }
};


T.CategoriesFilter.Par = function() {};
T.CategoriesFilter.Par.prototype.itemsPerRow = 4;
/**
 * @param {int} v
 * @returns {T.CategoriesFilter.Par}
 */
T.CategoriesFilter.Par.prototype.setItemsPerRow = function(v){
  this.itemsPerRow = v;
  return this;
};

T.CategoriesFilter.Par.prototype.items = [];
/**
 * @param {Array.<T.CategoriesFilterItem>} v
 * @returns {T.CategoriesFilter.Par}
 */
T.CategoriesFilter.Par.prototype.setItems = function(v){
  this.items = v;
  return this;
};



T.CategoriesFilterItem.Par = function() {};
T.CategoriesFilterItem.Par.prototype.title = '';
/**
 * @param {string} v
 * @returns {T.CategoriesFilterItem.Par}
 */
T.CategoriesFilterItem.Par.prototype.setTitle = function(v){
  this.title = v;
  return this;
};

T.CategoriesFilterItem.Par.prototype.icon = '';
/**
 * @param {string} v
 * @returns {T.CategoriesFilterItem.Par}
 */
T.CategoriesFilterItem.Par.prototype.setIcon = function(v){
  this.icon = v;
  return this;
};

T.CategoriesFilterItem.Par.prototype.id = '';
/**
 * @param {int} v
 * @returns {T.CategoriesFilterItem.Par}
 */
T.CategoriesFilterItem.Par.prototype.setId = function(v){
  this.id = v;
  return this;
};

/** @type {Function} */
T.CategoriesFilterItem.Par.prototype.onClick;
/**
 * @param {Function} v
 * @returns {T.CategoriesFilterItem.Par}
 */
T.CategoriesFilterItem.Par.prototype.setOnClick = function(v){
  this.onClick = v;
  return this;
};

T.CategoriesFilterItem.Par.prototype.active = false;
/**
 * @param {bool} v
 * @returns {T.CategoriesFilterItem.Par}
 */
T.CategoriesFilterItem.Par.prototype.setActive = function(v){
  this.active = v;
  return this;
};

T.CategoriesFilterItem.Par.prototype.href = '';
/**
 * @param {string} v
 * @returns {T.CategoriesFilterItem.Par}
 */
T.CategoriesFilterItem.Par.prototype.setHref = function(v){
  this.href = v;
  return this;
};
// --- categories_filter.js ---

// +++ and_more.js +++
/**
 * @class
 */
T.AndMore = Class(
	/**
	 * @lends {T.AndMore#}
	 */
	{
		__construct:function(par){
			this.limit = par.limit || 3;
			this._els = par.els;
			this._c = count( this._els );
			this.count = par.count || this._c;
			this.moreTag = par.moreTag || 'a';
			this.moreOnclick = par.moreOnclick || this.moreOnclick;
			this.moreLang = par.moreLang || 'x_more';
		},

		/** @type {Function} */
		moreOnclick:null,

		_calc:function(){
			var re = [];
			switch( this._c ){
				case 0:
					break;
				case 1:
					re.push( this._els[0] );
					break;
				default:
					for( var i = 0; i < this._c; ++ i ){
						var last = ( i == Math.min( this.count, this.limit ) - 1 );
						if(last){
							if( this.count > this.limit ){
								re.push( ' ' + D.Lang.get('and') + ' ' );
								var more = D.Lang.nget( this.count - this.limit + 1, this.moreLang );
								if( this.moreOnclick ){
									re.push( {
										tag:this.moreTag,
										className:'and-more',
										text:more,
										prop:{
											onclick:this.moreOnclick
										}
									} );
								} else {
									re.push(more);
								}
							} else {
								re.push( ' ' + D.Lang.get('and') + ' ' );
								re.push( this._els[i] );
							}
							break;
						}
						if( re[0] ){
							re.push(', ');
						}
						re.push( this._els[i] );
					}
			}
			return re;
		},

		append:function(parent){
			mkE.appendTypeElement( parent, this._calc() );
			return this;
		}
	}
);

// --- and_more.js ---

// +++ giphy.js +++
/**
 * @extends {mkE.Base}
 */
T.Giphy = Class(
	{

		/**
		 * @param {T.Giphy.Item} item
		 */
		onclick:function(item){
		},

		__construct:function(){
			this.node = mkE( {
				tag:'div',
				className:'Giphy',
				els:[
					this._itemsNode = mkE( {
						tag:'div',
						className:'items',
						onscroll:this._onscroll
					} ),
					this._input = new T.Form.Input( {
						onkeyup:this._onkeyup,
						placeholder:D.Lang.get('Search gif'),
						maxLength:50
					} )
				]
			} );
			D.loadingOverlay( this.node );
			D.onLoad( 'DR.giphy', this._trendShow );
		},

		_trendShow:function(){
			this._mTrend = new DR.giphy.Trend;
			this._mTrend.onLoad = this._mTrendRe;
			this._mTrend.call();
		},

		/**
		 * @param {T.Giphy.Item} item
		 */
		_addItem:function(item){
			item.append( this._itemsNode );
			item.onclick = D.closure( this, this._itemOnclick, item );
		},

		/**
		 * @param {T.Giphy.Item} item
		 */
		_itemOnclick:function(item){
			this.onclick(item);
			var mUse = new DR.giphy.UseGif;
			mUse.id = item.data.id;
			mUse.call();
		},

		_mTrendRe:function(){
			D.removeLoadingOverlay( this.node );
			clearNode( this._itemsNode );
			for( var k = 0; k < this._mTrend.re.items.length; ++ k ){
				this._addItem( T.Giphy.Item( this._mTrend.re.items[k] ) );
			}
		},

		_onkeyup:function(e){
			if( e.keyCode == 27 && this._input.value() != '' ){
				if( this._mSearch ){
					this._mSearch.query = '';
				}
				this._input.value('');
				D.stopPropagation(e);
			}
			clearTimeout( this._searchTO );
			this._searchTO = setTimeout( this._search, 300 );
		},

		_empty:function(){
			return !trim( this._input.value() );
		},
		
		_search:function(){
			if( this._empty() ){
				this._mTrendRe();
				return;
			}
			if( this._mSearch && this._mSearch.query == this._input.value() ){
				return;
			}
			this._mSearch = new DR.giphy.Search;
			this._mSearch.pg = 1;
			this._mSearch.query = this._input.value();
			this._mSearch.onLoad = D.closure( this, this._mSearchRe, this._mSearch );
			this._mSearch.call();
			D.loadingOverlay( this._itemsNode );
		},

		_mSearchRe:function(mSearch){
			if( this._mSearch != mSearch ){
				return;
			}
			D.removeLoadingOverlay( this._itemsNode );
			if( this._mSearch.pg < 2 ){
				clearNode( this._itemsNode );
				if( empty( this._mSearch.re.items ) ){
					this._mTrendRe();
					return;
				}
			}
			for( var k = 0; k < this._mSearch.re.items.length; ++ k ){
				this._addItem( T.Giphy.Item( this._mSearch.re.items[k] ) );
			}
			if( this._mSearch.pg < 2 ){
				this._itemsNode.scrollTop = 0;
			}
		},

		_onscroll:function(){
			if( this._empty() || !this._mSearch || this._mSearch.processing ){
				return;
			}
			if( this._itemsNode.scrollTop + this._itemsNode.offsetHeight + 100 < this._itemsNode.scrollHeight ){
				return;
			}
			if( empty( this._mSearch.re.items ) || this._mSearch.pg >= 30 ){
				return;
			}
			++ this._mSearch.pg;
			this._mSearch.call();
		},
		
		focus:function(){
			this._input.focus();
		}
		
	},
	mkE.Base
);


/**
 * @extends {mkE.Base}
 */
T.Giphy.Item = Class(
	{
		/**
		 * @param {DR.giphy.struct.Item} item
		 */
		__construct:function(item){
			this.id = item.id;
			this.data = item;
			this.onclick = D.doNothing;
			this.node = mkE( {
				tag:'div',
				className:'GiphyItem',
				attr:{
					'data-id':this.id
				},
				els:[
					/**/
					{
						tag:'img',
						src:item.gif,
						onclick:this._onclick
					}
					/*/
					{
						tag:'video',
						src:item.mp4,
						poster:item.gif,
						loop:true,
						autoplay:true,
						controls:false
					}
					/**/
				]
			} );
			if( D.ADMIN ){
				this._plus18cbx = new T.Form.CheckBox( {
					checked:item.plus18,
					onclick:this._plus18onclick,
					title:'18+'
				} );
				this._plus18cbx.append( this.node );
			} else if ( item.plus18 ) {
				mkE( {
					tag:'span',
					className:'badge nsfw',
					title: D.Lang.get('is18plus'),
					text:'18+'
				} ).append( this.node );
			}
		},

		_onclick:function(){
			this.onclick();
		},

		_plus18onclick:function(e){
			D.stopPropagation(e);
			var m = new DR.giphy.SetPlus18;
			m.id = this.id;
			m.v = this._plus18cbx.value();
			m.call();
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
T.Giphy.Embed = Class( {

	onclick:null,

	/**
	 * @param {DR.giphy.struct.Item} item
	 * @param {object} [par]
	 */
	__construct:function( item, par ){
		this.data = item;
		par = par || {};
		par.maxWidth = par.maxWidth || 400;
		par.maxHeight = par.maxHeight || 236;
		this.onclick = par.onclick || this.onclick;
		this.node = mkE( {
			tag:'div',
			className:'GiphyEmbed',
			onclick:this._onclick,
			attr:{
				'data-id':item.id
			},
			els:[
				this._videoNode = mkE( {
					tag:'video',
					src:item.mp4,
					autoplay:true,
					loop:true,
					poster: item.image
				} )
			]
		} );
		var r = Math.min( 1, par.maxHeight / item.h, par.maxWidth / item.w );
		this.node.style.maxWidth = Math.floor( item.w * r ) + 'px';
		/*
		if( item.h > item.w ){
			if( item.h > par.maxHeight ){
				this._videoNode.style.height = par.maxHeight + 'px';
				this.node.style.height = par.maxHeight + 'px';
				this.node.style.width = item.w / ( item.h / par.maxHeight ) + 'px';
			}
		} else {
			//this._videoNode.style.maxWidth = par.maxHeight + 'px';
			//this.node.style.maxWidth = par.maxHeight + 'px';
			this.node.style.minHeight = ( item.w > par.maxWidth ?  item.h / ( item.w / par.maxWidth ) : item.h ) + 'px';
		}*/
		if( item.plus18 ){
			mkE( {
				tag:'span',
				className:'badge nsfw',
				title: D.Lang.get('is18plus'),
				text:'18+'
			} ).append( this.node );
		}
	},

	_onclick:function(e){
		//InfoBox.img( this.data.gif );
		var m = new D.Modal( {} );
		m.img( this.data.gif );
	}
}, mkE.Base );

T.Giphy.available = function(){
	return true;
};

/** @type {D.smallPopUp} */
T.Giphy._sp = null;

/**
 * @param {function} cb
 * @param {{parent:Node,arrow:{top:boolean,left:boolean}}} [par]
 */
T.Giphy.insert = function( cb, par ){
	par = par || {};
	if( T.Giphy._sp ){
		T.Giphy._sp.close();
		T.Giphy._sp = null;
		return;
	}
	this._sp = new D.smallPopUp;
	this._sp.open( false, {
		title:mkE({
			tag:'div',
			className:'GiphyLogo'
		}),
		_width:320,
		color:'White',
		onClose:function(){
			T.Giphy._sp = null;
		},
		bodyClose:true,
		parent:par.parent
	} );
	var g = new T.Giphy();
	g.append( this._sp.content );
	g.onclick = function(item){
		T.Giphy._sp.close();
		cb && cb(item);
	};
	this._sp.move();
	if( par.arrow ){
		this._sp.arrowPosition( par.arrow.left, par.arrow.top );
	}
	g.focus();
};
// --- giphy.js ---

// +++ sounds.js +++
/**
 * @extends {mkE.Base}
 */
T.Sounds = Class(
	{
		/** @type {Object.<T.Sounds.Item>} */
		_items:{},

		/**
		 * @param {T.Sounds.Item} item
		 */
		onclick:function(item){
		},

		__construct:function(par){
			par = par || {};
			this.addTitle = par.addTitle || null;
			this.node = mkE( {
				tag:'div',
				className:'Sounds',
				els:[
					this._itemsNode = mkE( {
						tag:'div',
						className:'items',
						onscroll:this._onscroll
					} ),
					this._input = new T.Form.Input( {
						onkeyup:this._onkeyup,
						placeholder:D.Lang.get('Search sound'),
						maxLength:50
					} )
				]
			} );
			D.loadingOverlay( this.node );
			D.onLoad( 'DR.sounds', this._trendShow );
		},

		_clear:function(){
			this._items = {};
			clearNode( this._itemsNode );
		},

		/**
		 * @param {T.Sounds.Item} item
		 */
		_addItem:function(item){
			item.append( this._itemsNode );
			item.onclick = D.closure( this, this._itemOnclick, item );
			item.parent = this;
			this._items[ item.id ] = item;
		},

		/**
		 * @param {T.Sounds.Item} item
		 */
		_itemOnclick:function(item){
			this.onclick(item);
			var mUse = new DR.sounds.UseItem;
			mUse.id = item.id;
			mUse.call();
		},

		stopAll:function(){
			for( var k in this._items ){
				this._items[k].stop();
			}
		},

		_trendShow:function(){
			this._mTrend = new DR.sounds.Trend;
			this._mTrend.onLoad = this._mTrendRe;
			this._mTrend.call();
		},

		_mTrendRe:function(){
			D.removeLoadingOverlay( this.node );
			this._clear();
			for( var k = 0; k < this._mTrend.re.items.length; ++ k ){
				this._addItem( new T.Sounds.Item( this._mTrend.re.items[k], { addTitle:this.addTitle } ) );
			}
		},

		_onkeyup:function(e){
			if( e.keyCode == 27 && this._input.value() != '' ){
				if( this._mSearch ){
					this._mSearch.query = '';
				}
				this._input.value('');
				D.stopPropagation(e);
			}
			clearTimeout( this._searchTO );
			this._searchTO = setTimeout( this._search, 300 );
		},

		_empty:function(){
			return !trim( this._input.value() );
		},

		_search:function(){
			if( this._empty() ){
				this._mTrendRe();
				return;
			}
			if( this._mSearch && this._mSearch.query == this._input.value() ){
				return;
			}
			this._mSearch = new DR.sounds.Search;
			this._mSearch.pg = 1;
			this._mSearch.query = this._input.value();
			this._mSearch.onLoad = D.closure( this, this._mSearchRe, this._mSearch );
			this._mSearch.call();
			D.loadingOverlay( this._itemsNode );
		},

		_mSearchRe:function(){
			if( this._mSearch.pg < 2 ){
				this._clear();
				if( empty( this._mSearch.re.items ) ){
					this._mTrendRe();
					return;
				}
			}
			for( var k in this._mSearch.re.items ){
				var item = new T.Sounds.Item( this._mSearch.re.items[k], { addTitle:this.addTitle } );
				this._addItem(item);
			}
		},

		_onscroll:function(){
			if( this._empty() || !this._mSearch || this._mSearch.processing ){
				return;
			}
			if( this._itemsNode.scrollTop + this._itemsNode.offsetHeight + 50 < this._itemsNode.scrollHeight ){
				return;
			}
			if( empty( this._mSearch.re.items ) || this._mSearch.pg >= 30 ){
				return;
			}
			++ this._mSearch.pg;
			this._mSearch.call();
		},

		focus:function(){
			this._input.focus();
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
T.Sounds.Item = Class(
	{
		id:0,
		onclick:null,
		/** @type {T.Sounds} */
		parent:null,

		/**
		 * @param {DR.sounds.struct.Item} item
		 * @param {object} [par]
		 */
		__construct:function( item, par ){
			par = par || {};
			this.id = item.id;
			this.data = item;
			this._audio = mkE( {
				tag:'audio',
				attr:{
					autoplay:''
				},
				onplay:this._onplay,
				onpause:this._onpause
			} );
			this.node = mkE( {
				tag:'div',
				//onclick:this._onclick,
				className:'SoundsItem radius10',
				attr:{
					'data-id':item.id
				},
				els:[
					this._audio,
					{
						tag:'img',
						src:item.icon,
						onclick:this._toggle
					},
					{
						tag:'div',
						className:'title cut',
						els:[
							{
								tag:'b',
								text:item.title,
								title:htmlspecialchars( item.title )
							},
							{
								tag:'div',
								text:item.subtitle,
								className:'subtitle'
							}
						]
					},
					{
						tag:'div',
						className:'controls',
						els:[
							this._playButtonNode = mkE( {
								tag:'a',
								onclick:this.play,
								style:{
									minWidth:'68px'
								},
								els:[
									T.svgIcon('play'), 'Atskaņot'
								]
							} ),
							this._pauseButtonNode = mkE( {
								tag:'a',
								onclick:this.stop,
								style:{
									display:'none',
									minWidth:'68px'
								},
								els:[
									T.svgIcon('pause'), 'Apturēt'
								]
							} ),
							this._sendButtonNode = mkE( {
								tag:'a',
								onclick:this._onclick,
								els:[
									T.svgIcon('send-mail'), ( par.addTitle || 'Nosūtīt' )
								]
							} )
						]
					}
				]
			} );
		},

		_onplay:function(){
			this._playButtonNode.style.display = 'none';
			this._pauseButtonNode.style.display = '';
		},

		_onpause:function(){
			this._playButtonNode.style.display = '';
			this._pauseButtonNode.style.display = 'none';
		},
		
		play:function(){
			if( this.parent ){
				this.parent.stopAll();
			}
			if( empty( this._audio.src ) ){
				this._audio.src = this.data.mp3;
				mkE( {
					tag:'source',
					type:'audio/mpeg',
					src:this.data.mp3
				} ).append( this._audio );
			}
			this._audio.currentTime = 0;
			try{
				this._audio.play();
			} catch(e){
				D.console.error(e);
			}
		},

		_toggle:function(){
			if( this._audio.currentTime ){
				this.stop();
			} else {
				this.play();
			}
		},

		stop:function(){
			this._audio.pause();
			this._audio.currentTime = 0;
		},

		_onclick:function(){
			if( this.onclick ){
				this.onclick();
			}
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
T.Sounds.Embed = Class(
	{
		/**
		 * @param {DR.sounds.struct.Item} item
		 * @private
		 */
		__construct:function(item){
			this.data = item;
			this._audio = mkE( {
				tag:'audio',
				attr:{
					autoplay:''
				},
				onplay:this._onplay,
				onpause:this._onpause
			} );
			this.node = mkE( {
				tag:'div',
				className:'SoundsEmbed radius10',
				attr:{
					'data-id':item.id
				},
				onclick:this._toggle,
				els:[
					this._audio,
					{
						tag:'img',
						src:item.icon
					},
					{
						tag:'div',
						className:'cut title',
						els:[
							{
								tag:'b',
								text:item.title,
								title:htmlspecialchars( item.title )
							},
							{
								tag:'div',
								className:'subtitle',
								text:item.subtitle
							}
						]
					},
					{
						tag:'div',
						className:'controls',
						els:[
							this._playButtonNode = mkE( {
								tag:'a',
								//onclick:this.play,
								els:[
									T.svgIcon('play'),
									'Atskaņot'
								]
							} ),
							this._stopButtonNode = mkE( {
								tag:'a',
								//onclick:this.stop,
								els:[
									T.svgIcon('pause'),
									'Apturēt'
								]
							} )
						]
					},
					this._controlSoundNode = mkE( {
						tag:'div',
						className:'controlSound',
						onclick:this._toggleAutoPlay,
						els:[
							this._muteIconNode = mkE( {
								tag:'a',
								className:'SIcon',
								els:[
									T.svgIcon('music-volume-high')
								]
							} ),
							this._unmuteIconNode = mkE( {
								tag:'a',
								className:'SIcon',
								els:[
									T.svgIcon('music-volume-mute')
								]
							} )
						]
					} )
				]
			} );
			this._controlSoundNode.remove();
			this._stopButtonNode.style.display = 'none';
			this._muteIconNode.title = 'Atskaņo automātiski';
			this._unmuteIconNode.title = 'Neatskaņo automātiski';
			//this.updateAutoPlay();
			//$( D.msg ).bind( 'msgSoundAutoPlay', this.updateAutoPlay );
		},

		play:function(){
			if( empty( this._audio.src ) ){
				this._audio.src = this.data.mp3;
				mkE( {
					tag:'source',
					type:'audio/mpeg',
					src:this.data.mp3
				} ).append( this._audio );
			}
			this._audio.currentTime = 0;
			try{
				this._audio.play();
			} catch(e){
				D.console.error(e);
			}
		},

		stop:function(){
			try{
				this._audio.pause();
				this._audio.currentTime = 0;
			} catch(e){
				D.console.error(e);
			}
		},

		_toggle:function(){
			if( this._audio.currentTime ){
				this.stop();
			} else {
				this.play();
			}
		},

		_onplay:function(){
			this._playButtonNode.style.display = 'none';
			this._stopButtonNode.style.display = '';
		},

		_onpause:function(){
			this._playButtonNode.style.display = '';
			this._stopButtonNode.style.display = 'none';
			this._audio.currentTime = 0;
		},

		updateAutoPlay:function(){
			this._muteIconNode.style.display = D.chat.autoPlay ? '' : 'none';
			this._unmuteIconNode.style.display = D.chat.autoPlay ? 'none' : '';
		},

		_toggleAutoPlay:function(e){
			/*D.stopPropagation(e);
			D.chat.autoPlay = !D.chat.autoPlay;
			$( D.msg ).trigger('msgSoundAutoPlay');
			new RPC('/messages/talk/app.php').send(
				'settings',
				{
					name:'autoPlay',
					value:D.chat.autoPlay
				},
				D.doNothing
			);*/
		}
	},
	mkE.Base
);

/**
 * @param {function} cb
 * @param {{parent:Node,arrow:{top:boolean,left:boolean}}} [par]
 */
T.Sounds.insert = function( cb, par ){
	par = par || {};
	if( T.Sounds._sp ){
		T.Sounds._sp.close();
		T.Sounds._sp = null;
		return;
	}
	this._sp = new D.smallPopUp;
	this._sp.open( false, {
		title:'',
		_width:320,
		color:'White',
		onClose:function(){
			T.Sounds._sp = null;
		},
		bodyClose:true,
		parent:par.parent
	} );
	var g = new T.Sounds( {
		addTitle:par.addTitle
	} );
	g.append( this._sp.content );
	g.onclick = function(item){
		T.Sounds._sp.close();
		cb && cb(item);
	};
	this._sp.move();
	if( par.arrow ){
		this._sp.arrowPosition( par.arrow.left, par.arrow.top );
	}
	g.focus();
};

T.Sounds.available = function(){
	return D.LV;
};

T.Sounds.tour = function(  parent, par ){
	par = par || {};
	par.ad = par.ad || 624;
	if( !parent || !T.Sounds.available() ){
		return;
	}
	if( D.me.adddata[par.ad] ){
		return;
	}
	D.me.adddata[par.ad] = par.ad;
	var m = new DR.sounds.HideTour();
	m.addData = par.ad;
	m.call();
	var sp = new D.smallPopUp;
	sp.open(
		null,
		{
			//color:'White',
			title:'Jaunums!',
			parent:parent,
			width:300
		}
	);
	if( par.text ){ // hack gallery modal
		sp.node.style.right = '-183px';
		sp.arrow.style.right = '189px';
	}
	sp.arrowPosition( false, false );
	var node = mkE( {
		tag:'div',
		style:{
			padding:'12px',
			fontSize:'13px',
			fontWeight:'bold',
			whiteSpace:'normal'
		},
		els:[
			par.text || 'Tagad vari vēstulei pievienot arī skaņas! (music)'
		]
	} ).append( sp.content );
	D.smileyReplace(node);
};

// --- sounds.js ---

// +++ linkbox.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {T.LinkBox__par} par
 */
T.LinkBox = Class(
	/**
	 * @lends {T.LinkBox#}
	 */
	{
		/**
		 * @param {T.LinkBox__par} par
		 * @constructs
		 */
		__construct: function(par){
			this.links = par.links;

			this.node = mkE({
				tag: 'div',
				className: 'LinkBox'
			});

			if( par.className ){
				addClassName(this.node, par.className);
			}

			for( var i = 0, l = this.links.length; i < l; i++ ){
				new T.LinkBox.Link(this.links[i]).append(this.node);
			}
		}
	},
	mkE.Base
);

T.LinkBox__par = function(){};
/** @type {Array.<T.LinkBox.Link__par>} */
T.LinkBox__par.prototype.links = [];
/** @type {String} */
T.LinkBox__par.prototype.className = '';

/**
 * @class
 * @extends {mkE.Base}
 * @param {T.LinkBox.Link__par} link
 */
T.LinkBox.Link = Class(
	/**
	 * @lends {T.LinkBox.Link#}
	 */
	{
		/**
		 * @param {T.LinkBox.Link__par} link
		 * @constructs
		 */
		__construct: function(link){
			this.link = link;

			this.node = mkE({
				tag: 'a',
				className: 'LinkBoxLink',
				href: this.link.href,
				onclick: this.link.onclick,
				attr: this.link.attr
			});

			mkE.appendTypeElement(this.node, this.link.caption);

			if( this.link.badge ){
				mkE({
					tag: 'span',
					className: 'badge ' + (this.link.badgeOn ? 'on' : 'off'),
					text: this.link.badge
				}).append(this.node);
				addClassName(this.node, 'withBadge');
			}
		}
	},
	mkE.Base
);

T.LinkBox.Link__par = function(){};
T.LinkBox.Link__par.prototype.caption = '';
T.LinkBox.Link__par.prototype.onclick = D.doNothing;
T.LinkBox.Link__par.prototype.href = '';
T.LinkBox.Link__par.prototype.badge = null;
T.LinkBox.Link__par.prototype.badgeOn = false;
T.LinkBox.Link__par.prototype.attr = {};
// --- linkbox.js ---

// +++ location_select.js +++
/**
 * @class {T.LocationSelect}
 * @extends {mkE.Base}
 */
T.LocationSelect = Class(
	/**
	 * @lends {T.LocationSelect#}
	 */
	{
		_callback: D.doNothing,
		_location: null,

		/**
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};

			var p = new T.ACSearch.Par();
			p.placeholder = D.Lang.get('search_location') + '...';
			p.search = this._search;
			p.defaults = this._getDefaults;
			p.itemsTitle = D.Lang.get('locations');
			p.replaceSelected = true;
			p.limit = 1;
			p.onChange = this._change;

			this._ac = new T.ACSearch(p);
			if( par.value ){
				this._ac.value([par.value]);
			}

			this.node = mkE({
				tag: 'div',
				className: 'SayLocationSearch',
				els: [
					this._ac.node
				]
			});

			D.addJS('https://maps.googleapis.com/maps/api/js?key=AIzaSyDSRvwUbG9oR6TSijx3y-AlQ37yzS7fXFs&libraries=places', this._onGooglePlaces);
		},

		focus: function(){
			this._ac.focus();
		},

		clear: function(clearValues){
			this._ac.clear(clearValues);
			this._onHeightChange();
		},

		_search: function(par){
			this._callback = par.callback;

			this._mSearch = new DR.places.Search;
			this._mSearch.query = par.query;
			this._mSearch.limit = 8;

			if( this._location ){
				this._mSearch.location = this._location;
			}

			this._mSearch.select = [
				new DR.places.select.SearchRe().all(),
				new DR.places.select.Item().all().counts(false)
			];
			this._mSearch.onLoad = this._onSearch;
			this._mSearch.call();
		},

		_onSearch: function(){
			if( !this._mSearch || this._mSearch.error || !this._mSearch.re ){
				this._callback();
				return;
			}
			var items = this._mSearch.re.items;
			var re = [];
			for( var i = 0, l = items.length; i < l; i++ ){
				var item = items[i];

				var address = [];
				if( item.location ){
					var location = item.location;
					if( location.address ){
						address.push(location.address);
					}
					if( location.city ){
						address.push(location.city);
					}
					if( location.country ){
						address.push(location.country);
					}
				}
				address = address.join(', ');

				var icon;
				if( item.cat && item.cat.icon ){
					icon = item.cat.icon;
				}else{
					icon = this._defaultIcon();
				}

				var data = new T.ACSearch.Item.Par();
				data.caption = item.name;
				data.info = address;
				data.icon = icon;
				data.value = item.id;
				data.selectedInfo = D.Lang.get('selected_item');
				data.extra = {
					url: item.url
				};

				re.push(new T.ACSearch.Item(data));
			}
			this._callback(re);
			if( !this.searchStats ){
				this.searchStats = true;
				D.Say.Form.stats('nsf_search_loc');
			}
			this._onHeightChange();
		},

		_defaultIcon: function(){
			return mkE({
				tag: 'div',
				className: 'location-default-icon',
				els: [
					T.svgIcon({
						icon: 'location',
						size: 20
					})
				]
			});
		},

		_change: function(){
			this._onChange(reset(this._ac.value()));
		},

		_onChange: function(){},
		_onHeightChange: function(){},

		_getDefaults: function(callback){
			this._defaultsCallback = callback;
			if( this._defaultPlaces ){
				this._returnDefaults(this._mGetDefaults.re.items);
				return;
			}
			this._mGetDefaults = new DR.places.GetLastPlaces;
			this._mGetDefaults.count = 5;
			this._mGetDefaults.showNearby = true;
			this._mGetDefaults.select = [
				new DR.places.select.SearchRe().all(),
				new DR.places.select.Item().all().counts(false)
			];
			this._mGetDefaults.onLoad = this._onGetDefaults;
			this._mGetDefaults.call();
		},

		_onGetDefaults: function(){
			if( !this._mGetDefaults || this._mGetDefaults.error || !this._mGetDefaults.re ){
				this._defaultsCallback([]);
				return;
			}
			this._defaultPlaces = this._mGetDefaults.re.items;
			this._returnDefaults(this._mGetDefaults.re.items);
		},

		_returnDefaults: function(items){
			var re = [];
			for( var i = 0, l = items.length; i < l; i++ ){
				var item = items[i];

				var address = [];
				if( item.location ){
					var location = item.location;
					if( location.address ){
						address.push(location.address);
					}
					if( location.city ){
						address.push(location.city);
					}
					if( location.country ){
						address.push(location.country);
					}
				}
				address = address.join(', ');

				var icon;
				if( item.cat && item.cat.icon ){
					icon = item.cat.icon;
				}else{
					icon = this._defaultIcon();
				}

				var data = new T.ACSearch.Item.Par();
				data.caption = item.name;
				data.info = address;
				data.icon = icon;
				data.value = item.id;
				data.selectedInfo = D.Lang.get('selected_item');
				data.extra = {
					url: item.url
				};

				re.push(new T.ACSearch.Item(data));
			}
			this._defaultsCallback(re);
			this._onHeightChange();
		},

		_searchRegions: function(v, list){
			this._rpcSearchRegions(v, list);
			// return;

			// this._mGetLocations = new DR.location.Search();
			// this._mGetLocations.type = DR.location.Search.TYPE_CITY;
			// this._mGetLocations.query = v;
			// this._mGetLocations.pg = 1;
			// this._mGetLocations.select = [
			// 	new DR.location.select.SearchRe().items(),
			// 	new DR.location.select.Place().id().name().location().countryName()
			// ];
			// this._mGetLocations.onLoad = D.closure(this, this._onSearchRegions, list);
			// this._mGetLocations.call();
		},

		_onSearchRegions: function(list){
			if( !this._mGetLocations || this._mGetLocations.error || !this._mGetLocations.re ){
				return;
			}
			var items = [];
			for( var i = 0, l = this._mGetLocations.re.items.length; i < l; i++ ){
				var location = this._mGetLocations.re.items[i];
				items.push({
					value: location.location.lat + ',' + location.location.lng,
					caption: location.name + ', ' + location.countryName
				});
			}
			list.setList(items);
		},

		_rpcSearchRegions: function(v, list){
			new RPC('/rq/app.php').send('searchRegions', {
				v: v,
				geocoder: true
			}, D.closure(this, this._onRpcSearchRegions, list));
		},

		_onRpcSearchRegions: function(list, re){
			if( empty(re) ){
				return;
			}
			var items = [];
			for( var i = 0, l = re.length; i < l; i++ ){
				var location = re[i];
				items.push({
					value: location.id,
					caption: location.name
				});
			}
			list.setList(items);
		},

		_onGooglePlaces: function(){
			this._regionInput = new T.Form.Input({
				placeholder: D.Lang.get('location_search_region'),
				size: 'small',
				onchange: this._onGoogleInputChange
			}).append(this._ac.searchContainer);
			this._regionAutocomplete = new google.maps.places.Autocomplete(this._regionInput._inputNode);
			this._regionAutocomplete.addListener('place_changed', this._onGooglePlaceChange);
			$(document).on('mousedown', '.pac-container', this._googleMouseDown);
		},

		_googleMouseDown: function(){
			T.Popover.ignoreClick = true;
			setTimeout(function(){
				T.Popover.ignoreClick = false;
			}, 100);
		},

		_onGooglePlaceChange: function(){
			var place = this._regionAutocomplete.getPlace();
			if( !place || !place.geometry || !place.geometry.location ){
				return;
			}
			var location = new DR.base.struct.LatLng();
			location.lat = place.geometry.location.lat();
			location.lng = place.geometry.location.lng();

			this._location = location;
			this.focus();
			this._ac._onInputChange();
		},

		_onGoogleInputChange: function(){
			if( empty(this._regionInput.value()) ){
				this._location = null;
			}
		}
	},
	mkE.Base
);
// --- location_select.js ---

// +++ tag_select.js +++
/**
 * @class {T.TagSelect}
 * @extends {mkE.Base}
 */
T.TagSelect = Class(
	/**
	 * @lends {T.TagSelect#}
	 */
	{
		_isGalleryTagSelect: false,
		_selectables: {},
		_callback: D.doNothing,
		/**
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};

			if ( par.galleryTagSelect ) {
				this._isGalleryTagSelect = true;
			}

			var p = new T.ACSearch.Par();
			p.placeholder = D.Lang.get('Search friend');
			p.search = this._search;
			p.defaults = this._getDefaults;
			p.itemsTitle = D.Lang.get('friends');
			p.limit = -1;
			p.onChange = this._change;
			p.onRemove = this._removeItem;
			p.onAdd = this._acAddItem;

			this._ac = new T.ACSearch(p);
			if( par.values ){
				this._ac.value(par.values);
			}

			this.node = mkE({
				tag: 'div',
				els: [
					this._ac.node
				]
			});
		},

		focus: function(){
			this._ac.focus();
		},

		clear: function(clearValues){
			this._ac.clear(clearValues);
			this._onHeightChange();
		},

		_search: function(par){
			this._callback = par.callback;

			if ( this._isGalleryTagSelect ) {
				this._mSearch = new DR.search.GalleryTagUsers;
				this._mSearch.pid = 0;
			} else {
				this._mSearch = new DR.search.Friends;
			}
			this._mSearch.query = par.query;
			this._mSearch.count = 8;
			this._mSearch.pg = 1;
			this._mSearch.showUnregistered = true;
			this._mSearch.select = [
				new DR.search.select.FriendsRe().users(),
				new DR.users.select.User().id().title().url().image().type(),
				new DR.users.select.Image().small(),
				new DR.users.select.UserDefault().aktitle().online()
			];
			this._mSearch.onLoad = this._onSearch;
			this._mSearch.call();
		},

		_onSearch: function(){
			if( !this._mSearch || this._mSearch.error || !this._mSearch.re ){
				this._callback();
				return;
			}
			var items = this._mSearch.re.users;
			var re = [];
			for( var i = 0, l = items.length; i < l; i++ ){
				var item;
				if ( this._isGalleryTagSelect ) {
					item = items[i].user;
					this._selectables[item.id] = items[i].selectable;
				} else {
					item = items[i];
				}

				if( item.type == D.TYPE_UNKNOWN ){
					item.id = item.id + '-' + item.title;
				}

				var data = new T.ACSearch.Item.Par();
				data.caption = item.title;
				data.info = '';
				data.icon = item.image.small;
				data.value = item.id;
				data.selectedInfo = D.Lang.get('selected_item');
				data.extra = {
					url: item.url,
					aktitle: item.aktitle || item.title,
					type: item.type
				};

				var acItem = new T.ACSearch.Item(data);
				if( item.online ){
					addClassName(acItem.node, 'userOnline userOnline' + item.online.toUpperCase());
				}

				re.push(acItem);
			}
			this._callback(re);
			this._onSearchFinished();
			if( !this.searchStats ){
				this.searchStats = true;
				D.Say.Form.stats('nsf_tag_friend_search');
			}
			this._onHeightChange();
		},

		_onSearchFinished: function(){},

		_change: function(){
			this._onChange(this._ac.value());
			var values = this._ac.value();
			this._ac.clear();

			if ( this._isGalleryTagSelect && values.length ) {
				for ( var n = 0; n < values.length; n++ ) {
					if ( isset( this._selectables[ values[n].value ] ) && !this._selectables[ values[n].value ] ) {
						this._ac._activeRemove( values[n].value );
						this._removeItem( values[n].value );
						alert( D.Gallery.l.get('User disable user select') );
					}
				}
			}
		},

		_removeItem: function( value ){
			this._onRemoveItem( value );
		},

		_acAddItem: function( value ) {
			this._onAddItem( value );
		},

		_onChange: function(){},

		_onHeightChange: function(){},
		_onRemoveItem: function(){},
		_onAddItem: function( value ) {},

		_getDefaults: function(callback){
			this._defaultsCallback = callback;
			if( this._defaultUsers ){
				this._returnDefaults(this._mGetDefaults.re.users);
				return;
			}
			this._mGetDefaults = new DR.users.FriendsClosest;
			this._mGetDefaults.pg = 1;
			this._mGetDefaults.count = this._isGalleryTagSelect && !isset(D.me.adddata[14]) ? 4 : 5;
			this._mGetDefaults.select = [
				new DR.users.select.FriendsRe().users(),
				new DR.users.select.User().id().title().url().image().type(),
				new DR.users.select.Image().small(),
				new DR.users.select.UserDefault().aktitle().online()
			];
			this._mGetDefaults.onLoad = this._onGetDefaults;
			this._mGetDefaults.call();
		},

		_onGetDefaults: function(){
			if( !this._mGetDefaults || this._mGetDefaults.error || !this._mGetDefaults.re ){
				this._defaultsCallback([]);
				return;
			}
			this._defaultUsers = this._mGetDefaults.re.users;
			this._returnDefaults(this._mGetDefaults.re.users);
		},

		_returnDefaults: function(items){
			var re = [];

			var data;
			var acItem;

			if ( this._isGalleryTagSelect && !isset(D.me.adddata[14]) ) {
				data = new T.ACSearch.Item.Par();
				data.caption = D.me.title;
				data.info = '';
				data.icon = D.me.image.small;
				data.value = D.ID;
				data.selectedInfo = D.Lang.get('selected_item');
				data.extra = {
					url: D.me.url,
					aktitle: D.me.aktitle,
					type: D.me.type
				};

				acItem = new T.ACSearch.Item(data);
				addClassName(acItem.node, 'userOnline userOnlineWWW');

				re.push(acItem);
			}

			for( var i = 0, l = items.length; i < l; i++ ){
				var item = items[i];

				data = new T.ACSearch.Item.Par();
				data.caption = item.title;
				data.info = '';
				data.icon = item.image.small;
				data.value = item.id;
				data.selectedInfo = D.Lang.get('selected_item');
				data.extra = {
					url: item.url,
					aktitle: item.aktitle,
					type: item.type
				};

				acItem = new T.ACSearch.Item(data);
				if( item.online ){
					addClassName(acItem.node, 'userOnline userOnline' + item.online.toUpperCase());
				}

				re.push(acItem);
			}
			this._defaultsCallback(re);
			this._onHeightChange();
		}
	},
	mkE.Base
);
// --- tag_select.js ---

// +++ searcher.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {T.Searcher.Par} par
 */
T.Searcher = Class(
	/**
	 * @lends {T.Searcher#}
	 */
	{
		/**
		 * @param {T.Searcher.Par} par
		 * @constructs
		 */
		__construct: function(par){
			par = par || new T.Searcher.Par();
			this.par = par;

			this.node = mkE({
				tag: 'div',
				className: 'Searcher',
				els: [
					this._input = new T.Form.Input({
						placeholder: this.par.placeholder || D.Lang.get('search'),
						size: 'small',
						onkeyup: this._onkeyup,
						onchange: this._onchange
					})
				]
			});

			mkE({
				tag: 'span',
				className: 'submit',
				els: [
					T.svgIcon({
						icon: 'search-passive',
						fill: false
					})
				],
				onclick: this.search
			}).append(this._input._borderNode);
		},

		_onkeyup: function(e){
			var keyCode = e.keyCode || e.which;
			if( keyCode == 13 || keyCode == 10 ){
				if( !this.par.onSearch ){
					return;
				}
				this.par.onSearch(this.value());
			}
		},

		_onchange: function(){
			if( this.par.timeoutMs > 0 ) {
				if( this._prevValue !== this.value() ) {
					clearTimeout(this._to);
					this._to = setTimeout(this.search, this.par.timeoutMs);
					this._prevValue = this.value();
				}
			}
			if( !this.par.onChange ){
				return;
			}
			this.par.onChange(this.value());
		},

		search: function(){
			if( this.par.minLength > 0 && trim(this.value()).length < this.par.minLength ) {
				return;
			}
			if( !this.par.onSearch ){
				return;
			}
			this.par.onSearch(this.value());
		},

		value: function(v){
			if( isset(v) ){
				this._input.value(v);
			}
			return this._input.value();
		},

		clear: function(){
			this._input.value('');
		},

		focus: function(){
			this._input.focus();
		},

		blur: function(){
			this._input.blur();
		}
	},
	mkE.Base
);

/**
 * @class
 */
T.Searcher.Par = Class(
	/**
	 * @lends {T.Searcher.Par#}
	 */
	{
		placeholder: '',
		onChange: null,
		onSearch: null,
		timeoutMs: 0,
		/** @type {int} */
		minLength: null,

		/**
		 * @param {String} v
		 * @returns {T.Searcher.Par}
		 */
		setPlaceholder: function(v){
			this.placeholder = v;
			return this;
		},

		/**
		 * @param {Function} v
		 * @returns {T.Searcher.Par}
		 */
		setOnChange: function(v){
			this.onChange = v;
			return this;
		},

		/**
		 * @param {Function} v
		 * @returns {T.Searcher.Par}
		 */
		setOnSearch: function(v){
			this.onSearch = v;
			return this;
		},

		/**
		 * @param {int} v
		 * @return {T.Searcher.Par}
		 */
		setTimeoutMs: function ( v ) {
			this.timeoutMs = v;
			return this;
		},

		/**
		 * @param {int} v
		 * @return {T.Searcher.Par}
		 */
		setMinLength: function ( v ) {
			this.minLength = v;
			return this;
		}
	}
);
// --- searcher.js ---

// +++ horizontal_scroll.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {T.HorizontalScroll.Par} par
 */
T.HorizontalScroll = Class(
	/**
	 * @lends {T.HorizontalScroll#}
	 */
	{
		/**
		 * @param {T.HorizontalScroll.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par || new T.HorizontalScroll.Par();

			this.perRow = par.perRow;
			this.itemWidth = par.itemWidth;
			this.itemMargin = par.itemMargin;

			this.advancedBrowser = this._advancedBrowser();

			this.pg = 1;
			this.count = 0;

			this.node = mkE({
				tag: 'div',
				className: 'HorizontalScroll',
				els: [
					this._items = mkE({
						tag: 'div',
						className: 'items'
					})
				]
			});

			if( this.par.className ){
				addClassName(this.node, this.par.className);
			}

			this._addButtons();

			this.addItems(par.items);
		},

		_advancedBrowser: function(){
			var el = document.createElement('div');
			return el.style.transform !== undefined;
		},

		/**
		 * @param {Array.<Node>} items
		 */
		addItems: function(items){
			for( var i = 0, l = items.length; i < l; i++ ){
				var item = items[i];
				addClassName(item, 'HorizontalScrollItem');
				item.append(this._items);
			}
			this.refresh();
		},

		_addButtons: function(){
			this._prevButtonNode = mkE({
				tag: 'a',
				className: 'controlsButton prevButton',
				onclick: this._previousPage,
				els: [
					{
						tag: 'div',
						els: [
							T.svgIcon({
								icon: 'arrow-1-le',
								size: 24,
								fill: false
							})
						]
					}
				]
			}).prepend(this.node);

			this._nextButtonNode = mkE({
				tag: 'a',
				className: 'controlsButton nextButton',
				onclick: this._nextPage,
				els: [
					{
						tag: 'div',
						els: [
							T.svgIcon({
								icon: 'arrow-1-ri',
								size: 24,
								fill: false
							})
						]
					}
				]
			}).append(this.node);
		},

		refresh: function(){
			this.count = this._items.childNodes.length;
			this.pgs = Math.max(1, Math.ceil(this.count / this.perRow));
			if( this.pg > this.pgs ){
				this.pg = this.pgs;
				this._position();
			}
			this._refreshButtons();
		},

		_previousPage: function(){
			if( this.pg == 1 ){
				return;
			}
			this.pg--;
			this._position();
			this._refreshButtons();
		},

		_nextPage: function(){
			if( this.pg == this.pgs ){
				return;
			}
			this.pg++;
			this._position();
			this._refreshButtons();
		},

		_refreshButtons: function(){
			removeClassName(this._prevButtonNode, 'disabled');
			removeClassName(this._nextButtonNode, 'disabled');
			if( this.pg == 1 ){
				addClassName(this._prevButtonNode, 'disabled');
			}
			if( this.pg == this.pgs ){
				addClassName(this._nextButtonNode, 'disabled');
			}
		},

		_position: function(){
			var left = (this.itemWidth + this.itemMargin) * this.perRow * (this.pg - 1);
			if( left < 0 ){
				left = 0;
			}
			if( this.advancedBrowser ){
				left *= -1;
				this._items.style.transform = 'translateX(' + left + 'px)';
			}else{
				this._items.scrollLeft = left;
			}
			this.par.onPageChange(this.pg);
		}
	},
	mkE.Base
);

/**
 * @class
 */
T.HorizontalScroll.Par = Class(
	/**
	 * @lends {T.HorizontalScroll.Par#}
	 */
	{
		perRow: 4,
		itemWidth: 113,
		itemMargin: 16,
		className: '',
		/** @type {Array.<Node>} */
		items: [],
		onPageChange: D.doNothing,

		setPerRow: function(v){
			this.perRow = v;
			return this;
		},

		setItemWidth: function(v){
			this.itemWidth = v;
			return this;
		},

		setItemMargin: function(v){
			this.itemMargin = v;
			return this;
		},

		setClassName: function(v){
			this.className = v;
			return this;
		},

		setItems: function(v){
			this.items = v;
			return this;
		},

		setOnPageChange: function(v){
			this.onPageChange = v;
			return this;
		}
	}
);
// --- horizontal_scroll.js ---

// +++ left_footer.js +++
/**
 * @class
 * @extends mkE.Base
 */
T.LeftFooter = Class(
	/**
	 * @lends {T.LeftFooter#}
	 */
	{
		_animationFrame: null,
		_lastElement: null,
		__construct: function () {
			this.node = mkE({
				tag: 'div',
				id: 'leftFooter',
				className: 'new',
				els: [
					this._wrapper = mkE({
						tag: 'div',
						className: 'wrapper',
						els: [
							{
								tag: 'span',
								className: 'footerItems',
								els: [
									{
										tag: 'a',
										href: '/stats/click.php?key=footer_services_left&url=' + encodeURIComponent('/services/'),
										className: 'item',
										text: D.Lang.get('draugiem_services', 'xPortal')
									},
									{
										tag: 'a',
										href: '/stats/click.php?key=footer_mobile_left&url=' + encodeURIComponent('/help/?tab=5'),
										className: 'item',
										text: D.Lang.get('mobile_version', 'xPortal')
									},
									{
										tag: 'a',
										href: '/stats/click.php?key=footer_help_left&url=' + encodeURIComponent('/help/'),
										className: 'item',
										text: D.Lang.get('help', 'xPortal')
									},
									{
										tag: 'a',
										href: '/stats/click.php?key=footer_ads_left&url=' + encodeURIComponent('/ads/'),
										className: 'item',
										text: D.Lang.get('adverts', 'xPortal')
									},
									{
										tag: 'a',
										href: '/stats/click.php?key=footer_work_left&url=' + encodeURIComponent(D.work.url),
										className: 'item',
										text: 'Darbs'
									},
									{
										tag: 'span',
										className: 'badge ' + (D.work.active ? 'on' : ''),
										text: +D.work.badge
									},
									{
										tag: 'span',
										els: [
											{
												tag: 'a',
												href: 'javascript:',
												className: 'item',
												text: 'Vairāk',
												onclick: D.closure(this, this._drawChoices)
											},
											this._optIconNode = mkE({
												tag: 'a',
												className: 'SIcon optionsSIcon icnUp',
												onclick: D.closure(this, this._drawChoices)
											})
										]
									},
									this.drawChoicesNode = mkE({
										tag: 'div'
									})
								]
							},
							{
								tag: 'a',
								attr: {
									target: '_blank'
								},
								href: 'https://draugiemgroup.com/',
								els: [
									{
										tag: 'div',
										className: 'dr-grupa'
									}
								]
							},
							{
								tag: 'div',
								id: 'footerLeftCopyright',
								els: [
									{
										tag: 'p',
										els: [
											{
												tag: 'span',
												innerHTML: '&copy; '
											},
											'2004 - ' + String((new D.Date()).getYear()) + ' ' + String(D.Lang.get('1', 'xGlobal'))
										]
									}
								]
							}
						]
					})
				]
			});
			this.reset();
		},
		reset: function () {
			this.onScroll();
		},
		onResize: function () {
			this.reset();
		},
		onScroll: function () {
			if( this._animationFrame ) {
				D.cancelAnimationFrame(this._animationFrame);
			}
			this._animationFrame = D.requestionAnimationFrame(this._position);
		},
		_position: function () {
			if( this.node.nextSibling ) {
				this.node.append(this.node.parentNode);
			}

			var bottom = 10;
			var y = this.node.getBoundingClientRect().top;
			if( window.innerHeight - y < this._wrapper.offsetHeight + bottom ) {
				this._wrapper.style.position = '';
				this._wrapper.style.bottom = '';
			} else {
				var marquee = document.getElementById('marquee');
				if( marquee ) {
					bottom += marquee.offsetHeight;
				}
				this._wrapper.style.position = 'fixed';
				this._wrapper.style.bottom = bottom + 'px';
			}
		},
		_drawChoices: function () {
			var opt;
			if( this.isOpen ) {
				this.isOpen = false;
				if( !dd ) {
					return;
				}
				dd.toggle();
			}
			this.isOpen = true;
			var dd = new T.Options;
			opt = new T.Options.Item({
				caption: D.Lang.get('developers', 'xPortal'),
				onclick: D.closure(this, function () {
					window.location.href = '/stats/click.php?key=footer_developers_left&url=' + encodeURIComponent('/applications/dev/');
				})
			});
			dd.addItem(opt);
			opt = new T.Options.Item({
				caption: D.Lang.get('about_us', 'xPortal'),
				onclick: D.closure(this, function () {
					window.location.href = '/stats/click.php?key=footer_employees_left&url=' + encodeURIComponent('/employees/');
				})
			});
			dd.addItem(opt);
			opt = new T.Options.Item({
				caption: D.Lang.get('Lietošanas noteikumi', 'xPortal'),
				onclick: D.closure(this, function () {
					window.location.href = '/stats/click.php?key=footer_rules_left&url=' + encodeURIComponent('/help/?tab=3');
				})
			});
			dd.addItem(opt);
			opt = new T.Options.Item({
				caption: D.Lang.get('privacy', 'xPortal'),
				onclick: D.closure(this, function () {
					window.location.href = '/stats/click.php?key=footer_privacy_left&url=' + encodeURIComponent('/help/?tab=10');
				})
			});
			dd.addItem(opt);
			addClassName(dd.node, 'up');
			addClassName(dd.node, 'up');
			dd.node.style.right = '59px';
			dd.node.style.top = '-72px';
			dd.append(this.drawChoicesNode);
			//dd.toggle( this.leftFooter );
		}
	},
	mkE.Base
);
// --- left_footer.js ---

// +++ user_list.js +++
/**
 * @class
 * @param {T.UserList.Par} par
 * @extends mkE.Base
 */
T.UserList = Class(
	/**
	 * @lends {T.UserList#}
	 */
	{
		/** @type {T.UserList.Par} par */
		par: null,

		__construct: function ( par ) {
			this.par = par;

			this.node = mkE({
				tag: 'div',
				className: 'userList ' + (par.className || ''),
				els: [
					this._nTabsContainer = mkE({
						tag: 'div',
						className: 'tabsWrap'
					}),
					this._nListContainer = mkE({
						tag: 'div'
					})
				]
			});

			this._drawTabs();
		},

		setLoading: function () {
			D.loadingOverlay(this.node, {delay: true});
		},

		unsetLoading: function () {
			D.removeLoadingOverlay(this.node);
		},

		loadTab: function ( tabIndex ) {
			this._tabs.select(tabIndex, false);
			this.par.onLoadTab(tabIndex);
		},

		loadPage: function ( pg ) {
			this.par.onLoadPage(pg);
		},

		loadCallback: function ( users, pg, pgs ) {
			this.users = users;
			this.pg = pg;
			this.pgs = pgs;
			this.draw();
		},

		draw: function () {
			D.removeLoadingOverlay(this.node);
			clearNode(this._nListContainer);
			this._drawUsers();
			if ( this.par.onLoadPage ) {
				if ( this.pg === 1 ) {
					if ( this._pager ) {
						this._pager.remove();
					}
					this._pager = new T.Pg({
						pg: this.pg,
						pgs: this.pgs,
						callback: this.loadPage
					}).append(this.node);
				}
			}
			return this;
		},

		_drawTabs: function () {
			if ( empty(this.par.tabs) ) {
				return;
			}

			var items = [];
			for ( var i = 0; i < this.par.tabs.length; i++ ) {
				var tab = this.par.tabs[i];
				items.push(new T.TopMenuItem(
					new T.TopMenuItem.Par()
						.setCaption(tab.caption)
						.setBadge(tab.badge)
						.setOnClick(D.closure(this, this.loadTab, tab.index))
						.setSelected(this.par.defaultTab === tab.index)
				));
			}

			(this._tabs = new T.TopMenu(
				new T.TopMenu.Par().setItems(items)
			)).append(this._nTabsContainer);
		},

		_drawUsers: function () {
			if( !this.users.length ) {
				if( this.par.emptyText !== false ) {
					T.info(this.par.emptyText ? this.par.emptyText : D.Lang.get('search_no_results')).append(this._nListContainer);
				}
				return;
			}
			for ( var i = 0; i < this.users.length; i++ ) {
				var user = this.users[i], node;
				switch ( user.type ) {
					case DR.users.struct.User.TYPE_DEFAULT:
						node = this._drawUserDefault(user);
						break;
					case DR.users.struct.User.TYPE_API:
					case DR.users.struct.User.TYPE_GROUPS:
					case DR.users.struct.User.TYPE_BIZ:
					default:
						node = this._drawUser(user);
				}
				node.append(this._nListContainer);
				if ( !((i + 1) % this.par.itemsPerRow) ) {
					addClassName(node, 'last');
					T.clear().append(this._nListContainer);
				}
			}
		},

		_drawUser: function ( user ) {
			return mkE({
				tag: 'div',
				className: 'userBox',
				els: [
					{
						tag: 'a',
						className: 'userPicture',
						href: user.url,
						els: [
							user.image[this.par.pictureSize] ? {
								tag: 'img',
								src: user.image[this.par.pictureSize]
							} : false
						]
					},
					{
						tag: 'div',
						className: 'aboutInfo',
						els: [
							{
								tag: 'a',
								href: user.url,
								text: user.title
							}
						]
					}
				]
			});
		},

		/** @param {DR.users.struct.UserDefault} user */
		_drawUserDefault: function ( user ) {
			var onlineEnv = user.online === 'www' ? 'WWW' : 'Mobile';

			return mkE({
				tag: 'div',
				className: 'userBox ' + (user.isFriend ? 'friends' : ''),
				els: [
					{
						tag: 'a',
						className: 'userPicture',
						href: user.url,
						els: [
							user.image[this.par.pictureSize] ? {
								tag: 'img',
								src: user.image[this.par.pictureSize]
							} : false,
							user.online ? {
								tag: 'span',
								className: 'onlineStatus online' + onlineEnv + 'Icon'
							} : false,
							user.isBirthday || user.isNameday ? {
								tag: 'span',
								className: user.isBirthday ? 'happy_bd' : 'happy_vd'
							} : false
						]
					},
					{
						tag: 'div',
						className: 'aboutInfo',
						els: [
							{
								tag: 'a',
								href: user.url,
								text: user.title
							},
							user.nickname ? {
								tag: 'span',
								els: [
									{tag: 'br'},
									user.nickname
								]
							} : false,
							user.city ? {
								tag: 'span',
								els: [
									{tag: 'br'},
									user.city
								]
							} : false,
							user.showAge && user.age ? {
								tag: 'span',
								els: [
									{tag: 'br'},
									'(' + user.age + ')'
								]
							} : false
						]
					},
					this.par.bottomHTML ? {
						tag: 'div',
						className: 'extraHtml',
						els: this.par.bottomHTML(user)
					} : ''
				]
			});
		}
	},
	mkE.Base
);

/**
 * @class
 */
T.UserList.Par = Class(
	/**
	 * @lends {T.UserList.Par#}
	 */
	{
		/** @type {string|null} */
		defaultTab: null,
		/** @type {string} */
		pictureSize: 'icon',
		/** @type {function} */
		onLoadPage: null,
		/** @type {function} */
		onLoadTab: null,
		/** @type {int} */
		itemsPerRow: 4,
		/** @type {string|null} */
		className: null,
		/** @type {array} */
		tabs: null,
		/** @type {function} */
		bottomHTML: null,
		/** @type {string|bool} */
		emptyText: null,
		/**
		 * @param {string|bool} v
		 * @return {T.UserList.Par}
		 */
		setEmptyText: function ( v ) {
			this.emptyText = v;
			return this;
		},
		/**
		 * @param {function} v
		 * @return {T.UserList.Par}
		 */
		setBottomHTML: function ( v ) {
			this.bottomHTML = v;
			return this;
		},
		/**
		 * @param {string} v
		 * @return {T.UserList.Par}
		 */
		setDefaultTab: function ( v ) {
			this.defaultTab = v;
			return this;
		},
		/**
		 * @param {Array} v
		 * @return {T.UserList.Par}
		 */
		setTabs: function ( v ) {
			this.tabs = v;
			return this;
		},
		/**
		 * @param {string} v
		 * @return {T.UserList.Par}
		 */

		setPictureSize: function ( v ) {
			this.pictureSize = v;
			return this;
		},
		/**
		 * @param {function} v
		 * @return {T.UserList.Par}
		 */
		setOnLoadPage: function ( v ) {
			this.onLoadPage = v;
			return this;
		},
		/**
		 * @param {function} v
		 * @return {T.UserList.Par}
		 */
		setOnLoadTab: function ( v ) {
			this.onLoadTab = v;
			return this;
		},
		/**
		 * @param {int} v
		 * @return {T.UserList.Par}
		 */
		setItemsPerRow: function ( v ) {
			this.itemsPerRow = v;
			return this;
		},
		/**
		 * @param {string} v
		 * @return {T.UserList.Par}
		 */
		setClassName: function ( v ) {
			this.className = v;
			return this;
		}
	}
);

T.UserList.Wave = function (uid, node) {
	if( node._waved ) {
		return;
	}
	node._waved = true;

	D.onLoad('DR.users', D.closure(this, function ( uid ) {
		var m = new DR.users.Wave();
		m.uid = uid;
		m.call();
	}, uid));

	addClassName(node.parentElement, 'waved');
	setTimeout(D.closure(this, function(node) {
		node.parentElement.remove();
	}, node), 750);

	T.UserList.MenuStats('wave');

	return false;
};

T.UserList.MenuStats = function (key) {
	$.get('/stats/ping.php', {key: 'usrlstmn_' + key});
};
// --- user_list.js ---

// +++ form_ac.js +++
/**
 * @class
 * @param {T.Form.AutoComplete.Par} par
 * @extends T.Form.Base
 */
T.Form.AutoComplete = Class(
	/**
	 * @lends {T.Form.AutoComplete#}
	 */
	{
		/** @type {T.Form.AutoComplete.Par} */
		par: null,
		/** @type {T.Form.AutoComplete|null} */
		_value: null,
		/** @type {int|null} */
		_inputTimeout: null,
		/** @type {T.Form.AutoComplete.Item[]} */
		_items: [],
		/** @param {T.Form.AutoComplete.Par} par */
		__construct: function ( par ) {
			this.par = par;

			this.node = mkE({
				tag: 'div',
				className: 'formItem formItemInput formItemInputAuto radius2 ' + (par.className || ''),
				els: [
					this._captionNode = mkE({
						tag: 'label',
						style: {
							display: 'none'
						},
						els: [
							this._captionTextNode = mkE({
								tag: 'span',
								text: ''
							})
						]
					}),
					this._borderNode = mkE({
						tag: 'div',
						className: 'formItemBorder radius2',
						els: [
							{
								tag: 'div',
								className: 'formItemPadding radius2',
								els: [
									this._inputNode = mkE({
										tag: 'input',
										prop: {
											id: par.id || '',
											name: par.name || '',
											autocomplete: false,
											onfocus: D.closure(this, this._onfocus),
											onblur: D.closure(this, this._onblur),
											// other
											onclick: this._onchangeEvent,
											onkeyup: this._onchangeEvent,
											onkeydown: this._onkeydown,
											onkeypress: this._onchangeEvent,
											onpaste: this._onchangeEvent,
											onchange: this._onchangeEvent
										}
									}),
									this._lockNode = mkE({
										tag: 'div',
										className: 'close',
										onclick: this._onUnselect,
										els: [
											T.svgIcon({icon: 'close-10'})
										]
									})
								]
							}
						]
					}) // .formItemBorder
				]
			});
			this._listNode = mkE({
				tag: 'ul',
				className: 'formAutoCompleteList'
			});
			if ( !this.par.listParent ) {
				this._listNode.style.position = 'absolute';
				this._listNode.style.zIndex = (window.InfoBox ? ++InfoBox.zIndex : '');
			}
			this._createErrorHelpNodes();
			if ( par.maxLength ) {
				this.maxLength(par.maxLength);
			}
			if ( par.placeholder ) {
				this.placeholder(par.placeholder);
			}
			if ( par.size === 'large' ) {
				addClassName(this.node, 'formInputLarge');
			}
			if ( par.caption ) {
				addClassName(this.node, 'withLabel');
			}
			this._par(par);
		},
		/** @param {T.Form.AutoComplete.Item.Par[]} items */
		setQueryItems: function ( items ) {
			this._items = [];
			clearNode(this._listNode);
			this.appendQueryItems(items);
			if ( !this.hasItems() && this.par.showEmpty ) {
				mkE({
					tag: 'li',
					text: D.Lang.get('nothing_found')
				}).append(this._listNode);
			}
			D.removeLoadingOverlay(this._listNode);
			removeClassName(this._listNode, 'loading');
			this._setPos();
		},
		/** @param {T.Form.AutoComplete.Item.Par[]} items */
		appendQueryItems: function ( items ) {
			for ( var i = 0; i < items.length; i++ ) {
				var par = items[i];
				this._items.push(new T.Form.AutoComplete.Item(par, this).append(this._listNode));
			}
		},
		/**
		 * @param {T.Form.AutoComplete.Item} v
		 * @returns {*}
		 */
		value: function ( v ) {
			if ( isset(v) ) {
				var item = new T.Form.AutoComplete.Item(v, this);
				this._items = [item];
				this._prevValue = item.getCaption();
				item.setActive();
				this._onSelect();
				return;
			}
			return this._value ? this._value.getValue() : null;
		},
		focus: function (  ) {
			this._inputNode.focus();
		},
		reset: function (soft) {
			this._value = null;
			this._inputNode.value = '';
			this._hideList();
			clearNode(this._listNode);
			if( !soft ) {
				this._onchange();
			}
		},
		placeholder: function ( v ) {
			if ( isset(v) ) {
				this._inputNode.placeholder = v;
			}
			return this._inputNode.placeholder;
		},
		/** @returns {boolean} */
		hasItems: function () {
			return this._items.length > 0;
		},
		/**
		 * @param {string|int} key
		 * @returns {T.Form.AutoComplete.Item|bool}
		 */
		getItem: function ( key ) {
			var a = -1;
			for ( var i = 0; i < this._items.length; i++ ) {
				if ( this._items[i].isActive() ) {
					a = i;
				}
			}
			switch ( key ) {
				case 'active':
					if ( a >= 0 ) {
						return this._items[a];
					}
				case 'next':
					if ( a >= 0 && this._items[a + 1] ) {
						return this._items[a + 1];
					}
				case 'first':
					if ( this._items[0] ) {
						return this._items[0];
					}
					break;
				case 'prev':
					if ( a >= 1 && this._items[a - 1] ) {
						return this._items[a - 1];
					}
				case 'last':
					if ( this._items[this._items.length - 1] ) {
						return this._items[this._items.length - 1];
					}
					break;
				default:
					if ( this._items[key] ) {
						return this._items[key];
					}
			}
			return false;
		},
		/** @private */
		_onSelect: function () {
			var item = this.getItem('active');
			if ( item ) {
				if ( item.par.onClick ) {
					if(item.par.onClick() === false) {
						return;
					}
				} else {
					this._inputNode.value = item.getCaption();
					if ( this.par.lock ) {
						this._inputNode.readOnly = true;
						addClassName(this.node, 'readonly');
					}
					this._value = item;
				}
			}
			this._onchange();
			this._hideList();
		},
		/** @private */
		_onUnselect: function () {
			this._value = null;
			this._inputNode.value = this._prevValue;
			if ( this.par.lock ) {
				this._inputNode.readOnly = false;
				removeClassName(this.node, 'readonly');
			}
			this._inputNode.focus();
			this._setPos();
			this._onchange();
		},
		/** @private */
		_onchangeEvent: function ( e ) {
			var v = this._inputNode.value;
			if ( this._prevValue != v ) {
				this._prevValue = v;
				if ( v.length >= this.par.minLength ) {
					clearTimeout(this._inputTimeout);
					this._inputTimeout = setTimeout(D.closure(this, function () {
						this._runQuery(v);
					}), this.par.timeoutMs);
				} else {
					this._items = [];
					clearNode(this._listNode);
				}
			}
			if ( e.type === 'change' ) {
				return;
			}
			return this._event(e);
		},
		/** @private */
		_runQuery: function ( query ) {
			var re = this.par.onQuery.call(this, query);
			if( re === false ) {
				clearTimeout(this._inputTimeout);
			} else {
				addClassName(this._listNode, 'loading');
				D.loadingOverlay(this._listNode, {delay:true});
				this._setPos();
			}
		},
		/** @private */
		_setPos: function () {
			if ( this.par.listParent ) {
				return;
			}
			var pos = D.position(this._inputNode);
			if ( this.par.listParent ) {
				this._listNode.style.top = '';
				this._listNode.style.left = '';
			} else if ( $(this.node).parents('.InfoBox')[0] ) {
				this._listNode.style.top = this.node.offsetHeight + 'px';
				this._listNode.style.left = 0;
			} else if ( this.addScroll ) {
				this._listNode.style.top = pos.y + this._inputNode.offsetHeight + 2 + 'px';
				this._listNode.style.left = pos.x + 'px';
			} else {
				this._listNode.style.top = pos.top + this._inputNode.offsetHeight + 2 + 'px';
				this._listNode.style.left = pos.left + 'px';
				this._listNode.style.width = this.node.offsetWidth + 'px';
			}
		},
		/** @private */
		_hideList: function () {
			this._listNode.remove();
		},
		/** @private */
		_onblur: function ( e ) {
			if ( this.par.onBlur ) {
				if ( this.par.onBlur() === false ) {
					return;
				}
			}
			this._onblurTO = setTimeout(D.closure(this, this._hideList), 200);
			this._event(e);
			this._focusClass(false);
			//this._checkPlaceHolder();
		},
		/** @private */
		_onfocus: function ( e ) {
			clearTimeout(this._onblurTO);
			if ( this.par.listParent ) {
				this._listNode.append(this.par.listParent);
			} else if ( $(this.node).parents('.InfoBox')[0] ) {
				// infoboxii kabinam pie input nodes, lai scrolleejot paliek pie inputa
				this._listNode.append(this.node);
			} else {
				this._listNode.append(document.body);
			}
			this._setPos();
			this._event(e);
			this._focusClass(true);
		},
		/** @private */
		_onkeydown: function ( e ) {
			e = D.event(e);
			switch ( e.keyCode ) {
				case 27: // esc
					if ( typeof e.stopPropagation === "function" ) {
						e.stopPropagation();
					} else {
						e.cancelBubble = true;
					}
					this.reset();
					return false;
				case 13: // enter
					this._onSelect();
					return false;
				case 38: // up
					if ( this.hasItems() ) {
						this.getItem('prev').setActive();
					}
					return false;
				case 40: // down
					if ( this.hasItems() ) {
						this.getItem('next').setActive();
					}
			}
		},
		setError: function(v){
			if( v ){
				addClassName(this.node, 'formItemError');
			}else{
				removeClassName(this.node, 'formItemError');
			}
		}
	},
	T.Form.Base
);

/**
 * @class
 * @extends T.Form.InputPar
 */
T.Form.AutoComplete.Par = Class(
	/**
	 * @lends {T.Form.AutoComplete.Par#}
	 */
	{
		/** @type {string} */
		placeholder: null,
		/** @type {function} */
		onQuery: null,
		/** @type {int} */
		minLength: 2,
		/** @type {int} */
		timeoutMs: 200,
		/** @type {boolean} */
		lock: true,
		/** @type {function} */
		onchange: null,
		/** @type {boolean} */
		showEmpty: true,
		/** @type {Node|null} */
		listParent: null,
		/** @type {function} */
		onBlur: null,
		/** @type {T.Form.Item.Par} */
		value: null,
		/**
		 * @param {T.Form.Item.Par} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setValue: function ( v ) {
			this.value = v;
			return this;
		},
		/**
		 * @param {function} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setOnBlur: function ( v ) {
			this.onBlur = v;
			return this;
		},
		/**
		 * @param {Node|null} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setListParent: function ( v ) {
			this.listParent = v;
			return this;
		},
		/**
		 * @param {bool} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setShowEmpty: function ( v ) {
			this.showEmpty = v;
			return this;
		},
		/**
		 * @param {function} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setOnchange: function ( v ) {
			this.onchange = v;
			return this;
		},
		/**
		 * @param {boolean} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setLock: function ( v ) {
			this.lock = Boolean(v);
			return this;
		},
		/**
		 * @param {int} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setTimeoutMs: function ( v ) {
			this.timeoutMs = Number(v);
			return this;
		},
		/**
		 * @param {int} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setMinLength: function ( v ) {
			this.minLength = Number(v);
			return this;
		},
		/**
		 * @param {function} v
		 * @return {T.Form.AutoComplete.Par}
		 */
		setOnQuery: function ( v ) {
			if ( typeof v === "function" ) {
				this.onQuery = v;
			} else {
				this.onQuery = null;
			}
			return this;
		},
		setFromArray: function ( data ) {
			for ( var i in data ) {
				if ( data.hasOwnProperty(i) ) {
					this[i] = data[i];
				}
			}
			return this;
		}
	},
	T.Form.InputPar
);

/**
 * @class
 * @param {T.Form.AutoComplete.Item.Par} par
 * @param {T.Form.AutoComplete} parent
 * @extends mkE.Base
 */
T.Form.AutoComplete.Item = Class(
	/**
	 * @lends {T.Form.AutoComplete.Item#}
	 */
	{
		/** @type {T.Form.AutoComplete.Item.Par} */
		par: null,
		/** @type {T.Form.AutoComplete} */
		parent: null,
		/** @param {T.Form.AutoComplete.Item.Par} par */
		__construct: function ( par, parent ) {
			this.par = par;
			this.parent = parent;
			this.node = mkE({
				tag: 'li',
				className: 'item' + (this.par.className || ''),
				els: [
					this.par.caption
				],
				style: (this.par.style || {}),
				onmouseover: this._onMouseOver,
				onmouseout: this._onMouseOut,
				onclick: this._onClick
			});
		},
		isActive: function () {
			return this._isActive;
		},
		setActive: function () {
			var active = this.parent.getItem('active')
			if ( active ) {
				active.setInactive();
			}
			this._isActive = true;
			addClassName(this.node, 'active');
		},
		setInactive: function () {
			this._isActive = false;
			removeClassName(this.node, 'active');
		},
		/** @returns {*} */
		getValue: function () {
			return this.par.value;
		},
		getCaption: function () {
			return this.par.caption;
		},
		/** @private */
		_onMouseOver: function ( e ) {
			this.setActive();
		},
		/** @private */
		_onMouseOut: function ( e ) {
			this.setInactive();
		},
		/** @private */
		_onClick: function () {
			if ( this.par.onClick ) {
				this.par.onClick();
			} else {
				this.parent._onSelect();
			}
		}
	},
	mkE.Base
);

/**
 * @class
 */
T.Form.AutoComplete.Item.Par = Class(
	/**
	 * @lends {T.Form.AutoComplete.Item.Par#}
	 */
	{
		/** @type {string} */
		caption: null,
		/** @type {*} */
		value: null,
		/** @type {string} */
		className: null,
		/** @type {object} */
		style: null,
		/** @type {function} */
		onClick: null,
		/**
		 * @param {function} v
		 * @return {T.Form.AutoComplete.Item.Par}
		 */
		setOnClick: function ( v ) {
			this.onClick = v;
			return this;
		},
		/**
		 * @param {object} v
		 * @return {T.Form.AutoComplete.Item.Par}
		 */
		setStyle: function ( v ) {
			this.style = v;
			return this;
		},
		/**
		 * @param {string} v
		 * @return {T.Form.AutoComplete.Item.Par}
		 */
		setClassName: function ( v ) {
			this.className = v;
			return this;
		},
		/**
		 * @param {*} v
		 * @return {T.Form.AutoComplete.Item.Par}
		 */
		setValue: function ( v ) {
			this.value = v;
			return this;
		},
		/**
		 * @param {string} v
		 * @return {T.Form.AutoComplete.Item.Par}
		 */
		setCaption: function ( v ) {
			this.caption = v;
			return this;
		}
	}
);

// --- form_ac.js ---

// +++ ac_search.js +++
/**
 * @class {T.ACSearch}
 * @extends {mkE.Base}
 * @param {T.ACSearch.Par}
 */
T.ACSearch = Class(
	/**
	 * @lends {T.ACSearch#}
	 */
	{
		/**
		 * @param {T.ACSearch.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par || new T.ACSearch.Par();
			this._values = new D.SortedMap();
			this._items = new D.SortedMap();
			this._selected = 0;
			this.limit = this.par.limit || 1;
			this._onChange = this.par.onChange || D.doNothing;
			this._onAdd = this.par.onAdd || D.doNothing;
			this._onRemove = this.par.onRemove || D.doNothing;

			this.node = mkE({
				tag: 'div',
				className: 'ACSearch',
				els: [
					this.searchContainer = mkE({
						tag: 'div',
						className: 'search-container',
						els: [
							this._searchInput = new T.Form.Input({
								placeholder: this.par.placeholder,
								size: 'small',
								onchange: this._onInputChange,
								onkeydown: this._onKeyDown
							})
						]
					}),
					this._activeNode = mkE({
						tag: 'div',
						className: 'section padding empty',
						els: [
							{
								tag: 'div',
								className: 'title',
								text: D.Lang.get('selected_items')
							},
							this._activeItemsNode = mkE({
								tag: 'div',
								className: 'items'
							})
						]
					}),
					this._itemsContainerNode = mkE({
						tag: 'div',
						className: 'section empty',
						els: [
							{
								tag: 'div',
								className: 'title',
								text: this.par.itemsTitle
							},
							this._itemsNode = mkE({
								tag: 'div',
								className: 'items'
							})
						]
					})
				]
			});

			this._showDefaultItems();
		},

		focus: function(){
			this._searchInput.focus();
		},

		clear: function(clearValues){
			this._searchInput.clear();
			this._items.clear();
			clearNode(this._itemsNode);
			addClassName(this._itemsContainerNode, 'empty');
			if( clearValues === true ){
				this._values.clear();
				this._drawActive();
			}
			this._showDefaultItems();
		},

		_onInputChange: function(){
			if( this.searching ){
				return;
			}
			if( this._searchTimeout ){
				clearTimeout(this._searchTimeout);
			}
			var value = this._searchInput.value();
			if( empty(value) ){
				this._showDefaultItems();
				return;
			}
			this._searchTimeout = setTimeout(this._search, 200);
		},

		_search: function(){
			if( empty(this._searchInput.value()) ){
				return;
			}
			this.searching = true;
			this.par.search({
				query: this._searchInput.value(),
				callback: this._onSearch
			});
		},

		_showDefaultItems: function(){
			if( !this.par.defaults ){
				return;
			}
			this.par.defaults(this._onDefaults);
		},

		/**
		 * @param {Array.<T.ACSearch.Item>} items
		 */
		_onDefaults: function(items){
			if( empty(this._searchInput.value()) && !this.searching ){
				this._onSearch(items);
			}
		},

		/**
		 * @param {Array.<T.ACSearch.Item>} items
		 */
		_onSearch: function(items){
			clearNode(this._itemsNode);
			this._items.clear();
			this._selected = 0;
			if( empty(items) ){
				addClassName(this._itemsContainerNode, 'empty');
				this.searching = false;
				return;
			}
			removeClassName(this._itemsContainerNode, 'empty');
			for( var i = 0, l = items.length; i < l; i++ ){
				var item = items[i];
				item._ac = this;
				item.index = i;
				item._onhover = this._onHover;
				item.append(this._itemsNode);
				if( this._values.get(item.value) ){
					item.select(true);
				}
				this._items.set(item.value, item);
			}
			var first = this._items.first();
			if( first ){
				first.active(true);
			}
			this.searching = false;
		},

		/**
		 * @param {T.ACSearch.Item} item
		 */
		select: function(item){
			if( this._values.get(item.value) ){
				this._activeRemove(item.value);
				return false;
			}
			if( this.limit === 1 && this.par.replaceSelected && this._values.length() === 1 ){
				var keys = this._values.keys();
				for( var i = 0, l = keys.length; i < l; i++ ){
					this._activeRemove(keys[i]);
				}
			}
			if( this._values.length() >= this.limit && this.limit !== -1 ){
				return false;
			}
			this._values.set(item.value, {
				value: item.value,
				caption: item.caption,
				extra: item.extra
			});
			this._drawActive();
			this.focus();
			this._onChange();
			this._onAdd( item.value );
			return true;
		},

		_drawActive: function(){
			clearNode(this._activeItemsNode);
			if( this._values.empty() ){
				addClassName(this._activeNode, 'empty');
				return;
			}
			removeClassName(this._activeNode, 'empty');
			var items = this._values.toArray();
			for( var i = 0, l = items.length; i < l; i++ ){
				var data = items[i];
				var item = new T.ACSearch.ActiveItem({
					value: data.value,
					caption: data.caption
				});
				item.onRemove = this._activeRemove;
				item.append(this._activeItemsNode);
			}
		},

		_activeRemove: function(value){
			this._values.del(value);
			if( this._items.get(value) ){
				this._items.get(value).select(false);
			}
			setTimeout(this._drawActive, 50);
			if( this._values.empty() ){
				this._searchInput.focus();
			}
			this._onRemove( value );
			this._onChange();
		},

		value: function(v){
			if( isset(v) ){
				this._values.clear();
				for( var i = 0, l = v.length; i < l; i++ ){
					var data = v[i];
					this._values.set(data.value, data);
				}
				this._drawActive();
			}
			return this._values.toArray();
		},

		_onKeyDown: function(e){
			if( this._items.empty() ){
				return;
			}
			e = D.event(e);
			switch( e.keyCode ){
				case 13:
					this._selectActive();
					return false;
				case 38:
					this._up();
					return false;
				case 40:
					this._down();
					return false;
			}
		},

		_selectActive: function(){
			var items = this._items.toArray();
			if( !items[this._selected] ){
				return;
			}
			items[this._selected].click();
		},

		_up: function(){
			var prev = this._selected - 1;
			var items = this._items.toArray();
			if( prev < 0 ){
				prev = items.length - 1;
			}
			items[this._selected].active(false);
			items[prev].active(true);
			this._selected = prev;
		},

		_down: function(){
			var next = this._selected + 1;
			var items = this._items.toArray();
			if( next >= items.length ){
				next = 0;
			}
			items[this._selected].active(false);
			items[next].active(true);
			this._selected = next;
		},

		_onHover: function(index){
			var items = this._items.toArray();
			if( !items[index] ){
				return;
			}
			items[this._selected].active(false);
			items[index].active(true);
			this._selected = index;
		}
	},
	mkE.Base
);

/**
 * @class {T.ACSearch.Par}
 */
T.ACSearch.Par = Class(
	/**
	 * @lends {T.ACSearch.Par#}
	 */
	{
		placeholder: D.Lang.get('search!') + '...',
		search: D.doNothing,
		limit: 1,
		onChange: D.doNothing,
		onAdd: D.doNothing,
		itemsTitle: '',
		replaceSelected: false
	}
);

/**
 * @class {T.ACSearch.Item}
 * @extends {mkE.Base}
 */
T.ACSearch.Item = Class(
	/**
	 * @lends {T.ACSearch.Item#}
	 */
	{
		index: 0,
		_onhover: D.doNothing,

		/**
		 * @param {T.ACSearch.Item.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par || new T.ACSearch.Item.Par();
			this.value = par.value;
			this.caption = par.caption || '';
			this.extra = par.extra || {};
			this.selected = false;

			this.node = mkE({
				tag: 'div',
				className: 'ACSearchItem',
				onclick: this.click,
				onmouseover: this._onHover
			});

			this._draw();
		},

		_draw: function(){
			if( this.par.icon ){
				this._icon(this.par.icon);
			}

			this._content = mkE({
				tag: 'div',
				className: 'content'
			}).append(this.node);

			if( this.par.caption ){
				this._caption(this.par.caption);
			}

			if( this.par.info ){
				this._info(this.par.info);
			}
		},

		/**
		 * @param {String|Node} icon
		 */
		_icon: function(icon){
			if( typeof icon === 'string' ){
				this._iconNode = mkE({
					tag: 'div',
					className: 'item-icon item-icon-url'
				}).append(this.node);
				D.bgImage(this._iconNode, icon);
			}else{
				this._iconNode = mkE({
					tag: 'div',
					className: 'item-icon',
					els: [
						icon
					]
				}).append(this.node);
			}
		},

		/**
		 * @param {String|Node} text
		 */
		_caption: function(text){
			if( this._captionNode ){
				clearNode(this._captionNode);
				mkE.appendTypeElement(this._captionNode, text);
				return;
			}
			this._captionNode = mkE({
				tag: 'div',
				className: 'caption'
			}).append(this._content);
			mkE.appendTypeElement(this._captionNode, text);
		},

		/**
		 * @param {String|Node} text
		 */
		_info: function(text){
			if( this._infoNode ){
				clearNode(this._infoNode);
				mkE.appendTypeElement(this._infoNode, text);
				return;
			}
			this._infoNode = mkE({
				tag: 'div',
				className: 'info'
			}).append(this._content);
			mkE.appendTypeElement(this._infoNode, text);
		},

		click: function(e){
			D.stopPropagation(e);
			this._onclick()
		},

		_onclick: function(){
			if( !this._ac.select(this) ){
				return;
			}
			this.select(!this.selected);
		},

		_onHover: function(){
			this._onhover(this.index);
		},

		select: function(v){
			if( v ){
				this.selected = true;
				addClassName(this.node, 'active');
				if( this.par.selectedInfo ){
					this._info(this.par.selectedInfo);
				}
				return;
			}
			this.selected = false;
			removeClassName(this.node, 'active');
			this._info(this.par.info);
		},

		active: function(v){
			if( v ){
				addClassName(this.node, 'selected');
			}else{
				removeClassName(this.node, 'selected');
			}
		}
	},
	mkE.Base
);

/**
 * @class {T.ACSearch.Item.Par}
 */
T.ACSearch.Item.Par = Class(
	/**
	 * @lends {T.ACSearch.Item.Par#}
	 */
	{
		/** @type {Node|String} */
		icon: null,
		caption: '',
		info: '',
		selectedInfo: '',
		value: null,
		extra: {}
	}
);

/**
 * @class {T.ACSearch.ActiveItem}
 * @extends {mkE.Base}
 * @param {Object} data
 */
T.ACSearch.ActiveItem = Class(
	/**
	 * @lends {T.ACSearch.ActiveItem#}
	 */
	{
		/**
		 * @param {Object} data
		 * @constructs
		 */
		__construct: function(data){
			this.value = data.value;
			this.caption = typeof data.caption === 'string' ? data.caption : getNodeText(data.caption);

			this.node = mkE({
				tag: 'div',
				className: 'ACSearchActive',
				els: [
					{
						tag: 'div',
						className: 'caption',
						text: this.caption
					},
					{
						tag: 'a',
						onclick: this._close,
						els: [
							T.svgIcon({
								icon: 'close-10'
							})
						]
					}
				]
			});
		},

		_close: function(){
			this.onRemove(this.value);
		},

		onRemove: function(){}
	},
	mkE.Base
);
// --- ac_search.js ---

// +++ osm_map.js +++
/**
 * @class {T.OSMMap}
 * @extends {mkE.Base}
 */
T.OSMMap = Class(
	/**
	 * @lends {T.OSMMap#}
	 */
	{
		map: null,
		/** @type {T.OSMMap.Par} */
		par: null,

		/**
		 * @param {T.OSMMap.Par|Object} [par]
		 * @constructs
		 */
		__construct: function ( par ) {
			this.par = par || new T.OSMMap.Par();

			this.node = mkE({
				tag: 'div',
				className: 'OSMMap',
				style: {
					width: this.par.width + 'px',
					height: this.par.height + 'px'
				}
			});

			D.onLoad('leaflet', this._onLoadLib);
		},

		_onLoadLib: function () {
			this.map = L.map(this.node, {
				zoomControl: this.par.zoomControl,
				attributionControl: false,
				layers: [L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {subdomains: 'abc'})],
				trackResize: false,
				dragging: this.par.dragging,
				scrollWheelZoom: this.par.scrollWheelZoom
			});

			//@todo tmpfix 1996-04-20
			if( !this.node.clientWidth || !this.node.clientHeight ) {
				this.map._size = new L.Point(this.par.width, this.par.height);
				this.map._sizeChanged = false;
			}

			this.map.setView([this.par.lat, this.par.lng], this.par.zoom, false);

			for( var i = 0; i < this.par.markers.length; i++ ) {
				L.marker(this.par.markers[i]).addTo(this.map);
			}

			if( this.par.path ) {
				this._path = L.Polyline.fromEncoded(this.par.path).addTo(this.map);
				this.map.fitBounds(this._path.getBounds());
			}
		},

		resize: function () {
			if( this.map ) {
				this.map.invalidateSize(false);
				if( this._path ) {
					this.map.fitBounds(this._path.getBounds());
				}
			}
		},

		destroy: function () {
			if( this.map ) {
				this.map.remove();
			}
		}

	},
	mkE.Base
);

/**
 * @class {T.OSMMap.Par}
 */
T.OSMMap.Par = Class(
	/**
	 * @lends {T.OSMMap.Par#}
	 */
	{
		/** @type {float} */
		lat: 0.00,
		/** @type {float} */
		lng: 0.00,
		/** @type {int} */
		zoom: 10,
		/** @type {int} */
		width: 100,
		/** @type {int} */
		height: 100,
		/** @type {array} */
		markers: [],
		/** @type {bool} */
		zoomControl: true,
		/** @type {string} */
		path: '',
		/** @type {bool} */
		dragging: true,
		/** @type {bool} */
		scrollWheelZoom: true,
		/**
		 * @param {bool} v
		 * @return {T.OSMMap.Par}
		 */
		setScrollWheelZoom: function ( v ) {
			this.scrollWheelZoom = v;
			return this;
		},
		/**
		 * @param {bool} v
		 * @return {T.OSMMap.Par}
		 */
		setDragging: function ( v ) {
			this.dragging = v;
			return this;
		},
		/**
		 * @param {string} v
		 * @return {T.OSMMap.Par}
		 */
		setPath: function ( v ) {
			this.path = v;
			return this;
		},
		/**
		 * @param {bool} v
		 * @return {T.OSMMap.Par}
		 */
		setZoomControl: function ( v ) {
			this.zoomControl = v;
			return this;
		},
		/**
		 * @param {array} v
		 * @return {T.OSMMap.Par}
		 */
		setMarkers: function ( v ) {
			this.markers = v;
			return this;
		},
		/**
		 * @param {int} v
		 * @return {T.OSMMap.Par}
		 */
		setHeight: function ( v ) {
			this.height = v;
			return this;
		},
		/**
		 * @param {int} v
		 * @return {T.OSMMap.Par}
		 */
		setWidth: function ( v ) {
			this.width = v;
			return this;
		},
		/**
		 * @param {int} v
		 * @return {T.OSMMap.Par}
		 */
		setZoom: function ( v ) {
			this.zoom = v;
			return this;
		},
		/**
		 * @param {float} v
		 * @return {T.OSMMap.Par}
		 */
		setLng: function ( v ) {
			this.lng = v;
			return this;
		},
		/**
		 * @param {float} v
		 * @return {T.OSMMap.Par}
		 */
		setLat: function ( v ) {
			this.lat = v;
			return this;
		}
	}
);
// --- osm_map.js ---
