
// +++ editor.js +++
/*
par = {
	onChange:[function],
	onFocus:[function]
}
*/
D.SayEditor = function(par){
	var $editor = this;
	par = par || {};
	var doNothing = function(){};
	this.onChange = par.onChange || doNothing;
	this.onFocus = par.onFocus || doNothing;
	this.onBlur = par.onBlur || doNothing;
	this.onCtrlEnter = par.onCtrlEnter || doNothing;
	this.onkeydown = par.onkeydown || doNothing;
	this.onkeyup = par.onkeyup || doNothing;
	this.onMentionMenuShow = par.onMentionMenuShow || doNothing;
	this.onMentionMenuHide = par.onMentionMenuHide || doNothing;
	this.onPaste = par.onPaste || doNothing;
	this.mentionListUp = par.mentionListUp || false;
	this.disableSpaceSearch = par.disableSpaceSearch || true;
	this.noLinkReplace = par.noLinkReplace || false;
	this.disableMention = par.disableMention || false;
	this.sayUserReplace = par.sayUserReplace || false;
	this.globalAC = par.globalAC || false;
	this.globalACScrollParent = par.globalACScrollParent || false;
	this.links = [];
	this.uid = par.uid || false;
	this.pid = par.pid || false;
	this._AC = {
		items:[],
		cache:{},
		key:!this.disableSpaceSearch,
		char:''
	};
	this._content = mkE( {
		tag:'div',
		className:'SayEditor',
		prop:{
			tabIndex: par.tabIndex ? par.tabIndex : 1,
			contentEditable:!( D.browser.name == 'Firefox' && D.browser.version < 12 ),
			onkeyup:D.closure( this, this._onKeyUp ), // onkeyup
			onkeydown:D.closure( this, this._onKeyDown ), // onkeydown
			onkeypress:D.closure( this, this._onKeyPress ), // onkeypress
			onclick:function(){
				$editor._setFocusNode();
				$editor._saveSelection();
				if( !$editor._AC.key ){
					$editor._hideAC();
				}
			},
			onfocus:function(e){
				$editor.onFocus(e);
				$editor._defaultTextNode.remove();
			},
			onblur:function(e){
				$editor.onBlur(e);
				setTimeout( function(){
					$editor._hideAC();
				}, 200 );
			}
		}
	} );
	this._contentEditable = true;
	var ok = ( D.browser.name == 'Firefox' || D.browser.name == 'Chrome' );
	ok = ok ||( D.browser.name == 'Explorer' && D.browser.version > 7 );
	ok = ok || ( D.browser.name == 'Opera' && D.browser.version > 9 && ( BrowserDetect.OS == 'Windows' || BrowserDetect.OS == 'Linux' ) );
	ok = ok || ( D.browser.name == 'Safari' && ( BrowserDetect.OS == 'Windows' || BrowserDetect.OS == 'Mac' || BrowserDetect.OS == 'iPhone/iPod' ) );
	ok = ok || D.browser.name == 'Edge';
 	if( !ok || this._content.contentEditable == null ){
 	  this._contentEditable = false;
		this._content = mkE( {
			tag:'textarea',
			prop:{
				onkeydown:function(e){
					if( D.checkCtrlEnter(e) ){
						$editor.onCtrlEnter();
						return false;
					}
				},
				onkeyup:function(){
					$editor.onChange();
				},
				onfocus:function(e){
					$editor.onFocus(e);
					$editor._defaultTextNode.remove();
				},
				onblur:function(e){
					$editor.onBlur(e);
				}
				//value:D.browser.name + ' ' + BrowserDetect.OS
			}
		} );
	}
	$( this._content ).bind( 'paste', function(e){
		setTimeout( function(){
			D.smileyReplace($editor._content);
			$editor._replaceLinks();
			$editor._clearDOM();
			$editor.onChange();
		}, 20 );
		$editor.onPaste( e.originalEvent );
	} );
	$( this._content ).bind( 'cut', function(){
		setTimeout( function(){
			$editor._replaceLinks();
		}, 100 );
	} );
	this.node = mkE( {
		tag:'div',
		className:'SayEditorW',
		els:[
			this._defaultTextNode = mkE( {
				tag:'div',
				text:par.defaultText,
				className:'color2 SayEditorDefaulText',
				prop:{
					onclick:function(){
						$editor.focus();
					}
				}
			} ),
			this._content
		]
	} );
};

D.SayEditor.LEN_USER = 5;
D.SayEditor.LEN_LINK = 10;
D.SayEditor.SPACE = decodeURI('%C2%A0');
D.SayEditor.replaceLinksExp = /((http|https|ftp):\/\/|www\.)([a-zA-Z0-9\-_]+\.)+[a-zA-Z]{2,7}(\/[\-A-ZĀ-Ž0-9+&@#\/%?=~_\|!:\[\],.;()]*)*/gi;

D.SayEditor.prototype = {

	toString:function(){
		return 'SayEditor';
	},

	append:function(parent){
		this.node.append(parent);
		return this;
	},

	_onKeyUp:function(e){
		e = D.event(e);
		switch( e.keyCode ){
			case 27:
				this._hideAC();
				break;
			case 38: // up
			case 40: // down
				return;
			case 13:
				if( this._replaceLinks() ){
					delete this._beforeAT;
					delete this._beforeNoAT;
				}
				this.onChange();
				break;
			case 32: // space
				if( this._replaceLinks() ){
					delete this._beforeAT;
					delete this._beforeNoAT;
				}
				this.onChange();
				break;
			case 8: // backspace
			case 46: //del
				this.links = [];
				var links = this._content.getElementsByTagName('a');
				for( var i = 0; i < links.length; ++ i ){
					this.links.push( links[i] );
				}
				this.onChange();
				this._showAC();
				break;
			default:
				this._showAC();
				if( D.browser.name == 'Opera' ){
					this._clearDOM();
				}
				this.onChange();
		}
		if( this._AC.key && e.keyCode != 13 && !e.ctrlKey ){ // ctrl+A IE
			this._AC.key = false;
			this._checkAC();
		}
		if( D.browser.name != 'Explorer' ){
			this._saveSelection();
			this._setFocusNode();
		}
		// DB-3291 Chrome uz enter veido jaunus div tagus, kas dzēšot linebreaku nodzēš arī linku.
		if( D.browser.name == 'Chrome' ){
			this._addBrAsLast();
		}
		if( this._content.innerHTML == '<br>' ){
			this._content.innerHTML = '';
			this.onChange();
		}
		return this.onkeyup(e);
	},

	/**
	 * @param {Event} e
	 * @returns {*}
	 * @private
	 */
	_onKeyPress:function(e){
		e = D.event(e);

		// DB-3291 Chrome uz enter veido jaunus div tagus, kas dzēšot linebreaku nodzēš arī linku.
		if (e.keyCode == 13 && D.browser.name == 'Chrome' && window.getSelection ) {
			var selection = window.getSelection();
			var range = selection.getRangeAt(0);
			var br = document.createElement("br");
			range.deleteContents();
			range.insertNode(br);
			range.setStartAfter(br);
			range.setEndAfter(br);
			range.collapse(false);
			selection.removeAllRanges();
			selection.addRange(range);
			return false;
		}

		var letter = String.fromCharCode(e.which);
		if( letter.match(/[^a-žа-я]{1,}/gi) ){
			return;
		}
		var isUpperCase = letter === letter.toUpperCase();
		if ( this._beforeAT && this._beforeNoAT ){
			this._checkAC();
			return;
		} else if( this._beforeAT ) {
			return;
		}

		if( !isUpperCase ){
			return;
		}

		this._beforeNoAT = true;
		this._checkAC();
	},

	/**
	 * @param {Event} e
	 * @returns {*}
	 * @private
	 */
	_onKeyDown:function(e){
		e = D.event(e);
		switch( e.keyCode ){
			case 13: // enter
				if( D.checkCtrlEnter(e) ){
					this.onCtrlEnter();
					return false;
				}
				if( this._beforeAT && !empty( this._AC.items ) ){
					return this._ACChoose();
				}
				break;
			case 32: // space
				if( !this._AC.pos || this._AC.pos.space ){
					this._hideAC();
					this._AC.key = !this.disableSpaceSearch;//true;
				}
				break;
			case 38: // up
				if( this._beforeAT ){
					return this._ACPrev();
				}
				break;
			case 40: // down
				if( this._beforeAT ){
					return this._ACNext();
				}
				break;
			case 50: // @
				if( e.shiftKey ){
					this._hideAC();
					this._AC.key = true;
					this._AC.char = '@';
				}
				break;
			/*
			case 51: // #
				if( e.shiftKey ){
					this._hideAC();
					this._AC.key = true;
					this._AC.char = '#';
				}
				break;
			*/
			case 8: // backspace
				// Safaru hisotry fix (izpildās citādi goto Back)
				if( !this._content.childNodes.length ){
					return false;
				}
				if( !window.getSelection || String( window.getSelection() ) == '' ){
					var cursor = this._insertCursor();
					if( cursor.prev && cursor.prev.nodeType == Node.TEXT_NODE && cursor.prev.nodeValue == '' ){
						var prev = cursor.prev.previousSibling;
						removeNode( cursor.prev );
						cursor.prev = prev;
					}
					var prev = cursor.prev;
					// IE
					if( prev && prev.nodeType == Node.TEXT_NODE ){
						prev = prev.parentNode;
					}
					if( prev && prev != this._content && prev.nodeType == Node.ELEMENT_NODE && !this._isEditable(prev) ){
						removeNode(prev);
						return false;
					}
					if( cursor.next && cursor.next.nodeType == Node.TEXT_NODE && cursor.next.nodeValue == '' ){
						this._setCursor( cursor.next );
					}
				}
				break;
			case 46: //del
				if( this._focusNode ){
					var fn = this._focusNode;
					if( fn && fn.nodeType == 3 ){
						fn = fn.parentNode;
					}
					if( fn && !this._isEditable(fn) ){
						var next = fn.nextSibling;
						removeNode(fn);
						this._setCursor(next);
						return false;
					}
				}
				break;
		}
		if( !this._content.childNodes.length && !this.disableSpaceSearch ){
			this._AC.key = true;
		}
		return this.onkeydown(e);
	},

	_disable:function(){
		if( !this._contentEditable ){
			return;
		}
		if( D.browser.name != 'Firefox' ){
			return;
		}
		var $editor = this;
		this._disableTimeout = setTimeout( function(){
			$editor._content.contentEditable = false;
		}, 5000 );
	},

	_enable:function(){
		if( !this._contentEditable ){
			return;
		}
		if( D.browser.name != 'Firefox' ){
			return;
		}
		clearTimeout( this._disableTimeout );
		this._content.contentEditable = true;
	},

	focus:function(){
		this._enable();
		this._content.focus();
		this.onFocus();
		this._defaultTextNode.remove();
	},

	blur:function(){
		this._content.blur();
		this.onBlur();
	},

	_setFocusNode:function(){
		if( window.getSelection ){
			this._focusNode = window.getSelection().focusNode;
		} else {
			var textRange = document.selection.createRange();
			this._focusNode = textRange.parentElement();
		}
	},

	_clearDOM:function(node){
		if(!node){
			node = this._content;
		}
		var $editor = this;
		var k = 0;
		while( k < node.childNodes.length ){
			var n = node.childNodes[k];
			if( n.nodeType == 3 ){
				//l += n.nodeValue.length;
				++ k;
				continue;
			}
			if( n.nodeType == 1 ){
				if( !n._linkInfo ){
					n.setAttribute( 'style', '' );
				}
				if( !n.getAttribute('uid') && !D.Emoji.test(n.getAttribute('alt')) && !D.smileys[n.getAttribute('alt')] ){
					n.className = '';
				}
				n.id = '';
				if( this._clearDOM_OK(n) ){
					$editor._clearDOM(n);
					++ k;
					continue;
				}
				var childs = [];
				for( var i = 0; i < n.childNodes.length; ++ i ){
					childs.push( n.childNodes[i] );
				}
				for( var i in childs ){
					var ci = childs[i];
					if( ci.nodeType == 1 ){
						node.insertBefore( ci, n );
						$editor._clearDOM( ci );
					}
					if( ci.nodeType == 3 ){
						//l += ci.nodeValue.length;
						node.insertBefore( ci, n );
					}
				}
			}
			node.removeChild(n);
		}
		//D.console.info(l);
	},

	_clearDOM_OK:function(n){
		switch( n.tagName ){
			case 'BR':
				return true;
			case 'P':
			case 'DIV':
				if( n.id == '' && n.className == '' ){
					return true;
				}
				break;
			case 'A':
				return true;
			case 'IMG':
				return n.alt && (D.smileys[ n.alt ] || D.Emoji.test(n.alt));
			case 'SPAN':
				return true;
				/*
				//pārcelts uz PHP
				if( !empty( n.getAttribute('uid') ) && !empty( n.innerHTML ) ){
					return true;
				}*/
				break;
		}
		return false;
	},

	_insertCursor:function(){
		this.focus();
		var cursor;
		if( window.getSelection ){
			cursor = mkE( {
				tag:'span'
			} );
			var range = window.getSelection().getRangeAt(0).cloneRange();
			range.deleteContents();
			range.insertNode(cursor);
		} else {
			var id = 'SayEditorCursor';// + Math.round( Math.random() * 1000 );
			var range = document.selection.createRange();
			range.pasteHTML( '<span id="' + id + '" style="display:inline-block;"></span>' );
			cursor = document.getElementById(id);
			cursor.id = '';
		}
		var re = {
			left:cursor.offsetLeft,
			top:cursor.offsetTop,
			prev:cursor.previousSibling,
			next:cursor.nextSibling,
			position:D.position(cursor)
		};
		removeNode(cursor);
		return re;
	},

	insertHTML:function( html, clearDOM ){
		if( !this._contentEditable ){
			insertAtCursor( this._content, strip_tags(html) );
			return;
		}
		html = D.smileyReplace(html);
		if( D.browser.name == 'Explorer' ){
			this.focus();
		} else {
			this._restoreSelection();
		}
		if( document.getSelection ){  // normal browser
			var sel = document.getSelection();
			var range = sel.getRangeAt(0);
			var node = mkE( {
				tag:'div',
				innerHTML:html
			} );
			range.insertNode(node);
			var lastNode;
			while( node.firstChild && node.parentNode ){
				lastNode = node.firstChild;
				D.insertBefore( node.firstChild, node );
			}
			node.remove();
			if(lastNode) {
				range = range.cloneRange();
				range.setStartAfter(lastNode);
				range.collapse(true);
				sel.removeAllRanges();
				sel.addRange(range);
			}
		} else /*if( document.selection )*/{ // IE < 11
			var range = document.selection.createRange();
			range.pasteHTML(html);
		}/* else {
		 document.execCommand( 'insertHTML', false, html );
		 }*/
		if(clearDOM){
			this._clearDOM();
		}
		this._saveSelection();
	},

	_checkAC:function(){
		var c = this._insertCursor();
		//D.console.info(c);
		if( !c.prev ){
			c.prev = document.createTextNode('');
			if( this._content.firstChild ){
				D.insertBefore( c.prev, this._content.firstChild );
			} else {
				this._content.appendChild( c.prev );
			}
		}
		if( c.prev.nodeType == 1 ){
			var prev = document.createTextNode('');
			D.insertAfter( prev, c.prev );
			c.prev = prev;
			this._setCursor( c.prev );
		}
		this._beforeAT = c.prev;
		this._showAC();
		var position = {top: 0, left: 0};
		if( this.globalAC ){
			position = D.position(this.node);
		}
		if( this._AC.node ){
			clearNode( this._AC.node );
			if( this.mentionListUp ){
				var bottom = this.node.offsetHeight - c.top + 5;
				if( this.globalAC ){
					var scrollOffset = document.body.scrollTop || document.documentElement.scrollTop || 0;
					var scrollOffset2 = 0;
					if ( this.globalACScrollParent ) {
						scrollOffset2 = this.globalACScrollParent.scrollTop - this._content.offsetHeight + 10;
					}
					bottom = window.innerHeight - position.top + scrollOffset + scrollOffset2 + bottom - 10;
				}
				this._AC.node.style.bottom = bottom  + 'px';
				this._AC.node.style.top = '';
			} else {
				var top = c.top + 14;
				if( this.globalAC ){
					top = position.top + top;
				}
				this._AC.node.style.top = top + 'px';
				this._AC.node.style.bottom = '';
			}
			var left = c.left;
			if( this.globalAC ){
				left = position.left + left;
				if( left + 200 > window.innerWidth ){
					left -= left + 200 - window.innerWidth;
				}
				this._AC.node.style.zIndex = InfoBox.zIndex + 1;
				this._AC.node.style.position = 'fixed';
			}
			this._AC.node.style.left = left + 'px';
		}
	},

	_showAC:function(){
		var $editor = this;
		if( !this._beforeAT ){
			return;
		}
		try{ // IE Invalid value
			this._beforeAT.parentNode;
		} catch(e){
			this._hideAC();
			return;
		}
		if( !this._beforeAT.parentNode ){
			this._hideAC();
			return;
		}
		if( !this._AC.node ){
			this._AC.node = mkE( {
				tag:'div',
				className:'SayEditorAC multiACList'
			} );
			this._AC.node.append( this.globalAC ? document.body : this.node );
		}
		var text = this._beforeAT.nodeValue;
		var space = false;
		var p = Math.max( text.lastIndexOf('@')/*, text.lastIndexOf('#')*/ );
		if( p == -1 && !this._beforeNoAT ){
			p = Math.max( text.lastIndexOf(' '), text.lastIndexOf( D.SayEditor.SPACE ) );
			space = true;
			if( this._AC.pos ){
				this._AC.pos.p = p;
				this._AC.pos.space = space;
			}
		}
		if( this._beforeNoAT && text.lastIndexOf(' ') != -1 ){
			if( text.indexOf(' ') != text.lastIndexOf(' ') ){
				p = Math.max( text.lastIndexOf(' '), text.lastIndexOf( D.SayEditor.SPACE ) );
				if( this._AC.pos ){
					this._AC.pos.p = p;
				}
			}
			space = true;
			if( this._AC.pos ){
				this._AC.pos.space = space;
			}
		}
		this._AC.pos = this._AC.pos || { p:p, space:space };
		text = text.substr( p + 1 );
		if( D.DEV ){
			//D.console.info( text + ',' + String(p) + '|' + text + '|' );
			//D.log( this._AC.char );
		}
		var minChars = 3;
		if( empty(text) || text.match(/[^a-žа-я0-9\s]{1,}/gi) || ( space && text.length < minChars ) ){
			$( this._AC.node ).hide();
			this.onMentionMenuHide();
			return;
		}
		clearTimeout( this._showACt );
		var t = this._AC.time = new Date().getTime();
		var inCache = this._AC.pos.space && this._AC.cache[ text.toLocaleLowerCase() ];
		this._showACt = setTimeout( D.closure( this, this._showACSearch, text, t ), inCache ? 50 : 300 );
	},

	_showACSearch:function( text, t ){
		if (this.disableMention) {
			return;
		}
		if( this._AC.pos && (this._AC.pos.space || this._beforeNoAT && text.length < 3) && this._AC.lastText && this._AC.lastResult && empty( this._AC.lastResult.items ) && text.indexOf( this._AC.lastText ) != -1 ){ //  this._AC.lastText.length < text.length &&
			return;
		}
		this._AC.lastText = text;
		var cb = function(re){
			if( t != this._AC.time ){
				return;
			}
			this._AC.lastResult = re;
			if( this._AC.pos && this._AC.pos.space ){
				this._AC.cache[text] = re;
			}
			this._showAC_re(re);
		};
		if( this._AC.pos && this._AC.pos.space && this._AC.cache[ text.toLocaleLowerCase() ] ){
			cb.call( this, this._AC.cache[ text.toLocaleLowerCase() ] );
			return;
		}
		if( this._AC.char == '#' ){
			// todo search
		}
		var short = this._beforeNoAT && text.length < 5;
		if( short ){
			this._AC.lastText = null;
		}
		var method = 'getMentions';
		if( this._AC.pos && (this._AC.pos.space || this._beforeNoAT) && !this.uid ){
			if( short ){
				method = 'getMentionsFriendsShort';
			}else{
				method = 'getMentionsFriends'
			}
		}
		D.Say.rpc.send(
			method,
			{
				v:text,
				uid:this.uid || false,
				pid:this.pid || false
			},
			cb,
			this
		);
	},

	_showAC_re:function(re){
		var $editor = this;
		this._AC.items = [];
		$editor._AC.last = this._beforeNoAT ? null : 0;
		clearNode( this._AC.node );
		if( empty( re.items ) ){
			$( this._AC.node ).hide();
			this.onMentionMenuHide();
			return;
		}
		$( this._AC.node ).show();
		var over = function(){
			var last = $editor._AC.items[ $editor._AC.last ];
			if(last){
				removeClassName( last, 'hover' );
			}
			addClassName( this, 'hover' );
			$editor._AC.last = this._dr.i;
		};
		var out = function(){
			removeClassName( this, 'hover' );
		};
		var click = function(){
			D.stopPropagation();
			$editor._ACChoose();
		};
		var i = 0;
		for( var k in re.items ){
			var r = re.items[k];
			if( r.type == 'title' ){
				mkE( {
					tag:'div',
					className:'multiACListCaption',
					els:[
						{
							tag:'b',
							text:r.caption
						}
					]
				} ).append( this._AC.node );
				continue;
			}
			this._AC.items[i] = mkE( {
				tag:'div',
				className:'multiACListItem', // multiACListItemIcon
				prop:{
					onmouseover:over,
					onmouseout:out,
					onclick:click,
					_dr:{
						i:i,
						r:r
					}
				},
				els:[
					{
						tag:'img',
						src:r.icon,
						className:'thumb'
					},
					{
						tag:'span',
						text:r.caption
					}
				]
			} ).append( this._AC.node );
			if( r.online ){
				mkE( {
					tag:'div',
					className:'icon onlineWWWIcon'
				} ).append( this._AC.items[i] );
			}
			if( !i && !this._beforeNoAT ){
				this._AC.items[i].onmouseover();
			}
			i ++;
		}
		this.onMentionMenuShow();
		$('#iframe_content').css( {
			minHeight:String( this._AC.node.offsetTop + this._AC.node.offsetHeight + 50 ) + 'px'
		} );
	},

	_ACPrev:function(){
		if( empty( this._AC.items ) ){
			return;
		}
		if( this._beforeNoAT && this._AC.last === null ){
			this._AC.last = 0;
		}
		if( !this._AC.items[ this._AC.last ] ){
			return;
		}
		this._AC.items[ this._AC.last ].onmouseout();
		-- this._AC.last;
		if( this._AC.last < 0 ){
			this._AC.last = count( this._AC.items ) - 1;
		}
		this._AC.items[ this._AC.last ].onmouseover();
		return false;
	},

	_ACNext:function(){
		if( empty( this._AC.items ) ){
			return;
		}
		if( this._beforeNoAT && this._AC.last === null ){
			this._AC.last = 0;
		}
		if( !this._AC.items[ this._AC.last ] ){
			return;
		}
		this._AC.items[ this._AC.last ].onmouseout();
		++ this._AC.last;
		if( this._AC.last > count( this._AC.items ) - 1 ){
			this._AC.last = 0;
		}
		this._AC.items[ this._AC.last ].onmouseover();
		return false;
	},

	_ACChoose:function(){
		if( !this._AC.items[ this._AC.last ] ){
			this._hideAC();
			return true;
		}
		if( !this._AC.pos ){
			this._hideAC();
			return true;
		}
		var last = this._AC.items[ this._AC.last ];
		var title = last._dr.r.title || last._dr.r.caption;
		this.insertHTML( '<span id="SayEditorUser" class="user" uid="' + last._dr.r.value + '">@' + htmlspecialchars( title ) + '</span>&nbsp;' );
		var userNode = document.getElementById('SayEditorUser');
		userNode.id = '';
		userNode.contentEditable = false;
		userNode.onresizestart = function(){return false;}; // IE
		this._AC.key = !this._beforeNoAT;
		/*
		var p = this._beforeAT.nodeValue.lastIndexOf('@');
		if( p != -1 ){
			this._beforeAT.nodeValue = this._beforeAT.nodeValue.substr( 0, p );
		} else {
			p = this._beforeAT.nodeValue.lastIndexOf(' ');
			if( p == -1 ){
				p = this._beforeAT.nodeValue.lastIndexOf( D.SayEditor.SPACE );
			}
			//if( p != -1 ){
				this._beforeAT.nodeValue = this._beforeAT.nodeValue.substr( 0, p + 1 );
			//}
		}
		*/
		this._beforeAT.nodeValue = this._beforeAT.nodeValue.substr( 0, this._AC.pos.p + ( this._AC.pos.space ? 1 : 0 ) );
		this._hideAC();
		return false;
	},

	_hideAC:function(){
		if( this._AC.node ){
			$( this._AC.node ).hide();
			clearNode( this._AC.node );
			$('#iframe_content').css( {
				minHeight:''
			} );
		}
		delete this._beforeAT;
		delete this._beforeNoAT;
		delete this._AC.pos;
		delete this._AC.last;
		delete this._AC.time;
		this._AC.items = [];
		this._AC.char = '';
		this.onMentionMenuHide();
		//D.console.info(123);
	},

	_saveSelection:function(){
		this.focus();
		if( window.getSelection ) {
			this._savedRange = window.getSelection().getRangeAt(0);
		} else if( document.selection ){
			this._savedRange = document.selection.createRange();
		}
	},

	_restoreSelection:function(){
		this.focus();
		if( !this._savedRange ){
			return false;
		}
		if( window.getSelection ){ //non IE and there is already a selection
			var s = window.getSelection();
			if(s.rangeCount > 0 ){
				s.removeAllRanges();
			}
			s.addRange( this._savedRange );
		} else if( document.createRange ){ // non IE and no selection
			window.getSelection().addRange( this._savedRange );
		} else if( document.selection ) { // IE
			this._savedRange.select();
		}
		delete this._savedRange;
		return true;
	},

	_setCursor:function( el, startOffset ){
		if( !el || !el.parentNode ){
			return false;
		}
		this.focus();
		if( document.createRange ){
			var range = document.createRange();
			var sel = window.getSelection();
			range.setStart( el, startOffset || 0 );
			range.collapse(true);
			sel.removeAllRanges();
			sel.addRange(range);
		} else {
			var sel = document.selection.createRange();
			if( el.nodeType == 3 ){
				startOffset += this._nodeTextLength( el.parentNode, el );
				el = el.parentNode;
			}
			sel.moveToElementText( el );
			sel.moveStart( 'character', startOffset || 0 );
			//sel.moveEnd( 'character', 0 );
			sel.collapse(true);
			sel.select();
		}
	},

	_nodeTextLength:function( node, till ){
		var l = 0;
		for( var k = 0; k < node.childNodes.length; ++ k ){
			var n = node.childNodes[k];
			if( n === till ){
				break;
			}
			if( n.nodeType == 3 ){
				l += n.nodeValue.length;
				continue;
			}
			l += this._nodeTextLength( n, till );
		}
		return l;
	},

	len:function(node){
		if( !node ){
			node = this._content;
			if( !this._contentEditable ){
				return node.value.length;
			}
		}
		var l = 0;
		for( var k = 0; k < node.childNodes.length; ++ k ){
			var n = node.childNodes[k];
			if( n.nodeType == 3 ){
				try{
					l += n.nodeValue.length;
				} catch(e){
					D.error(e);
				}
				continue;
			}
			var cont = false;
			switch( n.tagName ){
				case 'SPAN':
					if( !empty( n.getAttribute('uid') ) ){
						l += D.SayEditor.LEN_USER;
						cont = true;
					}
					break;
				case 'DIV':
				case 'P':
				case 'BR':
					l += 1;
					//cont = true;
					break;
				case 'A':
					l += D.SayEditor.LEN_LINK;
					cont = true;
					break;
			}
			if(cont){
				continue;
			}
			if(n){ // loop
				l += this.len(n);
			}
		}
		return l;
	},

	value:function(v){
		this._defaultTextNode.remove();
		if( !this._contentEditable ){
			if( typeof v != 'undefined' ){
				this._content.value = htmlspecialchars_decode( strip_tags(v) );
			}
			this.onChange();
			return htmlspecialchars( this._content.value );
		}
		if( typeof v != 'undefined' ){
			this._beforeAT = null;
			this._content.innerHTML = nl2br(v);
			// Chrome - bug if text reaches length limit, starts flickering height.
			if (D.browser.name == 'Chrome' && (v.length > 150 && v.length < 170) ) {
				this._content.style.wordBreak = "break-all";
			}
			this._replaceLinks();
			if( this.sayUserReplace ){
				this._userReplace();
			}
			this.onChange();
		}
		return this._content.innerHTML || '';
	},

	_userReplace:function(){
		D.replaceCommentsWithNode( this._content, function(data){
			var m = data.match( /user:([0-9]{1,})/ );
			if(!m){
				return;
			}
			var user = D.Say.getUser( m[1] );
			return mkE( {
				tag:'span',
				className:'user',
				text:'@' + htmlspecialchars_decode( user.title ),
				prop:{
					contentEditable:false,
					onresizestart:function(){return false;} // IE
				},
				attr:{
					uid:m[1]
				}
			} );
		} );
	},

	/**
	 * @param {Object.<DR.users.User>} users
	 */
	userReplace:function(users){
		D.replaceCommentsWithNode( this._content, function(text){
			var m = text.match(/user:([0-9]*)/);
			if( !m || !users[ m[1] ] ){
				return;
			}
			var user = users[ m[1] ];
			return mkE( {
				tag:'span',
				className:'user',
				els:[
					'@', user.title
				],
				prop:{
					contentEditable:false,
					onresizestart:function(){return false;} // IE
				},
				attr:{
					uid:m[1]
				}
			} );
		} );
	},

	_isEditable:function(node){
		var n = node || this._focusNode;
		if( n && n.nodeType == 3 ){
			n = n.parentNode;
		}
		if(!n){
			return true;
		}
		switch( n.tagName ){
			case 'A':
				return false;
			case 'SPAN':
				if( !empty( n.getAttribute('uid') ) ){
					return false;
				}
				break;
		}
		return true;
	},

	_replaceLinks:function( node, re ){
		if( !this._contentEditable ){
			return 0;
		}
		if( this.noLinkReplace ){
			return 0;
		}
		if(!node){
			this.links = [];
			this._linksText = {};
		}
		re = re || 0;
		node = node || this._content;
		if( !node.childNodes.length ){
			return re;
		}
		var k = 0;
		while( k < node.childNodes.length ){
			var n = node.childNodes[k];
			if( n.nodeType == 3 ){
				var links = n.nodeValue.match( D.SayEditor.replaceLinksExp );
				if( empty(links) ){
					++ k;
					continue;
				}
				var newNodes = [];
				var text = n.nodeValue;
				for( var i = 0; i < links.length; ++ i ){
					var p = text.indexOf( links[i] );
					var splited = [ text.substr( 0, p ), text.substr( p + links[i].length ) ];
					if( links[i].substr( 0, 3 ) == 'www' ){
						links[i] = 'http://' + links[i];
					}
					newNodes.push( document.createTextNode( splited[0] ) );
					text = splited[1];
					var a = mkE( {
						tag:'a',
						text:links[i],
						//className:'link',
						prop:{
							contentEditable:false,
							onresizestart:function(){
								return false;
							},
							href:links[i]
						},
						attr:{
							target:'_blank'
						}
					} );
					this.links.push(a);
					++ re;
					newNodes.push(a);
				}
				var cursor = document.createTextNode( text + ( D.browser.name == 'Firefox' ? D.SayEditor.SPACE : ' ' ) );
				newNodes.push(cursor);
				for( var i in newNodes ){
					D.insertBefore( newNodes[i], n );
				}
				//n.nodeValue = '';
				removeNode(n);
				//D.console.info( node.childNodes );
				this._setCursor( cursor, 1 );
				k += newNodes.length;
				continue;
			}
			if( n.nodeType == 1 && n.tagName == 'A' ){
				this.links.push(n);
				if( !n.onresizestart ){
					n.contentEditable = false;
					n.onresizestart = function(){
						return false;
					};
					n.target = '_blank';
					// IE fix
					if( D.browser.name != 'Explorer' || D.browser.version > 8 ){
						var cursor = document.createTextNode( ' '/*D.SayEditor.SPACE*/ );
						D.insertAfter( cursor, n );
						this._setCursor( cursor, 1 );
					}
				}
				++ k;
				continue;
			}
			if( this._isEditable(n) ){
				re += this._replaceLinks(n);
			}
			++ k;
		}
		return re;
	},

	// DB-3291 Chrome uz enter veido jaunus div tagus, kas dzēšot linebreaku nodzēš arī linku.
	// Pieliekam <br> vienmēr kā pēdējo tagu (vai pirms linka, ja ir links)
	_addBrAsLast: function(){
		var lastChild = this._content.lastChild;
		if( !lastChild ){
			this._content.appendChild(document.createElement("br"));
			return;
		}
		if( lastChild.nodeName.toLowerCase() === 'a' ){
			var prevNode = lastChild.previousSibling;
			if( !prevNode || prevNode.nodeName.toLowerCase() != 'br' ){
				this._content.appendChild(document.createElement("br"));
				return;
			}
		}
		if( lastChild.nodeName.toLowerCase() === 'br' ){
			return;
		}
		this._content.appendChild(document.createElement("br"));
	},

	setCursorAtEnd:function(){
		this.focus();
		if( !this._contentEditable ){
			return;
		}
		if( window.getSelection && document.createRange ){
			var range = document.createRange();
			range.selectNodeContents( this._content );
			range.collapse(false);
			var sel = window.getSelection();
			sel.removeAllRanges();
			sel.addRange(range);
		} else if( typeof document.body.createTextRange != "undefined") {
			var textRange = document.body.createTextRange();
			textRange.moveToElementText( this._content );
			textRange.collapse(false);
			textRange.select();
		}
	}
};

// --- editor.js ---

// +++ item.js +++
/**
 * @param {object} par
 * @param {D.Say} say
 * @constructor
 */
D.SayItem = function( par, say ){
    this.id = par.id;
    if(say){
        say._items[ par.id ] = this;
    }
    this._hasImage = Boolean( par.image || par.embed || par.galleryItem );
    this.text = par.text || '';
	this.user = par.user || D.Say.getUser( par.uid );
	this.displayUid = par.displayUid || null;
	if( this.displayUid ) {
		this.displayUser = D.Say.getUser(this.displayUid);
	} else {
		this.displayUser = this.user;
	}
    this.ok = true;
    this.par = par;
    this.id = par.id;
    this.say = say;
    this.perm = par.perm || 0;
    this.exp = par.exp || 0;
    this.canDel = par.canDel || false;
    this.recCount = par.recCount || 0;
    this.comCount = par.comCount || 0;
    this.likeCount = par.likeCount || 0;
    this.hideFollowLink = Boolean( par.hideFollowLink );
    this.hideRecommend = Boolean( par.hideRecommend );
    this.hideComment = Boolean( par.hideComment );
    this.hideCreated = Boolean( par.hideCreated );
    this.is18plus = Boolean( par.is18plus );
    this.hideLike = Boolean( par.hideLike );
    this.canRec = Boolean( par.canRec );
    this.canLike = Boolean( par.canLike );
    this.canSendFriend = Boolean( par.canSendFriend );
    this.canHighLight = Boolean( par.canHighLight );
    this.paidExp = par.paidExp || 0;
    this.hlExp = par.hlExp || 0;
    this.canRemoveTag = Boolean( par.canRemoveTag );
    this.highLightApi = Boolean( par.highLightApi );
    this.highLightEvent = Boolean( par.highLightEvent );
    this.highLightEventExists = Boolean( par.highLightEventExists );
    this.highLightApiExists = Boolean( par.highLightApiExists );
    this.highLightMusic = Boolean( par.highLightMusic );
    this.highLightMusicExists = Boolean( par.highLightMusicExists );
    this.highLightUserHlExists = Boolean( par.highLightUserHlExists );
    this.highLightPreview = Boolean( par.highLightPreview );
    this.highLighted = Boolean( par.highLighted );
    this.highLightedStatus = par.highLightedStatus || 0;
    this.withNames = par.withNames || [];
    this.displayReasonNames = par.displayReasonNames || [];
    this.pinned = par.pinned || false;
    this.uid = par.uid || 0;
    this.image = par.image || null;
    this.galleryItem = par.galleryItem || null;
    this.postponedDate = par.postponedDate || null;
    this.link = par.link || null;
    this.h = par.h || '';
    this.externalStats = par.externalStats;
	this.likeProfiles = par.likeProfiles || [];
	this.recProfiles = par.recProfiles || [];
    this.canChangePerm = par.canChangePerm;
    this.onDelete = par.onDelete || function() {};
    this.node = mkE( {
        tag:'li',
        id:'sayPost' + par.id,
        className:'SayItem SIconHover',
        els:[
            this._content = mkE( {
                tag:'div',
                className:'commentContent',
                els:[
                    this._heading = mkE( {
                        tag:'div',
                        className:'heading',
                        els:[
	                        this._profileImage = mkE( {
		                        tag:'a',
		                        className:'profileImage' + (this.displayUser.isOnline ? ' online profileOnline' + this.displayUser.isOnline : ''),
		                        href:this.displayUser.url,
		                        style:{
			                        backgroundImage:"url('" + this.displayUser.image.icon + "')"
		                        }
	                        }), // a.profileImage
	                        this._headingContent = mkE({
		                        tag: 'div',
		                        className: 'heading-content',
                                els: [
                                    {
                                        tag: 'div',
                                        className: 'userLinkContainer',
                                        els: [
                                            this._userLinkNode = mkE({
                                                tag: 'a',
                                                className: 'userLink',
                                                text: htmlspecialchars_decode(this.displayUser.title),
                                                href: this.displayUser.url
                                            })
                                        ]
                                    },
                                    this._postInfoContent = mkE({
                                        tag: 'div',
                                        className: 'postInfoContainer',
                                        els: [
                                            this.timeNode = mkE({
                                                tag: 'a',
                                                className: 'comTime',
                                                text: D.ddate2(par.ts),
                                                href: par.url
                                            }), // span
                                            this._sourceNode = mkE({
                                                tag: 'span'
                                            }), // span
                                            this._highLightedBadge = mkE({
                                                tag: 'a',
                                                href: '/stats/click.php?url=http://draugiem.lv/ads/sayhighlight/&key=say_highlight_badge',
                                                className: 'icon yellowBulletRight',
                                                text: ( D.Lang.exists('Highlight post') ? D.Lang.get('Highlight post') : '' )
                                            }),
                                            this._permIconNode = mkE({
                                                tag: 'span',
	                                            className: 'SVGIcon permissions-icon',
                                                els: [
                                                	T.svgIcon(this._getPermIcon())
                                                ],
                                                prop: {
                                                    onclick: D.closure(this, this._permClick),
                                                    onmouseover: D.closure(this, this._permOver)
                                                },
                                                style: {
                                                    display: 'none'
                                                }
                                            })
                                        ]
                                    })
                                ]
	                        }),
	                        this._headingRightNode = mkE( {
		                        tag:'div',
		                        className:'commentRight'
	                        } ) // div.commentRight
                        ]
                    } ), // div.heading
                    this._body = mkE( {
                        tag:'div',
                        className:'body',
                        prop:{
                            //onclick:D.closure( this, this._onclick )
                        }
                    } ), // div.body
                    this._bottomNode = mkE( {
                        tag:'div',
                        className:'options',
                        els:[
                            this._optionsNode = mkE( {
                                tag:'span'
                            } ),
                            this._optionsRightNode = mkE( {
                                tag:'div',
                                className:'commentRight'
                            }),
                            this._brandSayNode = mkE({
                                tag: 'div',
                                className: 'customBrandSay'
                            })
                        ]
                    } ) // div.options
                ]
            } ) // div.commentContent
        ]
    } );

    if( !say.hideParentUser && this.displayUid && this.displayUid !== this.user.id ) {
			var text;
			switch (this.user.type) {
				case D.USER_TYPE_GROUPS:
					text = 'in group';
					break;
				case D.USER_TYPE_EVENT:
					text = 'in_event';
					break;
				default:
				//nothing
			}
			var eventLink = mkE({
				tag: 'a',
				className: 'parentUserLink',
				text: htmlspecialchars_decode(this.user.title),
				href: this.user.url
			});
			this.appendToUser(mkE({
				tag: 'span',
				els: [
					{
						tag: 'span',
						className: 'inGroup',
						text: D.Lang.get(text) + ' '
					},
					eventLink
				]
			}));
			D.Say.addUserTooltip( eventLink, this.user );
		}

		if((say.type == 'groups' || say.type == 'gallery') && !this.par.seen) {
			this.timeNode.parentNode.insertBefore(mkE({
				tag: 'span',
				className: 'new',
				text: D.Lang.get('Jauns')
			}), this.timeNode.nextSibling);
		}

    if ( this.externalStats ) {
		mkE({
			tag: 'img',
			src: this.externalStats.replace('[TIMESTAMP]', new Date().getTime()),
			style:{
				width:'1',
				height:'1',
				border:'0',
				position: 'absolute',
				top: 0,
				left: 0
			}
		}).append( this.node );
    }

    if( D.ID ){
        if( this._canFollow() ){
            this._followSayContainer = mkE({
                tag: 'div',
                className: 'sayFollowContainer',
                style: {display:'none'}
            }).append(this._headingRightNode);
            addClassName(this._heading, 'heading-follow');

            this._drawFollowButton();
        }
        if( !this.par.galleryAd ){
        	if ( D.ID % 2 === 0 ) {
				this._reportIcon = mkE({
					tag: 'a',
					className: 'SIcon sayBtnReport',
					title: D.Lang.get( 'report_police' ),
					onclick: D.closure( this, function() {
						this._optReport();
						D.Say.rpc.send('stats', {
							key: 'say_report_ab_1'
						});
					}),
					els: [
						T.svgIcon({ icon: 'report' }),
						{
							tag: 'span',
							className: 'btitle',
							text: D.Lang.get( 'report_police_short' )
						}
					]
				}).append( this._headingRightNode );
			} else {
				this._reportIcon = mkE({
					tag: 'a',
					className: 'SIcon sayBtnReport',
					title: D.Lang.get( 'report_police' ),
					onclick: D.closure( this, function() {
						this._optReport();
						D.Say.rpc.send('stats', {
							key: 'say_report_ab_2'
						});
					}),
					els: [
						T.svgIcon({ icon: 'report' })
					]
				}).append( this._headingRightNode );
			}

	        this._favIcon = mkE( {
		        tag:'a',
		        className:'SIcon bookmarkSIcon' + ( par.fav ? ' active' : '' ),
		        prop:{
			        title:par.fav?( D.Lang.exists('unmark_post') ? D.Lang.get('unmark_post') : '' ):( D.Lang.exists('Mark post') ? D.Lang.get('Mark post') : '' ),
			        onclick: D.closure( this, this.toggleFav )
		        }
	        } ).append( this._headingRightNode );
        }
    }
    this._closeIcon = mkE( {
        tag:'a',
        className:'icon closeIcon',
        prop:{
            onclick: D.closure( this, this._close )
        }
    } );
    if( par.seen ){
        addClassName( this.node, 'seen' );
    }
    /*if( par.debug && ( D.ID == 178429 || D.DEV_NAME == 'z' ) ){
        mkE( {
            tag:'pre',
            style:{
                position:'absolute',
                top:'50px',
                left:0,
                background:'rgba(255,255,255,0.5)',
                fontSize:'9px'
            },
            text:( D.JSON.stringify || D.JSON.encode ) ( par.debug, null, " " )
        } ).append( this.node );
    }*/
    if( this.is18plus ){
        mkE( {
            tag:'span',
            className:'badge',
            text:'18+',
            style:{
                backgroundColor:'#F24D42'
            }
        } ).append( this._postInfoContent );
    }
    D.Say.addUserTooltip( this._userLinkNode, this.displayUser );
    if( this.highLightPreview ){
        this._closeIcon.remove();
        if( this._favIcon ){
            this._favIcon.remove();
        }
        if ( this._reportIcon ) {
        	this._reportIcon.remove();
		}
    } else {
        if( par.actual ){
            setNodeText( this._highLightedBadge, D.Lang.get('Actual post') );
            this._highLightedBadge.href = '/draugiem.lv/';
            removeClassName( this._highLightedBadge, 'yellowBulletRight' );
            addClassName( this._highLightedBadge, 'sayActual' );
            this._closeIcon.title = D.Lang.get('close');
            this._closeIcon.onclick = D.closure( this, this._closeActual );
            addClassName(this._heading, 'isActualItem');
        } else {
            this._highLightedBadge.remove();
        }
    }

    if(this.canChangePerm) {
        this._permIconNode.style.display = '';
    }
    if( this._optShow(true) && !this.par.galleryAd ){
        this._optIconNode = mkE( {
            tag:'a',
            className:'SIcon optionsSIcon',
            onclick:D.closure( this, this._optShow, false )
        } ).append( this._headingRightNode );
    }else if( this.par.galleryAd ){
	    this._optIconNode = mkE( {
		    tag:'a',
		    className: 'SVGIcon',
		    els: [
			    T.svgIcon('close-10')
		    ],
		    onclick:D.closure( this, this._optCloseGalleryAd )
	    } ).append( this._headingRightNode );
    }

    if(par.dontDraw) {
        return;
    }
    this._drawContent();

    if( this.par.pigsort ){
        this._drawPigsortHeader();
    }else{
        if( par.showDisplayReason && !this.say.hideDisplayReason ){
            this._drawDisplayReason();
        }
        this._drawRecs();
        this._drawFans();
    }
    this._drawOptions();

    // Postponed say item for business page
    if ((this.user.type == D.USER_TYPE_BIZ || this.user.type == D.USER_TYPE_API) && this.perm == D.PERM_NONE && this.postponedDate != undefined && this.postponedDate != null) {
        mkE({
            tag:'span',
            text: D.Lang.get('planned_postpone_date')+ ' '+ this.postponedDate,
            style:{
                display: 'block',
                marginLeft: '0px',
                color: '#f58c00'
            }
        }).append(this._heading);
    }

    if (this.par.pinned) {
        var pinnedItem = mkE({
            tag: 'div',
            className: 'icon sayPinnedIcon pinnedInfo',
            text: D.Lang.get('pinned_post')
        });

        addClassName(this.node, 'pinned');
        D.insertBefore( pinnedItem, this._heading );
        D.insertBefore(T.clear(), this._heading );
    }

    if ( this.hideCreated ) {
        this.timeNode.remove();
    }

    // Runā pieminējumu apstiprināšana
    if( this.say.sayMentions ){
        this._drawSayMentionApproval();
    }

    if( this.par.canComment && this.par.canCommentInline && !existsClassName(this.say.node, 'saySinglePost') && !this.hideComment ){
        D.onLoad('Comments', D.closure(this, function(){
	        this._friendComments = new D.SayItem.FriendComments({
		        likeType: this.par.likeType,
		        likeId: this.par.likeId,
		        likes: this.par.friendLikes,
		        iLike: in_array(D.ID, this.likeProfiles),
		        likeUsers: this.par.likeUsers,
		        friendComments: this.par.friendComments,
		        commentsCount: this.par.comCount,
		        commentsParams: this.par.friendCommentsParams,
		        showComments: D.closure(this, this._optAddCommentOnclick, false)
	        }).append(this.node);
        }));
    }

	if ( this.user.type === D.USER_TYPE_SAYHL ) {
		this._profileImage.target = '_blank';
		this._userLinkNode.target = '_blank';
	}

}; // D.SayItem

D.SayItem.prototype = {

    _optShow:function(check){
        if(!D.ID){
            return false;
        }
        if( this._optionsDropDown ){
            this._optionsDropDown.toggle( this._optIconNode.parentNode );
            return;
        }
        var dd = new T.Options;
        var opt;
        this._optClipBoard = new T.Options.Item( {
            caption:D.Lang.get('copy_shortlink')
        } );

		if( this.user.type != D.USER_TYPE_SAYHL || (this.par.event && this.par.event.type == 101) ) {
			dd.addItem(this._optClipBoard);
		}

        if ( this.user.type != D.USER_TYPE_SAYHL ) {

			if ( this.par.event && this.par.event.edit_url ) {
				var edit_url = this.par.event.edit_url;
				opt = new T.Options.Item( {
					caption: D.Lang.get( 'edit' ),
					onclick: function () {
						Section.navigate( edit_url );
					}
				} );
				dd.addItem( opt );
			}

			if ( this.canSendFriend ) {
				opt = new T.Options.Item( {
					caption: D.Lang.get( 'send_friend' ),
					onclick: D.closure( this, this._optSendFriend )
				} );
				dd.addItem( opt );
			}
			if ( this.canRemoveTag ) {
				this.removeTagOpt = new T.Options.Item( {
					caption: D.Lang.get( 'remove_tag' ),
					onclick: D.closure( this, this._optRemoveTag )
				} );
				dd.addItem( this.removeTagOpt );
			}
		}
        if ( D.ID != this.uid && this.say && (this.say.method == 'getFriendPosts' || this.highLighted) ) {
            if ( check ) {
                return true;
            }
            opt = new T.Options.Item( {
                caption: D.Lang.get( 'hide_post' ),
                onclick: D.closure( this, this._optClose )
            } );
            dd.addItem( opt );
        }
		if ( this.highLighted ) {
			opt = new T.Options.Item( {
				caption: D.Lang.get( 'Why am I seeing this ad' ),
				onclick: D.closure( this, function() {
					new D.Ads.TargetingInfo({
						id: this.id,
						type: D.Ads.OptionsPar.TYPE_SAY
					});
				} )
			} );
			dd.addItem( opt );
		}
		if ( this.user.type != D.USER_TYPE_SAYHL ) {
            if ( this._canUnFollow() ) {
                if ( check ) {
                    return true;
                }
                var caption = D.Lang.get( 'Unfollow' );
                if ( this.user.type == D.USER_TYPE_GROUPS ) {
                    caption = D.Lang.get( 'Nesekot grupai' );
                }
                opt = new T.Options.Item( {
                    caption: caption,
                    onclick: D.closure( this, this._optUnfollow )
                } );
                dd.addItem( opt );
            }
            if ( this._canFollow() ) {
				if ( check ) {
					return true;
				}
				var caption = D.Lang.get( 'follow' );
				if ( this.user.type == D.USER_TYPE_GROUPS ) {
					caption = D.Lang.get( 'Sekot grupai' );
				}
				opt = new T.Options.Item( {
					caption: caption,
					onclick: D.closure(this, this._sayFollowUnfollowPage, true)
				} );
				dd.addItem( opt );
            }
        }
        if( this.canDel ){
            if(check){
                return true;
            }
            if ( this.user.type != D.USER_TYPE_SAYHL ) {
                if ((this.user.type == D.USER_TYPE_BIZ || this.user.type == D.USER_TYPE_DEFAULT) && this.say && this.uid == this.say.uid && this.say.method == 'getUserPosts') {
                    opt = new T.Options.Item({
                        caption: this.par.pinned ? D.Lang.get('unpin') : D.Lang.get('pin'),
                        onclick: this.par.pinned ? D.closure(this, this._optUnpin) : D.closure(this, this._optPin)
                    });
                    dd.addItem(opt);
                }
                if( this.canHighLight || (this.user.type == D.USER_TYPE_DEFAULT && ( this.perm === D.PERM_ALL || this.perm === D.PERM_REG ) ) ){
                    opt = new T.Options.Item( {
                        caption:D.Lang.get('highlight_post'),
                        onclick:D.closure(this, this._optHighlight)
                    } );
                    dd.addItem(opt);
                }
            }
            if( !this.par.event || this.par.event.type == 89 || this.par.event.type == 98 || this.par.event.type == 44 || this.par.event.type == 1 ){
                opt = new T.Options.Item( {
                    caption:D.Lang.get('edit'),
                    onclick:D.closure(this, this._optEdit)
                } );
                dd.addItem(opt);
            }else if( this.par.event.type == 2 ){
	            opt = new T.Options.Item( {
		            caption:D.Lang.get('edit'),
		            onclick:D.closure(this, this._optBlogEdit)
	            } );
	            dd.addItem(opt);
            }
            if(opt){
                dd.addSep();
            }
            opt = new T.Options.Item( {
                caption:D.Lang.get('delete'),
                onclick:D.closure( this, this._optDelete )
            } );
            dd.addItem(opt);
        }
	    if( D.ID && this.par.galleryAd ){
		    if ( check ) {
			    return true;
		    }
		    opt = new T.Options.Item( {
			    caption: D.Lang.get( 'close' ),
			    onclick: D.closure( this, this._optCloseGalleryAd )
		    } );
		    dd.addItem( opt );
	    }
			if( D.ID && this.par.fakeGallery ){
				if ( check ) {
					return true;
				}
				opt = new T.Options.Item( {
					caption: D.Lang.get( 'close' ),
					onclick: D.closure( this, this._optCloseFakeGallery )
				} );
				dd.addItem( opt );
			}
		if ( D.ID && this.uid !== D.ID && !this.galleryAd && !this.highLighted && !this.par.pigsort ) {
			if ( check ) {
				return true;
			}
			opt = new T.Options.Item( {
				caption: D.Lang.get( 'report_police' ),
				onclick: D.closure( this, this._optReport )
			} );
			dd.addItem( opt );
		}
        if(!opt){
            return false;
        }
        this._optionsDropDown = dd;
        if( !check ){
            dd.toggle( this._optIconNode.parentNode );
        }
        if( !check && !this._clipBoard ){
            D.onLoad('ClipboardJS', D.closure(this, this._onClipBoard));
        }
        return true;
    },

    _onClipBoard:function(){
        this._clipBoard = new ClipboardJS(this._optClipBoard.node, {
            text: D.closure(this, function(){
                return this.par.shortUrl
            })
        });

        this._clipBoard.on('success', D.closure(this, function() {
            D.Confirm.success(D.Lang.get('shortlink_copied'), 1000);
            D.Say.rpc.send('stats', {
                key: 'say_copy_link'
            });
        }));
    },

    _optClose:function(){
        D.loadingOverlay( this.node );
	    if( this.par.pigsort ){
		    this._closePigsort();
		    return;
	    }
        D.Say.rpc.send(
            'close',
            {
                pid:this.id
            },
            this.remove,
            this
        );
    },

	_closePigsort:function(){
		var rpc = new RPC('/pigsort/rq/app.php');
		rpc.send(
			'close',
			{
				type: this.par.pigsort.type,
				id: this.par.pigsort.id
			},
			this.remove,
			this
		);
	},

	_optCloseGalleryAd: function(){
		D.onLoad('DR.ads', D.closure(this, this._closeGalleryAd));
	},

	_optCloseFakeGallery: function(){
		$.get('/gallery/rq/closeFake.php', D.closure(this, function() {
			this.node.remove();
		}));
	},

	_closeGalleryAd: function(){
		this._mCloseGalleryAd = new DR.ads.CloseAdvertAlbum();
		if( this.par.galleryAd.closeId ){
			this._mCloseGalleryAd.id = this.par.galleryAd.closeId;
		}
		this._mCloseGalleryAd.onLoad = D.closure(this, this._onCloseGalleryAd);
		this._mCloseGalleryAd.call();
	},

	_onCloseGalleryAd: function(){
		this.node.remove();
	},

    _optDelete:function(){
		if( this.par.event && this.par.event.type == 1 ){
			D.confirmDelete( D.closure( this, this._delete ), {
				title: ( D.Lang.exists( 'confirm delete', 'xGlobal' ) ? D.Lang.get( 'confirm delete', 'xGlobal' ) : 'Are you sure?' ),
				text: D.Lang.get('say_gallery_delete_confirm')
			} );
			return;
		}
        D.confirmDelete( D.closure( this, this._delete ) )
    },

	_optBlogEdit: function(){
    	Section.navigate(this.par.event.url + '/edit');
	},

    _optEdit:function(){
    	var par = new D.Say.Form.Par;
    	par.postId = this.id;
    	par.onSave = D.closure(this, this._editSaveRe);
    	var form = new D.Say.Form(par);
	    InfoBox.els(form, {
		    width: 500,
		    title: D.Lang.get('Say edit'),
		    overlayClose: false,
		    overflowVisible: true
	    });
    	// return;
		//
        // var profiles = [];
        // if(this.uid != D.ID) {
	    //     profiles.push(this.user);
        // }
        // var form = new D.SayForm( {
        //     tag:'div',
        //     uid: this.uid,
        //     editContent: this.id,
        //     defaultPermission: this.perm,
        //     onSend: D.closure(this, this._editSaveRe),
        //     disableOnBeforeUnload: true,
		// 			  sayUserReplace:true,
        //     profiles: profiles,
        //     hideProfiles: true
        // } );
        // InfoBox.els(form, {
        //     width: 440,
        //     title: D.Lang.get('Say edit'),
	    //     overlayClose: false
        // });
        // $('.InfoBoxContentWrap').css('overflow','visible');
        // form._editor.focus();
        // var text = '';
        // if(this.link) {
        //     text = this.link + ' ';
        // } else {
        //     form._editor.noLinkReplace = true;
        // }
        // form._editor.value( text + this.par.text );
        // if(!this.link) {
        //     form._editor.noLinkReplace = false;
        // }
        // form._icons.addImage.style.display = 'inline-block';
        // if(this.par.event && this.par.event.type == 89 && this.par.event.item) {
        //     form.showImage(this.par.event.item);
        // }
        // form._editor.setCursorAtEnd();
    },

    _editSaveRe:function(re){
		InfoBox.close();
        if( !re.item ){
            return;
        }
        O2O( D.Say.users, re.users );
        var item = new D.SayItem( re.item, this.say );
        item.node.replace( this.node );
        if( this.say ){
            this.say._items[ this.id ] = item;
        }
    },

    _optUnfollow:function(){
        //D.smallPopUp.open('/temp/wannaunfollowpage/index.php?user_id=' + this.user.id + '&position=1', {
        //	title: 'Kādēļ nolēmi pārtraukt sekot šai lapai?'
        //});
        var cbxs = {};
        var form = mkE( {
            tag:'form'
        } );
        if( this.user.type == D.USER_TYPE_GROUPS ) {
            var user = this.user;
            if( user.id != D.ID ) {
                cbxs[ user.id ] = T.Forms.checkbox({
                    caption: user.title,
                    checked: true
                }).append(form);
            }
        } else {
            if( this.par.uid != D.ID ){
                cbxs[ this.user.id ] = T.Forms.checkbox( {
                    caption:this.user.title,
                    checked:true
                } ).append(form);
            }
        }
        for( var k in this.par.suggestions ){
            var r = this.par.suggestions[k];
            if( r.user && r.user.isWatching ){
                if( cbxs[ r.user.id ] ){
                    continue;
                }
                cbxs[ r.user.id ] = T.Forms.checkbox( {
                    caption:r.user.title,
                    checked:false
                } ).append(form);
            }
        }
        if( count(cbxs) == 1 ){
            this._blockUsers( array_keys(cbxs) );
            return;
        }
        var doBlock = D.closure( this, function(){
            D.smallPopUp.close();
            var uids = [];
            for( var k in cbxs ){
                if( cbxs[k].checked ){
                    uids.push(Number(k));
                }
            }
            this._blockUsers(uids);
        } );
        var footer = T.Forms.footer();
        D.smallPopUp.html( '', {
            title:D.Lang.get('Say block user')
        } );
        clearNode( D.smallPopUp.content );
        form.append( D.smallPopUp.content );
        footer.append( D.smallPopUp.content );
        T.submitButton( {
            caption:D.Lang.get('Bloķēt'),
            onclick:doBlock
        } ).append(footer);
    },

    _optPin: function() {
        D.Say.rpc.send(
            'pin',
            {
                pid:this.id
            },
            function(re){
                if (re.ok) {
                    window.location.reload();
                }
            },
            this
        );
    },

    _optUnpin: function() {
        D.Say.rpc.send(
            'unpin',
            {
                pid:this.id
            },
            function(re){
                if (re.ok) {
                    window.location.reload();
                }
            },
            this
        );
    },

    _optSendFriend:function(){
        D.sendMail(null, null, this.par.shortUrl);
        D.Say.rpc.send('stats', {
            key: 'say_send_friend'
        });
    },

		_optReport: function(){
			D.policeReport(this.id, 'say');
		},

    _drawDisplayReason: function(){
        var allFriends = true;
        var names = this.par.displayReasonNames;
        var l = count(names);
        if( !l ){
            return;
        }
        var i;
        for( i in names ){
            var u = D.Say.getUser( names[i].uid );
            if( !u.isFriend ){
                allFriends = false;
                break;
            }
        }
        var nodes = [];
        if( allFriends && l == 1 ){
            nodes.push(D.Lang.get('your_friend'));
        }else if( allFriends ){
            nodes.push(D.Lang.get('your_friends'));
        }else{
            var firstUser = reset(names);
            var user = D.Say.getUser( firstUser.uid );
            var userNode = mkE( {
                tag:'a',
                href:user.url,
                text: user.isFriend ? D.Lang.get('your_friend') : htmlspecialchars_decode( user.title )
            } );
            D.Say.addUserTooltip( userNode, user );
            nodes.push(userNode);
        }

        if( l > 1 && !allFriends ){
            nodes.push(' ' + D.Lang.nget(l - 1, 'and more'));
        }

        nodes.push(' ' + D.Lang.nget(l, 'was_tagged'));

        var reasonNode = mkE( {
            tag:'div',
            className: 'sayDisplayReason',
            els:[
                {
                    tag: 'span',
                    className: 'icon dtagIcon',
                    els: nodes
                }
            ]
        } );
        addClassName(this.node, 'withDisplayReason');
        D.insertBefore(reasonNode, this._heading);
        this._displayReasonRight = mkE({
            tag: 'div',
            className: 'sayDisplayReasonRight'
        }).append(reasonNode);
        if ( this._reportIcon ) {
			this._reportIcon.append(this._displayReasonRight);
		}
        if( this._favIcon ){
	        this._favIcon.append(this._displayReasonRight);
        }
        if( this._optIconNode ){
            this._optIconNode.append(this._displayReasonRight);
        }
    },

    _drawWith:function(){
        var withEls = [];
        withEls.push( D.Lang.get('with'), ' ' );
        var l = count( this.par.withNames );
        var i = 0;
        for( var k in this.par.withNames ){
            var w = this.par.withNames[k];
            ++ i;
            if( i > 1 ){
                if( i == l ){
                    withEls.push( ' ', D.Lang.get('and'), ' ' );
                } else {
                    withEls.push(', ');
                }
            }
            if( w.uid ){
                var u = D.Say.getUser( w.uid );
                var userNode = mkE( {
                    tag:'a',
                    href:u.url,
                    text:htmlspecialchars_decode( u.title )
                } );
                D.Say.addUserTooltip( userNode, u );
                withEls.push(userNode);
                continue;
            }
            if( w.title ){
                withEls.push( {
                    tag:'span',
                    text:htmlspecialchars_decode( w.title )
                } );
            }
        }
        this.withNode = mkE( {
            tag:'span',
            els:withEls
        } );
        D.insertBefore( this.withNode, this.timeNode );
    },

    _drawContent:function(){
        var par = this.par;
        var clear = false;
        if( par.eventHTML ){
            this._body.innerHTML = par.eventHTML;
            return;
        }
        if( par.text && !par.event && !this._hasImage && !par.link && !par.at && !par['with'] ){
            this._drawSuperText();
	        this._drawSource();
            return;
        }
        if( par.id == 1455583342 ){
            this.image = par.galleryItem.image;
            delete par.galleryItem;
            delete par.event;
        }
        if( par.event ){
            if( !this._events[ par.event.type ] ){
                D.console.error( 'Say unknown event type: ' + par.event.type );
                this.ok = false;
                return;
            }else{
                try{
                    this._event = new this._events[ par.event.type ]( this, par.event, par );
                    if( !this._event.node || this._event.ok === false ){
                        this.ok = false;
                    } else {
                        this._event.node.append( this._body );
                        clear = this._event.clear;
                    }
                } catch(e){
                    D.console.error(e);
                    this.ok = false;
                }
            }
        } else {
            if( par.galleryItem ){
                clear = this._drawGalleryItem(par.galleryItem, par, this._body);
            }
            if( par.embed && par.embed.html ){
                mkE( {
                    tag: 'center',
                    innerHTML: par.embed.html
                } ).append(this._body);
            }
            if( !par.galleryItem && this.image ){
                addClassName( this._body, 'sayHasImage' );
                if ( !par.link ) {
                    var imgMosaic = new T.Mosaic( this.say.mosaicWidth() );
                    var imgMosaicItem = new T.MosaicItem( this.image.say, this.image.w, this.image.h );
                    imgMosaicItem.urlGM = this.image.GM;
                    imgMosaicItem.onclick = D.closure( this, this._openLargePic );
                    imgMosaic.add( imgMosaicItem );
                    imgMosaic.append( this._body );
                } else {
                    this._drawSayImage();
                    clear = true;
                }
            }
            if( !this._hasImage && par.at ){
								var loc = par.at.location;
                mkE( {
                    tag:'a',
                    className:'checkinMap',
                    href:D.Say.link('/places/'+ par.at.placeId, this.id),
                    els:[
											new T.OSMMap(
												new T.OSMMap.Par()
													.setWidth(this.say.mosaicWidth())
													.setHeight(144)
													.setZoom(15)
													.setLat(loc.lat)
													.setLng(loc.lng)
													.setMarkers([[loc.lat, loc.lng]])
													.setZoomControl(false)
													.setScrollWheelZoom(false)
											),
	                    {
		                    tag: 'div',
		                    className: 'overlay'
	                    }
                    ],
                    style:{
                        display:'block',
	                    height: '144px',
	                    width: this.say.mosaicWidth() + 'px'
                    }
                } ).append( this._body );
            }
            if( this.link && (!par.embed || par.embed.site != 'SoundCloud') ){
                this._drawExtLink();
            }
        }
        if( ( !par.event || (this._event && this._event.showText) ) && par.text ){
	        var text = par.text;
	        var shortened = false;
	        if( text.length > 300 ){
		        text = D.shorten(text, 300, '...');
		        shortened = true;
	        }
            this._textNode = mkE( {
                tag:'font',
                className:'sayText',
				innerHTML:text.replace( /(\r\n|\n\r|\n){2,}/g, '<br /><br />' ).replace( /(\r\n|\n\r|\n){1,}/g, '<br />' )
            } ).prepend( this._body );
            D.smileyReplace( this._textNode );
            D.linksReplace( this._textNode, {
                stopPropagation:true,
                click:function(href){
                    var get = new Get({});
                    get.add( 'url', href ).add( 'pid', par.id ).add( 'uid', par.uid );
                    return '/say/click.php?' + get;
                }
            } );
            D.Say.userReplace( this._textNode );
	        if( shortened ){
		        mkE({
			        tag: 'span',
			        text: ' '
		        }).append(this._textNode);
		        mkE({
			        tag: 'a',
			        className: 'read-more',
			        onclick: D.closure(this, this._showFullText),
			        text: D.Lang.get('read_more')
		        }).append(this._textNode);
	        }
        }
        if( ( !par.event || (this._event && this._event.showText) ) ){
            this._addMetaText();
        }

        if(clear){
            mkE( {
                tag:'div',
                className:'clear'
            } ).append( this._body );
        }
        this._drawSource();
	    D.Say.hashTagReplace( this._body );
    },

    _showFullText: function(){
        if( !this._textNode ){
            return;
        }
        clearNode(this._textNode);
	    this._textNode.innerHTML = this.text.replace( /(\r\n|\n\r|\n){2,}/g, '<br /><br />' ).replace( /(\r\n|\n\r|\n){1,}/g, '<br />' );
        D.smileyReplace( this._textNode );
        D.linksReplace( this._textNode, {
            stopPropagation:true,
            click:D.closure(this, function(href){
                var get = new Get({});
                get.add( 'url', href ).add( 'pid', this.id ).add( 'uid', this.uid );
                return '/say/click.php?' + get;
            })
        } );
        D.Say.userReplace( this._textNode );
        D.Say.hashTagReplace( this._textNode );
	    if( ( !this.par.event || (this._event && this._event.showText) ) ){
		    this._addMetaText();
	    }
    },

	_drawSource: function(){
		var sources = {
			instagram: true,
			twitter: true,
			endomondo: true,
			foursquare: true
		};
		if (this.par.from && this.par.from.source && sources[this.par.from.source]) {
			mkE( {
				tag:'a',
				text: D.Lang.get('say_source_' + this.par.from.source),
				href:this.par.from.href,
				className:'saySource'
			} ).append(this._sourceNode);
		} else {
			this._sourceNode.remove();
		}
	},

    _drawSayImage: function(){
        this._smallImage = this.image.w < 436 || this.image.h > this.image.w;
        var w, h, top = 0, left = 0;
        if( this._smallImage ){
            if( this.image.w > this.image.h ){
                h = 144;
                w = (h / this.image.h * this.image.w)
                left = (144 - w ) / 2;
            }else{
                w = 144;
                h = (w / this.image.w * this.image.h);
                top = (144 - h) / 2;
            }
        }else{
            w = Math.min(this.say.mosaicWidth(), 500);
            h = Math.floor(w / this.image.w * this.image.h);
        }
        this._imgLinkNode = mkE( {
            tag:'a',
            className:'sayExtImg' + ( this._smallImage ? ' smallImg' : '' ),
            els:[
                {
                    tag:'img',
                    src:( this._smallImage ? this.image.GM : this.image.say ),
                    style: {
	                    width: w + 'px',
	                    height: h + 'px',
                        maxWidth: this._smallImage ? w + 'px' : '100%',
                        marginTop: top + 'px',
                        marginLeft: left + 'px'
                    }
                },
                {
                    tag:'div',
                    className:'sayImageOverlay'
                }
            ]
        } ).append( this._body );
    },

    _getContentLink: function(item, par){
        var contentLink = par.link;

        // temp hacks bitei, kameer iet izceltais runaa
        if ( this.text == 'Ja saņemot dāvanu, skumji nopūt, Tev ir tikusi netrāpīgā. Nebēdājies, bet ienāc, kur netrāpīgās dāvanas atrod īstos saimniekus un kļūst trāpīgas! http://bit.ly/1O4Y0MD' ) {
            contentLink = 'http://bit.ly/1O4Y0MD';
        } else if ( this.text.indexOf('http://bit.ly/2270O64') != -1 ) {
            contentLink = 'http://bit.ly/2270O64';
        } else if ( this.text == "Speedtest apstiprina – ātrākais 4G mobilais tīkls Latvijā ir Bitei un Bites klientiem!" ) {
            contentLink = 'http://www.bite.lv/parklajums/speedtest-apbalvojums?utm_campaign=1_BITE_4G_OOKLA_y16&utm_source=Draugiem.lv&utm_medium=&utm_content=40s%20Video%20LAT';
        } else if ( this.id == 1581578946 ) {
            contentLink = 'http://www.epipo.lv/';
        }

        // Ja nav linka, un ir bilde, tad mekleejam linku tekstaa
        if (!contentLink && item.image) {
            var t = par.text;
            var regex = new RegExp(D._linksReplaceExp);
            var matches = t.match(regex);
            if ( matches ) {
                contentLink = null;
                // prioritaate linkiem ar http*
                for (var n = 0, len = matches.length; n < len; n++) {
                    if (matches[n].indexOf('http') != -1) {
                        contentLink = matches[n];
                        break;
                    }
                }
            }
        }
        return contentLink;
    },

    _getContentLinkHref: function(contentLink, par){
        var l = mkE( {
            tag:'a',
            href: contentLink
        });
        try{
            l.host
        } catch(e){
            D.console.error(e);
            return;
        }

        var link = new Get(contentLink);
        if( !l.host.match(/(^|www\.|tests\.)draugiem\.lv$/i) && l.host != 'dra.lv' && !link.v('utm_source') && !link.v('utm_medium') && !link.v('utm_campaign') ){
            link.add('utm_source', 'draugiem.lv');
            link.add('utm_medium', 'say');
            link.add('utm_campaign', 'post_' + par.id);
        }
        var get = new Get( {
            url:link.toUrl(),
            uid:this.user.id,
            pid:par.id
        } );

        if( document.location.host == l.host || l.host.match(/(^|www\.)draugiem\.lv$/i) || l.host.match(/\.d[r]a\.lv$/i) ){
            get.add( 'rate', contentLink );
            get.add( 'url', l.pathname + l.search + l.hash );
        }

        return '/say/click.php?' + get;
    },

    _drawGalleryItem:function(item, par, node){
        var clear = false;
        var contentLink = this._getContentLink(item, par);
        addClassName( this._body, 'sayHasImage' );
        if( item.html ){
           this._galleryItemNode = mkE( {
                tag:'center',
                innerHTML:item.html
            } ).append( node );
        } else {
            if(par.event && par.event.type == 89 && par.event.item.type == 2 && par.event.item.embed && par.event.item.embed.site == 'Youtube'){
                var r = par.event.item;
                var imageNode = '';
                if( r.embed && r.embed.site == 'Youtube' ){
                    imageNode = mkE({
                        tag: 'div',
                        className: 'sayYoutubeContainer' + (par.link ? ' sayYoutubeRounded' : ''),
                        els: [
                            {
                                tag: 'div',
                                className: 'sayYoutubeImage',
                                style: {
                                    backgroundImage: 'url(' + r.image.say + ')'
                                }
                            },
                            {
                                tag: 'div',
                                className: 'sayYoutubeOverlay'
                            }
                        ]
                    });
                }else{
                    imageNode = mkE({
                        tag: 'img',
                        src: r.image.say
                    });
                }
	            this._galleryItemNode = mkE({
                    tag: 'div',
                    className: 'galleryYoutubeItem',
                    els: [
	                    {
		                    tag: 'div',
		                    els: [
			                    imageNode,
			                    {
				                    tag: 'div',
				                    className: 'overlay'
			                    },
			                    {
				                    tag: 'a',
				                    href: D.Say.link(r.url, this.id),
				                    prop: {
					                    onclick: !par.ad ? D.closure( Say, Say.slideShow, 0, r.id, {sayClick: this.id} ) : function(){}
				                    },
				                    els: [
					                    {
						                    tag:'div',
						                    className:'sayGalleryVideo'
					                    }
				                    ]
			                    }
		                    ]
	                    }
                    ]
                }).append(node);
            }else if( item.w >= 436 && item.w >= item.h ){
	            this._galleryItemNode = mkE({
                    tag: 'div',
                    className: 'sayImage' + (this.link ? ' withLink' : ' withoutLink')
                }).append(node);
	            var w = Math.min(this.say.mosaicWidth(), 500);
	            var h = (w / item.w) * item.h;
                var sayImage = mkE({
                    tag: 'a',
                    els: [
                        {
                            tag: 'img',
                            src: item.image.say,
	                        style: {
		                        width: w + 'px',
		                        height: h + 'px'
	                        }
                        },
                        {
                            tag: 'div',
                            className: 'sayImageOverlay'
                        }
                    ]
                }).append(this._galleryItemNode);
                if ( contentLink && item.image && !par.ad && (!par.event || (par.event.type == 89 && (par.event.item.type == 0 || (par.event.item.type == 3 && D.AUTOPLAY)))) ) {
                    sayImage.target = '_blank';
                    sayImage.href = this._getContentLinkHref(contentLink, par);
	                sayImage.setAttribute('rel', 'noopener noreferrer');
                } else {
                    sayImage.href = D.Say.link(item.url, this.id);
                    sayImage.onclick = D.closure(this, function(){
                        if( par.ad && contentLink ){
                            var img = new Image();
                            img.src = contentLink;
                        }
                        D.Say.click(this.id);
                        return Say.slideShow(0, item.id);
                    });
                }
                if( item.video ){
                    var imagePlayNode = mkE( {
                        tag:'div',
                        className:'sayGalleryVideo'
                    } ).append( this._galleryItemNode );
                    if( item.eSite == 'EndoMondo' ){
                        addClassName( imagePlayNode, 'EndoMondo' );
                    }
	                imagePlayNode.onclick = D.closure(this, function(){
		                if( par.ad && contentLink ){
			                var img = new Image();
			                img.src = contentLink;
		                }
		                D.Say.click(this.id);
		                return Say.slideShow(0, item.id);
	                });
                }
            }else if(par.link && item.type == 0 && (item.w < 436 || item.h > item.w) ){
                this._smallImage = true;
                this._imgLinkNode = mkE( {
                    tag:'a',
                    className:'sayExtImg' + ( this._smallImage ? ' smallImg' : '' ),
                    els:[
                        {
                            tag:'img',
                            src:( this._smallImage ? item.image.GM : item.image.say ),
                            style: {
                                minWidth: this._smallImage? '0' : '500px'
                            }
                        },
                        {
                            tag:'div',
                            className:'sayImageOverlay'
                        }
                    ]
                } ).append( node );
            }else{
	            if( item.w >= 436 && item.w < 500 && item.w >= item.h ){
		            var ratio =  (500 / item.w)
		            item.w = 500;
		            item.h = item.h * ratio;
	            }
                var m = new T.Mosaic( this.say.mosaicWidth(), true );
                var mi = new T.MosaicItem( item.image.say, item.w, item.h );
                mi.urlGM = item.image.GM;

                if ( contentLink && item.image && !par.ad && (!par.event || (par.event.type == 89 && (par.event.item.type == 0 || (par.event.item.type == 3 && D.AUTOPLAY)))) ) {
                    var href = this._getContentLinkHref(contentLink, par);
                    mi.target = '_blank';
                    mi.href = href;
                } else {
                    mi.href = D.Say.link(item.url, this.id);
                    mi.onclick = D.closure(this, function(){
                        if( par.ad && contentLink ){
                            var img = new Image();
                            img.src = contentLink;
                        }
                        D.Say.click(this.id);
                        return Say.slideShow(0, item.id);
                    });
                }
                m.add(mi);
                m.append( node );
                // hack
                if( mi.width < this.say.mosaicWidth() * 0.6 ){
                    m.node.style.cssFloat = 'left';
                    m.node.style.styleFloat = 'left';
                    m.node.style.width = 'auto';
                    m.node.style.marginRight = '10px';
                    addClassName( m.node, 'widthAuto' );
                    clear = true;
                }
                if( item.video ){
                    var playNode = mkE( {
                        tag:'div',
                        className:'sayGalleryVideo'
                    } ).append( mi.getClickNode() );
                    if( item.eSite == 'EndoMondo' ){
                        addClassName( playNode, 'EndoMondo' );
                    }
                }
	            this._galleryItemNode = m.node;
            }
        }
        if( item.type == 3 && item.videoReady && D.AUTOPLAY ){
            this.say.gifs.push(this);
        }
        if ( this._isYoutubeAd() ) {
            this._youtubeAd = true;
            this.say.gifs.push(this);
        }
        if (D.AUTOPLAY && item.video && item.eSite == "Vine") {
            this._vine = true;
            this.say.gifs.push(this);
        }
        return clear;
    },

    _drawGifPlayer: function(gifPar, par, node){
        this.gifPlayerNode = mkE({
            tag: 'div',
            className: 'sayGif'
        }).append(node);
        var gifPlayerPar = new D.GifPlayerPar();
        gifPlayerPar.src = gifPar.src;
        gifPlayerPar.poster = gifPar.poster;
        gifPlayerPar.autoPlayOnScroll = D.AUTOPLAY;
        if( gifPar.onOverlayClick ){
            gifPlayerPar.onOverlayClick = gifPar.onOverlayClick;
        }
        new D.GifPlayer(gifPlayerPar).append(this.gifPlayerNode);
	    return this.gifPlayerNode;
    },

    _drawVideoPlayer: function(videoPar, par, node){
        this.videoPlayerNode = mkE({
            tag: 'div',
            className: 'sayVideo'
        }).append(node);
        this.videoPlayerItem = videoPar;

        var videoPlayerPar = new D.VideoPlayerPar();
        videoPlayerPar.src = videoPar.src;
        videoPlayerPar.poster = videoPar.poster;
        videoPlayerPar.autoPlayOnScroll = D.AUTOPLAY;
        videoPlayerPar.width = videoPar.width;
        videoPlayerPar.height = videoPar.height;
        videoPlayerPar.maxWidth = 500;
        videoPlayerPar.maxHeight = 500;
        videoPlayerPar.placeholder = {
            maxWidth: this.say.mosaicWidth(),
            maxHeight: (this.say.node ? (existsClassName(this.say.node, 'saySinglePost') ? window.innerHeight - 250 : 500) : 500),
            width: videoPar.width,
            height: videoPar.height
        };
        if( videoPar.stats ){
            videoPlayerPar.stats = videoPar.stats;
        }
        if( videoPar.title ){
            videoPlayerPar.title = videoPar.title
        }
        if( videoPar.onContainerClick ){
            videoPlayerPar.onContainerClick = videoPar.onContainerClick;
        }
        if( videoPar.onTimeUpdate ){
            videoPlayerPar.onTimeUpdate = videoPar.onTimeUpdate;
        }
        if( videoPar.onStart ){
            videoPlayerPar.onStart = videoPar.onStart;
        }
        //expire kodomā runā ieraksta video links
        if (this.id == 1650390660) {
            videoPlayerPar.link = '/kodoma/';
            videoPlayerPar.linkTarget = '_self';
        } else if (this.id == 1651067001) {
            videoPlayerPar.link = '/dzejanosirds/';
            videoPlayerPar.linkTarget = '_self';
        } else if (this.id == 1653794261) {
            videoPlayerPar.link = '/manadziesma/';
            videoPlayerPar.linkTarget = '_self';
        } else if (this.id == 1671340305) {
	        videoPlayerPar.link = '/flirtins/';
	        videoPlayerPar.linkTarget = '_self';
        }
        //expire
        new D.VideoPlayer(videoPlayerPar).append(this.videoPlayerNode);

	    return this.videoPlayerNode;
    },

    _drawLoadingVideo: function(node){
        this.loadingVideoNode = mkE({
            tag: 'div',
            className: 'loadingVideo',
            els: [
                {
                    tag: 'div',
                    className: 'sk-fading-circle',
                    els: [
                        {
                            tag: 'div',
                            className: 'sk-circle1 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle2 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle3 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle4 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle5 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle6 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle7 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle8 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle9 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle10 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle11 sk-circle'
                        },
                        {
                            tag: 'div',
                            className: 'sk-circle12 sk-circle'
                        }
                    ]
                }
            ]
        }).append(node);
	    return this.loadingVideoNode;
    },

    _isYoutubeAd: function () {
        return false;/* this.id == 1541951443 */ /*this.text == "Speedtest apstiprina – ātrākais 4G mobilais tīkls Latvijā ir Bitei un Bites klientiem!";*/
    },

    _drawExtLink:function(node){
        var par = this.par;
        // overwrito linku ar contenta linku
        if ( this._isYoutubeAd() ) {
            var tmpTextNode = mkE({ tag: 'div', text: par.text });
            D.linksReplace( tmpTextNode );
            var textExtUrls = $('.externalUrl', tmpTextNode);
            if ( textExtUrls.length ) {
                par.link = textExtUrls.get(0).href;
            }
        }
		var linkContainer = mkE({
			tag: 'div',
			className: 'sayExtContainer'
		}).append( node || this._body );
	    this._sayExtContainerNode = linkContainer;
        var ext = mkE( {
            tag: 'a',
            className: 'sayExtInfo',
	        attr: {
		        rel: 'noopener noreferrer'
	        },
	        prop: {
		        target:'_blank'
	        }
        } ).append(linkContainer);
        if( this._smallImage ){
            this._imgLinkNode.append(ext);
            addClassName(ext, 'withSmallImage');
        }else if( this._imgLinkNode ){
	        this._imgLinkNode.prepend(linkContainer);
        }
        var l = mkE( {
            tag:'a',
            href:par.link,
            prop:{
                title:par.link,
                target:'_blank',
                className:'externalUrl'
            },
	        attr: {
		        rel: 'noopener noreferrer'
	        }
        } ).append(ext);
        try{
            l.host
        } catch(e){
            D.console.error(e);
            return;
        }
        l.appendChild( mkE( {
            text:htmlspecialchars_decode( par.title ) || ( l.host + D.shorten( l.pathname || '', 15, '...' ) )
        } ) );
        var link = new Get(par.link);
        if( !l.host.match(/(^|www\.|tests\.)draugiem\.lv$/i) && l.host != 'dra.lv' && !link.v('utm_source') && !link.v('utm_medium') && !link.v('utm_campaign') ){
            link.add('utm_source', 'draugiem.lv');
            link.add('utm_medium', 'say');
            link.add('utm_campaign', 'post_' + par.id);
        }
        var hash = l.hash || '';
        var get = new Get( {
            url:link.toUrl() + hash,
            uid:this.user.id,
            pid:par.id
        } );
        if( !par.pro ){
            l.onclick = ext.onclick = function(e){
                D.stopPropagation(e);
                return T.checkLink( this, par.link );
            };
        }
        if( document.location.host == l.host || l.host.match(/(^|www\.)draugiem\.lv$/i) || l.host.match(/\.d[r]a\.lv$/i) ){
            get.add( 'rate', par.link );
            get.add( 'url', l.pathname + l.search + l.hash );
            l.target = ext.target = '';
            l.className = '';
        }
        if( l.host.match(/(^|\.)d[r]a\.lv$/i) ){
            l.target = ext.target = '';
            l.className = '';
        }
        l.href = ext.href = '/say/click.php?' + get;
			  this.extLink = '/say/click.php?' + get;
        var isPerkamKopa = false;
        var pkMatch = [];
        var pkMatch2 = [];
        if ( par.link.indexOf('perkamkopa.lv') !== -1 ) {
            if ( par.link.indexOf('/product/') !== -1 ) { // vecais url
				pkMatch = link.toUrl().match( 'product/(([0-9]+)/(.*))' );
				if ( pkMatch && pkMatch.length == 4 ) {
					isPerkamKopa = true;
					// l.href = ext.href = '/perkamkopalv/?product=' + encodeURIComponent(pkMatch[1]);
					// l.target = ext.target = '';
					l.target = '_blank';
				}
            } else {
				pkMatch2 = link.toUrl().match( '\.lv/((.*)/([0-9]+)\?(.*))' );
				if ( pkMatch2 && pkMatch2.length == 5 ) {
					isPerkamKopa = true;
					// l.href = ext.href = '/perkamkopalv/?product2=' + encodeURIComponent(pkMatch2[1]);
					// l.target = ext.target = '';
					l.target = '_blank';
                }
            }
        }
        addClassName( l, 'sayLink' );
        if( this._imgLinkNode ){
            this._imgLinkNode.href = l.href;
            this._imgLinkNode.target = l.target;
            this._imgLinkNode.onclick = l.onclick;
        }
        if( par.descr && ( empty( par.text ) || ( par.descr.indexOf( par.text ) != 0 && par.text.indexOf( par.descr ) != 0 ) ) ){
            mkE( {
                tag: 'p',
                className: 'sayDescr color2',
                text: htmlspecialchars_decode( par.descr )
            } ).append( ext );
        }
        if( par.linkInfo && par.linkInfo.host ){
            mkE( {
                tag:'p',
                className:'color3 sayHost',
                text: htmlspecialchars_decode( par.linkInfo.host )
            } ).append( ext );
        }
        if ( isPerkamKopa && isset(window.pkActive) ) {
            var pkProductUrl = '';
			var pkUrl = '';
			var pkLink = '';
            if ( array_search(pkMatch[2], pkActive) !== false ) { // vecie linki
                // pkProductUrl = pkMatch[1];
                //pkProductUrl += (pkProductUrl.indexOf('?') == -1 ? '?' : '&') + 'buy=1'; // add buy parameter
                // pkUrl = '/perkamkopalv/?product=' + encodeURIComponent( pkProductUrl );
                // pkLink = '/stats/click.php?url=' + encodeURIComponent( pkUrl ) + '&key=perkamkopa_buy_btn';
                pkLink = par.link + (par.link.indexOf('?') == -1 ? '?' : '&') + 'buy=1';
            } else if ( array_search(pkMatch2[3], pkActive) !== false ) { // jaunie linki
				// D.log('pkMatch2', pkMatch2);
				// pkProductUrl = pkMatch2[1];
				// pkUrl = '/perkamkopalv/?product2=' + encodeURIComponent( pkProductUrl );
				// pkLink = '/stats/click.php?url=' + encodeURIComponent( pkUrl ) + '&key=perkamkopa_buy_btn';
				pkLink = par.link + (par.link.indexOf('?') == -1 ? '?' : '&') + 'buy=1';
            }

            if ( pkLink ) {
				T.clear().append( ext );
				mkE({
					tag: 'div',
					className: 'pkBuyCont',
					els: [
						{
							tag: 'a',
							className: 'btn',
							href: D.Say.link(pkLink, this.id),
							target: '_blank',
							els: [
								'Pirkt',
								{ tag: 'span', className: 'icn' }
							]
						},
						{
							tag: 'a',
							className: 'logo',
							href: D.Say.link(pkLink, this.id),
							target: '_blank'
						}
					]
				} ).append( ext );
            }
        }
    },

    _drawSuperText:function(full){
        if( !this._textNode ){
	        this._textNode = mkE( {
		        tag:'div',
		        style:{
			        overflow:'hidden',
			        textOverflow:'ellipsis',
			        lineHeight:'1.3em',
			        padding:'20px 0px'
		        }
	        } ).append( this._body );
        }
        var text = this.text;
        var shortened = false;
        if( text.length > 300 && full !== true){
            text = D.shorten(text, 300, '...');
            shortened = true;
        }
        this._textNode.innerHTML = text.replace( /(\r\n|\n\r|\n){2,}/g, '<br /><br />' ).replace( /(\r\n|\n\r|\n)+/g, '<br />' );
        var textNode = this._textNode;
        var wl = 5;
        var tl = this.text.length;
        var words = tl / wl;
        var fontSize, padding;
        if( words < 5 ){
            fontSize = 30;
            padding = 30;
        } else if( words < 10 ){
            fontSize = 22;
            padding = 20;
        } else if( words < 20 ){
            fontSize = 18;
            padding = 10;
        } else {
            fontSize = 16;
            padding = 0;
        }
        textNode.style.padding = padding + 'px 0';
        textNode.style.fontSize = fontSize + 'px';
        textNode.style.textAlign =  words > 7 ? 'left' : 'center';
        D.smileyReplace(textNode);
        D.Say.userReplace(textNode);
        D.linksReplace( textNode, {
            click:D.closure( this, function(href){
                var get = new Get({});
                get.add( 'url', href ).add( 'pid', this.id ).add( 'uid', this.uid );
                return '/say/click.php?' + get;
            } )
        } );
        D.Say.hashTagReplace(textNode);
        if( shortened ){
            mkE({
                tag: 'span',
                text: ' '
            }).append(this._textNode);
            mkE({
                tag: 'a',
                className: 'read-more',
                onclick: D.closure(this, this._drawSuperText, true),
                text: D.Lang.get('read_more')
            }).append(this._textNode);
        }
    },

    toString:function(){
        return 'SayItem';
    },

    append:function( el ){
        this.node.append(el);
        return this;
    },

    remove:function(){
        this.node.remove();
	    if( InfoBox.opened && existsClassName(InfoBox.node, 'sayPostComments') ){
		    InfoBox.close();
	    }
        if( this.say ){
	        var item = document.getElementById('sayPost' + this.par.id);
	        if( item ){
		        item.parentNode.removeChild(item);
	        }
            delete this.say._items[ this.par.id ];
        }
        return this;
    },

    _drawRecs:function(){
        if ( (this.say.method == 'getUserPosts' && this.say.fid == D.ID)
            || (this.say.method == 'getFriendPosts' && this.say.frWithoutRecommends) ) {
            return;
        }
        if( empty( this.par.suggestions ) ){
            if( this._recsNode ){
                this._recsNode.remove();
                delete this._recsNode;
            }
            return;
        }
        var suggestions = this.par.suggestions.slice(0, 3);
        var suggestionPrefix = D.Lang.get( 'Iesaka').toLowerCase();
        var els = [];
        for( var k in suggestions ){
            if( !suggestions.hasOwnProperty(k) ){
                continue;
            }
            var r = suggestions[k];
            r.user = D.Say.getUser( r.uid );
            if( k > 0 && k != suggestions.length - 1 ){
                els.push( ', ' );
            }else if( k > 0 ){
                els.push(' ' + D.Lang.get('and') + ' ');
            }
            var userNode = mkE( {
                tag:'a',
                els: [
                    {
                        tag: 'strong',
                        text:htmlspecialchars_decode( r.user.title )
                    }
                ],
                href:r.user.url
            } );
            els.push( userNode );
            D.Say.addUserTooltip(userNode, r.user);
        }
        els.push(' ' + suggestionPrefix);
        if( this._recsNode ){
            this._recsNode.remove();
        }
        this._recsNode = mkE( {
            tag:'div',
            className:'color2 sayRecs',
            els:[
                mkE({
                    tag: 'span',
                    className: 'icon smallRecommendIcon',
                    style: {
                        paddingTop: 0,
                        paddingBottom: 0
                    }
                }),
                ' ',
                {
                    tag: 'div',
                    className: 'sayRecsContent',
                    els: els
                }
            ]
        } );
        D.insertBefore(this._recsNode, this._heading);
        this._recsNodeRight = mkE({
            tag: 'div',
            className: 'sayRecsRight'
        }).append(this._recsNode);
        if ( this._reportIcon ) {
        	this._reportIcon.append(this._recsNodeRight);
		}
        if( this._favIcon ){
	        this._favIcon.append(this._recsNodeRight);
        }
        if( this._optIconNode ) {
            this._optIconNode.append(this._recsNodeRight);
            if( this._followSayContainer ) {
                this._followSayContainer.style.display = '';
            }
        }
    },

    _drawFans:function(){
        if( empty( this.par.fans ) && !this.highLighted && !this.par.galleryAd ){
            if( this._fansNode ){
                this._fansNode.remove();
                delete this._fansNode;
            }
            return;
        }

        var fansPrefix = D.Lang.get('Highlight post');
        var els;
        if( this.par.galleryAd ){
	        els = [
		        mkE({
			        tag: 'span',
			        text: fansPrefix,
			        className: 'highlightSayLink'
		        })
	        ];
        }else{
	        els = [
		        mkE({
			        tag: 'a',
			        href: '/stats/click.php?url=http://draugiem.lv/ads/sayhighlight/&key=say_highlight_badge',
			        text: fansPrefix,
			        className: 'highlightSayLink'
		        })
	        ];
        }
        if( !empty( this.par.fans) ){
            els.push(': ');
            for(var i = 0; i < this.par.fans.length; ++i){
                var r = this.par.fans[i];
                if( i > 0 && i != this.par.fans.length - 1 ){
                    els.push(', ');
                }else if( i > 0 && i == this.par.fans.length - 1 && this.par.fans.length <= 3 ){
                    els.push(' ' + D.Lang.get('and') + ' ');
                }
                var userNode = mkE( {
                    tag:'a',
                    els: [
                        {
                            tag: 'strong',
                            text: htmlspecialchars_decode(r.title)
                        }
                    ],
                    href: r.url
                } );
                els.push( userNode );
                D.Say.addUserTooltip(userNode, {
                    type: r.type,
                    id: r.uid
                });
                if (this.par.fansCount > 3 && i == 1) {
                    break;
                }
            }

            if (this.par.fansCount > 3) {
                var more = this.par.fansCount - 2;
                var url = this.user.url + "fans/?friends";
                els.push(' ' + D.Lang.get('and') + ' ');
                els.push(mkE({
                    tag : 'a',
                    els: [
                        {
                            tag: 'strong',
                            text: more + ' ' + D.Lang.nget(more, 'friends')
                        }
                    ],
                    prop : {
                        onclick : function(){
                            InfoBox.open(url, {width : 820});
                        }
                    }
                }));
            }

            els.push(' ' + D.Lang.get('follows_page'));
        }

        if( this._recsNode ){
            this._recsNode.remove();
        }
        this._fansNode = mkE( {
            tag:'div',
            className:'sayFans',
            els:els
        } );
        D.insertBefore(this._fansNode, this._heading);
        this._fansNodeRight = mkE({
            tag: 'div',
            className: 'sayFansRight'
        }).append(this._fansNode);
        if ( this._reportIcon ) {
			this._reportIcon.remove();
		}
        if( this._favIcon ){
	        this._favIcon.append(this._fansNodeRight);
        }
        if( this._optIconNode ) {
            this._optIconNode.append(this._fansNodeRight);
            if( this._followSayContainer ) {
                this._followSayContainer.style.display = '';
            }
        }
    },

	_drawPigsortHeader: function(){
    	var friendsCount = this.par.pigsort.friends.length;
		this._pigsortHeader = mkE({
			tag: 'div',
			className: 'pigsortHeader pigsortHeader' + this.par.pigsort.type,
			els: [
				this._pigsortHeaderContent = mkE({
					tag: 'div',
					className: 'pigsortHeaderContent',
					els: [
						D.Lang.get('you_may_like') + (friendsCount ? ': ' : '')
					]
				}),
				this._pigsortHeaderRight = mkE({
					tag: 'div',
					className: 'pigsortHeaderRight'
				})
			]
		});
		if( friendsCount ){
			var userNodes = [];
			for( var k in this.par.pigsort.friends ){
				if( !this.par.pigsort.friends.hasOwnProperty(k) ){
					continue;
				}
				var r = this.par.pigsort.friends[k];
				if( k > 0 && k != this.par.pigsort.friends.length - 1 ){
					userNodes.push( ', ' );
				}else if( k > 0 ){
					userNodes.push(' ' + D.Lang.get('and') + ' ');
				}
				var userNode = mkE( {
					tag:'a',
					els: [
						{
							tag: 'strong',
							text:htmlspecialchars_decode( r.title )
						}
					],
					href:r.url
				} );
				userNodes.push( userNode );
				D.Say.addUserTooltip(userNode, r);
			}
			mkE.appendTypeElement(this._pigsortHeaderContent, userNodes);
			var text = '';
			switch(this.par.pigsort.type){
				case 1:
					text = D.Lang.nget(1, 'pigsort_gallery');
					break;
				case 9:
					text = D.Lang.nget(1, 'pigsort_profsay');
					break;
				case 13:
					text = D.Lang.get('pigsort_blogs');
					break;
			}
			mkE({
				tag: 'span',
				text: ' ' + text
			}).append(this._pigsortHeaderContent);
		}
		D.insertBefore(this._pigsortHeader, this._heading);
		if ( this._reportIcon ) {
			this._reportIcon.append(this._pigsortHeaderRight);
		}
		if( this._favIcon ){
			this._favIcon.append(this._pigsortHeaderRight);
		}
        if( this._optIconNode ) {
            this._optIconNode.append(this._pigsortHeaderRight);
            if( this._followSayContainer ) {
                this._followSayContainer.style.display = '';
            }
        }
	},

    _close:function(){
        this.say.rpc.send('stats', {key: 'say_close'});
        if( this.say.method == 'groupPosts' && this.user.type == D.USER_TYPE_GROUPS ){
            this._closeGroup();
            return;
        }
    },

    _closeActual:function(){
        D.Say.rpc.send(
            'closeActual',
            {
                id:this.id
            },
            function(){}
        );
        this.remove();
    },

    _closeGroup:function(){
        D.confirmDelete( D.closure( this, this._closeGroupDo ), {
            title:D.Lang.get('unfollow_say'),
            text:D.Lang.get('unfollow_say_group')
        } );
    },

    _closeGroupDo:function(){
        D.Say.rpc.send(
            'blockUsers',
            {
                uids:[this.uid]
            },
            function(){
                D.reload();
            }
        );
    },

    _blockUsers:function( uids ){
        D.Say.rpc.send(
            'blockUsers',
            {
                uids:uids
            },
            this._blockUsersRe,
            this
        );
    },

    _blockUsersRe:function( re ){
        this.node.style.display = 'none';
        if( !this.say ){
            return;
        }
        for( var k in re.users ){
            var blockedUser = new D.SayBlockedUser( re.users[k], this );
            D.insertAfter( blockedUser.node, this.node );
        }
    },

    _delete:function(){
        var postponedUid = null;
        if ((this.user.type == D.USER_TYPE_BIZ || this.user.type == D.USER_TYPE_API) && this.perm == D.PERM_NONE) {
            postponedUid = this.user.id;
        }
        D.loadingOverlay( this.node );
        D.Say.rpc.send(
            'delete',
            {
                pid:this.id,
                postponedUid:((postponedUid) ? postponedUid : '')
            },
            D.closure( this, function(){
                this.remove();
                this.onDelete();
            }),
            this
        );
    },

    _openGalleryItem:function(focusForm){
        D.addComment = focusForm;
	    D.addCommentUid = this._options.profileSwitch ? this._options.profileSwitch.uid : D.ID;
        var mStats = new DR.say.ClickStats();
        mStats.kw = 'say_feed_comment';
        mStats.call();
        Say.slideShow( 0, this.galleryItem.id );
    },

    _drawOptions:function(){
        this._options = {};

        if( !D.ID && !window.CPM_ADS_SAY_HIGHLIGHT ){
            return;
        }

		if( D.ID ){
			var likePar = new D.SayItem.Like.Par().fromSayItem(this);
			likePar.onLike = D.closure(this, this._onLike);
			this._options.like = new D.SayItem.Like(likePar).append(this._optionsNode);

			this._drawCommentsLink();

			var recPar = new D.SayItem.Recommend.Par().fromSayItem(this);
			recPar.onRecommend = D.closure(this, this._onRecommend);
			this._options.recommend = new D.SayItem.Recommend(recPar).append(this._optionsRightNode);
		}

        if( this.canDel && !window.CPM_ADS_SAY_HIGHLIGHT ){
            this._options.stats = mkE({
                tag: 'a',
                className: 'icon statsGrayIcon',
                text: D.Lang.get('saypost_open_stats'),
                onclick: D.closure(this, this._stats)
            }).append(this._optionsNode);
        }

        if( D.ID && this.user.type != D.USER_TYPE_GROUPS ){
	        var uid = D.ID;
	        if( D.fr && D.fr.id ){
		        uid = D.fr.id;
	        }
            var profileSwitchPar = new D.SayItem.ProfileSwitch.Par()
	            .setOnChange(D.closure(this, this._onProfileChange))
	            .setUid(uid);
            this._options.profileSwitch = new D.SayItem.ProfileSwitch(profileSwitchPar).append(this._optionsRightNode);
        }

        // Custom highlight
        if( this.canHighLight && D.LANG != 'ru' ) {
            this._brandSayNode.style.display = 'block';

            var bsNode = mkE({
                tag: 'div',
                els: [{
                    tag: 'i',
                    className: 'icon greySpeakerIcon active'
                }]
            }).append( this._brandSayNode );

            if ( !this.highLighted ) {
                mkE({
                    tag: 'span',
                    innerHTML: this.exp + '&nbsp;'+D.Lang.nget(this.exp, 'Views').toLowerCase(),
                    style: {
                        fontWeight: 'bold'
                    }
                }).append( bsNode );

                mkE({
                    tag: 'span',
                    innerHTML: ',&nbsp;' + D.Lang.get('Highlight more audience') + '&nbsp;-&nbsp;'
                }).append( bsNode );

                mkE({
                    tag: 'a',
                    style: {
                        fontWeight: 'bold',
                        marginTop: '1px'
                    },
                    text: D.Lang.get('Highlight this now'),
                    title: ( D.Lang.exists('Highlight post') ? D.Lang.get('Highlight post') : '' ),
                    onclick: D.closure(this, this._customSayHighlight, this.id, this.user.id)
                }).append( bsNode );
            } else {
                var html = '<strong>' + D.Lang.get('highlighted_post') + '</strong>';
                html += ', ';
                html += D.Lang.get('highlighted_post_reached');
                html += ' <strong>' + number_format( this.hlExp, 0, '.', ' ' ) + '</strong> ';
                html += D.Lang.get('from');
                html += ' ' + number_format( this.paidExp, 0, '.', ' ' ) + ' ' + D.Lang.get('highlighted_post_exp') + '.';
                mkE({
                    tag: 'span',
                    innerHTML: html
                }).append( bsNode );

                var rightNode = mkE({
                    tag: 'span',
                    style: {
                        float: 'right'
                    },
                    els:[
                        {
                            tag: 'a',
                            text: D.Lang.get('edit'),
                            onclick: D.closure(this, this._customSayHighlight, this.id, this.user.id)
                        },
                        {
                            tag: 'span',
                            innerHTML: ' &middot; ',
                            style: {
                                marginLeft: 0,
                                position: 'relative',
                                top: '-2px',
                                paddingLeft: '3px',
                                paddingRight: '3px'
                            }
                        }
                    ]
                }).append( bsNode );

                if ( this.highLightedStatus == 1 ) { // 1 = active
                    mkE({
                        tag: 'a',
                        text: D.Lang.get('stop'),
                        onclick: D.closure( this, function() {
                            this._highlightChangeStatus( this.id, 2 );
                        })
                    }).append( rightNode );
                } else if ( this.highLightedStatus == 2 ) { // 2 = paused
                    mkE({
                        tag: 'a',
                        text: D.Lang.get('continue'),
                        onclick: D.closure( this, function() {
                            this._highlightChangeStatus( this.id, 1 );
                        })
                    }).append( rightNode );
                }
            }
        }
        // Custom highlight end
    },

    _drawCommentsLink: function(){
        if( !this.galleryItem && (this.say.method == 'post' || this.hideComment) && (!this._event || !this._event.comment || this._event.cantComment) ){
            return;
        }
        var href =  this._event && this.par.event.url ? this.par.event.url : this.par.url;
        var countHref = href;
        var comCount = this.comCount;
        var onclick = D.closure( this, this._optAddCommentOnclick, true );
        var onCountClick = D.closure( this, this._optAddCommentOnclick, false );
        if( this.par.forumLink ){
            href = this.par.forumLink;
            onclick = D.doNothing;
        }
        if( this.user.type == D.USER_TYPE_GROUPS ) {
            onclick = D.doNothing;
        }
        if( this.galleryItem ){
            href = this.galleryItem.url;
            countHref = null;
            comCount = this.galleryItem.comCount;
            onclick = D.closure(this, this._openGalleryItem, false);
	        onCountClick = D.closure(this, this._openGalleryItem, true);
        }
        this._options.reply = mkE({
            tag: 'a',
            text: D.Lang.get('Add comment'),
            className: 'icon sayCommentIcon',
            href: href,
            prop:{
                onclick: onclick
            }
        }).append(this._optionsNode);
        this._options.comments = mkE({
            tag: 'a',
            text: comCount,
            className: 'comCount',
            href: countHref,
            style: {
                display: !comCount ? 'none' : ''
            },
            prop: {
                onclick: onCountClick
            }
        }).append(this._optionsNode);
    },

    _onProfileChange: function(profile){
        this._options.like.setUid(profile.id);
        this._options.recommend.setUid(profile.id);
        if( this._friendComments ){
	        this._friendComments.setUid(profile.id);
        }
    },

    _customSayHighlight: function(id, user) {
        D.Say.rpc.send(
            'addCustomSayHighlightStats',
            {}
        );
        this._highLight(id, user);
    },

    _optHighlight: function(){
        this._highLight(this.id, this.user.id);
    },

    _highLight: function(id, user){
        if ( this.highLightMusic ) {
            D.Say._showPopHighLightFormMusic(id, user);
        } else if ( this.highLightEvent ) {
            if ( this.highLightEventExists ) {
                D.Say._showEditHighLightFormEvent(id, user);
            } else {
                D.Say._showPopHighLightFormEvent(id, user);
            }
        } else if ( this.highLightApi ) {
            if ( this.highLightApiExists ) {
                D.Say._showEditHighLightFormApi(id, user);
            } else {
                D.Say._showPopHighLightFormApi(id, user);
            }
        } else if ( this.highLightUserHlExists ) {
            D.Say._showEditHighLightFormUserHl(id);
        } else {
            D.Say._showHighLightForm(id);
        }
    },

    _highlightChangeStatus: function( pid, status ) {
        (new RPC( '/say/highlight/app.php' )).send( 'changeStatus', {
            pid: pid,
            status: status
        }, function( re ) {
            if ( !re ) {
                return;
            }

            window.location.reload();
        });
    },

    _onLike: function(re){

    },

    _onRecommend: function(re){
        if( this._event && this._event.onRecommend ){
            this._event.onRecommend();
        }
    },

    _optAddCommentOnclick:function( focusForm, e ){
        D.addComment = focusForm;
	    D.addCommentUid = this._options.profileSwitch ? this._options.profileSwitch.uid : D.ID;
        D.stopPropagation(e);
        if( this._event && this._event.comment ){
            return this._event.comment(focusForm);
        }
        D.Say.postComments( this.par.id );
        return false;
    },

    _likeEvent:function( event ){
        this.likeCount = event.count;
        if( this._options && this._options.like ){
            this._options.like.likeEvent(event);
        }
    },

    _dislikeEvent:function( event ){
        this.likeCount = event.count;
        if( this._options && this._options.like ){
            this._options.like.dislikeEvent(event);
        }
    },

    lastItem:function(){
        var s, c;
        if( !empty( this.par.suggestions ) ){
            s = reset( this.par.suggestions );
        }
        if( s && c ){
            if( s.ts > c.ts ){
                return s;
            }
            return c;
        }
        if(s){
            return s;
        }
        if(c){
            return c;
        }
        return this.par;
    },

    _drawFollowButton: function(){
        clearNode(this._followSayContainer);
        this._followSayButton = new T.Form.Button({
            caption: D.Lang.get('follow'),
            className: 'sayFollowButton',
            color: 'link',
            onclick: D.closure(this, this._sayFollowUnfollowPage, true),
            icon: 'grayPlus'
        }).append(this._followSayContainer);
    },

    _drawUnfollowButton: function(){
        clearNode(this._followSayContainer);
        var par = new T.Form.DropDownButtonPar;
        par.color = 'link';
        par.icon = 'checkGrayNew';
        par.caption = D.Lang.get('you_follow');
        par.className = 'sayFollowButton';
        par.showOnHover = false;
        par.items = [
            {
                caption: D.Lang.get('Unfollow'),
                onclick: D.closure(this, this._sayFollowUnfollowPage, false)
            }
        ];

        this._followSayButton = new T.Form.DropDownButton(par).append(this._followSayContainer);
    },

    _sayFollowUnfollowPage: function(follow) {
        if( this._mFollowPage && this._mFollowPage.processing ){
            return;
        }
        var ac = new DR.ApiCall();
        this._followSayButton.disable(true);
        this._mFollowPage = new DR.say.Follow();
        this._mFollowPage.uid = this.user.id;
        this._mFollowPage.follow = follow;
        this._mFollowPage.select = [
            new DR.say.select.FollowRe().isFollowing()
        ];
        this._mFollowPage.onLoad = D.closure(this, this._onSayFollowPage);
        ac.addMethod(this._mFollowPage);
        if( follow ){
            this._mAddStats = new DR.say.ClickStats;
            this._mAddStats.kw = 'custom_say_follow_click';
            ac.addMethod(this._mAddStats);
        }
        ac.call();
    },

    _onSayFollowPage: function(){
        this._followSayButton.disable(false);
        if( !this._mFollowPage || !this._mFollowPage.re || this._mFollowPage.error ){
            return;
        }
        this.user.isWatching = this._mFollowPage.re.isFollowing;
        if( this.user.isWatching ){
            this._drawUnfollowButton();
        }else{
            this._drawFollowButton();
        }
			  if( this._optionsDropDown ) {
					this._optionsDropDown.remove();
					this._optionsDropDown = false;
        }
    },

    toggleFav:function(){
        var fav = $( this._favIcon ).toggleClass('active').hasClass('active');
        D.Say.rpc.send(
            'fav',
            {
                pid:this.id,
                fav:fav
            },
            function(){}
        );
        this._favIcon.setAttribute('title', fav?( D.Lang.exists('unmark_post') ? D.Lang.get('unmark_post') : '' ):( D.Lang.exists('Mark post') ? D.Lang.get('Mark post') : '' ));
        if( this.say ){
            this.say.onFav( this, fav );
        }
    },

    _permOver:function(){
        if( this._permIconNode.title ){
            return;
        }
        switch( this.perm ){
            case D.PERM_NONE:
                this._permIconNode.title = D.Lang.get('Visible only to you');
                break;
            case D.PERM_ALL:
                this._permIconNode.title = D.Lang.get('Visible to all');
                break;
            case D.PERM_REG:
                this._permIconNode.title = D.Lang.get('Visible to registered users');
                break;
            case D.PERM_FR:
                if( this.uid == D.ID ){
                    this._permIconNode.title = D.Lang.get('Visible only to friends');
                } else {
                    this._permIconNode.title = D.Lang.get('Visible only to user friends').replace( '$user', this.user.title );
                }
                break;
            default:
                this._permIconNode.title = D.Lang.get('Visible limited');
                break;
        }
    },

	_getPermIcon: function(){
    	var icon;
		switch( this.perm ){
			case D.PERM_ALL:
				icon = 'public';
				break;
			case D.PERM_REG:
				icon = 'registered';
				break;
			case D.PERM_FR:
				icon = 'friends';
				break;
			case D.PERM_NONE:
				icon = 'private';
				break;
			default:
				icon = 'friends';
				break;
		}
		return icon;
	},

    _permClick:function(){
        if( !this.canDel ){
            return;
        }
        D.Say.permItem = this;
        D.smallPopUp.open( '/say/rq/perms.php?pid=' + this.id, {
            title:'Redzams',
					  bodyClose: true
        } );
    },

    setPerm:function( v, data ){
        this.perm = v;
        this._permIconNode.title = '';
        clearNode(this._permIconNode);
        T.svgIcon(this._getPermIcon()).append(this._permIconNode);
        if( data.item ){
        	if( data.users ){
		        O2O( D.Say.users, data.users );
	        }
        	var sayItem = new D.SayItem(data.item, this.say);
        	this.say._items[data.item.id] = sayItem;
        	D.insertBefore(sayItem.node, this.node);
        	this.node.remove();
        	delete this.say._items[this.id];
        }
    },

    _openLargePic:function(){
        D.Say.click(this.id);
        // TODO varētu vērt modal ar komentāriem
        InfoBox.img( this.image.fullsize || this.image.L, {closeParent: false} );
    },

    _onclick:function(){
        if( !this.h || !D.ID || this.clicked ){
            return;
        }
        this.clicked = true;
        var url;
        if( 0 && D.DEV_NAME == 'z' ){
            url = '//127.0.0.1:8231/say/click/' + D.ID + '/' + this.id + '?h=' + this.h;
        } else {
            url = '//tw.ifrype.com/say/click/' + D.ID + '/' + this.id + '?h=' + this.h;
        }
        $.ajax( {
            url:url,
            crossDomain:true,
            dataType:'jsonp'
        } );
    },

    _stats:function(par){
        par = par || {};
        var p = {
            id:this.id,
            uid:this.uid,
            say:this
        };
        if ( par.onLoad ) {
            p.onLoad = par.onLoad;
        }
        var stats = new D.SayItem.Stats( p );
        InfoBox.els( stats, { width:870, title: D.Lang.get('say_stats_title') } );
        return stats;
    },

    _drawSayMentionApproval: function(){
        this._headingRightNode.style.display = 'none';
        this.sayMentionApproval = mkE({
            tag: 'div',
            className: 'sayMentionApproval',
            els: [
                {
                    tag: 'div',
                    text: D.Lang.get('say_mention_approval_info')
                },
                this.sayMentionButtons = mkE({
                    tag: 'div'
                })
            ]
        }).append(this.node);
        this.approveMentionButton = new T.Form.Button({
            caption: D.Lang.get('show_mention'),
            color: 'submit',
            onclick: D.closure(this, this.approveMention)
        }).append(this.sayMentionButtons);
        this.declineMentionButton = new T.Form.Button({
            caption: D.Lang.get('hide_mention'),
            color: 'link',
            onclick: D.closure(this, this.declineMention)
        }).append(this.sayMentionButtons);
    },

    disableMentionButtons: function(){
        this.approveMentionButton.disable(true);
        this.declineMentionButton.disable(true);
    },

    enableMentionButtons: function(){
        this.approveMentionButton.disable(false);
        this.declineMentionButton.disable(false);
    },

    approveMention: function(){
        this.disableMentionButtons();
        this._mApproveMention = new DR.say.ApproveSayMention;
        this._mApproveMention.pid = this.id;
        this._mApproveMention.onLoad = D.closure(this, this.approveMentionRe);
        this._mApproveMention.call();
    },

    approveMentionRe: function(){
        if( !this._mApproveMention.re.ok ){
            this.enableMentionButtons();
            return;
        }
        var success = T.success(D.Lang.get('say_mention_visible'));
        success.replace(this.node);
    },

    declineMention: function(){
        this.disableMentionButtons();
        this._mDeclineMention = new DR.say.DeclineSayMention;
        this._mDeclineMention.pid = this.id;
        this._mDeclineMention.onLoad = D.closure(this, this.declineMentionRe);
        this._mDeclineMention.call();
    },

    declineMentionRe: function(){
        if( !this._mDeclineMention.re.ok ){
            this.enableMentionButtons();
            return;
        }
        var message = T.info(D.Lang.get('say_mention_hidden'));
        message.replace(this.node);
    },

    _optRemoveTag: function(){
        D.confirmDelete(D.closure(this, this._removeTag), {
            title:D.Lang.get('remove_tag_confirm'),
            text:D.Lang.get('remove_tag_confirm_text')
        });
    },

    _removeTag: function(){
        this.removeTag();
    },

    removeTag: function(){
        this._mRemoveTag = new DR.say.RemoveTag();
        this._mRemoveTag.pid = this.id;
        this._mRemoveTag.onLoad = D.closure(this, this.removeTagRe);
        this._mRemoveTag.call();
    },

    removeTagRe: function(){
        if( !this._mRemoveTag.re.ok ){
            return;
        }
        for( var i in this.withNames ){
            if( this.withNames[i].uid == D.ID ){
                delete this.withNames[i];
                this.withNode.remove();
                if( !empty(this.withNames) ){
                    this._drawWith();
                }
                this.canRemoveTag = false;
                if( this.removeTagOpt ){
                    this.removeTagOpt.remove();
                }
                break;
            }
        }
    },

    _addMetaText: function(){
        if( this._textNode ){
            this._metaTextNode = this.metaText(false);
            if( this._metaTextNode ){
                mkE({
                    tag: 'span',
                    text: ' — '
                }).prepend(this._metaTextNode);
                this._metaTextNode.append(this._textNode);
            }
        }else{
            this._metaTextNode = this.metaText(true);
            if( this._metaTextNode ){
                this._metaTextNode.prepend(this._body);
            }
        }
    },

    metaText: function(isDiv){
        var parts = [];
        var and = 0;

        var re = mkE({
            tag: isDiv === true ? 'div' : 'span',
            className: 'metaText'
        });

        if( this.par.event && this.par.event.type == 1 ){
            var album = this.par.event.album;
            if( !empty(parts) ){
                parts.push(' ');
            }
            parts.push(D.Lang.get('created_gallery'));

            var compareString = album.title;
            if( compareString.substr(-3) == '...' ){
                compareString = compareString.substr(0, compareString.length -3);
            }

            if( this.text.indexOf(compareString) !== 0 ){
                parts.push(' ');
	            var galleryTitle = mkE({
		            tag: 'a',
		            href: D.Say.link('/stats/click.php?key=open_album_say&url=' + encodeURIComponent(album.url), this.id),
		            els: [
			            {
				            tag: 'strong',
				            text: htmlspecialchars_decode(album.title)
			            }
		            ]
	            });
                parts.push(galleryTitle);
	            D.smileyReplace(galleryTitle);
                if( album.count > 1 ){
                    parts.push(' ' + D.Lang.get('with') + ' ');
                    var galleryCounts = [];
                    if( album.pics ){
                        galleryCounts.push(D.Lang.nget(album.pics, 'pics2'))
                    }
                    if( album.video ){
                        if( !empty(galleryCounts) ){
                            galleryCounts.push(' ' + D.Lang.get('and') + ' ');
                        }
                        galleryCounts.push(album.video + ' ' + D.Lang.nget(album.video, 'video'))
                    }
                    parts = parts.concat(galleryCounts);
                }
            }
        }

        if (this.par.event && this.par.event.type == 97) {

            var album = this.par.event.album;
            if (!empty(parts)) {
                parts.push(' ');
            }

            parts.push(D.Lang.get('appended_gallery'));

            var compareString = album.title;
            if (compareString.substr(-3) == '...') {
                compareString = compareString.substr(0, compareString.length - 3);
            }

            if (this.text.indexOf(compareString) !== 0) {
                parts.push(' ');
                var galleryTitle = mkE({
                    tag: 'a',
                    href: D.Say.link(album.url, this.id),
                    els: [
                        {
                            tag: 'strong',
                            text: htmlspecialchars_decode(album.title)
                        }
                    ]
                });
                parts.push(galleryTitle);
                D.smileyReplace(galleryTitle);
                if (this.par.event.count > 1) {
                    parts.push(' ' + D.Lang.get('with') + ' ');
                    var galleryCounts = [];
                    if (this.par.event.pics) {
                        galleryCounts.push(D.Lang.nget(this.par.event.pics, 'pics2'))
                    }
                    if (this.par.event.video) {
                        if (!empty(galleryCounts)) {
                            galleryCounts.push(' ' + D.Lang.get('and') + ' ');
                        }
                        galleryCounts.push(this.par.event.video + ' ' + D.Lang.nget(this.par.event.video, 'video'))
                    }
                    parts = parts.concat(galleryCounts);
                }
            }
        }

        if( this.par.event && this.par.event.type == 98 ){
            parts.push(D.Lang.get('changed_business_banner'));
        }

        if( this.par.at ){
            if( !empty(parts) ){
                parts.push(' '  + D.Lang.get('and') + ' ');
                and++;
            }
            parts.push({
                tag: 'span',
                els: [
                    D.Lang.get('checked_in') + ' ',
                    {
                        tag: 'a',
                        href: D.Say.link('/places/' + this.par.at.placeId, this.id),
                        text: htmlspecialchars_decode(this.par.at.placeName)
                    }
                ]
            });
        }

        if( this.par.event && this.par.event.type == 44 ){
            if( !empty(parts) ){
            	if( and ){
            		parts.push(',');
	            }
                parts.push(' ' + D.Lang.get('and') + ' ');
            	and++;
            }
            var movie = this.par.event;
            parts.push(D.Lang.get('watching_movie'));
            if( this.par.galleryItem ){
                parts.push(' ');
                parts.push({
                    tag: 'a',
                    href: D.Say.link('/kino/' + movie.movieUrlSeo, this.id),
                    text: movie.movieTitle
                });
            }
        }else if( this.par.event && this.par.event.movie ){
		    if( !empty(parts) ){
			    if( and ){
				    parts.push(',');
			    }
			    parts.push(' ' + D.Lang.get('and') + ' ');
			    and++;
		    }
		    var movie = this.par.event.movie;
		    parts.push(D.Lang.get('watching_movie'));
	        parts.push(' ');
	        parts.push({
		        tag: 'a',
		        href: D.Say.link('/kino/' + movie.movieUrlSeo, this.id),
		        text: movie.movieTitle
	        });
	    }

        if( this.par['with'] ){
            if( empty(parts) ){
                parts.push(D.Lang.get('with') + ' ');
            }else{
                parts.push(' '  + D.Lang.get('with') + ' ');
            }
            for( var i = 0, l = this.withNames.length; i < l; i++ ){
                if( i > 0 && i + 1 != l && (l <= 3 || i < 2) ){
                    parts.push(', ');
                }else if( l > 1 && ( i == l - 1 || (i == 2 && l > 3) )  ){
                    parts.push(' ' + D.Lang.get('and') + ' ');
                }
                if(  i == 2 && l > 3 ){
                    var moreFriendsLink = mkE({
                        tag: 'a',
                        onclick: D.closure(this, this._showWithPopup),
                        text: D.Lang.nget(l - 2, 'friends_ins')
                    });
                    parts.push(moreFriendsLink);
                    break;
                }
                var withName = this.withNames[i];
                if( !withName.uid && withName.title ){
                    parts.push({
                        tag: 'span',
                        className: 'notUser',
                        text: htmlspecialchars_decode(withName.title)
                    });
                    continue;
                }
                var uid = withName.uid;
                var user = D.Say.getUser(uid);
                var userNode = mkE({
                    tag: 'a',
                    href: D.Say.link(user.url, this.id),
                    text: htmlspecialchars_decode(user.aktitle)
                });
                D.Say.addUserTooltip(userNode, user);
                parts.push(userNode);
            }
        }

        if( empty(parts) ){
            return false;
        }

        mkE.appendTypeElement(re, parts);

        return re;
    },

    _showWithPopup: function(){
	    D.Say.click(this.id);
        var popup = new D.SayItem.WithPopup(this.withNames);
        InfoBox.els(popup, {
            width: 500,
            withoutPadding: true
        });
    },

    appendToUser: function(node){
        D.insertAfter(node, this._userLinkNode);
    },

    _canFollow: function() {
			  return this.user.type == D.USER_TYPE_BIZ && this.say.method != 'getUserPosts' && this.say.method != 'search' && this.say.method != 'post' && !this.user.isWatching;
    },

    _canUnFollow: function() {
        if(this.user.type === D.USER_TYPE_GROUPS && this.user.isAdmin) {
            return false;
        }
        return this.user.isWatching || (D.ID != this.uid && this.par.suggestions.length > 0 && !this.highLighted);
    }

};

/**
 * @param par
 * @constructor
 */
D.SayItem.Edit = function(par){
    par = par || {};
    this.onCancel = par.onCancel || this.onCancel;
    this.onSave = par.onSave || this.onSave;
    this.node = mkE( {
        tag:'div',
        className:'marginBottom',
        els:[
            this._borderNode = mkE( {
                tag:'div',
                className:'radius3 formItemBorder marginBottom',
                els:[
                    this._editor = new D.SayEditor( {
                        sayUserReplace:true,
                        onFocus:D.closure( this, function(){
                            addClassName( this._borderNode, 'formItemFocus' );
                        } ),
                        onBlur:D.closure( this, function(){
                            removeClassName( this._borderNode, 'formItemFocus' );
                        } ),
                        onCtrlEnter:D.closure( this, this._event, 'Save' )
                    })
                ]
            } )
        ]
    } );
    this._addIconsNode = mkE({
        tag: 'div',
        className: 'inEditorIcons SayFormCustomBottomIcon',
        style: {
            width: 'auto'
        },
        els: [
            this._addSmileyIconNode = mkE({
                tag:'a',
                className:'addSmileySay2Icon',
                prop:{
                    onclick:D.closure( this, this._addSmiley)
                }
            })
        ]
    }).append( this._borderNode );
    new T.Table( {
        cells:[
            '',
            new T.TableCell( {
                els:[
                    new T.Form.Button( {
                        caption:D.Lang.get('cancel'),
                        color:'link',
                        onclick:D.closure( this, this._event, 'Cancel' )
                    } ),
                    new T.Form.Button( {
                        caption:D.Lang.get('Save'),
                        onclick:D.closure( this, this._event, 'Save' )
                    } )
                ],
                align:'right'
            } )
        ],
        style:{
            width:'100%'
        }
    } ).append( this.node );
};

D.SayItem.Edit.prototype = new mkE.Base;

D.SayItem.Edit.prototype.focus = function(){
    this._editor.focus();
};

D.SayItem.Edit.prototype._event = function(name){
    $(this).trigger(name);
};

D.SayItem.Edit.prototype.onCancel = D.doNothing;
D.SayItem.Edit.prototype.onSave = D.doNothing;

D.SayItem.Edit.prototype.value = function(v){
    var re = this._editor.value(v);
	D.smileyReplace(this._editor._content);
	return re;
};

D.SayItem.Edit.prototype._addSmiley = function(){
    D.insertSmiley( {
        onclick:D.closure( this, this._addSmileyClick ),
        cols: 6,
        width: '200px'
    } );
};

D.SayItem.Edit.prototype._addSmileyClick = function( sm ){
    if( !this._editor._contentEditable ){
        this._editor.insertHTML( sm + ' ' );
        return;
    }
    this._editor.insertHTML( '<span id="saySmiley">' + htmlspecialchars(sm) + '</span>' + '&nbsp;' );
    var saySmileyNode = document.getElementById('saySmiley');
    if(!saySmileyNode){
        return;
    }
    saySmileyNode.removeAttribute("id");
    if( !saySmileyNode.previousSibling ){
        return;
    }
    var saySmileyNodePrev = saySmileyNode.previousSibling;
    if( saySmileyNodePrev.nodeType == 3 && saySmileyNodePrev.nodeValue.length ){
        var lastChar = saySmileyNodePrev.nodeValue.substr( saySmileyNodePrev.nodeValue.length - 1, 1 );
        if( lastChar != ' ' && lastChar != D.SayEditor.SPACE ){
            saySmileyNodePrev.nodeValue += ' ';
        }
    }
};

D.SayItem.Stats = function(par){
    this.id = par.id || 0;
    this.say = par.say || false;
    this.onLoad = par.onLoad || function() {};
    this.node = mkE( {
        tag:'div',
        className:'SayItemStats',
        els:[
            this._itemNode = mkE( {
                tag:'ul',
                className:'userComments sayList'
            } ),
            this._statsNode = mkE( {
                tag:'div',
                className:'stat',
                els:[
                    {
                        tag:'div',
                        className:'main radius3',
                        els:[
                            new T.Table( {
                                cells:[
                                    [
                                        this._views = mkE( {
                                            tag:'div'
                                        } ),
                                        this._viewsForText = mkE( {
                                            //tag:'b',
                                            text: ''
                                        })
                                    ],
                                    [
                                        this._imp = mkE( {
                                            tag:'div'
                                        } ),
                                        this._impForText = mkE( {
                                            //tag:'b',
                                            text: ''
                                        })
                                    ]
                                ]
                            } )
                        ]
                    },
                    new T.Table( {
                        className:'values',
                        rows:[
                            [ D.Lang.get('Recommends'), this._recs = mkE('') ],
                            this._clicksRow = new T.TableRow(
                                [
																	{	tag: 'span',
																		els: [
																			D.Lang.get('Clicks'),
																			{tag:'span',className:'icon infoIcon info', title: D.Lang.get('Clicks info')}
																		]
																	},
																	this._clicks = mkE('')
																]
                            ),
                            this._linkClicksRow = new T.TableRow(
                                [
																	{	tag: 'span',
																		els: [
																			D.Lang.get('Link clicks'),
																			{tag:'span',className:'icon infoIcon info', title: D.Lang.get('Link clicks info')}
																		]
																	},
																	this._linkClicks = mkE('')
																]
                            ),
                            [ D.Lang.get('Likes'), this._likes = mkE('') ],
                            [ D.Lang.get('Comments'), this._coms = mkE('') ],
                            [ D.Lang.get('Add to favorites'), this._favs = mkE('') ]
                        ]
                    }	),
                    (this._hasVideoStats() ? new T.Form.Button({
                        caption: D.Lang.get('view_say_video_stats_btn'),
                        color: 'link',
                        stretch: true,
                        className: 'showVideoStatsBtn',
                        onclick: D.closure(this, this._openSayVideoStats)
                    }) : '')
                ]
            } ), // div.wrap
            T.clear(),
            this._videoChartNode = mkE( {
                tag:'div',
                className:'chart'
            } ),
            T.clear()
        ]
    } );
    if( D.LV && this.id < 1487117325 ){ // 2015-10-08 13:00:00
        var infoNode = T.info( D.Lang.get('Say stats info') ).append( this._statsNode );
        addClassName( infoNode, 'marginTop' );
    }
    D.loadingOverlay( this.node );
    D.Say.rpc.send(
        'getStats',
        {
            pid:this.id
        },
        this._statsRe,
        this
    );
};

D.SayItem.Stats.prototype = new mkE.Base;
D.SayItem.Stats.prototype._hasVideoStats = function(){
    return this.say.videoPlayerNode && this.say.videoPlayerItem && this.say.par.ts >= 1460383200;
};
D.SayItem.Stats.prototype._openSayVideoStats = function(){
    D.Say.rpc.send(
        'getVideoStats',
        {
            pid: this.say.videoPlayerItem.stats.pid
        },
        this._openSayVideoStatsRe,
        this
    );
};
D.SayItem.Stats.prototype._openSayVideoStatsRe = function(re){
    clearNode(this._videoChartNode);
    mkE({
        tag: 'div',
        style: {
            marginTop: '15px'
        },
        els: [
            {
                tag: 'h1',
                text: D.Lang.get('view_say_video_stats')
            },
            {
                tag: 'div',
                id: 'videoStatsChart'
            }
        ]
    }).append(this._videoChartNode);
    T.clear().append(this._videoChartNode);
    $('#videoStatsChart').html(re)
};
D.SayItem.Stats.prototype._statsRe = function(re){
    D.removeLoadingOverlay( this.node );
    var say = new D.Say( {
        withoutForm:true
    } );
    // If Say item stats opened calling InfoBox.els( new D.SayItem.Stats({id})) outside say item post, then users are nsot loaded
    if( re.users ){
        O2O( D.Say.users, re.users );
    }
    var item = new D.SayItem( re.item, say );
    item.append( this._itemNode );
    setNodeText( this._imp, re.recs + re.likes + re.coms + re.clicks + re.favs );
    setNodeText( this._impForText, D.Lang.nget(re.recs + re.likes + re.coms + re.clicks + re.favs, 'Impressions') ); // Impressions teksts priekš vks un dsk.
    setNodeText( this._views, re.views );
    setNodeText( this._viewsForText, D.Lang.nget(re.views, 'Views') ); // Views teksts priekš vks un dsk.
    setNodeText( this._recs, re.recs );
    setNodeText( this._likes, re.likes );
    setNodeText( this._coms, re.coms );
    setNodeText( this._clicks, re.clicks );
    setNodeText( this._favs, re.favs );
    setNodeText( this._linkClicks, re.linkClicks );
    if( !re.clicks ){
        this._clicksRow.remove();
    }
    if( !re.linkClicks ){
        this._linkClicksRow.remove();
    }
    if( re.chart ){
        //this._chartNode.innerHTML = re.chart;
        //evalScriptHTML( re.chart );
    }
    this.onLoad();
};

// +++ D.SayEvents +++
D.SayEvents = function(){};
D.SayEvents.prototype.showText = false;
D.SayEvents.prototype.clear = false;
/** @type {mkE} */
D.SayEvents.prototype.node = null;
/** @type {Function|null} */
D.SayEvents.prototype.comment;
/** @type {string} */
D.SayEvents.prototype.commentUrl = '';

/**
 * @type {Object<Number,Function>}
 * @public
 */
D.SayItem.prototype._events = {};
// --- item.js ---

// +++ pigsort.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {Object} data
 * @param {Object} pigsort
 * @param {D.Say} say
 */
D.SayPigsort = Class(
	/**
	 * @lends {D.SayPigsort#}
	 */
	{
		/**
		 *
		 * @param {Object} data
		 * @param {Object} pigsort
		 * @param {D.Say} say
		 * @constructs
		 */
		__construct: function(data, pigsort, say){
			this.data = data;
			this.pigsort = pigsort;
			this.say = say;

			this.node = mkE({
				tag: 'li',
				className: 'SayItem sayItemPigsort sayItemPigsort' + this.pigsort.type,
				els: [
					this._content = mkE({
						tag: 'div',
						className: 'commentContent',
						els: [
							this._header = mkE({
								tag: 'div',
								className: 'pigsortHeader pigsortHeader' + this.pigsort.type,
								els: [
									this._headerContent = mkE({
										tag: 'div',
										className: 'pigsortHeaderContent'
									}),
									{
										tag: 'div',
										className: 'pigsortHeaderRight',
										els: [
											{
												tag:'a',
												className:'icon closeIcon',
												prop:{
													onclick: D.closure( this, this._close )
												}
											}
										]
									}
								]
							}),
							this._body = mkE({
								tag: 'div',
								className: 'body',
								els: [
									this._items = mkE({
										tag: 'div',
										className: 'pigsortItems'
									})
								]
							})
						]
					})
				]
			});

			this._draw();
		},

		_draw: function(){
			this._drawHeader();
			this._drawContent();
		},

		_drawHeader: function(){
			var els = [
				D.Lang.get('you_may_like')
			];
			if( !this.pigsort.friends.length ){
				mkE.appendTypeElement(this._headerContent, els);
				return;
			}
			els.push(': ');
			for( var k in this.pigsort.friends ){
				if( !this.pigsort.friends.hasOwnProperty(k) ){
					continue;
				}
				var r = this.pigsort.friends[k];
				if( k > 0 && k != this.pigsort.friends.length - 1 ){
					els.push( ', ' );
				}else if( k > 0 ){
					els.push(' ' + D.Lang.get('and') + ' ');
				}
				var userNode = mkE( {
					tag:'a',
					els: [
						{
							tag: 'strong',
							text:htmlspecialchars_decode( r.title )
						}
					],
					href:r.url
				} );
				els.push( userNode );
				D.Say.addUserTooltip(userNode, r);
			}
			els.push(' ');
			els.push(this._headerText());
			mkE.appendTypeElement(this._headerContent, els);
		},

		/**
		 * @abstract
		 */
		_headerText: function(){
			throw new Error('_drawHeader not implemented');
		},

		/**
		 * @abstract
		 */
		_drawContent: function(){
			throw new Error('_drawContent not implemented');
		},

		_close: function(){
			D.loadingOverlay(this.node);
			D.SayPigsort.rpc.send(
				'close',
				{
					type: this.pigsort.type,
					id: this.pigsort.id
				},
				this._onClose
			);
		},

		_onClose: function(){
			this.node.remove();
		}
	},
	mkE.Base
);

D.SayPigsort.rpc = new RPC('/pigsort/rq/app.php');
D.SayPigsort.types = {};

/**
 * @class
 * @extends {D.SayPigsort}
 */
D.SayPigsort.Pages = Class(
	/**
	 * @lends {D.SayPigsort.Pages#}
	 */
	{
		_headerText: function(){
			return D.Lang.nget(1, 'pigsort_pages');
		},

		_drawContent: function(){
			var content = mkE({
				tag: 'div',
				className: 'pigsortItem pigsortPagesItem',
				els: [
					{
						tag: 'div',
						className: 'image',
						els: [
							{
								tag: 'img',
								src: this.data.imageGM
							},
							{
								tag: 'div'
							},
							{
								tag: 'a',
								href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href
							}
						]
					},
					{
						tag: 'div',
						className: 'pageInfo',
						els: [
							this._top = mkE({
								tag: 'div',
								className: 'top',
								els: [
									this._titleNode = mkE({
										tag: 'a',
										className: 'userTitle',
										href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href,
										els: [
											D.shorten(this.data.title, 22, '...'),
											this.data.extra.pro ? {
												tag: 'span',
												className: 'officialPage'
											} : ''
										]
									})
								]
							}),
							{
								tag: 'div',
								className: 'followers',
								els: [
									{
										tag: 'strong',
										text: this.data.extra.fans
									},
									' ' + D.Lang.nget(this.data.extra.fans, 'follower')
								]
							},
							{
								tag: 'div',
								className: 'description',
								text: D.shorten(htmlspecialchars_decode(this.data.extra.description), 190, '...')
							}
						]
					}
				]
			});

			if( !this.data.extra.following ){
				this._button = new T.Form.Button({
					caption: D.Lang.get('follow'),
					icon: 'plusSmall',
					onclick: D.closure(this, this._follow, this.data.id)
				});
				this._button.append(this._top);
			}

			D.Say.addUserTooltip(this._titleNode, {type: D.USER_TYPE_BIZ, id: this.data.uid});
			content.append(this._items);
		},

		_follow: function(id){
			var rpc = new RPC('/lapas/rq/app.php');
			rpc.send('follow', {
				page_id: id,
				pigsort: true
			}, D.closure(this, this._onFollow), this);
		},

		_onFollow: function(){
			mkE({
				tag: 'span',
				className: 'youFollow',
				text: D.Lang.get('you_follow')
			}).replace(this._button.node);
		}
	},
	D.SayPigsort
);
D.SayPigsort.types[2] = D.SayPigsort.Pages;

/**
 * @class
 * @extends {D.SayPigsort}
 */
D.SayPigsort.Applications = Class(
	/**
	 * @lends {D.SayPigsort.Applications#}
	 */
	{
		_headerText: function(){
			return D.Lang.nget(1, 'pigsort_applications');
		},

		_drawContent: function(){
			var content = mkE({
				tag: 'div',
				className: 'pigsortItem pigsortApplicationsItem',
				els: [
					{
						tag: 'div',
						className: 'image',
						els: [
							{
								tag: 'img',
								src: this.data.imageGM
							},
							{
								tag: 'div'
							},
							{
								tag: 'a',
								href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href
							}
						]
					},
					{
						tag: 'div',
						className: 'appInfo',
						els: [
							this._top = mkE({
								tag: 'div',
								className: 'top',
								els: [
									{
										tag: 'a',
										className: 'userTitle',
										href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href,
										text: D.shorten(htmlspecialchars_decode(this.data.title), 25, '...')
									}
								]
							}),
							{
								tag: 'div',
								className: 'followers',
								els: [
									{
										tag: 'strong',
										text: this.data.extra.players
									},
									' ' + D.Lang.nget(this.data.extra.players, 'player')
								]
							},
							{
								tag: 'div',
								className: 'description',
								text: D.shorten(htmlspecialchars_decode(this.data.extra.description), 190, '...')
							}
						]
					}
				]
			});

			this._button = new T.Form.Button({
				caption: D.Lang.get('play'),
				icon: 'playDice',
				href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href,
				color: 'submit'
			});
			this._button.append(this._top);

			content.append(this._items);
		}
	},
	D.SayPigsort
);
D.SayPigsort.types[3] = D.SayPigsort.Applications;

/**
 * @class
 * @extends {D.SayPigsort}
 */
D.SayPigsort.Kino = Class(
	/**
	 * @lends {D.SayPigsort.Kino#}
	 */
	{
		_headerText: function(){
			return D.Lang.nget(1, 'pigsort_kino');
		},

		_drawContent: function(){
			var content = mkE({
				tag: 'div',
				className: 'pigsortItem pigsortKinoItem',
				els: [
					{
						tag: 'div',
						className: 'image',
						els: [
							{
								tag: 'img',
								src: this.data.imageGM
							},
							{
								tag: 'div'
							},
							{
								tag: 'a',
								href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href
							}
						]
					},
					{
						tag: 'div',
						className: 'movieInfo',
						els: [
							this._top = mkE({
								tag: 'div',
								className: 'top',
								els: [
									this._titleNode = mkE({
										tag: 'a',
										className: 'userTitle',
										href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href,
										els: [
											D.shorten(htmlspecialchars_decode(this.data.title), 22, '...')
										]
									})
								]
							}),
							{
								tag: 'div',
								className: 'likes',
								els: [
									{
										tag: 'strong',
										text: this.data.extra.likes
									},
									' ' + D.Lang.nget(this.data.extra.likes, 'like it')
								]
							},
							{
								tag: 'div',
								className: 'description',
								text: D.shorten(this.data.extra.description, 190, '...')
							}
						]
					}
				]
			});

			content.append(this._items);
		}
	},
	D.SayPigsort
);
D.SayPigsort.types[5] = D.SayPigsort.Kino;

/**
 * @class
 * @extends {D.SayPigsort}
 */
D.SayPigsort.Events = Class(
	/**
	 * @lends {D.SayPigsort.Events#}
	 */
	{
		_headerText: function(){
			return D.Lang.nget(1, 'pigsort_events');
		},

		_drawContent: function(){
			var content = mkE({
				tag: 'div',
				className: 'pigsortItem pigsortEventsItem',
				els: [
					{
						tag: 'div',
						className: 'image',
						els: [
							{
								tag: 'img',
								src: this.data.imageGM
							},
							{
								tag: 'div'
							},
							{
								tag: 'a',
								href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href
							}
						]
					},
					{
						tag: 'div',
						className: 'eventInfo',
						els: [
							this._top = mkE({
								tag: 'div',
								className: 'top',
								els: [
									this._titleNode = mkE({
										tag: 'a',
										className: 'userTitle',
										href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href,
										els: [
											D.shorten(htmlspecialchars_decode(this.data.title), 22, '...')
										]
									})
								]
							}),
							{
								tag: 'div',
								className: 'participants',
								els: [
									{
										tag: 'strong',
										text: this.data.extra.participants
									},
									' ' + D.Lang.nget(this.data.extra.participants, 'guests')
								]
							},
							{
								tag: 'div',
								className: 'description',
								text: D.shorten(this.data.extra.description, 190, '...')
							}
						]
					}
				]
			});

			if( !this.data.extra.going ){
				this._button = new T.Form.Button({
					caption: D.Lang.get('imin'),
					icon: 'plusSmall',
					onclick: D.closure(this, this._go, this.data.id)
				});
				this._button.append(this._top);
			}

			content.append(this._items);
		},

		_go: function(id){
			var rpc = new RPC('/events/rq/app.php');
			rpc.send('setAttendStatus', {
				eventId: id,
				status: 'attend',
				pigsort: true
			}, D.closure(this, this._onGo), this);
		},

		_onGo: function(){
			mkE({
				tag: 'span',
				className: 'youGo',
				text: D.Lang.get('you_go_event')
			}).replace(this._button.node);
		}
	},
	D.SayPigsort
);
D.SayPigsort.types[6] = D.SayPigsort.Events;

/**
 * @class
 * @extends {D.SayPigsort}
 */
D.SayPigsort.BizApps = Class(
	/**
	 * @lends {D.SayPigsort.BizApps#}
	 */
	{
		_headerText: function(){
			var parts = D.Lang.nget(1, 'pigsort_bizapps').split('%PAGE%');
			parts.splice(1, 0, {
				tag: 'a',
				href: this.data.extra.owner_url,
				els: [
					{
						tag: 'strong',
						text: htmlspecialchars_decode(this.data.extra.owner_title)
					}
				]
			});
			return mkE({
				tag: 'span',
				els: parts
			});
		},

		_drawContent: function(){
			var content = mkE({
				tag: 'div',
				className: 'pigsortItem pigsortApplicationsItem',
				els: [
					{
						tag: 'div',
						className: 'image',
						els: [
							{
								tag: 'img',
								src: this.data.imageGM
							},
							{
								tag: 'div'
							},
							{
								tag: 'a',
								href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.extra.owner_url + 'api' + this.data.href
							}
						]
					},
					{
						tag: 'div',
						className: 'appInfo',
						els: [
							this._top = mkE({
								tag: 'div',
								className: 'top',
								els: [
									{
										tag: 'a',
										className: 'userTitle',
										href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.extra.owner_url + 'api' + this.data.href,
										text: D.shorten(htmlspecialchars_decode(this.data.title), 25, '...')
									}
								]
							}),
							{
								tag: 'div',
								className: 'followers',
								els: [
									{
										tag: 'strong',
										text: this.data.extra.players
									},
									' ' + D.Lang.nget(this.data.extra.players, 'player')
								]
							},
							{
								tag: 'div',
								className: 'description',
								text: D.shorten(htmlspecialchars_decode(this.data.extra.description), 190, '...')
							}
						]
					}
				]
			});

			this._button = new T.Form.Button({
				caption: D.Lang.get('open'),
				icon: 'playDice',
				href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.extra.owner_url + 'api' + this.data.href,
				color: 'submit'
			});
			this._button.append(this._top);

			content.append(this._items);
		}
	},
	D.SayPigsort
);
D.SayPigsort.types[10] = D.SayPigsort.BizApps;

/**
 * @class
 * @extends {D.SayPigsort}
 */
D.SayPigsort.DownloadApps = Class(
	/**
	 * @lends {D.SayPigsort.DownloadApps#}
	 */
	{
		_headerText: function(){
			return D.Lang.nget(1, 'pigsort_downloadapps');
		},

		_drawContent: function(){
			var content = mkE({
				tag: 'div',
				className: 'pigsortItem pigsortApplicationsItem',
				els: [
					{
						tag: 'div',
						className: 'image',
						els: [
							{
								tag: 'img',
								src: this.data.imageGM
							},
							{
								tag: 'div'
							},
							{
								tag: 'a',
								href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href
							}
						]
					},
					{
						tag: 'div',
						className: 'appInfo',
						els: [
							this._top = mkE({
								tag: 'div',
								className: 'top',
								els: [
									{
										tag: 'a',
										className: 'userTitle',
										href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href,
										text: D.shorten(htmlspecialchars_decode(this.data.title), 25, '...')
									}
								]
							}),
							{
								tag: 'div',
								className: 'followers',
								els: [
									{
										tag: 'strong',
										text: this.data.extra.users
									},
									' ' + D.Lang.nget(this.data.extra.users, 'user')
								]
							},
							{
								tag: 'div',
								className: 'description',
								text: D.shorten(htmlspecialchars_decode(this.data.extra.description), 190, '...')
							}
						]
					}
				]
			});
			this._button = new T.Form.Button({
				caption: D.Lang.get('open'),
				href: '/stats/click.php?key=pigsort_click_' + this.pigsort.type + '&url=' + this.data.href,
				color: 'submit'
			});
			this._button.append(this._top);

			content.append(this._items);
		}
	},
	D.SayPigsort
);
D.SayPigsort.types[12] = D.SayPigsort.DownloadApps;
// --- pigsort.js ---

// +++ say.js +++
D.Say = function(par){
	var $say = this;
	/** @type {Array.<D.SayItem>}*/
	this._items = {};
	this._ids = {};
	par = par || {};
	this.par = par;
	this.node = par.node || $('#ct .sayList')[0];
	var get = new Get();
	this.pg = par.pg || Number( get.v('pg') ) || 1;
	this.initialPg = this.pg;
	this.method = par.method || 'getFriendPosts';
	this.onLoad = par.onLoad || function(){};
	this.onFav = par.onFav || function(){};
	this.worec = par.worec || 0;
	this.withoutForm = par.withoutForm || false;
	this.emptyText = par.emptyText || '';
	this.uid = D.ID;
	this.fid = par.fid || D.Say.UID;
	this.friendUser = par.friendUser || null;
	this._minPid = 0;
	this.autoscroll = 1;
	this.gifs = [];
	this.playingGifs = {};
	this.fakePage = this.pg;
	this.sayMentions = par.sayMentions || false;
	this.hideDisplayReason = par.hideDisplayReason || false;
	this.withoutScroll = par.withoutScroll || false;
	this.hideParentUser = par.hideParentUser;
	this.type = par.type;
	this.disableNewItems = par.disableNewItems || false;
	this.smart = par.smart || false;
	this.postLimit = par.postLimit || false;
	if( this.fid && D.Say.profiles ){
		for( var k in D.Say.profiles ){
			var r = D.Say.profiles[k];
			if( r.id == this.fid ){
				this.uid = r.id;
				break;
			}
		}
	}
	var myProfile = D.Say.UID == D.ID;
	if(!myProfile){
		for( var k in D.Say.profiles ){
			if( D.Say.profiles[k].id == D.Say.UID ){
				myProfile = true;
				break;
			}
		}
	}
//	if( !this.withoutForm && D.Say.UID && D.Say.UID != D.ID ){
//		this.withoutForm = true;
//		for( var k in D.Say.profiles ){
//			if( D.Say.profiles[k].id == D.Say.UID ){
//				this.withoutForm = false;
//			}
//		}
//	}
	if( D.ID && !this.withoutForm ){
		if( this.postLimit ){
			T.info('Dienā atļauts pievienot ne vairāk kā ' + this.postLimit + ' ierakstus').append(this.node);
		}
		var fp = new D.Say.Form.Par();
		fp.uid = this.uid;
		fp.profiles = D.Say.profiles;
		fp.onSave = D.closure( this, function(re){
			if( this._emptyTextNode ) {
				this._emptyTextNode.remove();
			}
			if( re.users ){
				if( re.users ){
					O2O( D.Say.users, re.users );
				}
			}
			if( re.item ){
				var item = new D.SayItem( re.item, this );
				D.insertAfter( item.node, this.form.node );
			}
		} );
		if( par.form ){
			O2O( fp, par.form );
		}
		if( !myProfile && par.friendUser && D.Lang.exists('Say add mentions') ){
			O2O(fp, {
				showHelpText:true,
				helpText:D.Lang.get('Say add mentions')
			});
		}
		if( !myProfile && par.friendUser ){
			par.friendUser.title = htmlspecialchars_decode(par.friendUser.title);
			fp.friendUser = par.friendUser;
		}
		this.form = new D.Say.Form(fp);
		this.form.append( this.node );
	}
	this._moreButton = this.moreButton();
	this._timesInterval = setInterval( function(){
		if( !$say.node || !$say.node.parentNode || !$say.node.offsetHeight ){
			clearInterval( $say._timesInterval );
			return;
		}
		for( var k in $say._items ){
			var item = $say._items[k];
			if( D.TIME - item.par.ts > 3600 ){
				continue;
			}
			item.timeNode.innerHTML = D.ddate2( item.par.ts );
		}
	}, 1000 );
	$(window).off('DOMContentLoaded.say load.say resize.say scroll.say');
	$(window).on('DOMContentLoaded.say load.say resize.say scroll.say', D.closure(this, this.checkGIFs));
};

D.Say.MAX_DESC_LENGTH = 160;
D.Say.MAX_TITLE_LENGTH = 130;


D.Say.UNKNOWN_USER = {
	image:{}
};

D.Say.users = {};
D.Say.profiles = [];
D.Say.rpc = new RPC( '/say/rq/app.php' );

D.Say.isMyProfile = function(uid){
	if(!uid){
		return false;
	}
	if( D.ID == uid ){
		return true;
	}
	for( var k in this.profiles ){
		if( this.profiles[k].id == uid ){
			return true;
		}
	}
	return false;
};

D.Say.getUser = function(uid){
	if( D.ID == uid ){
		var user = D.me;
		user.type = D.USER_TYPE_DEFAULT;
		return user;
	}
	if( this.users[uid] ){
		return this.users[uid];
	}
	for( var k in this.profiles ){
		if( this.profiles[k].id == uid ){
			return this.users[uid] = this.profiles[k];
		}
	}
	var re = this.UNKNOWN_USER;
	re.id = uid;
	return re;
};

D.Say.userReplace = function(node){
	D.replaceCommentsWithNode( node, D.closure( this, function(data){
		var m = data.match( /user:([0-9]{1,})/ );
		if(!m){
			return;
		}
		var user = this.getUser( m[1] );
		var a  = mkE( {
			tag:'a',
			href:user.url,
			text:htmlspecialchars_decode( user.title )
		} );
		D.Say.addUserTooltip( a, user );
		return a;
	} ) );
};

D.Say._showHighLightForm = function( pid ) {
	var cb = function() {
		if ( window.CPM_ADS_SAY_HIGHLIGHT ) {
			var modal = new D.Modal({
				width: 500,
				className: 'sayHighlightForm',
				title: D.Lang.get('say_highlight'),
				overlayClose: false
			});
			modal.open('//'+ window.CPM_ADS_SAY_HIGHLIGHT_WWW_DOMAIN +'/say/highlight/?pid=' + pid);

			setTimeout(function() {
				if( window.parent && window.parent !== window ) {
					var pos = D.position( modal.content );
					var doc = window.parent.document;
					$( doc.body ).find('.InfoBox').animate( {
						scrollTop: pos.top
					} );
				}
			}, 500);
		} else {
			InfoBox.open( '/say/highlight/?pid=' + pid, {
				width: 500,
				className: 'sayHighlightForm',
				title: D.Lang.get('say_highlight'),
				overlayClose: false
			} );
		}
	};
	if ( !D.onLoad( ['xSayHighlight', 'SayHighlight'], cb ) ) {
		D.addLang('xSayHighlight');
		D.addCSS('say/highlight/highlight.css');
		D.addJS('say/highlight/highlight.js');
	}
	return false;
};

D.Say._showEditHighLightFormApi = function( pid , app ) {
	//window.location = '/applications/' + app + '/admin/sayhighlight/?pid=' + pid;
	var cb = function() {
		InfoBox.open( '/applications/' + app + '/admin/sayhighlight/?pid=' + pid + '&popup=true', {
			width: 500,
			className: 'sayHighlightForm',
			title: D.Lang.get('say_highlight'),
			overlayClose: false
		} );
	};
	if ( !D.onLoad( ['xSayHighlight', 'SayHighlight'], cb ) ) {
		D.addLang('xSayHighlight');
		D.addCSS('say/highlight/highlight.css');
		D.addJS('say/highlight/highlight.js');
	}
	return false;
};

D.Say._showEditHighLightFormUserHl = function( pid ) {
	var cb = function() {
		InfoBox.open( '/ads/nobizhighlight/my/?page=list&pid=' + pid + '&popup=true', {
			width: 500,
			className: 'sayHighlightForm',
			title: D.Lang.get('say_highlight'),
			overlayClose: false
		} );
	};
	if ( !D.onLoad( ['xSayHighlight', 'SayHighlight'], cb ) ) {
		D.addLang('xSayHighlight');
		D.addCSS('say/highlight/highlight.css');
		D.addJS('say/highlight/highlight.js');
	}
	return false;
};

D.Say._showPopHighLightFormEvent = function ( pid, app ) {
    window.location = '/ev/' + app + '/sayhighlight/?pid=' + pid;
    return false;
};

D.Say._showEditHighLightFormEvent = function( pid , app ) {
	//window.location = '/applications/' + app + '/admin/sayhighlight/?pid=' + pid;
	var cb = function() {
		var get = new Get( '/say/highlight/' );
		get.add( 'pid', pid );
		get.add( 'step', 4 );
		InfoBox.open(get.toUrl(), {
			width: 500,
			className: 'sayHighlightForm',
			title: D.Lang.get('say_highlight'),
			overlayClose: false
		});
	};
	if ( !D.onLoad( ['xSayHighlight', 'SayHighlight'], cb ) ) {
		D.addLang('xSayHighlight');
		D.addCSS('say/highlight/highlight.css');
		D.addJS('say/highlight/highlight.js');
	}
	return false;
};
D.Say._showPopHighLightFormMusic = function( pid , app ) {
	//window.location = '/music/' + app + '/adminsayhighlight/?pid=' + pid; return;
	var cb = function() {
		InfoBox.open( '/music/' + app + '/adminsayhighlight/?pid=' + pid + '&popup=true', {
			width: 500,
			className: 'sayHighlightForm',
			title: D.Lang.get('say_highlight'),
			overlayClose: false
		} );
	};
	if ( !D.onLoad( ['xSayHighlight', 'SayHighlight'], cb ) ) {
		D.addLang('xSayHighlight');
		D.addCSS('say/highlight/highlight.css');
		D.addJS('say/highlight/highlight.js');
	}
	return false;
};
D.Say._showEditPopHighLightFormMusic = function( pid , app ) {
	//window.location = '/music/' + app + '/adminsayhighlight/?pid=' + pid; return;
	var cb = function() {
		InfoBox.open( '/music/' + app + '/adminsayhighlight/?pid=' + pid + '&popup=true', {
			width: 500,
			className: 'sayHighlightForm',
			overlayClose: false
		} );
	};
	if ( !D.onLoad( ['xSayHighlight', 'SayHighlight'], cb ) ) {
		D.addLang('xSayHighlight');
		D.addCSS('say/highlight/highlight.css');
		D.addJS('say/highlight/highlight.js');
	}
	return false;
};

D.Say._showPopHighLightFormApi = function( pid , app ) {
	//window.location = '/applications/' + app + '/admin/sayhighlight/?pid=' + pid;
	//var cb = function() {
	//	InfoBox.open( '/applications/' + app + '/admin/sayhighlight/?pid=' + pid + '&popup=true', {
	//		width: 560,
	//		className: 'sayHighlightForm'
	//	} );
	//};
	/*if ( !D.onLoad( ['xSayHighlight', 'SayHighlight'], cb ) ) {
		D.addLang('xSayHighlight');
		D.addCSS('say/highlight/highlight.css');
		D.addJS('say/highlight/highlight.js');
	}
	return false;*/
	var cb = function() {
		InfoBox.open( '/say/highlight/?pid=' + pid, {
			width: 500,
			className: 'sayHighlightForm',
			title: D.Lang.get('say_highlight'),
			overlayClose: false
		} );
	};
	if ( !D.onLoad( ['xSayHighlight', 'SayHighlight'], cb ) ) {
		D.addLang('xSayHighlight');
		D.addCSS('say/highlight/highlight.css');
		D.addJS('say/highlight/highlight.js');
	}
	return false;
};

D.Say._showHighLightFormApi = function( pid , app ) {
	window.location = '/applications/' + app + '/admin/sayhighlight/?pid=' + pid;
	return false;
};
D.Say.addUserTooltip = function( node, user, par ){
	switch( user.type || 0 ){
		case D.USER_TYPE_DEFAULT:
			node.setAttribute( 'rel', '/friend/rq/say_info.php?id=' + user.id );
			break;
		case D.USER_TYPE_BIZ:
			node.setAttribute( 'rel', '/lapas/rq/say_info.php?id=' + user.id );
			break;
		case D.USER_TYPE_GROUPS:
			node.setAttribute( 'rel', '/groups/rq/say_info.php?id=' + user.id );
			break;
		case D.USER_TYPE_MUSIC:
			node.setAttribute( 'rel', '/music/rq/say_info.php?id=' + user.id );
			break;
		case D.USER_TYPE_API:
			node.setAttribute( 'rel', '/applications/rq/say_info.php?id=' + user.id );
			break;
	}
	if( !node.getAttribute('rel') ){
		return;
	}
	node.onmouseover = D.closure(null, function(node, par){
		par = par || {};
		par.sender = node;
		par.url = node.getAttribute('rel');
		T.ToolTipBox.open(par);
	}, node, par);
};

D.Say.postComments = function(pid){
	var mStats = new DR.say.ClickStats();
	mStats.kw = 'say_feed_comment';
	mStats.call();
	D.onLoad( 'Comments', D.closure( this, this._postComments, pid ) );
};

D.Say._postComments = function(pid){
	this.rpc.send(
		'postComments',
		{
			pid:pid
		},
		this._postCommentsRe,
		this
	);
};

D.Say._postCommentsRe = function(re){
	InfoBox.html( false, {
		className:'sayPostComments',
		width:500
	} );
	var ul = mkE( {
		tag:'ul',
		className:'userComments sayList saySinglePost'
	} ).append( InfoBox.content );
	D.Say.profiles = re.profiles;
	var say = new D.Say( {
		method:'post',
		withoutForm:true,
		withoutScroll:true,
		node:ul
	} );
	say.showPosts(re);
	if( reset( re.items ).hideComments ){
		return;
	}
	re.comments.par._nodeId = '';
	re.comments.par.fid = re.items[0].uid;
	var comments = new D.Comments( re.comments.par );
	comments.show( re.comments.data );
	comments.append( InfoBox.content );
	if( D.addComment ){
		D.addComment = false;
		comments._form.focus();
	}
};

D.Say._onProfilesCallbacks = [];
D.Say._gettingProfiles = false;
D.Say.onProfiles = function(callback){
	var profiles = D.store.get( 'profiles', 'say' );
	var profilesTS = D.store.get( 'profilesTS', 'say' );
	if( profiles && profilesTS > ( new Date() ).getTime() - (empty(profiles) ? 300 : 900) * 1000 ){
		callback(profiles);
		return;
	}
	D.Say._onProfilesCallbacks.push(callback);
	if( !D.Say._gettingProfiles ){
		D.Say._getProfiles();
	}
};
D.Say._getProfiles = function(){
	D.Say._gettingProfiles = true;
	D.Say.rpc.send(
		'profiles',
		{},
		D.Say._onGetProfiles
	);
};
D.Say._onGetProfiles = function(re){
	D.Say._gettingProfiles = false;
	var profiles = [];
	if( re.users ){
		D.store.set( 'profiles', re.users, 'say' );
		D.store.set( 'profilesTS', ( new Date() ).getTime(), 'say' );
		profiles = re.users;
	}
	for( var i = 0, l = D.Say._onProfilesCallbacks.length; i < l; i++ ){
		D.Say._onProfilesCallbacks[i](profiles);
	}
	D.Say._onProfilesCallbacks = [];
};

D.Say.prototype = {

	toString:function(){
		return 'Say';
	},

	rpc:D.Say.rpc,

	mosaicWidth:function(){
		if( !this.node || this.node.offsetWidth < 100 ){
			return 500;
		}
		return Math.min( this.node.offsetWidth, 500 );
	},

	_trackHighlighted: function( item ) {
		var h = $(document).scrollTop() + $(window).height();
		var pos = D.position( item.node );
		var visibleArea = (item.node.offsetHeight / 3);
		if ( pos.top && h >= pos.top + visibleArea ) {
			item._trackedHl = true;
			this.rpc.send( 'trackHighlighted', { pid: item.id }, function(){} );
		}
	},

	_trackHighlight: function(item) {
		if (item._trackedHl) {
			return;
		}
		item._trackedHl = true;
		this.rpc.send( 'trackHighlighted', { pid: item.id }, function(){} );
	},

	_views: [],

	_addView: function(item){
		item._viewAdded = true;
		if( item.par.highLighted ){
			return;
		}
		this._views.push(item.id);
		this._viewAddTimeout = this._viewAddTimeout || setTimeout(D.closure(this, this._sendViews), 300);
	},

	_sendViews: function(){
		D.onLoad('DR.say', D.closure(this, this._doAddViews))
	},

	_doAddViews: function(item){
		if( empty(this._views) ){
			return;
		}
		var m = new DR.say.AddView();
		m.pids = this._views;
		m.call();
		this._views = [];
		if( this._viewAddTimeout ){
			clearTimeout(this._viewAddTimeout);
		}
		this._viewAddTimeout = 0;
	},

	_seens:[],

	_seenSave:function(){
		var url;
		if( 0 && D.DEV_NAME == 'z' ){
			//url = '//127.0.0.1:8231/say/view/' + D.ID + '/' + this._seens.join(',');
			url = '//213.175.75.109:8233/say/view/' + D.ID + '/' + this._seens.join(',');
		} else {
			url = '//tw.ifrype.com/say/view/' + D.ID + '/' + this._seens.join(',');
		}
		this._seens = [];
		this._seenSaveTO = 0;

		$.ajax( {
			url:url,
			crossDomain:true,
			dataType:'jsonp',
			complete: this._seenSaved
		} );
	},

	_seenSaved: function () {
		
	},

	/**
	 * @param {D.SayItem} item
	 * @private
	 */
	_seenItem:function(item){
		if( D.ADMIN && this.method != 'getFriendPosts' ){
			return;
		}
		item.seen = true;
		if( item.par.highLighted ){
			this._trackHighlight(item); // from php
		} else {
			this._seenAdd( item.id );
		}
		/*
		if( item.par.event ){
			var addView = false;
			switch( item.par.event.type ){
				case 89: // say pic
					addView = true;
					break;
				case 1:
					addView = ( item.par.event.album.pics == 1 );
					break;
			}
		}*/
	},

	_seenAdd:function(id){
		if( !D.ID ){
			return;
		}
		this._seens.push(id);
		if( this._seenSaveTO ){
			return;
		}
		this._seenSaveTO = setTimeout( D.closure( this, this._seenSave ), 1000 );
	},

	_inScreen:function(node){
		if( !node || !node.offsetHeight ){
			return false;
		}
		var $elem = $(node);
		var $window = $(window);
		var docViewTop = $window.scrollTop();
		var docViewBottom = docViewTop + $window.height();
		var elemTop = $elem.offset().top;
		var elemBottom = elemTop + $elem.height() * 0.5;
		return ((elemBottom <= docViewBottom) && (elemTop + 50 >= docViewTop));
	},

	_onScroll:function(){
		if( !this._scrollStarted ){
			this._scrollStarted = new Date().getTime();
		}
		for (var i in this._items) {
			var item = this._items[i];
			var inScreen = this._inScreen(item.node);
			if (!item.seen) {
				if (inScreen) {
					item.wasInscreen = true;
					item.seenTO = item.seenTO || setTimeout(D.closure(this, this._seenItem, item), 300);
				} else if (item.seenTO) {
					clearTimeout(item.seenTO);
					item.seenTO = 0;
				}
			}
			if( D.ID && inScreen && !item._viewAdded ){
				item._inScreenTimeout = item._inScreenTimeout || setTimeout(D.closure(this, this._addView, item), 200);
			}else{
				clearTimeout(item._inScreenTimeout);
				item._inScreenTimeout = 0;
			}
			if (inScreen && item._event && item._event.onInScreen ){
				item._event.onInScreen();
			}
		}
		if (D.DEV && this.pg == 2) {
			//return;
		}
		var j = $(window);
		var h = j.scrollTop() + j.height();
		var morePos = D.position(this._moreButton);
		if (morePos.top && h + 800 >= morePos.top) {
			this.loadPage();
		}
	},

	showPosts:function(data){
		this._loadPageRe(data);
		this.resetScroll();
	},

	reset: function (  ) {
		for(var i in this._items) {
			if(this._items.hasOwnProperty(i)) {
				this._items[i].remove();
			}
		}
		this._items = {};
	},

	resetScroll: function(){
		if( this.withoutScroll ) {
			return;
		}
		if( D.Say.onScroll ){
			$(window).unbind( 'scroll', D.Say.onScroll );
		}
		D.Say.onScroll = D.closure( this, this._onScroll );
		if (this.autoscroll) {
			$(window).scroll( D.Say.onScroll );
		}
	},

	moreButton:function(){
		return mkE( {
			tag:'li',
			id:'sayMore',
			className:'more',
			els:[
				T.submitButton( {
					caption:D.Lang.get('Show more'),
					stretch:true,
					color:'link',
					onclick:D.closure( this, this.loadPage, true )
				} )
			]
		} );
	},

	loadPage:function(clicked){
		if( this._loading ){
			return;
		}
		this._loading = true;
		D.loadingOverlay( this._moreButton );
		var p = this.par.data || {};
		p.pg = ++ this.pg;
		if( p.pg > 2 ){
			var oldUrl = new Url;
			D.setUrlHash( '?pg=' + String( p.pg ) );
			if( this.method == 'likedPosts' ){
				D.setUrlHash( '?tab=6&pg=' + String( p.pg ) + '&ts=' + encodeURIComponent(this._lastTs) );
			}
			var newUrl = new Url();
			var s = Section._cache.get(oldUrl.href);
			if( s ){
				s.url = newUrl;
				s.scrollTop = $(window).scrollTop();
				Section._cache.del(oldUrl.href);
				Section._cache.set(newUrl.href, s);
			}
		}
		p.minPid = this._minPid;
		if( this.method == 'likedPosts' ){
			p.timestamp = this._lastTs;
		}
		if( this.method == 'todayPosts' ){
			var get = new Get();
			if( get.v('date') ){
				p.date = get.v('date');
			}
		}
		p.fakePage = this.fakePage;
		if( p.pg == 3 && this.smart && this.method == 'getFriendPosts' ){
			var total = 0;
			var seen = 0;
			var inscreen = 0;
			for( var i in this._items ){
				if( !this._items.hasOwnProperty(i) ){
					continue;
				}
				total++;
				if( this._items[i].seen ){
					seen++;
				}
				if( this._items[i].wasInscreen ){
					inscreen++;
				}
			}
			if( total ){
				var endTime = new Date().getTime();
				var time = 0;
				if( this._scrollStarted ){
					time = endTime - this._scrollStarted;
				}
				p.scrollStats = {
					total: total,
					seen: seen,
					inscreen: inscreen,
					width: window.innerWidth,
					height: window.innerHeight,
					time: time
				};
			}
		}
		this.rpc.send(
			this.method,
			p,
			this._loadPageRe,
			this
		);
		if( clicked === true ){
			this.rpc.send( 'stats', {key: 'say_load_more'}, D.doNothing );
		}
	},

	_loadPageRe:function(re){
//		if( window.sayMain && this.pg >= 2 ){
//			mkE( {
//				tag:'div',
//				id:'sayMiniAds' + this.pg
//			} ).append( this.node );
//			D.onLoad( 'Ads', D.closure( this, this._loadPageMiniAds, 'sayMiniAds' + this.pg ) );
//		}
        // atjaunojam sliidosa footera poziiciju
        var leftFooter = document.getElementById('leftFooter');
        if(leftFooter && leftFooter != null && (leftFooter && !leftFooter.T)) {
            leftFooter.style.bottom = (document.getElementById('marquee') ? '40px' : '10px');
        }

		var st = new Date().getTime();
		if( re.users ){
			O2O( D.Say.users, re.users );
		}
		D.removeLoadingOverlay( this._moreButton );
		var item;
		this.userSkins = this.userSkins || {};
		for( var i in re.items ){
			var r = re.items[i];
			this._minPid = ( this._minPid ? Math.min( this._minPid, r.id ) : r.id );
			if( r.uid == D.ID && r.event && r.event.type == 37 ){
				this.userSkins[ r.event.id ] = true;
			}
		}
		var fakePageCount = false;
		for( var i in re.items ){
			// Izvadam fake itemu
			if( re.fake && re.fake.data && re.fake.positions && typeof re.fake.positions[i] != "undefined" ){
				if( !empty(re.fake.users) ){
					O2O(D.Say.users, re.fake.users);
				}
				if (!fakePageCount) {
					this.fakePage = re.fake.fakePage + 1;
					fakePageCount = true;
				}
				switch(re.fake.type){
					case 1:
						var pigsort = re.fake.data[re.fake.positions[i]];
						if( !pigsort.count ){
							break;
						}
						var firstItem = reset(pigsort.items);
						if( !firstItem ){
							break;
						}
						// Pigsorta items jau ir feedā, skipojam
						if( firstItem.extra && firstItem.extra.sayItem && this._items[firstItem.extra.sayItem.id] ){
							D.Say.rpc.send('stats', {key: 'pigsort_seen'});
							break;
						}
						// Pigsortam ir runā - attēlojam kā runā ierakstu
						if(firstItem.extra && firstItem.extra.sayItem){
							var pigsortSay = firstItem.extra.sayItem;
							if( this._items[ pigsortSay.id ] ){
								break;
							}
							this._ids[ pigsortSay.id ] = true;
							pigsortSay.pigsort = {
								friendsCount: pigsort.friendCount,
								friends: pigsort.friends,
								type: pigsort.type,
								id: firstItem.id
							};
							item = new D.SayItem( pigsortSay, this );
							if( !item.ok ){
								break;
							}
							item.append( this.node );
							break;
						}
						if( !D.SayPigsort.types[pigsort.type] ){
							break;
						}
						var pigsortItem = new D.SayPigsort.types[pigsort.type](firstItem, {
							friendsCount: pigsort.friendCount,
							friends: pigsort.friends,
							type: pigsort.type,
							id: firstItem.id
						}, this);
						pigsortItem.append(this.node);
						break;
					case 2:
						var fakeRate = re.fake.data;
						if(fakeRate.pictures.length){
							var fakeRateItem = new D.SayFakeRate(fakeRate, this);
							fakeRateItem.append(this.node);
						}
						break;
					case 3:
						var pymkUids = re.fake.data;
						if( empty(pymkUids.items) ){
							break;
						}
						new D.Say.FakePYMK(pymkUids, this).append(this.node);
						break;
					case 5:
						var zinasRe = re.fake.data;
						if( empty(zinasRe.re.items) ){
							break;
						}
						new D.Say.FakeZinas(zinasRe, this).append(this.node);
						break;
				}
			}
			// Izvadam fake gifts
			if( re.fakeGifts && re.fakeGifts.type === 6 && re.fakeGifts.data && re.fakeGifts.positions && typeof re.fakeGifts.positions[i] != "undefined" ) {
				if( !empty(re.fakeGifts.users) ) {
					O2O(D.Say.users, re.fakeGifts.users);
				}
				if( !fakePageCount ) {
					this.fakePage = re.fake.fakePage + 1;
					fakePageCount = true;
				}
				if( !re.fakeGifts.data.GetJubilars ) {
					break;
				}
				new D.Say.FakeGifts(re.fakeGifts.data.GetJubilars, this).append(this.node);
			}
			try {
				var itemCount = parseInt(i);
				if (D.Ads && D.Ads.outsideLV && (itemCount == 1 || itemCount == 10) && this.type != 'groups') {
					var outsideHighlightNode = mkE({
						tag: 'li'
					}).append(this.node);
					D.Ads.RTBSayHighlight(outsideHighlightNode);
				} else if( D.Ads && this.type === 'groups' ) {
					if( itemCount === 5 && this.pg % 2 === 1 ) {
						try {
							var adNode = mkE({
								tag: 'li',
								className: 'SayItem'
							}).append(this.node);
							new D.Ads.AdSense({
								adNode: adNode,
								adSlot: 7008721396,
								adFormat: 'fluid',
								adLayoutKey: '-fb+5w+4e-db+86',
								placeId: 379,
								styleDisplay: 'block'
							});
						} catch( e ) {
							if( D.DEV ) {
								console.error(e);
							}
						}
					}
				}
			} catch (e) {

			}

			var r = re.items[i];
			// skipojam, ja draugs uzlicis tādu pašu ādiņu
			if( r.uid != D.ID && r.event && r.event.type == 37 && this.userSkins[ r.event.id ] ){
				continue;
			}
			if( this._items[ r.id ] ){
				continue;
			}
			if( r.pids ){ // grupēti vairāki posti.
				var cont = false;
				for( var k in r.pids ){
					var pid = r.pids[k];
					if( this._ids[pid] ){
						cont = true;
						break;
					}
					this._ids[pid] = true;
				}
				if(cont){
					continue;
				}
			}
			this._ids[ r.id ] = true;
			item = new D.SayItem( r, this );
			if( !item.ok ){
				continue;
			}
			if( this.method == 'todayPosts' ){
				var date = new Date(r.ts * 1000);
				var year = date.getFullYear();
				if( this._todayPrevYear != year ){
					this._todayPrevYear = year;
					mkE({
						tag: 'li',
						className: 'yearSep',
						text: year
					}).append(this.node);
				}
			}
			if(this.type != 'groups') {
				if (this.method == 'getUserPosts' && this.pg == 1 && !r.seen) {
					if (!this.unseenNode) {
						this.unseenNode = mkE({
							tag: 'li',
							className: 'unseenSep'
						}).append(this.node);
						this.unseenCount = 0;
					}
					this.unseenCount++;
					if (this.unseenCount > 10) {
						setNodeText(this.unseenNode, D.Lang.get('10plus_unseen_posts'));
					} else {
						setNodeText(this.unseenNode, D.Lang.nget(this.unseenCount, 'unseen_posts'));
					}
				} else if (this.method == 'getUserPosts' && r.seen && this.unseenNode && !this.seenNode) {
					this.seenNode = mkE({
						tag: 'li',
						className: 'unseenSep',
						text: D.Lang.get('seen_posts')
					}).append(this.node);

					if (this._lastUnseen) {
						addClassName(this._lastUnseen.node, 'SayItemLastUnseen');
					}
				}
			}
			if( !r.seen ){
				this._lastUnseen = item;
			}
			item.append( this.node );
			if( r.moreUser ){
				var more = [];
				for( var k in r.moreUser ){
					var data = r.moreUser[k];
					var childItem = new D.SayItem( data, this );
					more.push(childItem);
					if( data.eventHTML ){
						evalScriptHTML( data.eventHTML, childItem );
					}
				}
				if(more.length) {
					var group = new D.SayGroup({
						user: D.Say.getUser(r.lastUid),
						childs: more
					}, this);
					group.append(this.node);
				}
			}
			if( r.moreType ){
				var more = [];
				for( var k in r.moreType ){
					var data = r.moreType[k];
					var childItem = new D.SayItem( data, this );
					more.push(childItem);
					if( data.eventHTML ){
						evalScriptHTML( data.eventHTML, childItem );
					}
				}
				var group = new D.SayGroup( {
					childs:more
				}, this );
				group.append( this.node );
			}
		}

		if( this.type == 'groups' ){
			D.store.remove('items', 'menuG' + D.LANG + D.JS);
			D.MMenu.dropDowns();
		}

		if( re.fullPg ){
			this._moreButton.append( this.node );
		} else {
			this._moreButton.remove();
		}
		// kaut kāds magick
		for( var i in re.items ){
			var data = re.items[i];
			var item = this._items[ data.id ];
			if( data.eventHTML ){
				evalScriptHTML( data.eventHTML, item );
			}
			if( data.embed && data.embed.html ){
				evalScriptHTML( data.embed.html, item );
			}
		}
		D.console.info( 'Say: ' + String( new Date().getTime() - st ) );
		this._loading = false;
		this.onLoad(re);
		if( this.emptyText && this.pg == 1 && empty( re.items ) ){
			if( this.method == 'getFavorites' ){
				mkE( {
					tag:'div',
					className:'infoGrayIcon sayNoFav',
					els:[
						{
							tag:'p',
							className:'color2',
							innerHTML:this.emptyText
						},
						{
							tag:'img',
							src:D.PIMG + 'say/img/star.jpg'
						}
					]
				} ).append( this.node );
				return;
			}
			this._emptyTextNode = T.info( this.emptyText ).append( this.node );
		}
		if( this.method == 'likedPosts' ){
			this._lastTs = re.timestamp;
		}
		this.checkGIFs();
	},

	_loadPageMiniAds:function(id){
		D.Ads.MiniAds.createItem( {
			id: id,
			placeId: 1,
			placeType: "frontpage",
			containerTheme: "frontpage",
			itemCount: 1,
			className: '',
			lateInit: false,
			previewData: [],
			previewScrollInto: false
		} );
	},

	// jauns events no čata
	_newPostItem:function(par){
		var $say = this;
		if( !this._newItems ){
			var $newItem = this._newItems = {
				node:mkE( {
					tag:'li',
					className:'SayNewMsgs',
					els:[
					]
				} ),
				childs:[],
				removeById:function(id){
					for( var k in this.childs ){
						if( !this.childs.hasOwnProperty(k) ){
							continue;
						}
						var item = this.childs[k];
						if( item.par.id == id ){
							this.childs.splice( k, 1 );
							break;
						}
					}
					this.update();
				},
				update:function(){
					clearNode( this.node );
					var c = count( this.childs );
					if(!c){
						var ph = (document.documentElement.scrollHeight || document.body.scrollHeight) - (document.documentElement.scrollTop || document.body.scrollTop);
						this.node.remove();
						$(window).scrollTop((document.documentElement.scrollHeight || document.body.scrollHeight) - ph);
						return;
					}
					var a = mkE( {
						tag:'a',
						text:D.Lang.nget( c, 'say new msgs', 'xGlobal' ).replace( 'COUNT', c ),
						className:'radius3',
						prop:{
							onclick:function(){
								$('html,body').animate({scrollTop: D.position(this.parentNode).top - 200});
								if($say.pg != $say.initialPg) {
									$($say.node).children().not('.SayForm,.SayNewMsgs,.SayFormNew').remove();
									$say._items = {};
								}
								for( var k in $newItem.childs ){
									var item = $newItem.childs[k];
									D.insertAfter( item.node, $newItem.node );
									$( item.node ).hide().slideDown();
								}
								$newItem.node.remove();
								delete $say._newItems;
								$say.rpc.send('stats', {key: 'new_say_items'});
								if($say.pg != $say.initialPg) {
									$say.pg--;
									$say.loadPage();
								}
							}
						}
					} ).append( $newItem.node );

					var ph = (document.documentElement.scrollHeight || document.body.scrollHeight) - (document.documentElement.scrollTop || document.body.scrollTop);

					//T.info( [a] ).append( $newItem.node );
					if( $say.form ){
						D.insertAfter( $newItem.node, $say.ad ? $say.ad.node : $say.form.node );
					} else {
						D.insertBefore( $newItem.node, $say.node.firstChild );
					}

					$(window).scrollTop((document.documentElement.scrollHeight || document.body.scrollHeight) - ph);

					var elementPosition = D.position(a);
					scrollFunc = function(){
						if(D.position(window).y > elementPosition.top - 55){
							a.style.position = 'fixed';
							a.style.top = '55px';
							a.style['z-index'] = '10';
							a.style.width = '488px';
						} else {
							a.style.position = 'static';
							a.style['z-index'] = '1';
							a.style.top = '';
						}
					};
					scrollFunc();
					window.addEventListener("scroll", scrollFunc);
				}
			};
		}
		var item = new D.SayItem( par, this );
		this._newItems.childs.push( item );
		if( this._newItems.childs.length > 60 ){
			this._rtLimit = true;
			this._newItems.childs.splice( 0, 1 );
		}
		this._newItems.update();
	},

	newPost:function(data){
		if( this.disableNewItems ) {
			return;
		}
		if( !data.id ){
			return;
		}
		if( this._rtLimit ){
			return;
		}
		this.rpc.send(
			'rtPost',
			{
				id:data.id
			},
			function(re){
				if( !re.item ){
					return;
				}
				O2O( D.Say.users, re.users );
				if( this._items[ re.item.id ] ){
					D.console.info( 'Skip post: ' + String( re.item.id ) );
					return;
				}
				for( var k in D.Say.profiles ){
					if( re.item.uid == D.Say.profiles[k].id ){
						return;
					}
				}
				D.console.info( re.item.uid );
				if( this.method != 'getFriendPosts' && re.item.uid != D.Say.UID ){
					return;
				}
				this._newPostItem( re.item );
			},
			this
		);
	},

	// jauns ieteukums
	newRecommend:function(data){
		var $say = this;
		if( this._items[ data.parentId ] ){
			return;
		}
		if( !data.id ){
			return;
		}
		if( this._rtLimit ){
			return;
		}
		setTimeout( function(){
			$say.rpc.send(
				'rtRec',
				{
					parentId:data.parentId,
					id:data.id,
					uid:data.uid
				},
				function(re){
					if( !re.parentItem ){
						return;
					}
					O2O( D.Say.users, re.users );
					if( !this._items[ re.parentItem.id ] ){
						this._newPostItem( re.parentItem );
					}
				},
				$say
			);
		}, Math.random() * 500 );
	},
	checkGIFs: function(){
		function isElementVisible(el) {
			var vpWidth = window.innerWidth || document.documentElement.clientWidth;
			var vpHeight = window.innerHeight || document.documentElement.clientHeight;

			if (typeof el.getBoundingClientRect === 'function') {
				var rec = el.getBoundingClientRect();
				var tViz = rec.top >= 0 && rec.top < vpHeight;
				var bViz = rec.bottom > 0 && rec.bottom <= vpHeight;
				var lViz = rec.left >= 0 && rec.left < vpWidth;
				var rViz = rec.right > 0 && rec.right <= vpWidth;
				var vVisible = tViz && bViz;
				var hVisible = lViz && rViz;

				return vVisible && hVisible;
			}
			return false;
		}
		for( var i in this.gifs ){
			if( !this.gifs.hasOwnProperty(i) ){
				continue;
			}
			var gif = this.gifs[i];
			var visible = isElementVisible(gif._body);
			if( visible && !this.playingGifs[gif.id] ){
				if ( isset(gif._vine)) {
					this.startVineVideo(gif);
				}
				else if ( isset(gif._youtubeAd) ) {
					this.startYoutubeAd(gif);
				} else {
					this.startGIF(gif);
					D.Say.rpc.send("addGifView", {
						pid: gif._event.event.item.id,
						uid: D.ID
					});
				}
				this.playingGifs[gif.id] = true;
			}else if( !visible && this.playingGifs[gif.id] ){
				this.stopGIF(gif);
				delete this.playingGifs[gif.id];
			}
		}
	},
	startGIF: function(gif){
		var matches = gif._event.event.item.image.say.match(/(.*\/gallery_gif\/[0-9]{3}\/[0-9]{3}\/).*(_([0-9]+)_)/);
		if( !matches || matches.length != 4 ){
			return;
		}
		var gif_src = matches[1] + matches[3] + '.mp4';
		var item = $(".MosaicItem", gif._body);
		gif.player = mkE({
			tag: 'video',
			className: 'extGIFPlayer',
			attr: {
				src: gif_src,
				autoplay: true,
				loop: true,
				poster: gif._event.event.item.image.say
			},
			style: {
				maxWidth: '100%',
				height: item.height() + 'px'
			}
		});
		item.find("img").hide().after(gif.player);
		item.parent().find(".sayGalleryVideo").hide();
		item.parent().find(".MosaicLinks a").css({background: "none"});
	},
	stopGIF: function(gif){
		gif.player.remove();
		var item = $(".MosaicItem", gif._body);
		item.find("img").show().after(gif.player);
		item.parent().find(".sayGalleryVideo").show();
		item.parent().find(".MosaicLinks a").css({background: "initial"});
		removeNode( gif.player );
		item.parent().find(".MosaicLinks").show();
	},
	startYoutubeAd: function(gif){
		var matches = gif.link.match(/\?v=([A-Za-z0-9_-]+)/);
		if ( matches.length != 2 ) {
			return;
		}

		if ( !isset( this._ytApiInit ) ) {
			var tag = document.createElement('script');
			tag.src = "//www.youtube.com/player_api";
			var firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
			this._ytApiInit = true;

			window.onYouTubeIframeAPIReady = function() {
				var player;
				player = new YT.Player('ytplayerAd', {
					events: {
						onReady: function() {
							player.mute();
						}
					}
				});
			}
		}

		var item = $(".MosaicItem", gif._body);
		gif.player = mkE({
			tag: 'iframe',
			id: 'ytplayerAd',
			attr: {
				width: 416,
				height: 276,
				src: 'https://www.youtube.com/embed/'+ matches[1] +'?rel=0&autoplay=1&controls=1&showinfo=0&enablejsapi=1',
				frameborder: 0
			}
		});
		item.find("img").hide().after(gif.player);
		item.parent().find(".sayGalleryVideo").hide();
		item.parent().find(".MosaicLinks").hide();
	},
	startVineVideo: function(gif) {
		var item = $(".MosaicItem", gif._body);
		gif.player = mkE({
			tag: 'div',
			style: {
				width: '100%',
				height: '100%'
			},
			els: [
				{
					tag:'iframe',
					attr:{
						frameborder: '0',
						width:'100%',
						height:'100%',
						src:gif._event.event.item.embed.src + '?audio=0',
						allowFullScreen:'',
						webkitAllowFullScreen:'',
						mozallowfullscreen:''
					}
				},
				{
					tag: 'script',
					attr: {
						src: '//platform.vine.co/static/scripts/embed.js',
						async: true
					}
				}
			]
		});
		item.find("img").hide().after(gif.player);
		item.parent().find(".sayGalleryVideo").hide();
		item.parent().find(".MosaicLinks a").css({background: "none"});
	}
}; // D.Say


D.Say.recommend = function( title, link, titlePrefix, text, closeFn, el, par ){
	par = par || {};
	D.Say.rpc.async = false;
	if( link && link[0] == '/' && link[1] != '/' ){
		link = 'http://' + document.location.host + link;
	}
	var linkInfo = {
		titlePrefix:( titlePrefix || D.Lang.get('title') ),
		title:( title || document.title ),
		href:( link || document.location.href ),
		picUrl:( par.picUrl || '' )
	};
	D.Say.rpc.send(
		'getProfilesAndRecommend',
		linkInfo,
		function(re){
			if( !D.ID || !re.ID ){
				D.Say.recommendAuth(arguments);
				return;
			}
			if(!re.users){
				return;
			}
			var smallPopUpParams = {
				width:450,
				dragable:true,
				title:D.Lang.get('Recommend')
			};
			if(par.mouseX && par.mouseY && par.container){
				smallPopUpParams.x = par.mouseX + $('#' + par.container).offset().left;
				smallPopUpParams.y = par.mouseY + $('#' + par.container).offset().top - $(window).scrollTop();
			}
			D.smallPopUp.html( '', smallPopUpParams);
			if( re.pid ){
				T.success( [
					D.Lang.get('You recommended this'),
					' ',
					{
						tag:'a',
						text:D.Lang.get('cancel'),
						prop:{
							onclick:function(){
								D.smallPopUp.close();
								D.Say.rpc.send(
									'delete',
									{
										pid:re.pid
									},
									function(){
									}
								);
								if(el){
									var c = Number( $( '.recCMid', el ).html() );
									if(c){
										$( '.recCMid', el ).html( c - 1 );
									}
								}
							} // onclick
						}
					}, // a
					'?'
				] ).append( D.smallPopUp.content );
				if( el && re.count ){
					$( '.recCMid', el ).html( re.count );
				}
			}
			var form = new D.SayForm( {
				tag:'div',
				profiles:re.users,
				withoutAudience:true,
				linkInfo:linkInfo,
				defaultText:( D.Lang.exists('say add comment') ? D.Lang.get('say add comment') : ' ' ),
				onSend:function(){
					clearNode( D.smallPopUp.content );
					T.success( D.Lang.get('You recommended this') ).append( D.smallPopUp.content );
					if( par.callback ){
						par.callback();
					}
					setTimeout( function(){
						D.smallPopUp.close();
					}, 2000 );
					D.Say.rpc.send(
						'getLinkRecCount',
						linkInfo,
						function(re){
							if( el && re.count ){
								$( '.recCMid, .recCount', el ).html( re.count );
							}
						}
					);
				},
				addContent:re.pid || false,
				friendUser: this.friendUser,
				disableOnBeforeUnload: true
			} );
			if( !empty(text) ){
				form._editor.value( htmlspecialchars(text) );
			}
			form.append( D.smallPopUp.content );
			D.smallPopUp.content.style.overflow = 'visible';
			D.smallPopUp.move();
		},
		this
	);
};

D.Say.recommendPost = function( pid, par ){
	par = par || {};
	par.callback = par.callback || function(){};
	par.uid = par.uid || D.ID;
	if( !par.uid ){
		return;
	}

	D.Say.rpc.send(
		'recommend',
		{
			pid: pid,
			uid: par.uid
		},
		D.closure( this, this._recommendPost, par )
	);
};

D.Say._recommendPost = function( par, re ){
	par.callback(re);
};

D.Say.cancelRecommend = function( pid, par ){
	par = par || {};
	par.callback = par.callback || function(){};
	D.Say.rpc.send(
		'cancelRecommend',
		{
			pid: pid
		},
		D.closure( this, this._cancelRecommend, par )
	);
};

D.Say._cancelRecommend = function( par, re ){
	par.callback(re);
};

D.Say.recommendAuth = function(arg){
	var href = '/say/ext/login.php';
	var w = window.open( href, 'draugiemSayLogin', 'location=1,status=1,scrollbars=0,resizable=0,width=600,height=400' );
	w.focus();
	var interval = setInterval( function(){
		if( !w.closed ){
			return;
		}
		clearInterval(interval);
		D.reload();
	}, 100 );
};

D.Say.galleryAlbum = function( aid, event ){
	D.onLoad( 'Gallery', function(){
		D.Gallery.otherUserAlbum( aid, {infoBox:true}, event )
	} );
	return false;
};

D.Say.showCategories = function(par){
	par =  par || {};
	var close = function(){
		//rq( '/say/main_top.php', 'sayMainTop', { replace:true, overlay:true } );
	};
	var url = '/say/rq/cats.php?';
	InfoBox.open( url, {
		width:400,
		onClose:close
	} );
	return false;
};

D.Say.setCategory = function(){
	var cbx = $('#sayCats input');
	var cats = [];
	cbx.each( function(){
		if( !this.checked ){
			return;
		}
		cats.push( {
			cat:this.value.split(',')[0],
			lv:this.value.split(',')[1] == '1'
		} );
	} );
	this.rpc.send(
		'setCategory',
		{
			cats:cats
		},
		function(){
			if( $('#sayMainTop').length ){
				rq( '/say/main_top.php', 'sayMainTop', { replace:true, overlay:true } );
			}
		}
	);
	if( empty(cats) ){
		cbx.each( function(){ this.checked = true; } );
	}
};

D.Say.changeBl = function(){ // ac events
	D.Say.rpc.send(
		'setBl',
		{
			domains:this.value()
		},
		function(){
			if( $('#sayMainTop').length ){
				rq( '/say/main_top.php', 'sayMainTop', { replace:true, overlay:true } );
			}
		}
	);
};

D.Say.delFromTop = function( el, id, firstpage ){
	this.rpc.send(
		'delFromTop',
		{
			id:id
		},
		function(){
			if(firstpage){
				D.reload();
			}
		}
	);
	$(el).closest('.sayTopBlock').fadeOut();
	return false;
};

/* +++ D.SayGroups +++ */
D.SayGroup = function( par, say ){
	var $group = this;
	this.par = par;
	//D.console.info( par.user );
	var c = count( this.par.childs );
	var caption;
	if( par.user ){
		caption = D.Lang.get('say user more').replace( 'COUNT', c ).replace( 'USER', htmlspecialchars_decode( par.user.title ) );
	} else {
		caption = D.Lang.nget( c, 'say n other' ).replace( 'COUNT', c );
	}
	this.node = mkE( {
		tag:'li',
		className:'sayMoreUser',
		els:[
			T.cbx( {
				caption:caption,
				onclick:function(){
					$group.show();
				}
			} )
		]
	} );
};

D.SayGroup.prototype = {

	toString:function(){
		return 'SayGroup';
	},

	append:function(parent){
		this.node.append(parent);
		return this;
	},

	show:function(){
		var item;
		var node = this.node;
		for( var k = 0; k < this.par.childs.length; ++ k ){
			item = this.par.childs[k];
			D.insertAfter( item.node, node );
			$( item.node ).hide().slideDown();
			node = item.node;
		}
		this.node.remove();
	}

};
/* --- D.SayGroups --- */

/* +++ D.SayBlockedUser +++ */
D.SayBlockedUser = function( user, item ){
	this.item = item;
	this.user = user;
	var $blockedUser = this;
	this.node = mkE( {
		tag:'li',
		className:'SayInfoBx',
		els:[
			{
				tag:'a',
				href:user.url,
				text:htmlspecialchars_decode( user.title )
			},
			' ',
			D.Lang.get('say blocked user'),
			'.',
			(user.isBusiness ? (' ' + D.Lang.get('say_dont_follow_page_anymore') + '.') : '' ),
			{
				tag:'br'
			},
			{
				tag:'a',
				text:D.Lang.get('cancel'),
				prop:{
					onclick:function(){
						$blockedUser.unblock();
					}
				}
			},
			{
				tag:'span',
				className:'dot',
				prop:{
					innerHTML:'&middot;'
				}
			},
			{
				tag:'a',
				text:D.Lang.get('say show blocked users'),
				href:'/account/?tab=5&sub=2'
			}
		]
	} );
};

D.SayBlockedUser.prototype = {

	unblock:function(){
		D.Say.rpc.send(
			'unblock',
			{
				uid:this.user.id,
				isWatching:this.user.isWatching
			},
			function(re){
			},
			this
		);
		this.node.remove();
		this.item.node.style.display = '';
	}

};
/* --- D.SayBlockedUser --- */

// +++ Say +++
var Say = {

	rpc:new RPC( '/say/rq/app.php' ),

	/*recommend:function( el, pid ){
		var profiles = D.store.get( 'profiles', 'say' );
		if( profiles === null || D.store.get( 'profilesTS', 'say' ) < ( new Date() ).getTime() - 3600*1000 ){
			this.rpc.send(
				'profiles',
				{},
				function( re ){
					if( re.users ){
						D.store.set( 'profiles', re.users, 'say' );
						D.store.set( 'profilesTS', ( new Date() ).getTime(), 'say' );
					}
					if( count( re.users ) ){
						return this.showRecommend( el, pid, re.users );
					} else {
						return this.doRecommend( el, pid );
					}
				},
				this
			);
			return false;
		}
		if( count( profiles ) ){
			return this.showRecommend( el, pid, profiles );
		}
		this.doRecommend( el, pid );
		return false;
	},

	doRecommend:function( el, pid, uid ){
		el.setAttribute( 'onclick', '' );
		el.onclick = function(){};
		el.href = '/say/?pid=' + pid;
		this.rpc.send(
			'recommend',
			{
				pid:pid,
				uid:uid || D.ID
			},
			function( re ){
				el.innerHTML = D.Lang.get( 'Recommends', 'xGlobal' ) + ': <span class="color1">' + re.recCount + '</span>';
			}
		);
	},*/

	voteSong:function(id, pid, nonce) {
		var post = $('#sayPost'+pid);
		D.loadingOverlay('sayPost'+pid);

		$.post('/music/rq/post.php?'+nonce, {task:'song_vote',sid:id}, function(){
			post.find('.rqOverlay').remove();
			post.find('#voteIcon'+pid).remove();
		} );
	},

	slideShow:function( aid, pid, par ){
		par = par || {};
		if( D.browser.mobile ){
			return;
		}
		var cb = function(aid, pid, par){
			//var ss = new D.Gallery.SlideShow( aid, 0 );
			//D.setUrlHash( '/gallery/?pid=' + pid );
			var p = {
				autoPlay: true,
				fromSay: true
			};
			if( !empty(pid) ){
				p.pid = pid;
			}else if( !empty(aid) ){
				p.aid = aid;
			}else{
				return;
			}
			if( par.stats ){
				p.stats = par.stats;
			}
			if( par.startTime ){
				p.startTime = par.startTime;
			}
			if( par.comId ){
				p.comId = par.comId;
			}
			if( par.sayClick ){
				D.Say.click(par.sayClick);
			}
			D.GalleryFS.open(p);

			/*var url = '/gallery/?pid=' + pid + '&f_say&autoplay';
			if( D.Gallery && D.Gallery._reply ){
				url += ( '&com_id=' + D.Gallery._reply );
				D.Gallery._reply = 0;
			}
			InfoBox.open( url, {
				modal:true,
				width:980,
				className:'gallery',
				onClose:function(){
					D.setUrlHash('...');
				}
			} );*/
		};
		D.onLoad( ['Gallery', 'GalleryFS', 'Comments'], D.closure(this, cb, aid, pid, par) );
		return false;
	},

	worec:function(v){
		var form = document.getElementById('sayAddForm');
		//var ul = $('ul.sayList')[0];
		rq( '/say/main.php?worec=' + ( v ? '1' : '0' ), 'sayMain', {
			overlay:true,
			hash:false
		} );
		return false;
	},

    showBlog:function( id, url ){
        Section.navigate(url);
        return false;
    },

	changeUworec: function(fid, checked) {
		rq( '/say/user.php?fid=' + fid + '&uworec=' + Number( !checked ), 'sayFriend', {
			overlay: true,
			hash: false,
			onload: function(){
				if( typeof D.Events != 'undefined' && typeof D.Events.discussionForm != 'undefined'){
					D.Events.changeUworec();
				}
			}
		} );
		D.Say.frWithoutRecommends = (checked == 1 ? 0 : 1);
	}

};

D.Say.hashTagReplace = function(node){
	D.replaceWithNode( node, /#([a-zA-Z0-9ā-žĀ-Žа-яА-Я_]{1,}(\.[a-z]{2,3}([ \n\t]|$))?)/g, D.closure( this, this._hashTagReplace ), {ignoreLinks: true} );
};

D.Say._hashTagReplace = function(m){
	return mkE( {
		tag:'a',
		text:m[0],
		href:'/?' + ( new Get({}).add( 'hashTag', m[1] ) ) + '#SayMain',
		prop:{
			onclick:D.closure( this, this._hashTagClick, m )
		}
	} );
};

D.Say._hashTagClick = function(m){
	this.searchHashTag( m[1] );
	return false;
};

D.Say.searchHashTag = function(tag){
	if( window.sayMain ){
		InfoBox.close();
		window.sayMain.searchHashTag(tag);
		D.scrollIntoView( $('#SayMain')[0] );
		return;
	}
	document.location = '/?' + ( new Get({}).add( 'hashTag', tag ) ) + '#SayMain';
};

D.Say.mainTopTest = function() {
	this.rpc.send(
		'topLinkTest',
		{

		});
};

D.Say.link = function(url, pid){
	var get = new Get(url);
	if( url.indexOf('/stats/click.php') === 0 ){
		get.add('say_pid', pid);
		return get.toUrl();
	}
	if( url.indexOf('/say/click.php') === 0 ){
		if( !get.v('pid') ){
			get.add('pid', pid);
		}
		return get.toUrl();
	}
	get = new Get('/say/click.php');
	get.add('url', url);
	get.add('pid', pid);
	return get.toUrl();
};

D.Say.clicked = {};
D.Say.click = function(pid){
	if( D.Say.clicked[pid] ){
		return;
	}
	D.Say.clicked[pid] = true;
	D.onLoad('DR.say', function(){
		var m = new DR.say.Click();
		m.pid = pid;
		m.call();
	});
};

D.loaded('Say');

// --- say.js ---

// +++ form.js +++
/*
par = {
	onSend:[function],
	tag:[string=li],
	defaultText:[string=Es šobrīd...],
	pid:[int] - parent id,
	profilesSelect:[false] - profilu izvēlei parastais select
	profiles:[] - profilu izvele
	linkInfo:[{ prefix, title, link }], // var overraidot vēl vienu paramu - skipFirstLink
	insertSmileyPopup:[false] - atver smailiju ievietošanu no popup
	withoutAudience:[false]
}
*/
D.SayForm = function(par){
	//var doNothing = function(){};
	var $form = this;
	this.par = par;
	this.withoutAudience = par.withoutAudience || false;
	this.disableOnBeforeUnload = par.disableOnBeforeUnload || false;
	this.disablePostpone = par.disablePostpone || false;
	this.disablePermissions = par.disablePermissions || false;
	this.hideProfiles = par.hideProfiles || false;
	this.helpText = par.helpText || '';
	this.defaultPermission = D.PERM_ALL;
	this.profilesSelect = par.profilesSelect || false;
	if(typeof par.defaultPermission != 'undefined') {
		this.defaultPermission = par.defaultPermission;
	}
	this._postData = {};
	if( par.onSend ){
		this.onSend = par.onSend;
	}
	this._icons = {};
	this.friendUser = par.friendUser || {};
	var linkInfoEls = [];
	if( par.linkInfo ){
		linkInfoEls = [
			mkE( {
				tag:'a',
				text:par.linkInfo.title,
				prop:{
					href:par.linkInfo.href,
					target:'_blank'
				}
			} )
		];
	}
	this._linkInfoNode = mkE( {
		tag:'div',
		className:'SayEditorLinkInfo radius3top',
		els:linkInfoEls
	} );
	if( !par.linkInfo ){
		this._linkInfoNode.style.display = 'none';
	}
	this.node = mkE( {
		tag:par.tag || 'li',
		className:'SayForm',
		els:[
			this._profileIcon = T.icon( {
				image:D.me.image.icon
			} ),
			this._node = mkE( {
				tag:'div',
				className:'SayFormEditor radius3',
				els:[
					this._editorWrap = mkE( {
						tag:'div',
						className:'formItemBorder radius3top', // radius3bottom
						style:{
							position:'relative'
						},
						els:[
							this._linkInfoNode
						]
					} ) // formItemBorder
				]
			} ) // SayFormEditor
		]
	} );
	var defaultText = par.defaultText || D.Lang.get('Es šobrīd...');
	if( par.addContent ){
		defaultText = D.Lang.get('say add comment');
	}
	this._editor = new D.SayEditor( {
		defaultText:defaultText,
		onChange:D.closure( this, function(){
			this._checkForceReload();
			var len = this._editor.len();
			D.SayForm.setLen( this._spaceNode, len );
			/*var v = D.SayForm.LEN_MAX - len;
			if( v < 0 ){
				if( v <= -5 || this.blogPopup ){
					this._showBlogPopup();
				}
				return;
			} else {
				this._closeBlogPopup();
			}*/
			if( !this._editor.links.length ){
				delete this._link;
				this._linkInfoHide();
			} else if( this._link != this._editor.links[0]/* && this._editor.links[0].href != this._skipInfoLink*/ ){
				D.log( this._skipInfoLink, this._editor.links[0].href );
				this._linkRq = 0;
				this._link = this._editor.links[0];
				this._linkInfoShow();
			}
		} ),
		onFocus:D.closure( this, this._editorOnFocus ),
		onBlur:D.closure( this, this._editorOnBlur ),
		onCtrlEnter:D.closure( this, this.send ),
		onPaste:D.closure( this, this._editorOnPate ),
		sayUserReplace: par.sayUserReplace || false
	} );
	this._editor.append( this._editorWrap );
	//this._linkInfoNode.append( this._editorWrap );
	this._bottom = mkE( {
		tag:'div',
		className:'SayFormBottom formItemBorder radius3bottom',
		els:[
			{
				tag:'table',
				els:[
					{
						tag:'tbody',
						els:[
							mkE( {
								tag:'tr',
								els:[
									this._iconsNode = mkE( {
										tag:'td',
										className:'SayFormBottomIcon'
									} ),
									this._profilesNode = mkE( {
										tag:'td',
										attr:{
											width:( empty( par.profiles ) ? 150 : '' )
										}
									} ),
									mkE( {
										tag:'td',
										attr:{
											align:'right'
										},
										els:[
											this._loadingNode = mkE( {
												tag:'img',
												src:D.PIMG + 'say/img/form/loading.gif',
												style:{
													verticalAlign:'bottom',
													display:'none'
												}
											} ),
											this._spaceNode = mkE( {
												tag:'span',
												text:D.SayForm.LEN_MAX,
												style:{
													opacity:0
												}
											} )
										]
									} ),
									this._permNode = mkE( {
										tag:'td',
										attr:{
											align:'right'
										},
										els:[
											this._perm = new T.DropDownPerm( {
												value: this.defaultPermission,
												onchange:D.closure( this, this._permOnchange ),
												permWindow: par.permWindow
											} )
										]
									} ),
									this._postPoneNode = mkE({
										tag:'td',
										attr:{
											align:'right'
										},
										style:{
											display:'none'
										},
										els:[
											mkE({
												tag: 'span',
												className: 'icon calendarGrayAltIcon',
												text: ' '
											}),
											mkE({
												tag:'span',
												className:'ddMenu',
												els:[
													this._postPoneCaption = mkE({
														tag:'span',
														className:'ddMenuCaption',
														text: D.Lang.get('Ieplānot')
													})
												]

											})
										],
										prop:{
											onclick: D.closure(this, this._showCalendar)
										}
									}),
									this._buttonsNode = mkE( {
										tag:'td',
										attr:{
											align:'right'
										}
									} )
								]
							} ) // tr
						]
					} // tbody
				]
			} // table
		]
	} );
	if( empty(par.profiles) ){
		addClassName(this._bottom, 'noProfiles');
	}
	if( !D.LV ){
		this._permNode.remove();
	}
	if( par.buttons ){
		for( var k in par.buttons ){
			par.buttons[k].append( this._buttonsNode );
		}
	}
	this.submitButton = T.submitButton( {
		caption:D.Lang.get( par.addContent ? 'Add comment' : ( par.editContent ? 'edit' : 'Add post button' ) ),
		onclick:function(){
			$form.send();
		}
	} ).append( this._buttonsNode );
	//this._bottom.style.display = 'none';
	this._addIcons();
	if( par.profilesSelect || this.disablePermissions ){
		this._permNode.style.display = 'none';
	}
	if( !empty( par.profiles ) ){
		if( par.profilesSelect ){
			var select = T.Forms.select( {
				onchange:function(){
					var opt = this.options[ this.selectedIndex ];
					$form._userChange( opt._r );
				},
				size: 'small'
			} );
			var profiles = [];
			if ( empty( par.profilesSkipMy ) ) {
				profiles.push( D.me );
			}
			profiles = profiles.concat( par.profiles );
			if ( profiles.length && empty( par.uid ) ) {
				$form._userChange( profiles[0] );
			}

			for( var k in profiles ){
				var r = profiles[k];
				mkE( {
					tag:'option',
					text: htmlspecialchars_decode( r.title ),
					prop:{
						selected:( par.uid == r.id ),
						_r:r
					}
				} ).append(select);
			}
			select.append( this._profilesNode );
		} else {
			var p = {
				items:[],
				changeCaption:true,
				selectable:true,
				onclick:function(){
					$form._userChange( this._item.data );
				}
			};
			if ( empty( par.profilesSkipMy ) ) {
				p.items.push({
					caption:D.me.title,
					selected:par.uid == D.ID,
					data:D.me
				});
			}
			for( var k in par.profiles ){
				var r = par.profiles[k];
				if( par.uid == r.id ){
					$form._userChange(r);
				}

				p.items.push( {
					caption: r.title,
					data:r,
					selected:( par.uid == r.id )
				} );
			}
			var ddMenu = T.ddMenu(p);
			ddMenu.append( this._profilesNode );
			if (par.uid != D.ID && this._profilesNode.children[0] != undefined) {
				this._profilesNode.children[0].children[1].innerHTML = D.shorten(this._profilesNode.children[0].children[1].innerHTML, 8, '...');
			}
			if ( p.items.length && empty( par.uid ) ) {
				$form._userChange( p.items[0].data );
			}
		}
	}
	this._bottom.append( this._node );
	if( par.pid ){
		this.reply( par.pid );
	}
	if( par.showHelpText ){
		this._showHelpText();
	}
	if( !this.disableOnBeforeUnload ){
		$(window).bind('beforeunload', D.closure(this, this._onLeave));
	}
	if ( this.disablePostpone ) {
		this._postPoneNode.style.display = 'none';
	}
	if ( this.hideProfiles ) {
		this._profilesNode.style.display = 'none';
	}
};

D.SayForm.LEN_MAX = 50000;

D.SayForm.setLen = function( node, len ){
	var v = D.SayForm.LEN_MAX - len;
	if( v < 0 ){
		node.innerHTML = '<span class="color1">' + String(v) + '</span>';
		node.style.opacity = 1;
		return;
	}
	node.innerHTML = v;
	if( v > 50 ){
		node.style.opacity = 0;
	} else {
		node.style.opacity = ( 50 - v ) / 50
	}
};


D.SayForm.prototype = {

	toString:function(){
		return 'SayForm';
	},

	_showHelpText:function(){
		if( this._helpTextNode || !this.helpText ){
			return;
		}
		this._helpTextNode = T.info( this.helpText );
		D.insertBefore( this._helpTextNode, this._node.firstChild );
	},

	_editorOnFocus:function(){
		addClassName( this._editorWrap, 'formItemFocus' );
		if( !this.withoutAudience ){
			D.smallPopUp.close();
		}
		this._showHelpText();
	},

	_editorOnBlur:function(){
		removeClassName( this._editorWrap, 'formItemFocus' );
	},

	/**
	 * @param {Event} e
	 * @private
	 */
	_editorOnPate:function(e){
	},

	append:function(parent){
		this.node.append(parent);
		return this;
	},

	remove:function(){
		this.node.remove();
		return this;
	},

	_addIcon:function(par){
		var re = mkE( {
			tag:'a',
			className:par.icon + 'SayIcon SayFormIcon'
		} ).append( this._iconsNode );
		delete par.icon;
		O2O( re, par );
		return re;
	},

	_addIcons:function(){
		var $form = this;
		this._icon = {};
		if( !this.par.linkInfo || this.par.linkInfo.withUpload ){
			this._icons.addImage = this._addIcon( {
				icon:'addImage',
				onclick:function(){
					$form._editor._enable();
					var rpc = new RPC('/say/rq/app.php');
					rpc.send('stats', {key: 'say_image_upload'});
				}
			} );
			if( !this.canUpload() ){
				addClassName(this._icons.addImage, 'disabled');
				this._icons.addImage.setAttribute('title', D.Lang.get('gallery_upload_closed'));
			}
			$( function(){
				D.onLoad( 'Upload', function(){
					$form._initUpload();
				} );
			} );
		}
		this._addIcon( {
			icon:'addSmiley',
			onclick:function(){
				$form._editor._enable();
				if( $form.par.insertSmileyPopup ){
					var w = D.newWindow( '/say/ext/like_smiley.php', 'saySmileys', {
						resizable:false,
						scrollbars:false,
						toolbar:false,
						directories:false,
						width:310,
						height:400
					} );
					if( window.screen ){
						w.moveTo( screen.width / 2 - 200, screen.height / 2 - 173 );
					}
					/*
					var interval = setInterval( function(){
						if( w.closed ){
							clearInterval(interval);
							return;
						}
						try{
							w._sayForm = $form;
						} catch(e){
						}
					}, 100 );
					*/
					return;
				}
				D.insertSmiley( {
					fromSay: true,
					onclick:function( sm, src ){
						if( !$form._editor._contentEditable ){
							$form._editor.insertHTML( sm + ' ' );
							$form._checkForceReload();
							return;
						}
						//$form._editor.insertHTML( '<img src="' + src + '"  />&nbsp;' );
						$form._editor.insertHTML( '<span id="saySmiley">' + htmlspecialchars(sm) + '</span>' + '&nbsp;' );
						var saySmileyNode = document.getElementById('saySmiley');
						if( saySmileyNode ){
							saySmileyNode.id = '';
							if( saySmileyNode.previousSibling ){
								var saySmileyNodePrev = saySmileyNode.previousSibling;
								if( saySmileyNodePrev.nodeType == 3 && saySmileyNodePrev.nodeValue.length ){
									var lastChar = saySmileyNodePrev.nodeValue.substr( saySmileyNodePrev.nodeValue.length - 1, 1 );
									if( lastChar != ' ' && lastChar != D.SayEditor.SPACE ){
										saySmileyNodePrev.nodeValue += ' ';
									}
								}
							}
						}
						$form._checkForceReload();
					}
				} );
			}
		} );
		this._icons.audience = this._addIcon( {
			icon:'audience',
			style:{
				display:'none'
			},
			onclick:function(){
				D.smallPopUp.open( false, {title:'Mērķauditorija'}, '' );
				this.cbx = new T.Form.CheckBox({
					caption: '18+',
					type: 'checkbox',
					value: true,
					name: 'adult',
					className: 'custom-target-checkbox',
					onclick: D.closure(this, function() {
						if( this.cbx.value() ) {
							this.slider.from = 18;
							this.slider.to = 100;
							$form._postData.age = {
								from:18,
								to:100
							};
							this.slider.setPos({from: 18, to:100});
							return;
						}
						this.slider.from = 0;
						this.slider.to = 100;
						$form._postData.age = {
							from:0,
							to:100
						};
						this.slider.setPos({from: 0, to:100});
					}, this)
				}).append( D.smallPopUp.content );
				this.slider = new T.Forms.Slider( {
					caption:'Vecums',
					min:0,
					max:100,
					from:$form._postData.age ? $form._postData.age.from : 0,
					to:$form._postData.age ? $form._postData.age.to : 100,
					onChange: D.closure(this, function() {
						$form._postData.age = {
							from:this.slider.from,
							to:this.slider.to
						};
						if( this.slider.from > 0 || this.slider.to < 100 ){
							addClassName( $form._icons.audience, 'selected' );
						} else {
							removeClassName( $form._icons.audience, 'selected' );
						}

						if( this.slider.from != 18 ) {
							this.cbx._inputNode.checked = false;
							this.cbx._inputNode.value = false;
						}
						if( this.slider.from == 18 ) {
							this.cbx._inputNode.checked = true;
							this.cbx._inputNode.value = true;
						}
					})
				} );
				if( !$form._postData.sex ) {
					$form._postData.sex = 0;
				}
				this.options = [
					{
						caption: 'Abi',
						value: 0,
						checked: ( !$form._postData.sex ? true : ( $form._postData.sex == 0 ? true : false ) )
					},
					{
						caption: 'Vīrieši',
						value: 1,
						checked: ( !$form._postData.sex ? false : ( $form._postData.sex == 1 ? true : false ) )
					},
					{
						caption: 'Sievietes',
						value: 2,
						checked: ( !$form._postData.sex ? false : ( $form._postData.sex == 2 ? true : false ) )
					}
				];
				this.slider.appendTo( D.smallPopUp.content );
				this.radioList = new T.Form.RadioList({
					options: this.options,
					caption: 'Dzimums',
					className: 'radio-left',
					onchange: D.closure(this, function(){
						$form._postData.sex = this.radioList.value();
					})
				}).append(D.smallPopUp.content);
			}
		} );
	},

	canUpload: function() {
		return !D.GALLERY_CLOSED;
	},

	uploadClosed: function(){
		if( this._uploadClosedNotice ){
			this._uploadClosedNotice.remove();
		}
		this._uploadClosedNotice = T.info(D.Lang.get('gallery_upload_closed'));
		this._uploadClosedNotice.prepend(this.node);
	},

	_initUpload:function(){
		var $form = this;
		this._uploader = new Uploader( {
			caption:'',
			limit:1,
			DS:this.par.DS || false,
			dropNode:this.node,
			onInit:function(){
			},
			onInitTimeout:function(){
				$form._icons.addImage.remove();
			},
			onError:function(){
			},
			onSelect:function(par){
				if( !$form.canUpload() ){
					$form.uploadClosed();
					return;
				}
				var picExt = D.PIC_EXT;
				var videoExt = D.VIDEO_EXT;
				var extp = par.name.lastIndexOf('.');
				var ext = par.name.substr( extp + 1 ).toLocaleLowerCase();
				var url = false;
				var data;
				if( array_search( ext, picExt ) !== false ){
					$form._postData.file = 'pic';
					url = D.UPL + 'pic/upload.php';
					data = {
						id:'tmp',
						type:12
					};
				}
				if( array_search( ext, videoExt ) !== false ){
					$form._postData.file = 'video';
					url = D.VUPL + 'video/upload.php';
					data = {
						type:ext == 'gif' ? 16 : 8,
						say:true
					};
				}
				if(!url){
					alert( D.Lang.get( 'pic upload error2' ) );
					return false;
				}
				data[ D.nonce.name ] = D.nonce.value;
				if( $form._image ){
					$form._image.remove();
				}
				addClassName( $form._node, 'SayFormWithPic' );
				$form._image = mkE( {
					tag:'div',
					className:'SayFormImage',
					els:[
						$form._imageUploadProgress = mkE( {
							tag:'div',
							className:'SayFormImageProgress',
							els:[
								$form._imageUploadProgressC = mkE( {
									tag:'div'
								} )
							]
						} ),
						{
							tag:'a',
							className:'deleteIcon',
							prop:{
								onclick:function(){
									$form.delImage();
								}
							}
						}
					]
				} ).append( $form._editorWrap );
				this.upload( {
					id:par.id,
					url:url,
					data:data
				} );
				setTimeout( function(){
					$form.focus();
				}, 300 );
			},
			onUploadProgress:function(par){
				$form._imageUploadProgressC.style.width = Math.round( par.bytesLoaded / par.bytesTotal * 100 ) + '%';
			},
			onUploadCompleteData:function(par){
				$form._imageUploadProgress.style.display = 'none';
				par.data = D.JSON.decode( par.data );
				if( par.type == 'image/gif' && !par.data.tmpId ){
					$form._postData.file = 'pic';
				}
				if( $form._postData.file == 'pic' ){
					if( par.data.errorNr ){
						alert( D.Lang.get( 'pic upload error' + par.data.errorNr ) );
					} else if( par.data.id ){
						$form._image.style.backgroundImage = "url('" + par.data.urlIcon + "')";
						$form._postData.picTempId = par.data.id;
						if($form._postData.picId) {
							$form._postData.picDeleted = $form._postData.picId;
						}
						if( $form._linkInfoImgNode ){
							$form._linkInfoImgNode.style.display = 'none';
						}
						$form._checkForceReload();
						return;
					}
				}
				if( $form._postData.file == 'video' ){
					if( par.data.errorNr ){
						alert( D.Lang.get( 'video upload' + par.data.errorNr ) );
					} else if( par.data.tmpId ){
						$form._image.style.backgroundImage = "url('" + par.data.tempImage.icon + "')";
						$form._postData.videoTempId = par.data.tmpId;
						$form._postData.videoW = par.data.info.w;
						$form._postData.videoH = par.data.info.h;
						if( par.data.gif ){
							$form._postData.gif = true;
						}
						if($form._postData.picId) {
							$form._postData.picDeleted = $form._postData.picId;
						}
						if( $form._linkInfoImgNode ){
							$form._linkInfoImgNode.style.display = 'none';
						}
						$form._checkForceReload();
						return;
					}
				}
				$form.delImage();
			},
			onUploadIOError:function(){
			},
			onUploadSecurityError:function(){
			}
		} );
		this._uploader.append( this._icons.addImage );
	},

	delImage:function(){
		if( !this._image ){
			return false;
		}
		this._image.remove();
		removeClassName( this._node, 'SayFormWithPic' );
		delete this._postData.picTempId;
		delete this._postData.videoTempId;
		delete this._postData.file;
		delete this._postData.gif;
		if(this._postData.picId) {
			this._postData.picDeleted = this._postData.picId;
		}
		if( this._linkInfoImgNode ){
			this._linkInfoImgNode.style.display = ( this._linkInfoImgNode.src ? '' : 'none' );
		}
		this._checkForceReload();
	},

	clear:function(){
		this._postData = {
			uid:this._postData.uid || 0,
			perm:this._perm.value()
		};
		this.cancelPostpone();
		this._editor.value("");
		this.delImage();
		this.reply(false);
		removeClassName( this._icons.audience, 'selected' );
		delete this._noBlogPopup;
		delete this.seenBlogPopup;
	},

	focus:function(){
		this._editor.focus();
	},

	reply:function(pid){
		this._postData.pid = pid || this.par.pid || false;
		if( this._postData.pid ){
			this.delImage();
			$( this._icons.addImage ).hide();
			this._icons.audience.style.display = 'none';
			this._linkInfoHide();
		} else {
			$( this._icons.addImage ).show();
			this._icons.audience.style.display = ( this._icons.audience._visible ? '' : 'none' );
			this._linkInfoShow();
		}
		//D.smallPopUp.close();
		if( pid && pid != this.par.pid ){
			this._editor.focus();
		}
	},

	send:function(){
		if( this._editor.len() > D.SayForm.LEN_MAX + 7 ){
			alert( D.Lang.get('say text to long') );
			return;
		}
		if( this._uploader && this._uploader.ready && !empty( this._uploader.list() ) ){
			alert( D.Lang.get('say file not loaded') );
			return;
		}
		if( this.friendUser && trim(strip_tags(this._editor.value())) == '@' + this.friendUser.title ){
			if( !this._postData.link && !this._postData.picTempId && !this._postData.videoTempId ){
				D.blink( {
					node:this._editor.node,
					type:'background'
				} );
				return;
			}
		}
		if( this.par.linkInfo ){
			this._postData.link = this.par.linkInfo.href;
			this._postData.title = this.par.linkInfo.title;
			this._postData.skipFirstLink = this.par.linkInfo.skipFirstLink; // Var manuāli norādīt, vai jāatstāj pirmais links
			this._postData.picUrl = this.par.linkInfo.picUrl;
			this._postData._ext = true;
		}
		this._postData.html = this._editor.value();
		if( !this.par.linkInfo && !this._editor.len() && !this._postData.videoTempId && !this._postData.picTempId ){
			D.blink( {
				node:this._editorWrap,
				type:'background'
			} );
			return;
		}
		if( this.par.addContent ){
			this._postData.pid = this.par.addContent;
		}
		if( this.par.editContent ){
			this._postData.pid = this.par.editContent;
		}
		this._sending = true;
		D.loadingOverlay( this.node );
		var pDate = this.postponedate;
		var pPage = this._postData.uid;

		D.Say.rpc.send(
			this.par.addContent ? 'addContent' : (this.par.editContent ? 'edit' : 'addPost'),
			this._postData,
			function(re){
				if( this._errorNode ){
					this._errorNode.remove();
				}
				D.removeLoadingOverlay( this.node );
				this._sending = false;
				if( re.id ){
					O2O( D.Say.users, re.users );
					this.clear();
					this.onSend(re);
					Section.forceReload = false;
					try {
						if (D.Say.users[D.Say.UID].type == D.USER_TYPE_BIZ && re.item.pro && $('.sayList .SayItem').length <= 2) {
							setTimeout(function() {
								T.tour.crop("#sayPost" + re.id + " .customBrandSay", {
									tourText: D.Lang.get('say_add_highlight_tour'),
									position: 'top'
								});
							}, 1000);
						}
					}
					catch(e) {
					}
				}
				if( re.error ){
					switch( re.error ){
						case 'empty text':
							D.blink( {
								node:this._editor.node,
								type:'background'
							} );
							break;
						case 'flood':
							this._errorNode = T.error('Tu jau šo ziņu ieteici!');
							D.insertBefore( this._errorNode, this.node.firstChild );
							break;
					}
				}

				// Reload page if added postponed say from business page.
				if (!re.error && pDate != undefined && pDate != null) {
					if (window.location.pathname === '/') {
						var page = D.Say.getUser(pPage);
						var url = (page.url != undefined ? page.url : '/user/'+pPage);
						var res = D.Lang.get('postponed_say_success').replace("%your_page%", "<a href='"+url+"'>"+ D.Lang.get('postponed_your_page')+"</a>");
						this._errorNode = T.success(res);
						D.insertBefore( this._errorNode, this.node.firstChild );
					} else {
					//	window.location.reload(true);
					}
				}
			},
			this
		);
		if( this._noBlogPopup || this.seenBlogPopup ){
			D.Say.rpc.send('stats', {
				key: 'say_blog_popup_add'
			});
		}
	},

	_linkInfoHide:function(){
		if( this.par.linkInfo ){
			return;
		}
		this._linkInfoNode.style.display = 'none';
		clearNode( this._linkInfoNode );
		delete this._postData.title;
		delete this._postData.link;
		delete this._postData.descr;
		this._postData.linkDeleted = true;
		if( this._link ){
			this._link.style.display = '';
			if( this._link._previousSibling && $( this._link._previousSibling ).closest('body').length ){
				D.insertAfter( this._link, this._link._previousSibling );
				var space = mkE( {
					text:' '
				} );
				D.insertBefore( space, this._link );
			}
			//removeNode( this._link );
			//delete this._link;
		}
		$( this._icons.addImage ).show();
	},

	_linkInfoShow:function(){
		if( this.par.linkInfo ){
			return;
		}
		$( this._loadingNode ).hide();
		if( !this._link || this._postData.pid ){
			return;
		}
		if( D.browser.name == 'Explorer' && D.browser.version < 8 ){
			return;
		}
		if( ++ this._linkRq > 6 ){
			return;
		}
		var ext = this._link.href.split(/#|\?/)[0].split('.').pop();
		if( array_search( ext, D.PIC_EXT ) !== false ){
			if( !this.canUpload() ){
				this.uploadClosed();
				return;
			}
			this._imageFromLink();
			return;
		}
		$( this._loadingNode ).show();
		D.Say.rpc.send(
			'linkInfo',
			{
				url:this._link.href
			},
			this._linkInfoShowRe,
			this
		);
		//this._linkInfoNode.innerHTML = this._link;
	},

	_imageFromLink:function(link){
		var $form = this;
		if( typeof link != 'string' ){
			link = this._link.href;
		}
		var ext = link.split(/#|\?/)[0].split('.').pop();
		addClassName( $form._node, 'SayFormWithPic' );
		$form._image = mkE( {
			tag:'div',
			className:'SayFormImage',
			els:[
				$form._imageUploadProgress = mkE( {
					tag:'div',
					className:'SayFormImageProgress',
					els:[
						$form._imageUploadProgressC = mkE( {
							tag:'div'
						} )
					]
				} ),
				{
					tag:'a',
					className:'deleteIcon',
					prop:{
						onclick:function(){
							$form.delImage();
						}
					}
				}
			]
		} ).append( $form._editorWrap );
		$form._postData.file = 'pic';
		if( ext == 'gif' ){
			$form._postData.file = 'video';
		}
		D.Say.rpc.send(
			'imageFromUrl',
			{
				url: link
			},
			D.closure(this, this._addImageFromUrl, link)
		);
	},

	_linkInfoShowRe:function(re){
		var $form = this;
		if( !re || re.dr ){
			$( this._loadingNode ).hide();
			return;
		}
		var ext = re.dest.split(/#|\?/)[0].split('.').pop();
		if( array_search( ext, D.PIC_EXT ) !== false ){
			this._link.href = re.dest;
			this._imageFromLink();
			$( this._loadingNode ).hide();
			return;
		}
		if( empty( re.title ) ){
			/*setTimeout( function(){
				$form._linkInfoShow();
			}, this._linkRq < 4 ? 1000 : 2000 );*/
			$( this._loadingNode ).hide();
			return;
		}
		$( this._loadingNode ).hide();
		clearNode( this._linkInfoNode );
		this._linkInfoNode.style.display = '';
		this._link.style.display = 'none';
		this._link._linkInfo = true;
		this._linkInfoAtBegin();
		this._postData.title = re.title;
		this._postData.link = re.url;
		delete this._postData.linkDeleted;
		mkE( {
			tag:'div',
			els:[
				this._linkInfoImgNode = mkE( {
					tag:'img',
					src:( re.img || '' ),
					style:{
						display:( re.img ? '' : 'none' )
					}
				} ),
				{
					tag:'a',
					className:'icon closeIcon',
					prop:{
						onclick:function(){
							$form._skipInfoLink = $form._link.href;
							$form._linkInfoHide();
						}
					}
				},
				{
					tag:'b',
					className:'color1',
					text:re.host
				}, // b
				': ',
				{
					tag:'a',
					prop:{
						innerHTML:re.title,
						href:re.url,
						target:'_blank'
					}
				}, // a
				{
					tag:'p',
					text:D.shorten( re.descr || '', D.Say.MAX_DESC_LENGTH, '...' ),
					prop:{
						onmousedown:function(){
							D.log( this.contentEditable );
							if( this.contentEditable == 'true' ){
								return;
							}
							this.contentEditable = true;
							this.focus();
						},
						onblur:function(){
							this.contentEditable = false;
							this.innerHTML = htmlspecialchars( D.shorten( strip_tags( this.innerHTML ), D.Say.MAX_DESC_LENGTH, '...' ) );
							$form._postData.descr = strip_tags( this.innerHTML );
						}
					}
				}
			]
		} ).append( this._linkInfoNode );
		if( re.embed ){
			this.delImage();
			$( this._icons.addImage ).hide();
		} else {
			if( !this._postData.pid ){
				$( this._icons.addImage ).show();
			}
		}
		if(this._postData.picId && !this._postData.picDeleted) {
			if( this._linkInfoImgNode ){
				this._linkInfoImgNode.style.display = 'none';
			}
		}
		if( re.img && re.img.split(/#|\?/)[0].split('.').pop() == 'gif' ){
			this._imageFromLink(re.img);
		}
	},

	_linkInfoAtBegin:function(){
		if( !this._link ){
			return;
		}
		if( !this._link.parentNode ){
			return;
		}
		this._link._previousSibling = this._link.previousSibling;
		if( this._link.previousSibling && this._link.previousSibling.nodeType == 3 ){
			try{
				var v = this._link.previousSibling.nodeValue;
				var l = v.length;
				if( v.substr( l - 1, 1 ) == ' ' || v.substr( l - 1, 1 ) == D.SayEditor.SPACE ){
					this._link.previousSibling.nodeValue = v.substr( 0, l - 1 );
				}
			} catch(e){
			}
		}
		if( this._link.parentNode.firstChild ){
			D.insertBefore( this._link, this._link.parentNode.firstChild );
		} else {
			this._link.parentNode.appendChild( this._link );
		}
		var sn = document.createTextNode(' ');
		D.insertAfter( sn, this._link );
	},

	_addImageFromUrl:function(link, re){
		var type = 'image/jpeg';
		if( re.gif ){
			type = 'image/gif';
		}
		this._uploader.onUploadCompleteData({data: D.JSON.stringify(re), type: type});
		if( link == this._link.href ){
			clearNode( this._linkInfoNode );
			this._linkInfoHide();
			this.par.linkInfo = true;
			this._link.remove();
			if(trim(this._editor.value()) == ""){
				this._editor.value("");
			}
			this._editor._replaceLinks();
		}
	},

	_userChange:function(user){
		this._profileIcon.setImage( user.image.icon );
		this._postData.uid = user.id;
		this._editor.uid = ( user.id == D.ID ? false : user.id );
		this._permNode.style.display = ( user.id == D.ID ? '' : 'none' );
		this._postPoneNode.style.display = !this.disablePostpone && user.id != D.ID ? '' : 'none';

		// Ja biznesa lapa un atver pirmo reizi
		if (user.type == D.USER_TYPE_BIZ) {
			if (!this.profilesSelect && this._profilesNode.children[0] != undefined) {
				this._profilesNode.children[0].children[1].innerHTML = D.shorten(this._profilesNode.children[0].children[1].innerHTML, 8, '...');
			}
		}
		user.id == D.ID ? this.cancelPostpone() : '';
		if( this.withoutAudience ){
			return;
		}
		if( D.LV && !this._postData.pid ){
			this._icons.audience.style.display = '';
			this._icons.audience._visible = true;
		} else {
			this._icons.audience.style.display = 'none';
			this._icons.audience._visible = false;
		}
		D.smallPopUp.close();
	},

	_permOnchange:function(){
		this._postData.perm = this._perm.value();
	},

	_showCalendar:function(){
		this.submitButton._form.disable(true);
		var html = mkE({
			tag: 'div',
			style:{
				position: 'relative'
			},
			els:[
				{
					tag:'p',
					text: D.Lang.get('postponed_say_intro')
				},
				new T.Form.Input( {
					caption: D.Lang.get('Laiks'),
					icon: 'calendarGrayAlt',
					id: 'postponeDate',
					datepicker: {
						format: 'd.m.Y',
						disableBefore: ( new D.Date ).format('d.m.Y')
					},
					className: 'postponedDate',
					value: this.postponedate || ( new D.Date ).format('d.m.Y'),
					readonly: true
				} ),
				new T.Form.Input( {
					value: this.postponetime,
					id: 'postponeTime',
					icon: 'timeGray',
					placeholder: '00:00',
                    onkeyup: D.closure( this, this._timeChange ),
					onblur: D.closure( this, this._hourCheck )
				} ),
				new T.Form.Button({caption: D.Lang.get('Uzstādīt'), color: 'submit', stretch: true, onclick: D.closure(this, this.setPostpone)}),
				(this._postData.postponeDate != undefined && this._postData.postponeDate != null) ? new T.Form.Button({caption: D.Lang.get('Noņemt'), color: 'link', stretch: true, onclick: D.closure(this, this.cancelPostpone), display:'none'}): '',
			]
		});

		if (this.calVisible == true) {
			this.calVisible = false;
			D.smallPopUp.close();
		} else {
			this.calVisible = true;
			var callback = this;
			D.smallPopUp.html( html, {
				width: '200',
				color: 'PostponedSay',
				showClose: false,
				forceDown: true,
				onClose: function(){callback.closeCalendar();}
			} );
		}
	},

	closeCalendar: function(){
		this.submitButton._form.disable(false);
		this.calVisible = false;
	},

	setPostpone: function(){
		var date = $("#postponeDate").val();

		if (this._postponeError != 'undefined' && this._postponeError == false && date != '') {
			this.postponedate = $("#postponeDate").val();
			this.postponetime = $("#postponeTime").val().replace(/\./g,':');

			// Server date.
			var sdate = new Date(D.TIME * 1000);
			var pDate = this.postponedate.split(".");
			var pTime = this.postponetime.split(":");
			var postponeDateTime = new Date(pDate[2], pDate[1] - 1, pDate[0], pTime[0], pTime[1]);

			// Server time greater than client input.
			if (sdate > postponeDateTime) {
				this.poTime.error(true);
				return;
			}

			this._postData.postponeDate = this.postponedate+' '+this.postponetime;
			this._postPoneCaption.innerHTML = this._postData.postponeDate;
			this.submitButton.children[0].children[0].innerHTML = D.Lang.get('Ieplānot');
			this.submitButton._form.disable(false);

			// Close popup.
			this.calVisible = false;
			D.smallPopUp.close();
		}
	},

	cancelPostpone: function() {
		this._postData.postponeDate = null;
		this.postponedate = null;
		this.postponetime = null;
		this._postPoneCaption.innerHTML = D.Lang.get('Ieplānot');
		this.submitButton.children[0].children[0].innerHTML = D.Lang.get('Add post button');
		this.submitButton._form.disable(false);

		// Close popup.
		//@todo issue with D.say.recommend which uses smallpopup
		if(this.calVisible) {
			this.calVisible = false;
			D.smallPopUp.close();
		}
	},

	_timeChange: function( event ) {
		this.poTime = event.target;

		var time = this.poTime.value();
		if ( !time ) {
			this._postponeError = true;
			this.poTime.error(true);
			return;
		}

        if (time.length == 2 && !time.endsWith(':') && event.keyCode != 8) {
            this.poTime._inputNode.value = time + ":";
        }
        if (time.length > 5) {
            this.poTime._inputNode.value = time.substr(0, time.length - 1);
        }

		var error = (!time.match( /^([01]?[0-9]|2[0-3])[:.][0-5][0-9]$/ ) && time != '24:00');
		this._postponeError = error;
		this.poTime.error(error);
	},

	_hourCheck: function( event ) {
		this.poTime = event.target;
		var time = this.poTime.value();
		var error = false;
		error = !time.match( /^([01]?[0-9]|2[0-3])$/ );
		this._postponeError = error;
		if ( error ) {
			return;
		}
		this.poTime.value( time + ':00' );
	},

	_showBlogPopup: function(){
		if( this._noBlogPopup ){
			return;
		}
		if( this.blogPopup ){
			this.blogPopup.append(document.body);
			var rect = this._spaceNode.getBoundingClientRect();
			this.blogPopup.style.top = rect.top + document.body.scrollTop - 21 + 'px';
			this.blogPopup.style.left = rect.left - this.blogPopup.offsetWidth - 10 + 'px';
			return;
		}
		var infoboxStyles = {
			position:'absolute',
			overflow:'visible',
			top:'auto',
			left:'auto',
			right:'auto',
			bottom:'auto',
			zIndex: 1001
		};
		this.blogPopup = mkE( {
			tag: 'div',
			className: 'radius3 InfoBox InfoBoxReady tourBox sayBlogPopup',
			prop: {
				style: infoboxStyles
			},
			els:[
				this.blogPopupBorderNode = mkE({
					tag: 'span',
					className: 'radius3 InfoBoxBorder tourArrowRight',
					els: [
						this._blogPopupInfoBoxWrap = mkE( {
							tag: 'div',
							className: 'InfoBoxContentWrap',
							els: [
								{
									tag: 'div',
									className: 'tourContent',
									els: [
										{
											tag: 'h3',
											className: 'tourH3',
											text: D.Lang.get('say_blog_title'),
											style: {
												whiteSpace: 'nowrap'
											}
										},
										{
											tag: 'p',
											className: 'tourText',
											text: D.Lang.get('say_blog_info')
										}
									]
								},
								{
									tag: 'table',
									className: 'tourFooter',
									style: {
										width: '100%'
									},
									els: [
										{
											tag: 'tr',
											els: [
												{
													tag: 'td',
													attr: {
														align: 'right'
													},
													els: [
														new T.Form.Button({
															caption: D.Lang.get('no'),
															color: 'link',
															onclick: D.closure(this, function(){
																D.Say.rpc.send('stats', {
																	key: 'say_blog_popup_no'
																});
																this._noBlogPopup = true;
																this._closeBlogPopup();
															})
														}),
														new T.Form.Button({
															caption: D.Lang.get('yes'),
															color: 'submit',
															onclick: D.closure(this, this._sendToBlogs)
														})
													]
												}
											]
										}
									]
								}
							]
						} )
					]
				})
			]
		});
		this.blogPopup.append(document.body);
		var rect = this._spaceNode.getBoundingClientRect();
		this.blogPopup.style.top = rect.top + document.body.scrollTop - 21 + 'px';
		this.blogPopup.style.left = rect.left - this.blogPopup.offsetWidth - 10 + 'px';
		if( !this.seenBlogPopup ){
			D.Say.rpc.send('stats', {
				key: 'say_blog_popup'
			});
			this.seenBlogPopup = true;
		}
	},

	_closeBlogPopup: function(){
		if( !this.blogPopup ){
			return;
		}
		this.blogPopup.remove();
		delete this.blogPopup;
	},

	_sendToBlogs: function(){
		D.Say.rpc.async = false;
		D.Say.rpc.send('stats', {
			key: 'say_blog_popup_yes'
		});
		D.Say.rpc.async = true;
		var text = htmlspecialchars_decode(strip_tags(this._editor.value()));
		var pic = this._postData.picTempId || 0;

		if (this._editor.uid && this._editor.uid != D.ID) {
			var page = D.Say.getUser(this._editor.uid);
			if (page.type == D.USER_TYPE_BIZ) {
				// Get page url. Url not present in D.Say.getUser
				D.Say.rpc.send('pageurl', {
					bid: this._editor.uid
				}, function(re){
					if (!re || re == false) {
						return false;
					}
					var url = '/'+re;
					window.location.href = url + '/admin/news/?addPost&sayText=' + encodeURIComponent(text) + '&sayPic=' + pic;
				});
				return false;
			}
		}
		Section.navigate('/blogs/add?sayText=' + encodeURIComponent(text));
		this._closeBlogPopup();
	},

	_checkForceReload: function(){
		Section.forceReload = !(!this.par.linkInfo && !this._editor.len() && !this._postData.videoTempId && !this._postData.picTempId);
	},

	_onLeave: function(e){
		if( InfoBox.opened || (D.GalleryFS && D.GalleryFS.opened) ){
			return;
		}
		if( !this.par.linkInfo && (!this._editor.len() || trim(strip_tags(this._editor.value())) == '@' + trim(htmlspecialchars_decode(this.friendUser.title))|| trim(strip_tags(this._editor.value())) == '@ ' + trim(htmlspecialchars_decode(this.friendUser.title))) && !this._postData.videoTempId && !this._postData.picTempId ){
			return;
		}
		e = e || window.event;
		var message = D.Lang.get('say_form_not_empty');
		if (e)
		{
			e.returnValue = message;
		}
		return message;
	},

	showImage:function (par) {
		if(par.embed) {
			return false;
		}
		var $form = this;
		addClassName( this._node, 'SayFormWithPic' );
		this._image = mkE( {
			tag:'div',
			className:'SayFormImage',
			style: {backgroundImage: "url('" + par.image.icon + "')"},
			els:[
				{
					tag:'a',
					className:'deleteIcon',
					prop:{
						onclick:function(){
							$form.delImage();
						}
					}
				}
			]
		} ).append( this._editorWrap );
		this._postData.picId = par.id;
		if( this._linkInfoImgNode ){
			this._linkInfoImgNode.style.display = 'none';
		}
	}
};
// --- form.js ---

// +++ form/base.js +++
/**
 * @class {D.Say.Form}
 * @extends {mkE.Base}
 * @param {D.Say.Form.Par} par
 */
D.Say.Form = Class(
	/**
	 * @lends {D.Say.Form#}
	 */
	{
		/** @type {DR.say.struct.Item|null} */
		post: null,
		canPostpone: true,
		parentUid: null,

		/**
		 * @param {D.Say.Form.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par;

			this.uid = this.par.uid || D.ID;
			this.permissions = this.par.permissions || D.PERM_ALL;
			this.postId = par.postId || null;

			this._initData();

			if( this.par.parentUid ) {
				this.par.friendUser = null;
				this.setParentUid(this.par.parentUid);
			}

			this.node = mkE({
				tag: 'div',
				className: 'SayFormNew',
				els: [
					this._borderNode = mkE({
						tag: 'div',
						className: 'SayFormNewBorderNode',
						style: {
							minHeight: '158px'
						}
					})
				]
			});

			if( this.par.helpText ){
				var helpText = T.info(this.par.helpText);
				helpText.prepend(this.node);
			}

			this._drawLoader();

			D.onLoad(['DR.places', 'DR.search', 'DR.gallery', 'DR.kino', 'DR.say.events', 'DR.location', 'Drag'], this._onApiLoad);
		},

		setParentUid: function ( parentUid ) {
			if( parentUid && parentUid !== this.data.uid ) {
				this.parentUid = parentUid;
				this.permissions = D.PERM_ALL;
				this.canPostpone = false;
				this.data.parentUid = parentUid;
			} else {
				this.parentUid = null;
				this.canPostpone = true;
				this.data.parentUid = null;
			}
		},

		_initData: function(){
			this.data = {
				uid: this.uid,
				parentUid: this.parentUid,
				permissions: this.permissions,
				postpone: null,
				targeting: null,
				location: null,
				friends: []
			};
		},

		_drawLoader: function(){
			this._loaderNode = mkE({
				tag: 'div',
				className: 'SayFormLoader',
				els: [
					{
						tag: 'div',
						className: 'animated-background',
						els: [
							{
								tag: 'div',
								className: 'background-masker header-top'
							},
							{
								tag: 'div',
								className: 'background-masker header-text-top'
							},
							{
								tag: 'div',
								className: 'background-masker header-text-line-1-left'
							},
							{
								tag: 'div',
								className: 'background-masker header-text-line-1-right'
							},
							{
								tag: 'div',
								className: 'background-masker header-text-line-1-bottom'
							},
							{
								tag: 'div',
								className: 'background-masker header-text-line-2-left'
							},
							{
								tag: 'div',
								className: 'background-masker header-text-line-2-right'
							},
							{
								tag: 'div',
								className: 'background-masker header-text-line-2-bottom'
							},
							{
								tag: 'div',
								className: 'background-masker bottom-top'
							},
							{
								tag: 'div',
								className: 'background-masker text-right'
							}
						]
					},
					{
						tag: 'div',
						className: 'bottom'
					}
				]
			}).append(this._borderNode);
		},

		_removeLoader: function(){
			if( !this._loaderNode ){
				return;
			}
			removeNode(this._loaderNode);
		},

		_onApiLoad: function(){
			if( this.postId ){
				this._loadPost();
				return;
			}
			if( this.par.profiles ){
				this._onSayProfiles(this.par.profiles);
				return;
			}
			D.Say.onProfiles(this._onSayProfiles);
		},

		_loadPost: function(){
			this._mGetPost = new DR.say.GetItem();
			this._mGetPost.pid = this.postId;
			this._mGetPost.select = [
				new DR.say.select.Item().id().content().user().canEdit().permissions().event().withUsers().targeting().scheduled().displayUser().galleryItem(),
				new DR.say.select.ItemContent().text().users().place().link().linkInfo().image(),
				new DR.say.select.With().uid().title().user(),
				new DR.say.select.LinkInfo().title().description().host(),
				new DR.say.select.Link().id().title().url().descr().shortHost().image().dest().hash().img(),
				new DR.say.select.LinkImage().w().h().gm().uber(),
				new DR.say.events.select.Base().type(),
				new DR.users.select.User().id().type().title().image().url(),
				new DR.users.select.UserDefault().aktitle(),
				new DR.users.select.Image().icon().small().gm(),
				new DR.kino.select.Movie().id().title().titleOriginal().year().genres().picture().descriptionPlain().imdbRating().url(),
				new DR.kino.select.Genre().name().nameTranslated(),
				new DR.base.select.Image().large().gm().uber(),
				new DR.places.select.Item().all().counts(false),
				new DR.gallery.select.Album().id().title().movie(),
				new DR.gallery.select.Item().id().embed().type().image(),
				new DR.gallery.select.Embed().image(),
				new DR.gallery.select.EmbedImage().gm().uber()
			];
			this._mGetPost.onLoad = this._onLoadPost;
			this._mGetPost.call();
		},

		_onLoadPost: function(){
			if( !this._mGetPost || this._mGetPost.error || !this._mGetPost.re.item || !this._mGetPost.re.item.canEdit ){
				InfoBox.close();
				alert(D.Lang.get('cant_edit_say_item'));
				return;
			}
			this.post = this._mGetPost.re.item;
			var profiles = [
				this.post.user
			];
			this.data.permissions = this.permissions = this.post.permissions.value;
			this.data.friends = [];
			for( var i = 0, l = this.post.withUsers.length; i < l; i++ ){
				var user = this.post.withUsers[i];
				var id;
				var caption;
				var extra = {};
				if( !user.uid ){
					id = user.uid + '-' + user.title;
					caption = user.title;
				}else{
					id = user.user.id;
					caption = user.user.title;
					extra = {
						url: user.user.url,
						aktitle: user.user.aktitle || user.user.title,
						type: user.user.type
					};
				}
				this.data.friends.push({
					value: id,
					caption: caption,
					extra: extra
				});
			}
			if( this.post.event instanceof DR.say.events.struct.KinoWatching || (this.post.event instanceof DR.say.events.struct.Gallery && this.post.event.album.movie) ){
				this.data.movie = this.post.event.movie || this.post.event.album.movie;
			}
			if( this.post.content.place ){
				this.data.location = {
					value: this.post.content.place.id,
					caption: this.post.content.place.name,
					extra: {
						url: this.post.content.place.url
					}
				};
			}
			if( this.post.displayUser ) {
				this.data.uid = this.uid = this.post.displayUser.id;
				this.setParentUid(this.post.user.id);
				profiles = [
					this.post.displayUser
				];
			} else {
				this.data.uid = this.uid = this.post.user.id;
			}
			if( this.post.targeting ){
				this.data.targeting = {
					ageFrom: this.post.targeting.ageFrom,
					ageTo: this.post.targeting.ageTo,
					sex: this.post.targeting.sex
				};
			}
			if( this.post.scheduled ){
				var date = new D.Date(this.post.scheduled);
				this.data.postpone = {
					date: date.format('d.m.Y'),
					hours: date.getHours(),
					minutes: date.getMinutes()
				};
			}else{
				this.canPostpone = false;
			}
			this._onSayProfiles(profiles);
			if( this.post.content.link ){
				this._link = mkE({
					tag: 'a',
					href: this.post.content.link.url,
					text: this.post.content.link.url
				});
				this._editor.links.push(this._link);
				this._editor.setLink(this._link);
				if( this._linkInfo ){
					this._linkInfo.remove();
				}
				var linkInfoPar = {
					hasPost: true
				};
				var re = new DR.say.struct.GetLinkInfoRe;
				re.link = this.post.content.link;
				if( this.post.content.linkInfo ){
					var linkInfo = this.post.content.linkInfo;
					re.link.title = linkInfo.title;
					re.link.descr = linkInfo.description;
				}
				if( this.post.event && this.post.event instanceof DR.say.events.struct.SayPic ){
					linkInfoPar.sayPic = true;
					linkInfoPar.galleryItemId = this.post.event.item.id;
					/** @type {DR.gallery.struct.Item} */
					var sayPic = this.post.event.item;
					switch( sayPic.type ){
						case 2:
							re.embed = true;
							re.embedData = sayPic.embed;
							break;
						case 1:
						case 3:
							linkInfoPar.videoImage = true;
							// Šeit break nav speciāli
						default:
							var linkImage = new DR.say.struct.LinkImage;
							linkImage.gm = sayPic.image.gm;
							linkImage.large = sayPic.image.large;
							linkImage.uber = sayPic.image.uber;
							linkInfoPar.image = linkImage;
							break;
					}
				}
				this._linkData = re;
				this._linkInfo = new D.Say.Form.LinkInfo(re, this._linkInfoHide, linkInfoPar);
				D.insertAfter(this._linkInfo.node, this._extraNode);
				this._updateMetaInfo();
			}
			this._updateMetaInfo();
		},

		_onSayProfiles: function(profiles){
			this._removeLoader();
			this.profiles = new D.SortedMap();
			this.profiles.set(D.ID, D.me);
			for( var i = 0, l = profiles.length; i < l; i++ ){
				var profile = profiles[i];
				this.profiles.set(profile.id, profile);
			}

			if( !this.profiles.get(this.uid) ){
				this.uid = D.ID;
				this.data.uid = D.ID;
			}

			this.data.user = this.profiles.get(this.uid);

			this._drawHeader();
			this._drawEditor();
			this._drawExtraInfo();
			this._drawBottom();
			this._drawGallery();
			this._updateOptions();

			$(window).bind('beforeunload', D.closure(this, this._onLeave));
			this._borderNode.style.minHeight = '';
		},

		_drawHeader: function(){
			this._headerNode = mkE({
				tag: 'div',
				className: 'header'
			}).append(this._borderNode);

			if( !this.profiles.get(this.data.uid) ){
				this.data.uid = D.ID;
			}

			this._profileSelect = new D.Say.Form.ProfileSelect({
				onChange: this._onProfileChange,
				profiles: this.profiles,
				uid: this.data.uid,
				allowSelectProfile: this.par.allowSelectProfile
			});
			this._profileSelect.append(this._headerNode);

			if( this.profiles.empty() || this.profiles.length() === 1 ){
				this._headerNode.style.display = 'none';
			}
		},

		_drawEditor: function(){
			this._contentNode = mkE({
				tag: 'div',
				className: 'editor-container'
			}).append(this._borderNode);

			var par = new D.Say.Editor.Par();
			par.uid = this.data.uid;
			par.placeholder = D.Lang.get('Es šobrīd...');
			par.onChange = this._onEditorChange;
			par.onCtrlEnter = this._save;
			par.friendUser = this.par.friendUser || null;

			this._editor = new D.Say.Editor(par);
			this._editor.append(this._contentNode);
			if( this.post ){
				this._editor.value(this.post.content.text, {
					users: this.post.content.users
				});
				this._editor.focus();
				this._editor._setCursorAtEnd();
			}else if( this.par.friendUser ){
				var users = {};
				users[this.par.friendUser.id] = this.par.friendUser;
				this._editor.value('<!-- user:' + this.par.friendUser.id + ' -->&nbsp;', {
					users: users
				});
			}
		},

		_onEditorChange: function(){
			if( !this._editor.links.length ){
				delete this._link;
				this._linkInfoHide();
				return;
			}
			var link = null;
			for( var i = 0, l = this._editor.links.length; i < l; i++ ){
				if( this._editor.links[i] && !this._editor.links[i]._noLinkInfo ){
					link = this._editor.links[i];
					break;
				}
			}
			if( link && (!this._gallery || this._gallery.empty()) && !this.data.movie && !this._link ){
				this._linkRq = 0;
				this._link = link;
				this._linkInfoShow();
			}
			for( var i2 = 0, l2 = this._editor.links.length; i2 < l2; i2++ ){
				if( !this._editor.links[i2] ){
					continue;
				}
				this._editor.links[i2]._noLinkInfo = true;
			}
		},

		_linkInfoHide: function(fromMetaChange){
			if( this._linkInfo ){
				this._linkInfo.remove();
				this._editor.setLink(null);
				delete this._link;
				delete this._linkInfo;
				delete this._linkData;
			}
			if( fromMetaChange !== true ){
				this._updateMetaInfo();
			}
		},

		_linkInfoShow: function(){
			if( !this._link ){
				return;
			}
			if( ++ this._linkRq > 6 ){
				return;
			}
			var ext = this._link.href.split(/#|\?/)[0].split('.').pop();
			if( in_array( ext, D.PIC_EXT ) ){
				this._imageFromLink();
				return;
			}
			this._mGetLinkInfo = new DR.say.GetLinkInfo();
			this._mGetLinkInfo.url = this._link.href;
			this._mGetLinkInfo.select = [
				new DR.say.select.Link().id().title().url().descr().shortHost().image().dest().hash().img(),
				new DR.say.select.LinkImage().w().h().gm().uber(),
				new DR.gallery.select.Embed().image(),
				new DR.gallery.select.EmbedImage().gm()
			];
			this._mGetLinkInfo.onLoad = this._onLinkInfo;
			this._mGetLinkInfo.call();
		},

		_onLinkInfo: function(){
			if( !this._mGetLinkInfo || this._mGetLinkInfo.error ){
				return;
			}
			var re = this._mGetLinkInfo.re;
			if( !re || !re.link ){
				return;
			}
			if( !re.link.dest ){
				return;
			}
			this._drawLinkInfo(re);
		},

		_drawLinkInfo: function(re){
			var link = re.link;
			var ext = link.dest.split(/#|\?/)[0].split('.').pop();
			if( in_array( ext, D.PIC_EXT ) ){
				this._link.href = link.dest;
				this._imageFromLink();
				return;
			}
			if( this._link.nextSibling ){
				this._removeFirstSpace(this._link.nextSibling);
			}
			if( this._link.parentNode ){
				this._link._placeholderNode = mkE({
					tag: 'span',
					className: 'spacer'
				});
				D.insertBefore(this._link._placeholderNode, this._link);
			}
			removeNode(this._link);
			this._editor.setLink(this._link);
			if( this._linkInfo ){
				this._linkInfo.remove();
			}
			this._linkData = re;
			this._linkInfo = new D.Say.Form.LinkInfo(re, this._linkInfoHide);
			D.insertAfter(this._linkInfo.node, this._extraNode);
			this._updateMetaInfo();
		},

		_embedLink: function(link){
			this._link = mkE({
				tag: 'a',
				href: link.link.url,
				text: link.link.url,
				prop: {
					contentEditable: false
				}
			});
			this._link._noLinkInfo = true;
			this._drawLinkInfo(link);
		},

		_removeFirstSpace: function(node){
			if( node.nodeType !== 3 ){
				return;
			}
			setNodeText(node, getNodeText(node).substr(1));
		},

		_getLinkData: function(){
			return this._linkData
		},

		_imageFromLink: function(link){
			if( typeof link !== 'string' ){
				link = this._link.href;
			}
			this._gallery.addFromUrl(link, this._onImageFromLinkAdd);
		},

		_onImageFromLinkAdd: function(success){
			if( !success ){
				return;
			}
			removeNode(this._link);
		},

		_drawGallery: function(){
			var galleryPost = this.post && this.post.event && this.post.event instanceof DR.say.events.struct.Gallery;
			var sayPicPost = this.post && !this.post.content.link && this.post.event && this.post.event instanceof DR.say.events.struct.SayPic;
			this._galleryTitle = new D.Say.Form.Gallery.Title();
			this._galleryCheckboxContainer = mkE({
				tag: 'div',
				className: 'SayGalleryCheckbox'
			});
			this._galleryCheckbox = new T.Form.CheckBox({
				caption: D.Lang.get('say_form_create_gallery'),
				checked: galleryPost || (!this.post && this.uid < 10000000),
				onchange: this._onGalleryChange
			}).append(this._galleryCheckboxContainer);
			var aid = null;
			var pid = null;
			if( galleryPost ){
				aid = this.post.event.album.id;
				this._galleryTitle.value(this.post.event.album.title);
			}else if( sayPicPost ){
				pid = this.post.event.item.id;
			}else if( this.post && this.post.galleryItem ){
				pid = this.post.galleryItem.id;
			}
			this._gallery = new D.Say.Form.Gallery({
				uploadIcon: this._imageIcon,
				dropNode: this._borderNode,
				removeLink: this._linkInfoHide,
				getLinkData: this._getLinkData,
				onChange: this._onGalleryChange,
				aid: aid,
				pid: pid
			});
			D.insertAfter(this._gallery.node, this._extraNode);
		},

		_onGalleryChange: function(){
			T.tour.close();
			if( this._gallery.empty() ){
				this._galleryTitle.remove();
				this._galleryCheckboxContainer.remove();
				this._editor.changePlaceholder(D.Lang.get('Es šobrīd...'));
			}else{
				if( this._gallery.length() === 1 && (!this.post || (this.post && !(this.post.event instanceof DR.say.events.struct.Gallery)) ) ){
					D.insertAfter(this._galleryCheckboxContainer, this._gallery.node);
					this._showTour();
				}else{
					this._galleryCheckboxContainer.remove();
					this._galleryCheckbox.value(true);
				}
				if( this._galleryCheckbox.value() ){
					D.insertAfter(this._galleryTitle.node, this._headerNode);
					this._editor.changePlaceholder(D.Lang.get('say_gallery_descr'));
				}else{
					this._galleryTitle.remove();
					this._editor.changePlaceholder(D.Lang.get('Es šobrīd...'));
				}
			}
			this._updateMetaInfo();
		},

		_drawExtraInfo: function(){
			this._extraNode = mkE({
				tag: 'div',
				className: 'extra'
			}).append(this._borderNode);
		},

		_drawBottom: function(){
			this._bottomNode = mkE({
				tag: 'div',
				className: 'bottom'
			}).append(this._borderNode);

			this._icons = mkE({
				tag: 'div',
				className: 'icons'
			}).append(this._bottomNode);

			this._imageIcon = mkE({
				tag: 'a',
				className: 'media-upload',
				els: [
					T.svgIcon({
						icon: 'foto'
					})
				],
				onclick: function(){
					D.Say.Form.stats('nsf_add_media');
				}
			}).append(this._icons);

			mkE({
				tag: 'a',
				attr: {
					title: D.Lang.get('add_smiley')
				},
				els: [
					T.svgIcon({
						icon: 'smaids'
					})
				],
				onclick: this._addSmiley
			}).append(this._icons);

			this._tagIcon = mkE({
				tag: 'a',
				className: 'tag',
				attr: {
					title: D.Lang.get('add_tag')
				},
				els: [
					T.svgIcon({
						icon: 'tag',
						size: '20x16'
					})
				],
				onclick: this._addTag
			}).append(this._icons);

			this._locationIcon = mkE({
				tag: 'a',
				attr: {
					title: D.Lang.get('add_location')
				},
				els: [
					T.svgIcon({
						icon: 'location'
					})
				],
				onclick: this._addLocation
			}).append(this._icons);

			this._movieIcon = mkE({
				tag: 'a',
				attr: {
					title: D.Lang.get('add_movie')
				},
				els: [
					T.svgIcon({
						icon: 'movie'
					})
				],
				onclick: this._movie
			}).append(this._icons);

			mkE({
				tag: 'a',
				attr: {
					title: D.Lang.get('add_embed')
				},
				els: [
					T.svgIcon({
						icon: 'link'
					})
				],
				onclick: this._embed
			}).append(this._icons);

			this._targetIcon = mkE({
				tag: 'a',
				attr: {
					title: D.Lang.get('target')
				},
				els: [
					T.svgIcon({
						icon: 'target'
					})
				],
				onclick: this._target
			});

			this._buttonsNode = mkE({
				tag: 'div',
				className: 'buttons'
			}).append(this._bottomNode);
			this._permissionsButton = new T.Form.PermButton({
				onChange: this._onPermChange,
				permissions: this.data.permissions
			});

			this._submitButton = new T.Form.Button({
				caption: this.post ? D.Lang.get('edit') : D.Lang.get('Add post button'),
				onclick: this._save
			});

			this._drawSubmitOptionsButton();
		},

		_drawSubmitOptionsButton: function(){
			var hasParent = this._submitButtonOptions && this._submitButtonOptions.node.parentNode;
			var options = [
				{
					caption: this.post ? D.Lang.get('edit') : D.Lang.get(this.data.postpone ? 'Save' : 'publish'),
					onclick: this._save
				}
			];
			if( this.canPostpone ){
				options.push({
					caption: D.Lang.get(this.data.postpone ? 'schedule_new_time' : 'schedule'),
					onclick: this._schedule
				});
				if( this.data.postpone ){
					options.push({
						caption: D.Lang.get('publish_now'),
						onclick: this._publishNow
					});
				}
			}
			var submitButton = new T.Form.SwitchButton({
				color: 'submit',
				options: options
			});
			if( hasParent ){
				D.insertBefore(submitButton.node, this._submitButtonOptions.node);
				this._submitButtonOptions.remove();
			}
			this._submitButtonOptions = submitButton;
		},

		_addTag: function(){
			if( this._addTagOpened && this._tagPopover ){
				this._tagPopover.hide();
				this._addTagOpened = false;
				return;
			}
			D.Say.Form.stats('nsf_tag_friend');
			var par = new T.Popover.Par().setPosition('bottom left').setParent(this._tagIcon).setOnClose(this._addTagClose).setNoHeader(true).setAlt(true);
			this._tagPopover = new T.Popover(par);
			this._tagPopover.show();
			this._addTagOpened = true;
			D.onLoad(['DR.search'], this._showTagForm);
		},

		_showTagForm: function(){
			if( this._tagWindow ){
				this._tagWindow.append(this._tagPopover.content);
				this._tagWindow.clear();
				this._tagWindow.focus();
				return;
			}
			this._tagWindow = new T.TagSelect({
				values: this.data.friends
			});
			this._tagWindow._onChange = this._onTagChange;
			this._tagWindow._onSearchFinished = this._onTagSearchFinished;
			this._tagWindow.append(this._tagPopover.content);
			this._tagWindow.focus();
		},

		_onTagChange: function(values){
			D.Say.Form.stats('nsf_tag_friend_choose');
			this.data.friends = values;
			this._updateMetaInfo();
			this._tagPopover.position(true);
		},

		_onTagSearchFinished: function(){
			this._tagPopover.positionInView();
		},

		_addTagClose: function(){
			this._addTagOpened = false;
		},

		_addLocation: function(){
			if( this._addLocationOpened && this._locationPopover ){
				this._locationPopover.hide();
				this._addLocationOpened = false;
				return;
			}
			D.Say.Form.stats('nsf_add_loc');
			var par = new T.Popover.Par().setPosition('bottom left').setParent(this._locationIcon).setOnClose(this._addLocationClose).setNoHeader(true).setAlt(true);
			this._locationPopover = new T.Popover(par);
			this._locationPopover.show();
			this._addLocationOpened = true;
			D.onLoad(['DR.places'], this._showLocationForm);
		},

		_showLocationForm: function(){
			if( this._locationWindow ){
				this._locationWindow.append(this._locationPopover.content);
				this._locationWindow.clear();
				this._locationWindow.focus();
				return;
			}
			this._locationWindow = new T.LocationSelect({
				value: this.data.location
			});
			this._locationWindow._onChange = this._onLocationChange;
			this._locationWindow.append(this._locationPopover.content);
			this._locationWindow.focus();
		},

		_addLocationClose: function(){
			this._addLocationOpened = false;
			this._updateMetaInfo();
		},

		_onLocationChange: function(values){
			if( !this._locationWindow ){
				return;
			}
			if( !empty(values) ){
				this._locationPopover.hide();
				D.Say.Form.stats('nsf_choose_loc');
			}
			this.data.location = values;
			this._updateMetaInfo();
			this._locationPopover.position(true);
		},

		_addSmiley: function(){
			D.insertSmiley( {
				fromSay: true,
				onclick: this._smileyClick,
				closeOnClick: true,
				allowPropagation: true
			});
			D.Say.Form.stats('nsf_add_smiley');
		},

		_smileyClick: function( sm ){
			if( !this._editor.contentEditable ){
				this._editor.insertHTML( sm + ' ' );
				return;
			}
			this._editor.insertHTML( '<span id="saySmiley">' + htmlspecialchars(sm) + '</span>' + '&nbsp;' );
			var saySmileyNode = document.getElementById('saySmiley');
			if( saySmileyNode ){
				saySmileyNode.id = '';
				if( saySmileyNode.previousSibling ){
					var saySmileyNodePrev = saySmileyNode.previousSibling;
					if( saySmileyNodePrev.nodeType === 3 && saySmileyNodePrev.nodeValue.length ){
						var lastChar = saySmileyNodePrev.nodeValue.substr( saySmileyNodePrev.nodeValue.length - 1, 1 );
						if( lastChar !== ' ' && lastChar !== D.SayEditor.SPACE ){
							saySmileyNodePrev.nodeValue += ' ';
						}
					}
				}
			}
		},

		_onPermChange: function(permissions){
			if( permissions !== this.data.permissions ){
				D.Say.Form.stats('nsf_perm_change');
			}
			this.data.permissions = permissions;
			if( !this._permissionsButton ){
				return;
			}
			var text = permissionsText(permissions);
			this._profileSelect.setInfo(text);
		},

		_onProfileChange: function(profile){
			this.data.uid = profile.id;
			this.data.user = profile;
			this.setParentUid(this.par.parentUid);
			this._updateOptions();
		},

		_target: function(){
			if( !this._targetingWindow ){
				var par = {
					onSave: this._onTargetingSave,
					onCancel: this._onTargetingCancel
				};
				if( this.data.targeting ){
					par.ageFrom = this.data.targeting.ageFrom;
					par.ageTo = this.data.targeting.ageTo;
					par.sex = this.data.targeting.sex;
				}
				this._targetingWindow = new D.Say.Form.Targeting(par);
			}
			this._targetingInfobox = new D.Modal({
				width: 500,
				withoutPadding: true,
				onClose: this._targetingWindow.reset,
				overlayClose: false
			});
			this._targetingInfobox.els(this._targetingWindow);
			this._targetingWindow.reset();
		},

		_onTargetingSave: function(data){
			this.data.targeting = data;
			if( data.sex == 0 && data.ageFrom == 0 && data.ageTo == 100 ){
				this.data.targeting = null;
			}
			this._targetingInfobox.close();
			this._updateOptions();
		},

		_onTargetingCancel: function(){
			this._targetingInfobox.close();
			this._updateMetaInfo();
		},

		_schedule: function(){
			if( !this._scheduleWindow ){
				var par = {
					onSave: this._onScheduleSave,
					onCancel: this._onScheduleCancel,
					onRemove: this._onScheduleRemove
				};
				if( this.data.postpone ){
					par.date = this.data.postpone.date;
					par.hours = this.data.postpone.hours;
					par.minutes = this.data.postpone.minutes;
				}
				this._scheduleWindow = new D.Say.Form.Schedule(par);
			}

			this._scheduleInfobox = new D.Modal({
				width: 500,
				withoutPadding: true,
				onClose: this._scheduleWindow.reset,
				overlayClose: false
			});
			this._scheduleInfobox.els(this._scheduleWindow);
		},

		_onScheduleSave: function(data){
			this.data.postpone = data;
			this._scheduleInfobox.close();
			this._drawSubmitOptionsButton();
			this._updateOptions();
		},

		_onScheduleCancel: function(){
			this._scheduleInfobox.close();
		},

		_onScheduleRemove: function(){
			this.data.postpone = null;
			if( this._scheduleWindow ){
				this._scheduleWindow.clear();
			}
			if( this._scheduleInfobox ){
				this._scheduleInfobox.close();
			}
			this._drawSubmitOptionsButton();
			this._permissionsButton.value(D.PERM_ALL);
			this._updateOptions();
		},

		_embed: function(){
			D.Say.Form.stats('nsf_add_embed');
			this._gallery.addEmbed(this._embedLink);
		},

		_movie: function(){
			if( this._addMovieOpened && this._moviePopover ){
				this._moviePopover.hide();
				this._addMovieOpened = false;
				return;
			}
			D.Say.Form.stats('nsf_add_movie');
			var par = new T.Popover.Par().setPosition('bottom left').setParent(this._movieIcon).setOnClose(this._addMovieClose).setNoHeader(true).setAlt(true).setScrollIntoView(true);
			this._moviePopover = new T.Popover(par);
			this._moviePopover.show();
			this._addMovieOpened = true;
			D.onLoad(['DR.kino'], this._showMovieForm);
		},

		_showMovieForm: function(){
			if( this._movieWindow ){
				this._movieWindow.append(this._moviePopover.content);
				this._movieWindow.reset();
				this._moviePopover.position();
				this._movieWindow.focus();
				return;
			}
			this._movieWindow = new D.Say.Form.Movie({
				value: this.data.movie
			});
			this._movieWindow._onChange = this._onMovieChange;
			this._movieWindow.append(this._moviePopover.content);
			this._moviePopover.position();
			this._movieWindow.focus();
		},

		_addMovieClose: function(){
			this._addMovieOpened = false;
			this._updateMetaInfo();
		},

		/**
		 * @param {DR.kino.struct.movie} movie
		 * @param {Boolean} closeWindow
		 */
		_onMovieChange: function(movie, closeWindow){
			if( closeWindow === true ){
				this._moviePopover.hide();
			}
			this.data.movie = movie;
			this._updateMetaInfo();
			D.Say.Form.stats('nsf_choose_movie');
		},

		_removeMovie: function(){
			this.data.movie = null;
			if( this._movieWindow ){
				this._movieWindow.clear();
			}
			this._updateMetaInfo();
		},

		_drawMovieCell: function(){
			this._movieNode = mkE({
				tag: 'a',
				className: 'SayFormMovie',
				href: this.data.movie.url,
				target: '_blank'
			});
			var image = mkE({
				tag: 'div',
				className: 'image'
			}).append(this._movieNode);
			D.bgImage(image, this.data.movie.picture.large);
			var genres = [];
			for( var i = 0, l = this.data.movie.genres.length; i < l; i++ ){
				var genre = this.data.movie.genres[i];
				genres.push(genre.nameTranslated || genre.name);
			}
			var content = mkE({
				tag: 'div',
				className: 'content',
				els: [
					{
						tag: 'div',
						className: 'title',
						text: this.data.movie.titleOriginal + ' (' + this.data.movie.year + ')'
					}
				]
			}).append(this._movieNode);
			if( !empty(this.data.movie.title) && this.data.movie.title !== this.data.movie.titleOriginal ){
				mkE({
					tag: 'div',
					className: 'title-translated',
					text: this.data.movie.title
				}).append(content);
			}
			if( !empty(genres) ){
				mkE({
					tag: 'div',
					className: 'genres',
					text: genres.join(', ')
				}).append(content);
			}
			if( !empty(this.data.movie.descriptionPlain) ){
				mkE({
					tag: 'div',
					className: 'description',
					text: D.shorten(htmlspecialchars_decode(this.data.movie.descriptionPlain), 140, '...')
				}).append(content);
			}
			if( !empty(this.data.movie.imdbRating) ){
				mkE({
					tag: 'div',
					className: 'imdb-rating',
					els: [
						D.Lang.get('imdb_rating') + ': ',
						{
							tag: 'strong',
							text: Number(this.data.movie.imdbRating).toFixed(1)
						}
					]
				}).append(content);
			}
			mkE({
				tag: 'a',
				className: 'close',
				onclick: this._removeMovie,
				els: [
					T.svgIcon({
						icon: 'close-10'
					})
				]
			}).append(this._movieNode);
			D.insertAfter(this._movieNode, this._extraNode);
		},

		_updateOptions: function(){
			clearNode(this._buttonsNode);
			removeNode(this._targetIcon);
			if( !this.data.targeting || !(isset(this.data.targeting.ageFrom) && isset(this.data.targeting.ageTo) && isset(this.data.targeting.sex)) ){
				removeClassName(this._targetIcon, 'active');
			}else{
				addClassName(this._targetIcon, 'active');
			}
			if( this.data.user.type == D.USER_TYPE_DEFAULT ){
				if( !this.parentUid ) {
					this._permissionsButton.append(this._buttonsNode);
				}
				this._submitButton.append(this._buttonsNode);
				this._profileSelect.setInfo(permissionsText(this.data.permissions));
			}else{
				this._targetIcon.append(this._icons);
				if( this.canPostpone ) {
					this._submitButtonOptions.append(this._buttonsNode);
				} else {
					this._submitButton.append(this._buttonsNode);
				}
				if( !this.data.targeting && !this.data.postpone ){
					this._profileSelect.setInfo(permissionsText(D.PERM_ALL));
				}else{
					var infoNode = mkE({
						tag: 'span',
						className: 'color1'
					});
					if( this.data.postpone ){
						mkE.appendTypeElement(infoNode, [
							D.Lang.get('scheduled'),
							' ',
							this.data.postpone.date,
							' ',
							str_pad(this.data.postpone.hours, 2, '0', 'STR_PAD_LEFT'),
							':',
							str_pad(this.data.postpone.minutes, 2, '0', 'STR_PAD_LEFT')
						]);
					}
					if( this.data.targeting ){
						var els = [];
						var genderText = D.Lang.get('gender_both_dat');
						if( this.data.targeting.sex == 1 ){
							genderText = D.Lang.get('gender_male_dat');
						}else if( this.data.targeting.sex == 2 ){
							genderText = D.Lang.get('gender_female_dat');
						}
						if( this.data.postpone ){
							els.push(', ');
							els.push(genderText);
						}else{
							els.push(ucfirst(genderText));
						}
						els.push(' ');
						if( this.data.targeting.ageFrom != 0 || this.data.targeting.ageTo != 100 ){
							els.push(this.data.targeting.ageFrom + '-' + this.data.targeting.ageTo + ' g.');
						}
						mkE.appendTypeElement(infoNode, els);
					}
					this._profileSelect.setInfo(infoNode);
					if( this.data.postpone && this.canPostpone ){
						this._drawSubmitOptionsButton();
					}
				}
			}
		},

		_updateMetaInfo: function(){
			this._updateFormStyle();
			clearNode(this._extraNode);
			var parts = [];
			if( !empty(this.data.location) ){
				if( !empty(parts) ){
					parts.push(' '  + D.Lang.get('and') + ' ');
				}
				parts.push({
					tag: 'span',
					els: [
						D.Lang.get('checked_in') + ' ',
						{
							tag: 'a',
							href: '/places/' + this.data.location.value,
							text: htmlspecialchars_decode(this.data.location.caption),
							target: '_blank'
						}
					]
				});
			}
			if( this._movieNode ){
				this._movieNode.remove();
			}
			if( !empty(this.data.movie) ){
				if( !empty(parts) ){
					parts.push(' ' + D.Lang.get('and') + ' ');
				}
				parts.push(D.Lang.get('watching_movie'));
				if( this._gallery && !this._gallery.empty() ){
					parts.push(' ');
					parts.push({
						tag: 'a',
						href: this.data.movie.url,
						text: this.data.movie.title || this.data.movie.titleOriginal,
						target: '_blank'
					});
				}else{
					if( this._linkInfo ){
						this._linkInfoHide(true);
					}
					this._drawMovieCell();
				}
			}
			if( !empty(this.data.friends) ){
				if( empty(parts) ){
					parts.push(D.Lang.get('with') + ' ');
				}else{
					parts.push(' '  + D.Lang.get('with') + ' ');
				}
				for( var i = 0, l = this.data.friends.length; i < l; i++ ){
					if( i > 0 && i + 1 != l && (l <= 3 || i < 2) ){
						parts.push(', ');
					}else if( l > 1 && ( i == l - 1 || (i == 2 && l > 3) )  ){
						parts.push(' ' + D.Lang.get('and') + ' ');
					}
					if(  i == 2 && l > 3 ){
						var moreFriendsLink = mkE({
							tag: 'a',
							onclick: this._addTag,
							text: D.Lang.nget(l - 2, 'friends_ins')
						});
						parts.push(moreFriendsLink);
						break;
					}
					var withName = this.data.friends[i];
					if( (!withName.value || withName.extra.type == D.TYPE_UNKNOWN) && withName.caption ){
						parts.push({
							tag: 'span',
							className: 'notUser',
							text: htmlspecialchars_decode(withName.caption)
						});
						continue;
					}
					var userNode = mkE({
						tag: 'a',
						onclick: this._addTag,
						text: htmlspecialchars_decode(withName.extra.aktitle)
					});
					/*D.Say.addUserTooltip(userNode, {
						id: withName.value,
						type: withName.extra.type
					});*/
					parts.push(userNode);
				}
			}
			if( !empty(parts) ){
				this._extraNode.appendChild(document.createTextNode(' — '));
				mkE.appendTypeElement(this._extraNode, parts);
			}
			if( !this._addTagOpened && !this._addLocationOpened ){
				var scroll = document.body.scrollTop || document.documentElement.scrollTop;
				if( D.position(this._borderNode).top + 45 < scroll ){
					D.scrollIntoView(this._borderNode);
				}
			}
		},

		_updateFormStyle: function(){
			removeClassName(this.node, 'not-empty');
			if( !this._gallery.empty() || this.data.location || !empty(this.data.friends) || this.data.movie || this._linkInfo ){
				addClassName(this.node, 'not-empty');
			}
		},

		_canSave: function(){
			if( this._linkInfo && !this._linkInfo.canSave() ){
				return false;
			}
			if( this._gallery && !this._gallery.canSave() ){
				return D.Lang.get('cant_save_gallery');
			}
			if( this._gallery && this.post && this.post.event && this.post.event instanceof DR.say.events.struct.Gallery && this._gallery.empty() ){
				return D.Lang.get('cant_save_gallery_need_picture');
			}
			if( (!this._gallery || this._gallery.empty()) && !this._linkInfo && !this.data.location && !this.data.movie && this._editor.empty() ){
				return D.Lang.get('cant_save_empty_text');
			}
			if( this._editor && this._editor.value().length > 5000 ){
				return D.Lang.get('say text to long');
			}
			return true;
		},

		_publishNow: function(){
			this._onScheduleRemove();
			this._save();
		},

		_save: function(){
			var canSave = this._canSave();
			if( canSave !== true ){
				if( canSave !== false ){
					alert(canSave);
				}
				return;
			}
			D.loadingOverlay(this._borderNode);
			var asGallery = !this._gallery.empty() && (this._gallery.length(true) > 1 || this._galleryCheckbox.value());
			if( this.post ){
				if( (this.post.event && this.post.event instanceof DR.say.events.struct.Gallery)|| asGallery ){
					this._editGalleryPost();
					return;
				}
				this._editPost();
				return;
			}
			if( asGallery ){
				this._saveGallery();
			}else{
				this._savePost();
			}
		},

		_saveGallery: function(){
			this._mSavePost = new DR.say.AddGalleryPost();
			this._addSaveData(this._mSavePost);
			this._mSavePost.albumItems = [];
			var albumItems = this._gallery.getItems();
			for( var i = 0, l = albumItems.length; i < l; i++ ){
				var albumItem = albumItems[i];
				this._mSavePost.albumItems.push(albumItem.data);
			}
			this._mSavePost.albumId = this._gallery.aid;
			var albumTitle = this._galleryTitle.value();
			if( !empty(albumTitle) ){
				this._mSavePost.albumTitle = albumTitle;
			}
			this._mSavePost.onLoad = this._onPostSave;
			this._mSavePost.onError = this._onPostError;
			this._mSavePost.call();
		},

		_savePost: function(){
			this._mSavePost = new DR.say.AddPost();
			this._addSaveData(this._mSavePost);
			if( this._gallery.length(true) ){
				var galleryItems = this._gallery.getItems();
				var galleryItem = reset(galleryItems);
				if( galleryItem ){
					this._mSavePost.galleryItemId = galleryItem.data.pid;
				}
			}
			this._mSavePost.onLoad = this._onPostSave;
			this._mSavePost.onError = this._onPostError;
			this._mSavePost.call();
		},

		_editPost: function(){
			this._mEditPost = new DR.say.EditPost();
			this._mEditPost.pid = this.post.id;
			this._addSaveData(this._mEditPost);
			if( this._gallery.length(true) ){
				var galleryItems = this._gallery.getItems();
				var galleryItem = reset(galleryItems);
				if( galleryItem ){
					this._mEditPost.galleryItemId = galleryItem.data.pid;
				}
			}else if( this.post && (this.post.event instanceof DR.say.events.struct.SayPic || this.post.galleryItem) && !this._gallery.length(true) ){
				this._mEditPost.picDeleted = true;
			}
			this._mEditPost.onLoad = this._onPostEdit;
			this._mEditPost.onError = this._onPostError;
			this._mEditPost.call();
		},

		_editGalleryPost: function(){
			this._mEditPost = new DR.say.EditGalleryPost();
			this._mEditPost.pid = this.post.id;
			this._mEditPost.albumId = this._gallery.aid;
			this._addSaveData(this._mEditPost);
			this._mEditPost.albumItems = [];
			var albumItems = this._gallery.getItems();
			for( var i = 0, l = albumItems.length; i < l; i++ ){
				var albumItem = albumItems[i];
				this._mEditPost.albumItems.push(albumItem.data);
			}
			this._mEditPost.albumDeleteItems = this._gallery.itemsDelete;
			this._mEditPost.albumTitle = this._galleryTitle.value();
			this._mEditPost.onLoad = this._onPostEdit;
			this._mEditPost.onError = this._onPostError;
			this._mEditPost.call();
		},

		/**
		 *
		 * @param {DR.say.AddPost|DR.say.EditPost} method
		 * @private
		 */
		_addSaveData: function(method){
			method.uid = this.data.uid;
			method.parentUid = this.data.parentUid;

			method.permissions = new DR.base.struct.Permissions();
			method.permissions.value = this._permissionsButton.value();

			if( !empty(this.data.location) ){
				method.placeId = this.data.location.value;
			}
			if( !empty(this.data.friends) ){
				var users = [];
				for( var i = 0, l = this.data.friends.length; i < l; i++ ){
					var u = this.data.friends[i];
					var user = new DR.say.struct.WithItem();
					if( !u.value || u.extra.type == D.TYPE_UNKNOWN ){
						user.uid = 0;
					}else{
						user.uid = Number(u.value);
					}
					user.name = u.caption;
					users.push(user);
				}
				method.withUsers = users;
			}
			if( this._linkInfo ){
				var link = this._linkInfo.getLinkData();
				method.link = link.link;
				method.title = link.title;
				method.descr = link.description;
				method.gif = link.gif || false;
				method.picTmpId = link.picTmpId || null;
				method.videoTmpId = link.videoTmpId || null;
				method.picDeleted = link.pictureDeleted || false;
				method.videoW = link.videoWidth || null;
				method.videoH = link.videoHeight || null;
				if( link.galleryItemId ){
					method.galleryItemId = link.galleryItemId;
				}
			}
			if( this.data.movie ){
				method.movieId = this.data.movie.id;
			}
			if( this._editor.contentEditable ){
				method.html = this._editor.value();
			}else{
				method.text = this._editor.value();
			}
			if( !empty(this.data.postpone) ){
				method.postponeDate = this._formatPostpone(this.data.postpone);
			}
			if( !empty(this.data.targeting) ){
				method.sex = Number(this.data.targeting.sex);
				method.ageFrom = Number(this.data.targeting.ageFrom);
				method.ageTo = Number(this.data.targeting.ageTo);
			}
		},

		_onPostSave: function(){
			if( !this._mSavePost || this._mSavePost.error || !this._mSavePost.re ){
				return;
			}
			//new D.Say.Form.Test().show();
			new RPC('/say/rq/app.php').send('item', {
				pid: this._mSavePost.re.pid,
				fid: D.ID
			}, this._onPostGet);
		},

		_onPostEdit: function(){
			if( !this._mEditPost || this._mEditPost.error || !this._mEditPost.re ){
				return;
			}
			new RPC('/say/rq/app.php').send('item', {
				pid: this._mEditPost.re.pid,
				fid: D.ID
			}, this._onPostGet);
		},

		_onPostGet: function(re){
			D.removeLoadingOverlay(this._borderNode);
			this.clear();
			this.par.onSave(re);
		},

		_onPostError: function(){
			var error;
			if( this._mSavePost ){
				error = this._mSavePost.error;
			}else if( this._mEditPost ){
				error = this._mEditPost.error;
			}
			switch( error ){
				case 'empty text':
				case 'empty':
					alert(D.Lang.get('cant_save_empty_text'));
					break;
				case 'flood':
					alert(D.Lang.get('you_already_recommended'));
					break;
				default:
					alert(error);
			}
			D.removeLoadingOverlay(this._borderNode);
		},

		clear: function(){
			var uid = this.data.uid;
			this.post = null;
			this._initData();
			this.data.uid = uid;
			this.data.user = this.profiles.get(uid);
			if( this._tagWindow ){
				this._tagWindow.clear(true);
			}
			if( this._locationWindow ){
				this._locationWindow.clear(true);
			}
			if( this._movieWindow ){
				this._movieWindow.clear();
			}
			if( this._targetingWindow ){
				this._targetingWindow.clear();
			}
			removeClassName(this._targetIcon, 'active');
			if( this._scheduleWindow ){
				this._scheduleWindow.clear();
			}
			this._drawSubmitOptionsButton();
			this._linkInfoHide(true);
			this._editor.changePlaceholder(D.Lang.get('Es šobrīd...'));
			this._editor.clear();
			this._gallery.clear();
			this._galleryTitle.remove();
			this._galleryTitle.clear();
			this._galleryCheckboxContainer.remove();
			this._permissionsButton.value(this.data.permissions);
			this._updateOptions();
			this._updateMetaInfo();
		},

		_formatPostpone: function(data){
			var re = data.date;
			re += ' ';
			re += str_pad(data.hours, 2, '0', 'STR_PAD_LEFT');
			re += ':';
			re += str_pad(data.minutes, 2, '0', 'STR_PAD_LEFT');
			return re;
		},

		empty: function(){
			if( this._gallery && this._gallery.length(true) ){
				return false;
			}
			if( this._linkInfo ){
				return false;
			}
			if( this.data.movie || this.data.location || !empty(this.data.friends) ){
				return false;
			}
			if( !this._editor.empty() ){
				return false;
			}
			return true;
		},

		_onLeave: function(e){
			if( InfoBox.opened || (D.GalleryFS && D.GalleryFS.opened) ){
				return;
			}
			if( this.empty() ){
				return;
			}
			if( !document.body.contains(this.node) ){
				return;
			}
			e = e || window.event;
			var message = D.Lang.get('say_form_not_empty');
			if (e)
			{
				e.returnValue = message;
			}
			return message;
		},

		_showTour: function(){
			if( !D.ID || D.me.adddata[627] || !D.LV || this.tourShown ){
				return;
			}
			this.tourShown = true;
			T.tour.crop($(this._galleryCheckboxContainer), {
				withoutBG: true,
				withoutOverlay: true,
				noScroll: true,
				animate: false,
				tourText: 'Turpmāk arī tie ieraksti, kuros ir 1 bilde, tiks ievietoti Tavā galerijā. Ja tomēr to nevēlies, vienkārši izņem ķeksīti.'
			});
			new RPC('/say/rq/app.php').send('sayFormGalleryTour', {});
		}
	},
	mkE.Base
);

/**
 * @class {D.Say.Form.Par}
 */
D.Say.Form.Par = Class(
	/**
	 * @lends {D.Say.Form.Par#}
	 */
	{
		uid: D.ID,
		onSave: D.doNothing,
		profiles: null,
		postId: null,
		friendUser: null,
		helpText: null,
		parentUid: null,
		allowSelectProfile: false
	}
);

/**
 * @param {String} kw
 */
D.Say.Form.stats = function(kw){
	var m = new DR.say.Stats();
	m.kw = kw;
	m.call();
};
// --- form/base.js ---

// +++ form/profile.js +++
/**
 * @class {D.Say.Form.Profile}
 * @extends {mkE.Base}
 * @param {Object} par
 */
D.Say.Form.ProfileSelect = Class(
	/**
	 * @lends {D.Say.Form.Profile#}
	 */
	{
		/**
		 * @param {Object} par
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};
			this.allowSelectProfile = par.allowSelectProfile || false;
			this.uid = par.uid || D.ID;
			this.profiles = par.profiles || new D.SortedMap();
			this._onChange = par.onChange || D.doNothing;

			this.node = mkE({
				tag: 'div',
				className: 'SayFormProfile'
			});

			this._draw();
		},

		_draw: function(){
			var user = this.profiles.get(this.uid);

			this._imageNode = mkE({
				tag: 'div',
				className: 'image'
			}).append(this.node);
			D.bgImage(this._imageNode, user.image.small);

			this._contentNode = mkE({
				tag: 'div',
				className: 'content'
			}).append(this.node);

			this._titleNode = mkE({
				tag: 'div',
				className: 'title',
				els: [
					this._titleLinkNode = mkE({
						tag: 'span',
						els: [
							this._titleTextNode = mkE({
								tag: 'span',
								text: htmlspecialchars_decode(user.title)
							})
						]
					})
				]
			}).append(this._contentNode);

			this._infoNode = mkE({
				tag: 'div',
				className: 'info empty'
			}).append(this._contentNode);

			this._drawProfiles()
		},

		_drawProfiles: function(){
			var lockedSelection = (this.uid != D.ID && !this.allowSelectProfile);
			if( (this.profiles.length() == 1 || lockedSelection) && this.profiles.get(D.ID) ){
				addClassName(this.node, 'no-profiles');
				return;
			}
			this._profileMenu = new D.Say.Form.ProfileSelect.Menu({
				profiles: this.profiles,
				onchange: this._onProfileChange,
				active: this.uid
			});

			clearNode(this._titleNode);
			addClassName(this._titleNode, 'has-profiles');
			T.svgIcon({
				icon: 'pointer-ddw'
			}).append(this._titleLinkNode);

			var par = new T.DropDownBase__par();
			par.withoutArrow = true;
			par.withoutPadding = true;
			par.caption = this._titleLinkNode;
			par.align = 'left';
			par.els = [
				this._profileMenu
			];
			par.onShow = function(){
				D.Say.Form.stats('nsf_open_profile');
			};
			this._dropDown = new T.DropDownBase(par);
			this._dropDown.append(this._titleNode);
		},

		_onProfileChange: function(profile){
			if( profile.id !== this.uid ){
				D.Say.Form.stats('nsf_choose_profile');
			}
			this._dropDown.hideMenu();
			setNodeText(this._titleTextNode, htmlspecialchars_decode(profile.title));
			D.bgImage(this._imageNode, profile.image.small);
			this._onChange(profile);
		},

		setInfo: function(info){
			clearNode(this._infoNode);
			if( !info ){
				addClassName(this._infoNode, 'empty');
				return;
			}
			removeClassName(this._infoNode, 'empty');
			mkE.appendTypeElement(this._infoNode, info);
		}
	},
	mkE.Base
);

/**
 * @class {D.Say.Form.ProfileSelect.Menu}
 * @extends {mkE.Base}
 */
D.Say.Form.ProfileSelect.Menu = Class(
	/**
	 * @lends {D.Say.Form.ProfileSelect.Menu#}
	 */
	{
		active: D.ID,
		_profiles: [],

		/**
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};
			this.profiles = par.profiles || new D.SortedMap();
			this._onchange = par.onchange || D.doNothing;
			if( par.active ){
				this.active = par.active;
			}

			this.node = mkE({
				tag: 'div',
				className: 'SayProfileSwitchMenu SayProfileSwitchMenuLarge',
				els: [
					{
						tag: 'div',
						className: 'info',
						text: D.Lang.get('say_profile_switch')
					},
					this._profileListContainer = mkE({
						tag: 'div',
						className: 'profileListContainer',
						els: [
							this._profileList = mkE({
								tag: 'div',
								className: 'profileList'
							})
						]
					})
				]
			});

			this._drawProfiles();
		},

		_drawProfiles: function(){
			var profiles = this.profiles.toArray();
			for( var i = 0, l = profiles.length; i < l; i++ ){
				var data = profiles[i];
				var profile = new D.Say.Form.ProfileSelect.Item({
					data: data,
					onclick: this._onclick
				});
				if( this.active == data.id ){
					profile.setActive(true);
				}
				this._profiles.push(profile);
				profile.append(this._profileList);
			}
			if( this.profiles.length() <= 4 ){
				this._profileListContainer.style.height = 44 * this.profiles.length() + 'px';
				return;
			}
			this._initScrollBar();
		},

		_initScrollBar: function(){
			var par = new T.ScrollBarPar();
			par.parent = this._profileListContainer;
			par.element = this._profileList;
			par.nativeMac = true;
			this._scrollBar = new T.ScrollBar(par);
		},

		_onclick: function(profile){
			for( var i = 0, l = this._profiles.length; i < l; i++ ){
				var p = this._profiles[i];
				p.setActive(p.id == profile.id);
			}
			this._onchange(profile);
		}
	},
	mkE.Base
);

D.Say.Form.ProfileSelect.Item = Class(
	/**
	 * @lends {D.Say.Form.ProfileSelect.Item#}
	 */
	{
		/**
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};
			this.data = par.data || {};
			this.id = par.data.id;
			this.title = htmlspecialchars_decode(par.data.title);
			this.image = par.data.image.icon;
			this.type = par.data.type;
			this.click = par.onclick || D.doNothing;

			this.node = mkE({
				tag: 'a',
				className: 'SayProfileSwitchItem',
				onclick: this._onclick
			});

			this._drawImage();
			this._drawInfo();
		},

		_drawImage: function(){
			var image= mkE({
				tag: 'div',
				className: 'image'
			});
			D.bgImage(image, this.image);
			image.append(this.node);
		},

		_drawInfo: function(){
			var info = mkE({
				tag: 'div',
				className: 'profileInfo'
			}).append(this.node);

			mkE({
				tag: 'div',
				className: 'title cut',
				text: this.title
			}).append(info);

			if( this.type != D.USER_TYPE_DEFAULT ){
				return;
			}

			mkE({
				tag: 'div',
				className: 'help',
				text: D.Lang.get('say_profile_' + this.type)
			}).append(info);
		},

		setActive: function(v){
			if( v ){
				addClassName(this.node, 'active');
			}else{
				removeClassName(this.node, 'active');
			}
		},

		_onclick: function(){
			this.click(this.data);
		}
	},
	mkE.Base
);
// --- form/profile.js ---

// +++ form/targeting.js +++
/**
 * @class {D.Say.Form.Targeting}
 * @extends {mkE.Base}
 * @param {Object} par
 * @param {Number} par.ageFrom
 * @param {Number} par.ageTo
 * @param {Number} par.sex
 * @param {Function} par.onSave
 * @param {Function} par.onCancel
 */
D.Say.Form.Targeting = Class(
	/**
	 * @lends {D.Say.Form.Targeting#}
	 */
	{
		/**
		 * @param {Object} par
		 * @param {Number} par.ageFrom
		 * @param {Number} par.ageTo
		 * @param {Number} par.sex
		 * @param {Function} par.onSave
		 * @param {Function} par.onCancel
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};
			this.par = par;

			this._defaultValues();

			this._onSave = par.onSave || D.doNothing;
			this._onCancel = par.onCancel || D.doNothing;

			this.node = mkE({
				tag: 'div',
				className: 'SayFormTargeting'
			});

			this._drawSlider();
			this._drawRadioButtons();
			this._drawButtons();
		},

		_defaultValues: function(){
			this.ageFrom = this.par.ageFrom || 0;
			this.ageTo = this.par.ageTo || 100;
			this.sex = this.par.sex || 0;
		},

		_drawSlider: function(){
			var par = {
				min: 0,
				max: 100,
				from: this.ageFrom,
				to: this.ageTo,
				caption: D.Lang.get('age'),
				onChange: this._onAgeChange,
				onSlideEnd: this._onAgeChangeEnd
			};

			this._slider = new T.Forms.Slider(par);
			this._slider.appendTo(this.node);

			this._is18plus = new T.Form.CheckBox({
				caption: '18+',
				onchange: this._is18change,
				checked: this.ageFrom == 18 && this.ageTo == 100
			}).append(this.node);
		},

		_onAgeChange: function(){
			this._is18plus.value(this._slider.from == 18 && this._slider.to == 100);
		},

		_onAgeChangeEnd: function(){
			this._calculate();
		},

		_is18change: function(){
			if( this._is18plus.value() ){
				this._slider.from = 18;
			}else{
				this._slider.from = 0;
			}
			this._slider.to = 100;
			this._slider.setPos();
			this._calculate();
		},

		_drawRadioButtons: function(){
			var par = new T.Form.RadioListPar();
			par.caption = D.Lang.get('gender');
			par.options = [
				{
					value: 0,
					caption: D.Lang.get('gender_both')
				},
				{
					value: 1,
					caption: D.Lang.get('gender_male')
				},
				{
					value: 2,
					caption: D.Lang.get('gender_female')
				}
			];
			par.value = this.sex;
			par.onchange = this._onGenderChange;
			this._radioList = new T.Form.RadioList(par);
			this._radioList.append(this.node);
		},

		_onGenderChange: function(){
			this._calculate();
		},

		_drawButtons: function(){
			this._buttonsNode = mkE({
				tag: 'div',
				className: 'buttons',
				els: [
					new T.Form.Button({
						caption: D.Lang.get('Cancel'),
						color: 'link',
						onclick: this._cancel
					}),
					new T.Form.Button({
						caption: D.Lang.get('Save'),
						color: 'submit',
						onclick: this._save
					})
				]
			}).append(this.node);
		},

		_calculate: function(){
			if( this._slider.from == 0 && this._slider.to == 100 && this._radioList.value() == 0 ){
				if( this._audienceNode ){
					removeNode(this._audienceNode);
				}
				return;
			}
			var rpc = new RPC('/banana/rq/mini.php');
			rpc.send('getAudience', {
				ageFrom: this._slider.from,
				ageTo: this._slider.to,
				sex: this._radioList.value(),
				keywords: [],
				notKeywords: [],
				loc: []
			}, this._onCalculate);
		},

		_onCalculate: function(re){
			var count = Number(re.count);
			if( this._audienceNode ){
				removeNode(this._audienceNode);
			}
			this._audienceNode = mkE({
				tag: 'div',
				className: 'audience',
				els: [
					{
						tag: 'strong',
						text: D.Lang.get('audience') + ': '
					},
					count + ' ' + D.Lang.nget(count, 'user')
				]
			});
			D.insertBefore(this._audienceNode, this._buttonsNode);
		},

		_save: function(){
			this.sex = this._radioList.value();
			this.ageFrom = this._slider.from;
			this.ageTo = this._slider.to;

			this._onSave({
				ageFrom: this.ageFrom,
				ageTo: this.ageTo,
				sex: this.sex
			});
		},

		_cancel: function(){
			this.reset();
			this._onCancel();
		},

		reset: function(){
			this._slider.from = this.ageFrom;
			this._slider.to = this.ageTo;
			this._slider.setPos();

			this._radioList.value(this.sex);
		},

		clear: function(){
			this._defaultValues();
			this.reset();
		}
	},
	mkE.Base
);
// --- form/targeting.js ---

// +++ form/schedule.js +++
/**
 * @class {D.Say.Form.Schedule}
 * @extends {mkE.Base}
 * @param {Object} [par]
 * @param {String} [par.date]
 * @param {Number} [par.hours]
 * @param {Number} [par.minutes]
 * @param {Function} [par.onSave]
 * @param {Function} [par.onCancel]
 * @param {Function} [par.onRemove]
 */
D.Say.Form.Schedule = Class(
	/**
	 * @lends {D.Say.Form.Schedule#}
	 */
	{
		/**
		 * @param {Object} [par]
		 * @param {String} [par.date]
		 * @param {Number} [par.hours]
		 * @param {Number} [par.minutes]
		 * @param {Function} [par.onSave]
		 * @param {Function} [par.onCancel]
		 * @param {Function} [par.onRemove]
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};
			this.par = par;
			this._defaultValues();

			this._onSave = par.onSave || D.doNothing;
			this._onCancel = par.onCancel || D.doNothing;
			this._onRemove = par.onRemove || D.doNothing;

			this.node = mkE({
				tag: 'div',
				className: 'SayFormSchedule',
				els: [
					this._dateContainer = mkE({
						tag: 'div',
						className: 'date'
					}),
					this._timeContainer = mkE({
						tag: 'div',
						className: 'time'
					}),
					T.clear()
				]
			});

			this._drawFields();
			this._drawButtons();

			if( isset(par.date) && isset(par.hours) && isset(par.minutes) ){
				this._addRemoveNode();
			}
		},

		_defaultValues: function(){
			var date = new D.Date(D.TIME + 600);
			this.date = this.par.date || date.format('d.m.Y');
			this.hours = this.par.hours || date.getHours();
			this.minutes = this.par.minutes || date.getMinutes();
		},

		_drawFields: function(){
			mkE({
				tag: 'div',
				className: 'label',
				text: D.Lang.get('publish_date')
			}).append(this._dateContainer);

			this._dateInput = new T.Form.Input({
				datepicker: {
					format: 'd.m.Y',
					disableBefore: ( new D.Date ).format('d.m.Y')
				},
				value: this.date,
				readonly: true
			}).append(this._dateContainer);

			mkE({
				tag: 'div',
				className: 'label',
				text: D.Lang.get('Laiks')
			}).append(this._timeContainer);

			var hours = [];
			for( var i = 0; i <= 23; i++ ){
				hours.push({
					value: i,
					caption: str_pad(i, 2, '0', 'STR_PAD_LEFT')
				});
			}

			this._hourSelect = new T.Form.Select({
				options: hours,
				value: this.hours
			}).append(this._timeContainer);

			var minutes = [];
			for( var j = 0; j <= 59; j++ ){
				minutes.push({
					value: j,
					caption: str_pad(j, 2, '0', 'STR_PAD_LEFT')
				});
			}

			this._minuteSelect = new T.Form.Select({
				options: minutes,
				value: this.minutes
			}).append(this._timeContainer);
		},

		_drawButtons: function(){
			this._buttonsNode = mkE({
				tag: 'div',
				className: 'buttons',
				els: [
					new T.Form.Button({
						caption: D.Lang.get('Cancel'),
						color: 'link',
						onclick: this._cancel
					}),
					new T.Form.Button({
						caption: D.Lang.get('Save'),
						color: 'submit',
						onclick: this._save
					})
				]
			}).append(this.node);
		},

		_save: function(){
			var date = new D.Date();
			date.fromFormat('d.m.Y', this._dateInput.value());
			date.setHours(this._hourSelect.value());
			date.setMinutes(this._minuteSelect.value());

			if( date.getTime() < D.TIME ){
				alert(D.Lang.get('schedule_cant_past'));
				return;
			}

			this.date = this._dateInput.value();
			this.hours = this._hourSelect.value();
			this.minutes = this._minuteSelect.value();

			this._onSave({
				date: this.date,
				hours: this.hours,
				minutes: this.minutes
			});

			this.canRemove(true);
		},

		_cancel: function(){
			this.reset();
			this._onCancel();
		},

		_remove: function(){
			if( this._removeNode ){
				this._removeNode.remove();
			}
			this._onRemove();
		},

		canRemove: function(v){
			if( this._removeNode ){
				removeNode(this._removeNode);
			}
			if( !v ){
				return;
			}
			this._addRemoveNode();
		},

		_addRemoveNode: function(){
			this._removeNode = mkE({
				tag: 'div',
				className: 'remove',
				els: [
					{
						tag: 'a',
						text: D.Lang.get('remove_schedule'),
						onclick: this._remove
					}
				]
			});
			D.insertBefore(this._removeNode, this._buttonsNode);
		},

		reset: function(){
			this._dateInput.value(this.date);
			this._hourSelect.value(this.hours);
			this._minuteSelect.value(this.minutes);
		},

		clear: function(){
			if( this._removeNode ){
				this._removeNode.remove();
			}
			this._defaultValues();
			this.reset();
		}
	},
	mkE.Base
);
// --- form/schedule.js ---

// +++ form/editor.js +++
/**
 * @class {D.Say.Editor}
 * @extends {mkE.Base}
 * @param {D.Say.Editor.Par} [par]
 */
D.Say.Editor = Class(
	/**
	 * @lends {D.Say.Editor#}
	 */
	{
		_invalidQueries: {},
		_acCache: {},
		_acTimeout: null,

		links: [],
		_link: null,

		_lastAcText: '',

		/**
		 * @param {D.Say.Editor.Par} [par]
		 * @constructs
		 */
		__construct: function(par){
			this.par = par || new D.Say.Editor.Par;
			this.uid = this.par.uid || D.ID;

			this.noLinkReplace = this.par.noLinkReplace || false;
			this.onChange = this.par.onChange || D.doNothing;
			this._onCtrlEnter = this.par.onCtrlEnter || D.doNothing;

			this.node = mkE({
				tag: 'div',
				className: 'SayEditorNew',
				els: [
					this._defaultTextNode = mkE({
						tag: 'div',
						className: 'placeholder',
						text: this.par.placeholder,
						onclick: this.focus
					})
				]
			});

			this.contentEditable = Boolean(typeof document.body.contentEditable !== 'undefined');
			if( this.contentEditable ){
				this._drawContentEditable();
			}else{
				this._drawTextArea();
			}
		},

		_drawContentEditable: function(){
			this._content = mkE({
				tag: 'div',
				prop: {
					contentEditable: true,
					onfocus: this._onFocus,
					onblur: this._onBlur,
					onkeyup: this._onKeyUp,
					onclick: this._onClick,
					onkeydown: this._onKeyDown,
					onkeypress: this._onKeyPress,
					onpaste: this._onPaste
				}
			}).append(this.node);
			//$(this._content).bind('paste', this._onPaste);
		},

		_drawTextArea: function(){
			this._content = mkE({
				tag: 'textarea'
			}).append(this.node);
		},

		_onFocus: function(){
			this._defaultTextNode.remove();
			this._saveSelection(false);
		},

		_onBlur: function(){
			if( this.empty(true) ){
				this._defaultTextNode.prepend(this.node);
			}
		},

		focus: function(){
			this._content.focus();
			this._onFocus();
		},

		blur: function(){
			this._content.blur();
			this._onBlur();
		},

		_normalize: function(){
			if( D.browser.name === 'Explorer' ){
				return;
			}
			this._content.normalize();
		},

		_onKeyUp: function(e){
			e = D.event(e);
			switch( e.keyCode ){
				case D.Say.Editor.KEY_ESC:
					this._acHide();
					return;
				case D.Say.Editor.KEY_ENTER:
					if( this._acList ){
						if( D.browser.name === 'Chrome' ){
							this._addBrAsLast();
						}
						return false;
					}
					this._replaceLinks();
					this.onChange();
					break;
				case D.Say.Editor.KEY_ARROW_UP:
					if( this._acList ){
						return false;
					}
					break;
				case D.Say.Editor.KEY_ARROW_DOWN:
					if( this._acList ){
						return false;
					}
					break;
				case D.Say.Editor.KEY_SPACE:
					if( !this._acList ){
						this._replaceLinks();
						this.onChange();
					}
					break;
				case D.Say.Editor.KEY_BACKSPACE:
				case D.Say.Editor.KEY_DEL:
					this.links = [];
					if( this._link ){
						this.links.push(this._link);
					}
					var links = this._content.getElementsByTagName('a');
					for( var i = 0; i < links.length; ++ i ){
						this.links.push( links[i] );
					}
					this.onChange();
					break;
			}
			this._getAutoComplete();
			if( D.browser.name !== 'Explorer' ){
				this._saveSelection();
				this._setFocusNode();
			}
			if( D.browser.name === 'Chrome' ){
				this._addBrAsLast();
			}
			this.onChange();
		},

		_onKeyDown: function(e){
			e = D.event(e);
            if( D.checkCtrlEnter(e) ){
                this._onCtrlEnter();
                return false;
            }
			switch( e.keyCode ){
				case D.Say.Editor.KEY_ENTER:
					if( this._acList ){
						this._acList.select();
						return false;
					}
					break;
				case D.Say.Editor.KEY_ARROW_UP:
					if( this._acList ){
						this._acList.up();
						return false;
					}
					break;
				case D.Say.Editor.KEY_ARROW_DOWN:
					if( this._acList ){
						this._acList.down();
						return false;
					}
					break;
				case D.Say.Editor.KEY_BACKSPACE:
					if( !this._content.childNodes.length ){
						return false;
					}
					if( !window.getSelection || String( window.getSelection() ) === '' ){
						var cursor = this._insertCursor();
						var prev;
						if( cursor.prev && cursor.prev.nodeType === Node.TEXT_NODE && cursor.prev.nodeValue === '' ){
							prev = cursor.prev.previousSibling;
							removeNode( cursor.prev );
							cursor.prev = prev;
						}
						prev = cursor.prev;
						// IE
						if( prev && prev.nodeType === Node.TEXT_NODE ){
							prev = prev.parentNode;
						}
						if( prev && prev !== this._content && prev.nodeType === Node.ELEMENT_NODE && !this._isEditable(prev) ){
							removeNode(prev);
							return false;
						}
						if( cursor.next && cursor.next.nodeType === Node.TEXT_NODE && cursor.next.nodeValue === '' ){
							this._setCursor( cursor.next );
						}
					}
					break;
				case D.Say.Editor.KEY_DEL:
					if( this._focusNode ){
						var fn = this._focusNode;
						if( fn && fn.nodeType === 3 ){
							fn = fn.parentNode;
						}
						if( fn && !this._isEditable(fn) ){
							var next = fn.nextSibling;
							removeNode(fn);
							this._setCursor(next);
							return false;
						}
					}
					break;
			}
		},

		// DB-4043 multiline events didnt work
		_onKeyPress: function(e) {
			e = D.event(e);

			// DB-3291 Chrome uz enter veido jaunus div tagus, kas dzēšot linebreaku nodzēš arī linku.
			if (e.keyCode == 13 && D.browser.name == 'Chrome' && window.getSelection ) {
				var selection = window.getSelection();
				var range = selection.getRangeAt(0);
				var br = document.createElement("br");
				range.deleteContents();
				range.insertNode(br);
				range.setStartAfter(br);
				range.setEndAfter(br);
				range.collapse(false);
				selection.removeAllRanges();
				selection.addRange(range);
				return false;
			}
		},

		_onClick: function(){
			this._getAutoComplete();
			this._saveSelection(false);
		},

		_onPaste: function(e){
			e.preventDefault();
			var text = '';
			if (e.clipboardData || (e.originalEvent && e.originalEvent.clipboardData)) {
				text = (e.originalEvent || e).clipboardData.getData('text/plain');
			} else if (window.clipboardData) {
				text = window.clipboardData.getData('Text');
			}
			var sel, range;
			if (window.getSelection) {
				sel = window.getSelection();
				if (sel.rangeCount) {
					range = sel.getRangeAt(0);
					range.deleteContents();
				}
			} else if (document.selection && document.selection.createRange) {
				range = document.selection.createRange();
				range.text = '';
			}
			if( range ){
				this._savedRange = range;
			}
			this.insertHTML(text);
			setTimeout( this._onPasteAction, 20 );
		},

		_onPasteAction: function(){
			this._saveSelection();
			var cursor = mkE({
				tag: 'span'
			});
			this._insertNode(cursor, false);
			D.smileyReplace(this._content);
			this._setCursor(cursor, 0);
			cursor.remove();
			this._replaceLinks();
			this._clearDOM();
			this._getAutoComplete();
			this.onChange();
		},

		_getAutoComplete: function(par){
			par = par || {};
			clearTimeout(this._acTimeout);
			this._normalize();
			var selection = window.getSelection();
			if( !selection || selection.anchorNode.nodeType !== Node.TEXT_NODE ){
				this._acHide();
				return false;
			}
			if( selection.anchorNode.parentNode && existsClassName(selection.anchorNode.parentNode, 'user') ){
				this._acHide();
				return false;
			}
			var range = selection.getRangeAt(0);
			var text = getNodeText(selection.anchorNode);
			var startOffset;
			var endOffset;
			var acText;
			// Iezīmēts teksts
			if( range.startOffset !== range.endOffset ){
				startOffset = range.startOffset;
				endOffset = range.endOffset;
				acText = text.substring(range.startOffset, range.endOffset);
			}else{
				var textStart = text.substr(0, range.endOffset);
				var textEnd = text.substr(range.endOffset);
				var at = textStart.indexOf('@') !== -1;

				var wordData = this._getWord(textStart, textEnd, at);
				startOffset = range.endOffset - wordData.start;
				endOffset = range.endOffset + wordData.end;
				acText = wordData.word;

				if( at ){
					var invalidQuery = this._invalidQuery(acText);
					if( invalidQuery && invalidQuery === acText ){
						this._acHide();
						return false;
					}else if( invalidQuery ){
						wordData = this._getWord(textStart, textEnd);
						startOffset = range.endOffset - wordData.start;
						endOffset = range.endOffset + wordData.end;
						acText = wordData.word;
						at = false;
					}
				}
			}
			if( trim(acText) === this._lastAcText ){
				return false;
			}
			if( empty(acText) ){
				this._acHide();
				return false;
			}
			if( !at && acText.length < 5 ){
				this._acHide();
				return false;
			}

			var r = document.createRange();
			r.setStart(selection.anchorNode, at ? startOffset - 1 : startOffset);
			r.setEnd(selection.anchorNode, endOffset);

			this._acTimeout = setTimeout(D.closure(this, this._getUsers, {
				selection: selection,
				query: trim(acText),
				startOffset: startOffset,
				endOffset: endOffset,
				at: at,
				range: r
			}), par.instant || this._isCached(trim(acText)) ? 0 : 625);
		},

		_getWord: function(textStart, textEnd, at){
			var pattern;
			if( at === true ){
				pattern = /([^@]*)$/i;
			}else{
				pattern = /([^\s]*)$/i;
			}
			var match = pattern.exec(textStart);
			var start = match[1] || '';
			var end = textEnd.replace(/^([^\s]*).*/i, '$1');
			return {
				start: start.length,
				end: end.length,
				word: start + end
			};
		},

		_invalidQuery: function(text){
			for( var query in this._invalidQueries ){
				if( !this._invalidQueries.hasOwnProperty(query) ){
					continue;
				}
				if( text.indexOf(query) === 0 ){
					return query;
				}
			}
			return false;
		},

		_isCached: function(query){
			return isset(this._acCache[this.uid + '-' + query]);
		},

		_getCached: function(query){
			return this._acCache[this.uid + '-' + query];
		},

		_getUsers: function(data){
			if( this._activeMethod && this._activeMethod.processing && this._activeMethod.query === data.query ){
				return;
			}
			this._acData = data;
			if( this._isCached(data.query) ){
				this._showAC(this._getCached(data.query), data.query);
				return;
			}
			var method = new DR.search.GetMentions();
			method.query = data.query;
			method.count = 6;
			method.uid = this.uid;
			method.friends = !data.at;
			method.noSplit = data.at;
			if( !data.at ){
				method.types = [
					D.USER_TYPE_DEFAULT
				];
			}
			method.select = [
				new DR.users.select.User().id().type().url().title().image(),
				new DR.users.select.Image().small()
			];
			method.onLoad = D.closure(this, this._onGetUsers, method, data.query);
			method.call();

			this._activeMethod = method;
		},

		/**
		 * @param {DR.search.GetMentions} method
		 * @param {String} query
		 */
		_onGetUsers: function(method, query){
			if( this._activeMethod !== method ){
				return;
			}
			if( method.error || !method.re ){
				this._acHide();
				return;
			}
			/** @type {DR.search.struct.AllRe} */
			var re = method.re;
			if( empty(re.types) ){
				var parts = method.query.split(' ');
				this._invalidQueries[parts[0]] = true;
				if( isset(parts[1]) ){
					this._getAutoComplete({
						instant: true
					});
					return;
				}
				this._acHide();
				return;
			}
			this._acCache[this.uid + '-' + method.query] = re;
			this._showAC(re, query);
		},

		/**
		 * @param {DR.search.struct.AllRe} data
		 * @param {String} query
		 */
		_showAC: function(data, query){
			var range = document.createRange();
			var startOffset = this._acData.startOffset;
			if( this._acData.at ){
				startOffset = Math.max(0, startOffset - 1);
			}
			range.setStart(this._acData.selection.anchorNode, startOffset);
			range.setEnd(this._acData.selection.anchorNode, startOffset);
			var c = mkE({
				tag: 'span',
				els: [
					document.createTextNode("\u200b")
				]
			});
			range.insertNode(c);
			var top = c.offsetTop;
			var left = c.offsetLeft;
			var height = c.offsetHeight;
			c.remove();
			this._normalize();

			this._acHide();

			this._acList = new D.Say.Mentions({
				onclick: this._acChoose,
				data: data.types
			});
			this._acList.append(this.node);
			this._acList.position({
				top: top + height,
				left: left
			});

			this._lastAcText = query;

			$(document).on('click.mentions', this._documentClick);
		},

		_documentClick: function(e){
			e = D.event(e);
			if( !e.target ){
				return;
			}
			if( e.target == this._acList.node || this._acList.node.contains(e.target) ){
				return;
			}
			this._acHide();
		},

		_acChoose: function(user){
			var userNode = mkE({
				tag: 'span',
				className: 'user',
				text: user.title,
				prop: {
					contentEditable: false
				},
				attr: {
					uid: user.id
				}
			});
			var selection = window.getSelection();
			if( selection.rangeCount > 0 ){
				selection.removeAllRanges();
			}
			selection.addRange(this._acData.range);
			var range = selection.getRangeAt(0);
			// Ja nav @, tad pārbaudam, vai iepriekšējais vārds nav daļa no izvēlētā, un ja ir tad aizstājam visu
			if( !this._acData.at ){
				var text = getNodeText(range.startContainer).substring(0, range.startOffset);
				var pattern = /(^|\s)([^\s]*\s)$/;
				var match = pattern.exec(text);
				if( match && isset(match[2]) && !empty(match[2]) ){
					var nameStart = match[2] + this._acData.query;
					if( user.title.indexOf(nameStart) === 0 ){
						range.setStart(range.startContainer, range.startOffset - match[2].length);
					}
				}
			}
			range.insertNode(userNode);
			range.setStartAfter(userNode);
			range.deleteContents();
			this._acHide();
			D.Say.addUserTooltip(userNode, {
				type: user.type,
				id: user.id
			});
			range = document.createRange();
			range.setStartAfter(userNode);
			range.collapse(true);
			if( selection.rangeCount > 0 ){
				selection.removeAllRanges();
			}
			selection.addRange(range);
			return false;
		},

		_acHide: function(){
			if( !this._acList ){
				return;
			}
			this._lastAcText = '';
			this._acList.remove();
			delete this._acList;
			$(document).off('click.mentions', this._documentClick);
		},

		// DB-3291 Chrome uz enter veido jaunus div tagus, kas dzēšot linebreaku nodzēš arī linku.
		// Pieliekam <br> vienmēr kā pēdējo tagu (vai pirms linka, ja ir links)
		_addBrAsLast: function(){
			var lastChild = this._content.lastChild;
			if( !lastChild ){
				this._content.appendChild(document.createElement("br"));
				return;
			}
			if( lastChild.nodeName.toLowerCase() === 'div' || lastChild.nodeName.toLowerCase() === 'p' ){
				return;
			}
			if( lastChild.nodeName.toLowerCase() === 'a' ){
				var prevNode = lastChild.previousSibling;
				if( !prevNode || prevNode.nodeName.toLowerCase() != 'br' ){
					this._content.appendChild(document.createElement("br"));
					return;
				}
			}
			if( lastChild.nodeName.toLowerCase() === 'br' ){
				return;
			}
			this._content.appendChild(document.createElement("br"));
		},

		_clearDOM:function(node){
			if(!node){
				node = this._content;
			}
			var $editor = this;
			var k = 0;
			while( k < node.childNodes.length ){
				var n = node.childNodes[k];
				if( n.nodeType == 3 ){
					++ k;
					continue;
				}
				if( n.nodeType == 1 ){
					if( !n._linkInfo ){
						n.setAttribute( 'style', '' );
					}
					if( !n.getAttribute('uid') && !D.Emoji.test(n.getAttribute('alt')) && !D.smileys[n.getAttribute('alt')] ){
						n.className = '';
					}
					n.id = '';
					if( this._clearDOM_OK(n) ){
						$editor._clearDOM(n);
						++ k;
						continue;
					}
					var childs = [];
					for( var i = 0; i < n.childNodes.length; ++ i ){
						childs.push( n.childNodes[i] );
					}
					for( var i in childs ){
						var ci = childs[i];
						if( ci.nodeType == 1 ){
							node.insertBefore( ci, n );
							$editor._clearDOM( ci );
						}
						if( ci.nodeType == 3 ){
							node.insertBefore( ci, n );
						}
					}
				}
				node.removeChild(n);
			}
		},

		_clearDOM_OK:function(n){
			switch( n.tagName ){
				case 'BR':
					return true;
				case 'P':
				case 'DIV':
					if( n.id === '' && n.className === '' ){
						return true;
					}
					break;
				case 'A':
					return true;
				case 'IMG':
					return n.alt && (D.smileys[ n.alt ] || D.Emoji.test(n.alt));
				case 'SPAN':
					return true;
			}
			return false;
		},

		_isEditable:function(node){
			var n = node || this._focusNode;
			if( n && n.nodeType === 3 ){
				n = n.parentNode;
			}
			if(!n){
				return true;
			}
			switch( n.tagName ){
				case 'A':
					return false;
				case 'SPAN':
					if( !empty( n.getAttribute('uid') ) ){
						return false;
					}
					break;
			}
			return true;
		},

		setLink: function(link){
			if( this._link && !link ){
				if( this._link._placeholderNode && this._content.contains(this._link._placeholderNode) ){
					D.insertAfter(this._link, this._link._placeholderNode);
					this._link._placeholderNode.remove();
					delete this._link._placeholderNode;
					this.focus();
				}else{
					this._setCursorAtEnd();
					this._insertNode(this._link);
				}
			}
			this._link = link;
		},

		_replaceLinks: function(node, re){
			if( !this.contentEditable ){
				return 0;
			}
			if( this.noLinkReplace ){
				return 0;
			}
			if( !node ){
				this.links = [];
				if( this._link ){
					this.links.push(this._link);
				}
			}
			re = re || 0;
			node = node || this._content;
			if( !node.childNodes.length ){
				return re;
			}
			var k = 0;
			while( k < node.childNodes.length ){
				var n = node.childNodes[k];
				if( n.nodeType === 3 ){
					var links = n.nodeValue.match( D.SayEditor.replaceLinksExp );
					if( empty(links) ){
						++ k;
						continue;
					}
					var newNodes = [];
					var text = n.nodeValue;
					for( var i = 0; i < links.length; ++ i ){
						var p = text.indexOf( links[i] );
						var splited = [ text.substr( 0, p ), text.substr( p + links[i].length ) ];
						if( links[i].substr( 0, 3 ) === 'www' ){
							links[i] = 'http://' + links[i];
						}
						newNodes.push( document.createTextNode( splited[0] ) );
						text = splited[1];
						var a = mkE( {
							tag:'a',
							text:links[i],
							prop:{
								contentEditable:false,
								onresizestart:function(){
									return false;
								},
								href:links[i]
							},
							attr:{
								target:'_blank'
							}
						} );
						this.links.push(a);
						++ re;
						newNodes.push(a);
					}
					var pattern = /\s+/;
					if( !pattern.exec(text.substr(-1)) ){
						text = text + ( D.browser.name === 'Firefox' ? D.SayEditor.SPACE : ' ' );
					}
					var cursor = document.createTextNode( text );
					newNodes.push(cursor);
					for( var j in newNodes ){
						D.insertBefore( newNodes[j], n );
					}
					removeNode(n);
					this._setCursor(cursor, 1);
					k += newNodes.length;
					continue;
				}
				if( n.nodeType === 1 && n.tagName === 'A' ){
					this.links.push(n);
					if( !n.onresizestart ){
						n.contentEditable = false;
						n.onresizestart = function(){
							return false;
						};
						n.target = '_blank';
						// IE fix
						if( D.browser.name !== 'Explorer' || D.browser.version > 8 ){
							var cursor = document.createTextNode( ' ' );
							D.insertAfter( cursor, n );
							this._setCursor(cursor, 1);
						}
					}
					++ k;
					continue;
				}
				if( this._isEditable(n) ){
					re += this._replaceLinks(n);
				}
				++ k;
			}
			return re;
		},

		/**
		 * @param users
		 */
		_replaceUsers: function(users){
			D.replaceCommentsWithNode( this._content, function(data){
				var m = data.match( /user:([0-9]{1,})/ );
				if(!m){
					return;
				}
				var user = users[m[1]];
				if( !user ){
					return;
				}
				var userNode = mkE({
					tag: 'span',
					className: 'user',
					text: user.title,
					prop: {
						contentEditable: false
					},
					attr: {
						uid: user.id
					}
				});
				D.Say.addUserTooltip(userNode, {
					type: user.type,
					id: user.id
				});
				return userNode;
			} );
		},

		_setCursor:function( el, startOffset ){
			if( !el || !el.parentNode ){
				return false;
			}
			this.focus();
			if( document.createRange ){
				var range = document.createRange();
				var sel = window.getSelection();
				range.setStart( el, startOffset || 0 );
				range.collapse(true);
				sel.removeAllRanges();
				sel.addRange(range);
			} else {
				var sel = document.selection.createRange();
				if( el.nodeType == 3 ){
					startOffset += this._nodeTextLength( el.parentNode, el );
					el = el.parentNode;
				}
				sel.moveToElementText( el );
				sel.moveStart( 'character', startOffset || 0 );
				//sel.moveEnd( 'character', 0 );
				sel.collapse(true);
				sel.select();
			}
		},

		_setCursorAtEnd: function(){
			if (typeof window.getSelection !== 'undefined' && typeof document.createRange !== 'undefined') {
				var range = document.createRange();
				range.selectNodeContents(this._content);
				range.collapse(false);
				var sel = window.getSelection();
				sel.removeAllRanges();
				sel.addRange(range);
			} else if (typeof document.body.createTextRange !== 'undefined') {
				var textRange = document.body.createTextRange();
				textRange.moveToElementText(this._content);
				textRange.collapse(false);
				textRange.select();
			}
		},

		_setFocusNode:function(){
			if( window.getSelection ){
				this._focusNode = window.getSelection().focusNode;
			} else {
				var textRange = document.selection.createRange();
				this._focusNode = textRange.parentElement();
			}
		},

		_saveSelection:function(focus){
		    if( focus !== false ){
			    this.focus();
		    }
		    var range;
			if( window.getSelection ) {
		    	var selection = window.getSelection();
		    	if( selection && selection.rangeCount > 0 ){
				    range = window.getSelection().getRangeAt(0);
			    }
			} else if( document.selection ){
				range = document.selection.createRange();
			}
			if( !range ){
				return;
			}
			var checkNode = range.commonAncestorContainer;
			while( checkNode && checkNode.nodeType === 3 ){
				checkNode = checkNode.parentNode;
			}
			if( checkNode !== this._content || !this._content.contains(checkNode) ){
				return;
			}
			this._savedRange = range;
		},

		_restoreSelection:function(){
			var range = this._savedRange || null;
			this.focus();
			if( !range ){
				return false;
			}
			if( window.getSelection ){ //non IE and there is already a selection
				var s = window.getSelection();
				if(s.rangeCount > 0 ){
					s.removeAllRanges();
				}
				s.addRange( range );
			} else if( document.createRange ){ // non IE and no selection
				window.getSelection().addRange( range );
			} else if( document.selection ) { // IE
				range.select();
			}
			delete this._savedRange;
			return true;
		},

		_insertCursor:function(){
			this.focus();
			var cursor;
			if( window.getSelection ){
				cursor = mkE( {
					tag:'span'
				} );
				var range = window.getSelection().getRangeAt(0).cloneRange();
				range.deleteContents();
				range.insertNode(cursor);
			} else {
				var id = 'SayEditorCursor';// + Math.round( Math.random() * 1000 );
				var range = document.selection.createRange();
				range.pasteHTML( '<span id="' + id + '" style="display:inline-block;"></span>' );
				cursor = document.getElementById(id);
				cursor.id = '';
			}
			var re = {
				left:cursor.offsetLeft,
				top:cursor.offsetTop,
				prev:cursor.previousSibling,
				next:cursor.nextSibling,
				position:D.position(cursor)
			};
			removeNode(cursor);
			return re;
		},

		insertHTML: function( html, clearDOM ){
			if( !this.contentEditable ){
				insertAtCursor(this._content, strip_tags(html));
				return;
			}
			html = D.smileyReplace(html);
			if( D.browser.name === 'Explorer' ){
				this.focus();
			} else {
				this._restoreSelection();
			}
			if( document.getSelection ){  // normal browser
				var sel = document.getSelection();
				var range = sel.getRangeAt(0);
				var node = mkE( {
					tag:'div',
					innerHTML:html
				} );
				range.insertNode(node);
				var lastNode;
				while( node.firstChild && node.parentNode ){
					lastNode = node.firstChild;
					D.insertBefore( node.firstChild, node );
				}
				node.remove();
				if(lastNode) {
					range = range.cloneRange();
					range.setStartAfter(lastNode);
					range.collapse(true);
					sel.removeAllRanges();
					sel.addRange(range);
				}
			} else /*if( document.selection )*/{ // IE < 11
				var range = document.selection.createRange();
				range.pasteHTML(html);
			}/* else {
			 document.execCommand( 'insertHTML', false, html );
			 }*/
			if(clearDOM){
				this._clearDOM();
			}
			this._saveSelection();
		},

		_insertNode: function( node, clearDOM ){
			if( !this.contentEditable ){
				insertAtCursor(this._content, getNodeText(node));
				return;
			}
			if( D.browser.name == 'Explorer' ){
				this.focus();
			} else {
				this._restoreSelection();
			}
			if( document.getSelection ){  // normal browser
				var sel = document.getSelection();
				var range = sel.getRangeAt(0);
				range.insertNode(node);
			} else{
				var range = document.selection.createRange();
				range.pasteHTML('<span id="SayEditorTmpNode"></span>');
				var placeholder = document.getElementById('SayEditorTmpNode');
				if( placeholder ){
					D.insertBefore(node, placeholder);
					removeNode(placeholder);
				}
			}
			if(clearDOM){
				this._clearDOM();
			}
			this._saveSelection();
			if( D.browser.name != 'Explorer' || D.browser.version > 8 ){
				var cursor = document.createTextNode( ' ' );
				D.insertAfter( cursor, node );
				this._setCursor( cursor, 1 );
			}
		},

		value: function(v, par){
			par = par || {};
			if( isset(v) ){
				if( this.contentEditable ){
					this._content.innerHTML = nl2br(v);
					D.smileyReplace(this._content);
					if( par.users ){
						this._replaceUsers(par.users);
					}
					this._clearDOM();
					this._replaceLinks();
				}else{
					this._content.value = htmlspecialchars_decode(strip_tags(v));
				}
				if( !this.empty(true) ){
					this._defaultTextNode.remove();
				}
			}
			if( this.contentEditable ){
				return this._content.innerHTML;
			}else{
				return this._content.value;
			}
		},

		clear: function(){
			this.value('');
			this._defaultTextNode.append(this.node);
		},

		empty: function(ignoreFriendUser){
			if( this.contentEditable && this._content.getElementsByTagName('img').length ){
				return false;
			}
			if( ignoreFriendUser !== true && this.par.friendUser && trim(strip_tags(this.value())) === this.par.friendUser.title ){
				return true;
			}
			return empty(trim(strip_tags(this.value())));
		},

		changePlaceholder: function(text){
			setNodeText(this._defaultTextNode, text);
		}
	},
	mkE.Base
);

D.Say.Editor.KEY_BACKSPACE = 8;
D.Say.Editor.KEY_ENTER = 13;
D.Say.Editor.KEY_ESC = 27;
D.Say.Editor.KEY_SPACE = 32;
D.Say.Editor.KEY_ARROW_UP = 38;
D.Say.Editor.KEY_ARROW_DOWN = 40;
D.Say.Editor.KEY_DEL = 46;
D.Say.Editor.KEY_AT = 50;

/**
 * @class {D.Say.Editor.Par}
 */
D.Say.Editor.Par = Class(
	/**
	 * @lends {D.Say.Editor.Par#}
	 */
	{
		uid: D.ID,
		placeholder: '',
		noLinkReplace: false,
		onChange: D.doNothing,
		onCtrlEnter: D.doNothing,
		friendUser: null
	}
);
// --- form/editor.js ---

// +++ form/mentions.js +++
/**
 * @class {D.Say.Mentions#}
 * @extends {mkE.Base}
 * @param {Object} par
 * @param {Function} par.onclick
 * @param {Array.<DR.search.struct.Users>} par.data
 */
D.Say.Mentions = Class(
	/**
	 * @lends {D.Say.Mentions#}
	 */
	{
		_users: [],
		_selected: 0,

		/**
		 *
		 * @param {Object} par
		 * @param {Function} par.onclick
		 * @param {Array.<DR.search.struct.Users>} par.data
		 * @constructs
		 */
		__construct: function(par){
			this._data = par.data;
			this._onclick = par.onclick;

			this.node = mkE({
				tag: 'div',
				className: 'Mentions'
			});

			this._drawTypes();
		},

		_drawTypes: function(){
			for( var i = 0, l = this._data.length; i < l; i++ ){
				var type = this._data[i];
				this._drawType(type);
			}
		},

		/**
		 * @param {DR.search.struct.Users} type
		 */
		_drawType: function(type){
			mkE({
				tag: 'h3',
				text: D.Lang.get('search_type_' + type.type)
			}).append(this.node);

			for( var i = 0, l = type.users.length; i < l; i++ ){
				var userData = type.users[i];
				this._addUser(userData);
			}

			var firstUser = reset(this._users);
			firstUser.select(true);
			this._selected = 0;
		},

		/**
		 * @param {DR.users.struct.User} userData
		 */
		_addUser: function(userData){
			var index = this._users.length;
			var user = new D.Say.Mentions.User(userData, index);
			user._onclick = this._onclick;
			user._onhover = this._onhover;
			user.append(this.node);
			this._users.push(user);
		},

		_onhover: function(index){
			if( !this._users[index] ){
				return;
			}
			this._users[this._selected].select(false);
			this._users[index].select(true);
			this._selected = index;
		},

		up: function(){
			var prev = this._selected - 1;
			if( prev < 0 ){
				prev = this._users.length - 1;
			}
			this._users[this._selected].select(false);
			this._users[prev].select(true);
			this._selected = prev;
		},

		down: function(){
			var next = this._selected + 1;
			if( next >= this._users.length ){
				next = 0;
			}
			this._users[this._selected].select(false);
			this._users[next].select(true);
			this._selected = next;
		},

		select: function(){
			this._users[this._selected].click();
		},

		position: function(par){
			this.node.style.top = par.top + 'px';
			this.node.style.left = par.left + 'px';
		}
	},
	mkE.Base
);

/**
 * @class {D.Say.Mentions.User}
 * @extends {mkE.Base}
 * @param {DR.users.struct.User} user
 * @param {Number} index
 */
D.Say.Mentions.User = Class(
	/**
	 * @lends {D.Say.Mentions.User#}
	 */
	{
		_onclick: D.doNothing,
		_onhover: D.doNothing,

		/**
		 * @param {DR.users.struct.User} user
		 * @param {Number} index
		 * @constructs
		 */
		__construct: function(user, index){
			this.user = user;
			this.index = index;

			this.node = mkE({
				tag: 'div',
				className: 'MentionsUser',
				onclick: this.click,
				onmouseover: this.hover,
				els: [
					this._imgNode = mkE({
						tag: 'div',
						className: 'img'
					}),
					this.user.title
				]
			});

			D.bgImage(this._imgNode, this.user.image.small);
		},

		click: function(){
			this._onclick(this.user);
		},

		hover: function(){
			this._onhover(this.index)
		},

		select: function(v){
			if( v ){
				addClassName(this.node, 'active');
				this.selected = true;
			}else{
				removeClassName(this.node, 'active');
				this.selected = false;
			}
		}
	},
	mkE.Base
);
// --- form/mentions.js ---

// +++ form/link_info.js +++
/**
 * @class {D.Say.Form.GetLinkInfoRe}
 * @extends {mkE.Base}
 * @param {DR.say.struct.Link} link
 * @param {Function} [close]
 * @param {Object} [par]
 */
D.Say.Form.LinkInfo = Class(
	/**
	 * @lends {D.Say.Form.LinkInfo#}
	 */
	{
		pictureDeleted: false,
		galleryItemId: null,

		/**
		 * @param {DR.say.struct.GetLinkInfoRe} link
		 * @param {Function} [close]
		 * @param {Object} [par]
		 * @constructs
		 */
		__construct: function(link, close, par){
			this.link = link.link;
			this.embed = link.embedData || false;
			this.close = close || D.doNothing;
			this.par = par || {};
			this.galleryItemId = this.par.galleryItemId || null;

			this.node = mkE({
				tag: 'div',
				className: 'SayLinkInfo'
			});

			this._draw();
		},

		_draw: function(){
			this._drawImage();
			this._drawContent();
			mkE({
				tag: 'a',
				className: 'close',
				els: [
					T.svgIcon({
						icon: 'close-10'
					})
				],
				onclick: this._close
			}).append(this.node);
		},

		_drawImage: function(){
			this._imageNode = mkE({
				tag: 'div',
				className: 'image',
				onclick: this._imageClick
			}).append(this.node);
			var image = this.link.image;
			if( this.par.image ){
				image = this.par.image;
			}
			if( image || this.embed ){
				addClassName(this.node, 'with-image');
				if( this.embed ){
					D.bgImage(this._imageNode, this.embed.image.gm);
					addClassName(this._imageNode, 'video');
				}else{
					D.bgImage(this._imageNode, image.gm);
					if( this.par.videoImage === true ){
						addClassName(this._imageNode, 'video');
					}
					if( this.par.image ){
						this._removePic = mkE({
							tag: 'a',
							className: 'close',
							els: [
								T.svgIcon({
									icon: 'close-10'
								})
							],
							onclick: this._removeImage
						}).append(this._imageNode);
					}
				}
			}else{
				this._emptyImage();
			}

			if( !image && !this.embed ){
				D.onLoad('chat', this._imageSubscribe);
			}

			D.onLoad('Upload', this._onUploader);

			if( this.par.sayPic || this.par.hasPost || !this.link.img || this._uploadedImage || this.link.img.split(/#|\?/)[0].split('.').pop() != 'gif' ){
				return;
			}
			this._uploadFromUrl(this.link.img);
		},

		_uploadFromUrl: function(url){
			this._uploadIcon.remove();
			if( this._removePic ){
				this._removePic.remove();
			}
			removeClassName(this._imageNode, 'video');
			addClassName(this._imageNode, 'uploading');
			removeClassName(this.node, 'without-image');
			if( this._emptyImageNode ){
				this._emptyImageNode.remove();
			}
			this._uplProgress = mkE({
				tag: 'div',
				className: 'uplProgress radius10',
				els: [
					this._uplProgresBar = mkE({
						tag: 'div'
					})
				]
			}).append(this._imageNode);

			this._mUploadUrl = new DR.upload.GifFromUrl;
			this._mUploadUrl.url = url;
			this._mUploadUrl.type = 16;
			this._mUploadUrl.select = [
				new DR.base.select.Image().all(),
				new DR.gallery.select.Item().id().image().album(),
				new DR.gallery.select.Album().id(),
				new DR.gallery.select.Image().all().wLarge(false).hLarge(false)
			];
			this._mUploadUrl.onLoad = this._onUrlUpload;
			this._mUploadUrl.onError = this._onUrlError;
			this._mUploadUrl.call();
		},

		_onUrlUpload: function(){
			this._uplProgress.remove();
			this._uploadIcon.append(this._imageNode);
			removeClassName(this._imageNode, 'uploading');
			this._onUploadProcess(this._mUploadUrl.re);
		},

		_onUrlError: function(){
			this._uplProgress.remove();
			this._uploadIcon.append(this._imageNode);
			removeClassName(this._imageNode, 'uploading');
			this._resetImage();
			this.link.img = null;
		},

		_imageSubscribe: function(){
			D.chat.subscribe('link:image:' + this.link.hash, this._onChatLinkImage);
		},

		_onChatLinkImage: function(data){
			if( this.link.image || this._uploadedImage || (this._uplProgress && this._uplProgress.parentNode) ){
				return;
			}
			data = data.msg;
			if( !data || !data.image ){
				return;
			}
			var sizes = [
				'icon',
				'small',
				'gm',
				'middle',
				'say',
				'large',
				'uber',
				'orginal'
			];
			for( var size in sizes ){
				if( !sizes.hasOwnProperty(size) || !data.image.hasOwnProperty(sizes[size]) ){
					continue;
				}
				data.image[sizes[size]] = data.image[sizes[size]].replace('http://', '//');
			}
			this.link.image = data.image;
			this._resetImage();
		},

		_emptyImage: function(){
			addClassName(this.node, 'without-image');
			this._emptyImageNode = mkE({
				tag: 'div',
				className: 'empty-image',
				els: [
					T.svgIcon({
						icon: 'foto',
						size: 32
					}),
					{
						tag: 'div',
						text: D.Lang.get('add_image')
					},
					this._emptyImageNodeUpl = mkE({
						tag: 'div',
						className: 'click-node'
					})
				]
			}).append(this._imageNode);
			D.onLoad('Upload', this._onEmptyUploader);
		},

		_onUploader: function(){
			this._uploadIcon = mkE({
				tag: 'a',
				className: 'upload-icon',
				onclick: function(e){
					D.stopPropagation(e);
				},
				els: [
					T.svgIcon({
						icon: 'foto'
					})
				]
			}).append(this._imageNode);

			var par = new D.UploaderPar();
			par.thumbWidth = 144;
			par.thumbHeight = 144;
			par.log = false;
			par.tooltip = D.Lang.get('change_link_pic');
			par.onSelect = this._onUploadSelect;
			par.onThumb = this._onUploadThumb;
			par.onGetUploadData = this._onGetUploadData;
			par.onUploadProgress = this._onUploadProgress;
			par.onUploadCompleteData = this._onUploadComplete;
			this._uploader = new Uploader(par);
			this._uploader.append(this._uploadIcon);
		},

		_onEmptyUploader: function(){
			var par = new D.UploaderPar();
			par.thumbWidth = 144;
			par.thumbHeight = 144;
			par.log = false;
			par.tooltip = D.Lang.get('change_link_pic');
			par.onSelect = this._onUploadSelect;
			par.onThumb = this._onUploadThumb;
			par.onGetUploadData = this._onGetUploadData;
			par.onUploadProgress = this._onUploadProgress;
			par.onUploadCompleteData = this._onUploadComplete;
			this._uploader = new Uploader(par);
			this._uploader.append(this._emptyImageNodeUpl);
		},

		_onUploadSelect: function(par){
			var ext = last(par.name.split('.'));
			ext = ext.toLowerCase();
			var picExt = D.Say.Form.Gallery.picExt;
			var videoExt = D.Say.Form.Gallery.videoExt;
			if( !in_array(ext, picExt) && !in_array(ext, videoExt) && ext !== 'gif' ){
				return false;
			}
			this._uploadIcon.remove();
			if( this._removePic ){
				this._removePic.remove();
			}
			removeClassName(this._imageNode, 'video');
			addClassName(this._imageNode, 'uploading');
			removeClassName(this.node, 'without-image');
			if( this._emptyImageNode ){
				this._emptyImageNode.remove();
			}
			this._uplProgress = mkE({
				tag: 'div',
				className: 'uplProgress radius10',
				els: [
					this._uplProgresBar = mkE({
						tag: 'div'
					})
				]
			}).append(this._imageNode);
		},

		_onUploadThumb: function(par){
			D.bgImage(this._imageNode, par.url);
		},

		_onGetUploadData: function(par){
			var ext = last(par.name.split('.'));
			ext = ext.toLowerCase();
			if( in_array(ext, D.Say.Form.Gallery.picExt) ){
				return {
					url: D.UPL + 'pic/api.php',
					data: {
						type: 12,
						id: 'tmp'
					}
				};
			}else if( in_array(ext, D.Say.Form.Gallery.videoExt) ){
				return {
					url: D.VUPL + 'video/api.php',
					data: {
						type: 8
					}
				};
			}else if( ext === 'gif' ){
				return {
					url: D.VUPL + 'gif/api.php',
					data: {
						type: 16
					}
				};
			}
		},

		_onUploadProgress: function(par){
			this._uplProgresBar.style.width = par.percent + '%';
		},

		_onUploadComplete: function(par){
			this._uplProgress.remove();
			this._uploadIcon.append(this._imageNode);
			removeClassName(this._imageNode, 'uploading');
			var data = D.JSON.decode( par.data );
			data = DR._Base.cast(data);
			this._onUploadProcess(data);
		},

		_onUploadProcess: function(data){
			if( data.error ){
				var message = data.error;
				if( !in_array(data.errorNr, [204, 205]) ){
					message = D.Lang.get('upload_error_default') + ' #' + data.errorNr;
				}
				alert(message);
				this._resetImage();
				return;
			}
			var thumb;
			if( data instanceof DR.base.struct.PicUploadRe ){
				D.bgImage(this._imageNode, data.picture.image.gm);
				this._uploadedImage = {
					id: data.picture.id
				};
			}else if( data instanceof DR.base.struct.GifUploadRe ){
				if( data.picture ){
					D.bgImage(this._imageNode, data.picture.image.gm);
					this._uploadedImage = {
						id: data.picture.id
					};
				}else{
					thumb = data.video.thumbnail;
					if( data.video.tmpId && data.video.tmpThumbnail ){
						thumb = data.video.tmpThumbnail;
					}
					D.bgImage(this._imageNode, thumb.gm);
					addClassName(this._imageNode, 'video');
					this._uploadedImage = {
						id: data.video.tmpId,
						gif: true,
						width: data.video.width || null,
						height: data.video.height || null
					};
				}
			}else if( data instanceof DR.base.struct.VideoUploadRe ){
				thumb = data.video.thumbnail;
				if( data.video.tmpId && data.video.tmpThumbnail ){
					thumb = data.video.tmpThumbnail;
				}
				D.bgImage(this._imageNode, thumb.gm);
				addClassName(this._imageNode, 'video');
				this._uploadedImage = {
					id: data.video.tmpId,
					video: true,
					width: data.video.width || null,
					height: data.video.height || null
				};
			}else{
				this._resetImage();
				return;
			}
			delete this.galleryItemId;
			this._removePic = mkE({
				tag: 'a',
				className: 'close',
				els: [
					T.svgIcon({
						icon: 'close-10'
					})
				],
				onclick: this._removeImage
			}).append(this._imageNode);
		},

		_removeImage: function(e){
			this._removePic.remove();
			if( this.par.image && !this._uploadedImage ){
				delete this.par.image;
				delete this.par.videoImage;
				this.pictureDeleted = true;
			}
			delete this._uploadedImage;
			delete this.galleryItemId;
			this._resetImage();
			D.stopPropagation(e);
		},

		_resetImage: function(){
			delete this._uploadedImage;
			removeClassName(this._imageNode, 'video');
			removeClassName(this.node, 'without-image');
			if( this._emptyImageNode ){
				this._emptyImageNode.remove();
			}
			if( this.link.image || this.embed ){
				addClassName(this.node, 'with-image');
				if( this.embed ){
					D.bgImage(this._imageNode, this.embed.image.gm);
					addClassName(this._imageNode, 'video');
				}else{
					D.bgImage(this._imageNode, this.link.image.gm);
				}
			}else{
				this._emptyImage();
			}
		},

		_imageClick: function(){
			if( !this.link.image && !this._uploadedImage ){
				return;
			}
			if( existsClassName(this._imageNode, 'uploading') ){
				return;
			}
			if( this._uploadedImage && !this._uploadedImage.image ){
				return;
			}
			if( !this._uploadedImage && this.embed ){
				return;
			}
			var src;
			if( !this._uploadedImage ){
				src = this.link.image.uber;
			}else{
				src = this._uploadedImage.image.uber;
			}
			if( !src ){
				return;
			}
			new D.Modal().img(src);
		},

		_drawContent: function(){
			this._contentNode = mkE({
				tag: 'div',
				className: 'content'
			}).append(this.node);

			this._title = new D.Say.Form.LinkInfo.Title(this.link.title || '');
			this._title.append(this._contentNode);

			this._description = new D.Say.Form.LinkInfo.Description(this.link.descr || '');
			this._description.append(this._contentNode);

			mkE({
				tag: 'div',
				className: 'host',
				text: this.link.shortHost
			}).append(this._contentNode);
		},

		_close: function(){
			this.close();
		},

		getLinkData: function(){
			var re = {};
			re.title = this._title.value();
			re.description = this._description.value();
			re.link = this.link.url;
			re.pictureDeleted = this.pictureDeleted;
			re.galleryItemId = this.galleryItemId;
			if( this._uploadedImage ){
				re.gif = this._uploadedImage.gif || false;
				re.video = this._uploadedImage.video || false;
				if( re.video || re.gif ){
					re.videoTmpId = this._uploadedImage.id;
					re.videoWidth = this._uploadedImage.width;
					re.videoHeight = this._uploadedImage.height;
				}else{
					re.picTmpId = this._uploadedImage.id;
				}
			}
			return re;
		},

		canSave: function(){
			if( empty(this._title.value()) ){
				alert(D.Lang.get('need_say_link_title'));
				return false;
			}
			return true;
		}
	},
	mkE.Base
);

/**
 * @class {D.Say.Form.LinkInfo.Description}
 * @extends {mkE.Base}
 * @param {String} description
 */
D.Say.Form.LinkInfo.Description = Class(
	/**
	 * @lends {D.Say.Form.LinkInfo.Description#}
	 */
	{
		/**
		 * @param {String} description
		 * @constructs
		 */
		__construct: function(description){
			this.node = mkE({
				tag: 'textarea',
				className: 'SayLinkInfoDescription',
				value: this._cleanValue(description || ''),
				prop: {
					onblur: this._onBlur,
					onkeyup: this._resize
				},
				attr: {
					rows: 1,
					placeholder: D.Lang.get('say_link_descr_placeholder'),
					spellcheck: false
				}
			});
		},

		append: function(parent){
			this.node.append(parent);
			setTimeout(this._resize, 100);
			return this;
		},

		_onBlur: function(){
			this.node.value = this._cleanValue(this.node.value);
			this._resize();
		},

		_resize: function(){
			this.node.style.height = '';
			if( this.node.scrollHeight > 28 ){
				this.node.style.height = 42 + 'px';
			}else if( this.node.scrollHeight > 14 ){
				this.node.style.height = 28 + 'px';
			}else{
				this.node.style.height = '';
			}
		},

		_cleanValue: function(value){
			value = trim(value);
			value = value.replace( /(\r\n|\n\r|\n)/g, ' ' );
			value = D.shorten(value, D.Say.MAX_DESC_LENGTH, '...');
			return value;
		},

		value: function(v){
			if( isset(v) ){
				this.node.value = this._cleanValue(v);
				return this.node.value;
			}
			return this._cleanValue(this.node.value);
		}
	},
	mkE.Base
);

/**
 * @class {D.Say.Form.LinkInfo.Title}
 * @extends {mkE.Base}
 * @param {String} title
 */
D.Say.Form.LinkInfo.Title = Class(
	/**
	 * @lends {D.Say.Form.LinkInfo.Title#}
	 */
	{
		/**
		 * @param {String} title
		 * @constructs
		 */
		__construct: function(title){
			this.node = mkE({
				tag: 'textarea',
				className: 'SayLinkInfoTitle',
				value: this._cleanValue(title || ''),
				prop: {
					onblur: this._onBlur,
					onkeyup: this._resize
				},
				attr: {
					rows: 1,
					placeholder: D.Lang.get('say_link_title_placeholder'),
					spellcheck: false
				}
			});
		},

		append: function(parent){
			this.node.append(parent);
			setTimeout(this._resize, 100);
			return this;
		},

		_onBlur: function(){
			this.node.value = this._cleanValue(this.node.value);
			this._resize();
		},

		_resize: function(){
			this.node.style.height = '';
			if( this.node.scrollHeight > 36 ){
				this.node.style.height = 54 + 'px';
			}else if( this.node.scrollHeight > 18 ){
				this.node.style.height = 36 + 'px';
			}else{
				this.node.style.height = '';
			}
		},

		_cleanValue: function(value){
			value = trim(value);
			value = value.replace( /(\r\n|\n\r|\n)/g, ' ' );
			value = D.shorten(value, D.Say.MAX_TITLE_LENGTH, '...');
			return value;
		},

		value: function(v){
			if( isset(v) ){
				this.node.value = this._cleanValue(v);
				return this.node.value;
			}
			return this._cleanValue(this.node.value);
		}
	},
	mkE.Base
);
// --- form/link_info.js ---

// +++ form/gallery.js +++
/**
 * @class {D.Say.Form.Gallery}
 * @extends {mkE.Base}
 * @param {Object} [par]
 */
D.Say.Form.Gallery = Class(
	/**
	 * @lends {D.Say.Form.Gallery#}
	 */
	{
		aid: null,
		pid: null,
		itemsDelete: [],

		/**
		 * @param {Object} [par]
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};
			this.par = par;
			this.aid = this.par.aid || null;
			this.pid = this.par.pid || null;

			this._items = new D.SortedMap();
			this._tmpItems = {};

			this.node = mkE({
				tag: 'div',
				className: 'SayGallery',
				els: [
					this._itemsNode = mkE({
						tag: 'div',
						className: 'items'
					}),
					T.clear()
				]
			});

			var scrollPar = new T.ScrollBarPar();
			scrollPar.parent = this.node;
			scrollPar.element = this._itemsNode;
			scrollPar.direction = T.ScrollBar.HORIZONTAL;
			scrollPar.showButtons = true;
			scrollPar.buttonOffsetX = 12;
			scrollPar.buttonOffsetY = -8;
			scrollPar.scrollItemWidth = 108;
			scrollPar.nativeMac = true;
			this._scrollBar = new T.ScrollBar(scrollPar);

			this._drag = new D.Drag({
				node: this._itemsNode,
				query: '.SayGalleryItem',
				onDragEnd: this._reorderItems
			});

			D.onLoad(['Upload', 'DR.upload'], this._initUpload);
		},

		_initUpload: function(){
			var par = new D.UploaderPar();
			par.thumbWidth = 100;
			par.thumbHeight = 100;
			par.log = false;
			par.onSelect = this._onUploadSelect;
			par.onThumb = this._onUploadThumb;
			par.onGetUploadData = this._onGetUploadData;
			par.onUploadProgress = this._onUploadProgress;
			par.onUploadCompleteData = this._onUploadComplete;
			if( D.browser.name !== 'Safari' ){
				par.accept = 'image/*,video/*';
			}

			// Galvenais uploaderis
			this._uploader = new Uploader(par);
			this._uploadItem = mkE({
				tag: 'div',
				className: 'SayGalleryUploadItem'
			});
			this._uploader.append(this._uploadItem);

			// Ikona apakšējā joslā
			if( this.par.uploadIcon ){
				par.tooltip = D.Lang.get('add_media');
				this._iconUploader = new Uploader(par);
				this._iconUploader.append(this.par.uploadIcon);
			}

			if( this.par.dropNode ){
				delete par.tooltip;
				par.dropNode = this.par.dropNode;
				this._dropUploader = new Uploader(par);
				this._dropUploader.node.style.display = 'none';
				this._dropUploader.append(this.node);
			}

			if( this.par.aid ){
				mkE({
					tag: 'div',
					className: 'SayGalleryLoadItem'
				}).append(this._itemsNode);
				D.loadingOverlay(this.node);
				this._mGetItems = new DR.gallery.GetAlbumItems();
				this._mGetItems.aid = this.par.aid;
				this._mGetItems.count = 100;
				this._mGetItems.pg = 1;
				this._mGetItems.select = [
					new DR.gallery.select.AlbumItems().items().pgs(),
					new DR.gallery.select.Item().id().type().image().gif().video(),
					new DR.gallery.select.Image().uber().gm().original(),
					new DR.gallery.select.Gif().src().w().h().ready(),
					new DR.gallery.select.Video().url().w().h().ready()
				];
				this._mGetItems.onLoad = this._onItemsGet;
				this._mGetItems.call();
			}else if( this.par.pid ){
				mkE({
					tag: 'div',
					className: 'SayGalleryLoadItem'
				}).append(this._itemsNode);
				D.loadingOverlay(this.node);
				this._mGetItem = new DR.gallery.GetItem();
				this._mGetItem.pid = this.par.pid;
				this._mGetItem.select = [
					new DR.gallery.select.Item().id().type().image().gif().video(),
					new DR.gallery.select.Image().uber().gm().original(),
					new DR.gallery.select.Gif().src().w().h().ready(),
					new DR.gallery.select.Video().url().w().h().ready()
				];
				this._mGetItem.onLoad = this._onItemGet;
				this._mGetItem.call();
			}
		},

		_onItemsGet: function(){
			D.removeLoadingOverlay(this.node);

			if( this._mGetItems.pg === 1 ){
				clearNode(this._itemsNode);
			}

			if( !this._uploadItem.parentNode ){
				this._uploadItem.append(this._itemsNode);
			}

			var items = this._mGetItems.re.items;
			for( var i = 0, l = items.length; i < l; i++ ){
				var itemData = items[i];
				var item = new D.Say.Form.Gallery.Item();
				item.onRemove = this._onItemRemove;
				item.fromGalleryItem(itemData);
				D.insertBefore(item.node, this._uploadItem);
				this._items.set('gallery-' + itemData.id, item);
			}

			this._scrollBar.refresh();
			this._scrollBar.scrollToEnd();

			this._drag.reload();

			if( this.par.onChange ){
				this.par.onChange();
			}

			if( this._mGetItems.re.pgs > this._mGetItems.pg ){
				this._mGetItems.pg++;
				this._mGetItems.call();
			}
		},

		_onItemGet: function(){
			D.removeLoadingOverlay(this.node);

			clearNode(this._itemsNode);

			if( !this._uploadItem.parentNode ){
				this._uploadItem.append(this._itemsNode);
			}

			var itemData = this._mGetItem.re;
			var item = new D.Say.Form.Gallery.Item();
			item.onRemove = this._onItemRemove;
			item.fromGalleryItem(itemData);
			D.insertBefore(item.node, this._uploadItem);
			this._items.set('gallery-' + itemData.id, item);

			this._scrollBar.refresh();
			this._scrollBar.scrollToEnd();

			if( this.par.onChange ){
				this.par.onChange();
			}
		},

		_onUploadSelect: function(par){
			var ext = last(par.name.split('.'));
			ext = ext.toLowerCase();
			var picExt = D.Say.Form.Gallery.picExt;
			var videoExt = D.Say.Form.Gallery.videoExt;
			if( !in_array(ext, picExt) && !in_array(ext, videoExt) && ext !== 'gif' ){
				return false;
			}

			if( !this._uploadItem.parentNode ){
				this._uploadItem.append(this._itemsNode);
			}

			this._checkLink();

			var item = new D.Say.Form.Gallery.Item();
			item.onRemove = this._onItemRemove;
			item.setUploadData(par);
			D.insertBefore(item.node, this._uploadItem);
			this._items.set(par.id, item);

			this._scrollBar.refresh();
			this._scrollBar.scrollToEnd();

			this._drag.reload();

			if( this.par.onChange ){
				this.par.onChange();
			}
		},

		_onUploadThumb: function(par){
			var item = this._items.get(par.id);
			if( !item ){
				return;
			}
			item._onThumb(par);
		},

		_onGetUploadData: function(par){
			var ext = last(par.name.split('.'));
			ext = ext.toLowerCase();
			var data;
			if( in_array(ext, D.Say.Form.Gallery.picExt) ){
				data = {
					url: D.UPL + 'pic/api.php',
					data: {
						createGallery: true,
						createTmpGallery: true
					}
				};
				if( this.aid ){
					data.data.aid = this.aid;
				}
				return data;
			}else if( in_array(ext, D.Say.Form.Gallery.videoExt) ){
				data = {
					url: D.VUPL + 'video/api.php',
					data: {
						createGallery: true,
						createTmpGallery: true
					}
				};
				if( this.aid ){
					data.data.aid = this.aid;
				}
				return data;
			}else if( ext === 'gif' ){
				data = {
					url: D.VUPL + 'gif/api.php',
					data: {
						createGallery: true,
						createTmpGallery: true
					}
				};
				if( this.aid ){
					data.data.aid = this.aid;
				}
				return data;
			}
		},

		_onUploadProgress: function(par){
			var item = this._items.get(par.id);
			if( !item ){
				return;
			}
			item.setProgress(par.percent);
		},

		_onUploadComplete: function(par){
			/** @type {D.Say.Form.Gallery.Item} */
			var item = this._items.get(par.id);
			if( !item ){
				return;
			}
			var data;
			if( typeof par.data === 'string' ){
				data = DR._Base.cast(D.JSON.decode( par.data ));
			}else{
				data = par.data;
			}

			if( data.galleryItem ){
				this.aid = data.galleryItem.album.id;
			}

			item._onUploadData(data);
			item.setProgress(100);
			if( this._progressWNode ){
				this._progressWNode.style.display = 'none';
			}
		},

		_onItemRemove: function(id, galleryItem){
			galleryItem = galleryItem || false;
			var item = this._items.get(id);
			if( !item ){
				return;
			}
			this._items.del(id);

			if( this._items.empty() ){
				this._uploadItem.remove();
			}

			this._scrollBar.refresh();

			if( galleryItem ){
				this.itemsDelete.push(item.data.pid);
			}

			if( this.par.onChange ){
				this.par.onChange();
			}
		},

		addEmbed: function(linkCallback){
			this._embedWindow = new D.Say.Form.Gallery.Embed();
			this._embedWindow._onAdd = this._onEmbedAdd;
			this._embedWindow._onAddLink = D.closure(this, this._embedLink, linkCallback);
			this._embedWindow._onAddImage = this._embedImage;
			this._embedModal = new D.Modal({
				title: D.Lang.get('how_to_add_embed'),
				width: 500,
				withoutPadding: true
			});
			this._embedModal.els(this._embedWindow.node);
			this._embedWindow.focus();
		},

		_embedLink: function(callback, link){
			callback(link);
			if( this._embedModal ){
				this._embedModal.close();
			}
			return true;
		},

		_embedImage: function(url){
			this.addFromUrl(url, D.doNothing);
			if( this._embedModal ){
				this._embedModal.close();
			}
		},

		/**
		 * @param {DR.gallery.struct.Embed} embed
		 * @param {Number} id
		 * @param {String} url
		 * @param {Boolean} [fromLink]
		 */
		_onEmbedAdd: function(embed, id, url, fromLink){
			if( this._embedModal ){
				this._embedModal.close();
			}
			if( !this._uploadItem.parentNode ){
				this._uploadItem.append(this._itemsNode);
			}
			if( fromLink !== true ){
				this._checkLink();
			}
			if( this._items.get('embed-' + id) ){
				return;
			}

			var item = new D.Say.Form.Gallery.Item();
			item.onRemove = this._onItemRemove;
			item.addEmbed(embed, url, id, this.aid, this._onEmbedAddCb);
			D.insertBefore(item.node, this._uploadItem);
			this._items.set('embed-' + id, item);

			this._scrollBar.refresh();
			this._scrollBar.scrollToEnd();

			if( this.par.onChange ){
				this.par.onChange();
			}
		},

		_onEmbedAddCb: function(aid){
			this.aid = aid;
		},

		addFromUrl: function(url, callback){
			if( !this._uploadItem.parentNode ){
				this._uploadItem.append(this._itemsNode);
			}
			if( this._items.get('url-' + url) ){
				return;
			}
			this._urlUploadCallback = callback || D.doNothing;
			var item = new D.Say.Form.Gallery.Item();
			item.onRemove = this._onItemRemove;
			item.uploadFromUrl(url, this.aid, this._onUrlUpload);
			D.insertBefore(item.node, this._uploadItem);
			this._items.set('url-' + url, item);

			this._scrollBar.refresh();
			this._scrollBar.scrollToEnd();

			if( this.par.onChange ){
				this.par.onChange();
			}
		},

		_onUrlUpload: function(re, aid){
			if( aid ){
				this.aid = aid;
			}
			this._urlUploadCallback(re);
		},

		empty: function(){
			return this._items.empty();
		},

		length: function(onlyValid){
			if( onlyValid === true ){
				var length = 0;
				var items = this._items.toArray();
				for( var i = 0, l = items.length; i < l; i++ ){
					if( !items[i].failed && items[i].data ){
						length++;
					}
				}
				return length;
			}
			return this._items.length();
		},

		_checkLink: function(){
			if( !this.par.getLinkData ){
				return;
			}
			/** @type {DR.say.struct.GetLinkInfoRe} */
			var link = this.par.getLinkData();
			if( link && link.embed && link.embedData ){
				this._onEmbedAdd(link.embedData, link.link.id, link.link.url, true);
			}
			if( this.par.removeLink ){
				this.par.removeLink();
			}
		},

		getItems: function(){
			var re = [];
			var items = this._items.toArray();
			for( var i = 0, l = items.length; i < l; i++ ){
				var item = items[i];
				if( item.failed ){
					continue;
				}
				re.push(item);
			}
			return re;
		},

		clear: function(){
			this._items.clear();
			this._tmpItems = {};
			clearNode(this._itemsNode);
			this.aid = null;
		},

		canSave: function(){
			var items = this._items.toArray();
			for( var i = 0, l = items.length; i < l; i++ ){
				if( !items[i].failed && !items[i].data ){
					return false;
				}
			}
			return true;
		},

		_reorderItems: function(){
			var sortedMap = new D.SortedMap();
			for( var i = 0, l = this._itemsNode.childNodes.length; i < l; i++ ){
				var node = this._itemsNode.childNodes[i];
				if( node._drGalleryItem ){
					sortedMap.set(node._drGalleryItem._id, node._drGalleryItem);
				}
			}
			this._items = sortedMap;
		}
	},
	mkE.Base
);
D.Say.Form.Gallery.picExt = D.PIC_EXT;
D.Say.Form.Gallery.videoExt = D.VIDEO_EXT;

/**
 * @class {D.Say.Form.Gallery.Item}
 * @extends {mkE.Base}
 */
D.Say.Form.Gallery.Item = Class(
	/**
	 * @lends {D.Say.Form.Gallery.Item#}
	 */
	{
		galleryItem: false,
		failed: false,
		encoded: false,
		galleryItemData: null,

		/**
		 * @constructs
		 */
		__construct: function(){
			this.node = mkE({
				tag: 'div',
				className: 'SayGalleryItem',
				els: [
					this._progressWNode = mkE({
						tag: 'div',
						className: 'uplProgress radius10',
						els: [
							this._progressNode = mkE({
								tag: 'div'
							})
						]
					}),
					this._removeNode = mkE({
						tag: 'a',
						className: 'close',
						onclick: this._remove,
						els: [
							T.svgIcon({
								icon: 'close-10'
							})
						],
						attr: {
							title: D.Lang.get('delete')
						}
					})
				],
				attr: {
					title: D.Lang.get('file_still_uploading')
				},
				onclick: this._onclick
			});
			this.node._drGalleryItem = this;
		},

		setUploadData: function(data){
			this._id = data.id;
			addClassName(this.node, 'uploading');
		},

		addEmbed: function(embed, url, id, aid, cb){
			this._id = 'embed-' + id;

			this._loadingCircle = T.loadingCircle().append(this.node);
			this.embed = embed;

			this._addEmbedCb = cb || D.doNothing;

			this._mAddEmbed = new DR.gallery.AddEmbed();
			this._mAddEmbed.url = url;
			this._mAddEmbed.createGallery = true;
			this._mAddEmbed.createTmpGallery = true;
			if( aid ){
				this._mAddEmbed.aid = aid;
			}
			this._mAddEmbed.select = [
				new DR.gallery.select.Item().id().image().album(),
				new DR.gallery.select.Album().id(),
				new DR.gallery.select.Image().all().wLarge(false).hLarge(false)
			];
			this._mAddEmbed.onLoad = this._onAddEmbed;
			this._mAddEmbed.call();
		},

		_onAddEmbed: function(){
			if( this._loadingCircle ){
				this._loadingCircle.remove();
			}
			if( !this._mAddEmbed || this._mAddEmbed.error || !this._mAddEmbed.re ){
				this.error(D.Lang.get('could_not_add_embed'));
				return;
			}
			var item = this._mAddEmbed.re;
			this.data = new DR.gallery.struct.SaveItem();
			this.data.pid = item.id;

			this.node.setAttribute('title', '');
			D.bgImage( this.node, item.image.gm );
			addClassName(this.node, 'video');

			this._addEmbedCb(item.album.id);
		},

		uploadFromUrl: function(url, aid, callback){
			this._id = 'url-' + url;
			this._loadingCircle = T.loadingCircle().append(this.node);
			var ext = last(url.split('.'));
			ext = ext.toLowerCase();
			this._urlUploadCallback = callback;
			if( in_array(ext, D.Say.Form.Gallery.picExt) ){
				this._mUploadUrl = new DR.upload.PicFromUrl;
				this._mUploadUrl.createGallery = true;
				this._mUploadUrl.createTmpGallery = true;
				this._mUploadUrl.aid = aid || null;
				this._mUploadUrl.url = url;
				this._mUploadUrl.select = [
					new DR.base.select.Image().all(),
					new DR.gallery.select.Item().id().image().album(),
					new DR.gallery.select.Album().id(),
					new DR.gallery.select.Image().all().wLarge(false).hLarge(false)
				];
				this._mUploadUrl.onLoad = this._onUrlUpload;
				this._mUploadUrl.onError = this._onUrlError;
				this._mUploadUrl.call();
			}else if( ext === 'gif' ){
				this._mUploadUrl = new DR.upload.GifFromUrl;
				this._mUploadUrl.url = url;
				this._mUploadUrl.createGallery = true;
				this._mUploadUrl.createTmpGallery = true;
				this._mUploadUrl.aid = aid || null;
				this._mUploadUrl.select = [
					new DR.base.select.Image().all(),
					new DR.gallery.select.Item().id().image().album(),
					new DR.gallery.select.Album().id(),
					new DR.gallery.select.Image().all().wLarge(false).hLarge(false)
				];
				this._mUploadUrl.onLoad = this._onUrlUpload;
				this._mUploadUrl.onError = this._onUrlError;
				this._mUploadUrl.call();
			}else{
				if( this._urlUploadCallback ){
					this._urlUploadCallback(false);
				}
				this.error(D.Lang.get('gallery_error_invalid_url'));
			}
		},

		_onUrlUpload: function(){
			var re = this._onUploadData(this._mUploadUrl.re);
			if( this._urlUploadCallback ){
				var aid = null;
				if( this._mUploadUrl.re.galleryItem ){
					aid = this._mUploadUrl.re.galleryItem.album.id;
				}
				this._urlUploadCallback( re === true, aid );
			}
		},

		_onUrlError: function(){
			this.error(D.Lang.get('gallery_error_add_url_failed'));
			if( this._urlUploadCallback ){
				this._urlUploadCallback(false, null);
			}
		},

		_onThumb: function(item){
			D.bgImage( this.node, item.url );
		},

		setProgress: function(v){
			this._progressNode.style.width = v + '%';
		},

		/**
		 *
		 * @param {DR.base.struct.PicUploadRe|DR.base.struct.GifUploadRe|DR.base.struct.VideoUploadRe} data
		 * @returns {boolean}
		 */
		_onUploadData:function(data){
			if( this._loadingCircle ){
				this._loadingCircle.remove();
			}
			if( data.error ){
				this.error(data.error, data.errorNr);
				return false;
			}
			this.galleryItemData = data.galleryItem;
			if( data.picture ){
				this.data = new DR.gallery.struct.SaveItem();
				this.data.pid = data.galleryItem.id;

				this.image = data.picture.image.uber;

				D.bgImage(this.node, data.picture.image.gm);
				if( this.node._drTitle ){
					D.ToolTip.hide();
				}
				this.node.removeAttribute('title');
				this.node._drTitle = '';
			}else if( data.video && (data.video.thumbnail || (data.tmpId && data.video.tmpThumbnail)) ){
				this.data = new DR.gallery.struct.SaveItem();
				this.data.pid = data.galleryItem.id;
				var thumb = data.video.thumbnail;
				if( data.video.tmpId && data.video.tmpThumbnail ){
					thumb = data.video.tmpThumbnail;
				}
				D.bgImage(this.node, thumb.gm);
				addClassName(this.node, 'video');
				if( this.node._drTitle ){
					this.node._drTitle = D.Lang.get('file_video_not_finished');
				}
				this.node.setAttribute('title', D.Lang.get('file_video_not_finished'));
				D.onLoad('chat', D.closure(this, this._encodeSubscribe, data.galleryItem));
			}
			this.setProgress(100);
			if( this._progressWNode ){
				this._progressWNode.style.display = 'none';
			}
			removeClassName(this.node, 'uploading');
			return true;
		},

		onRemove: function(){},

		remove: function(){
			if( !this.data || !this.data.pid ){
				this.doRemove();
				return;
			}
			if( this.galleryItem ){
				D.confirmDelete(this.doRemove);
				return;
			}
			D.loadingOverlay(this.node);
			this._mDelete = new DR.gallery.DeleteItem();
			this._mDelete.pid = this.data.pid;
			this._mDelete.keepAlbum = true;
			this._mDelete.onLoad = this._onRemove;
			this._mDelete.call();
		},

		_onRemove: function(){
			D.removeLoadingOverlay(this.node);
			if(!this._mDelete || !this._mDelete.re || !this._mDelete.re.ok ){
				return;
			}
			this.doRemove();
		},

		doRemove: function(){
			this.node.remove();
			this.onRemove(this._id, this.galleryItem);
		},

		_remove: function(e){
			this.remove();
			D.stopPropagation(e);
		},

		_onclick: function(){
			if( !this.image && !(this.encoded && this.galleryItemData) ){
				return;
			}
			var modal, size;
			if( existsClassName(this.node, 'video') ){
				if( !this.encoded || !this.galleryItemData ){
					return;
				}
				switch(this.galleryItemData.type){
					case 1:
						size = scaleToContainer(1000, Math.max(window.innerHeight - 200, 400), this.galleryItemData.video.w, this.galleryItemData.video.h);
						modal = new D.Modal({
							width: size.w,
							height: size.h
						});
						var videoPar = new D.VideoPlayerPar();
						videoPar.autoplay = true;
						videoPar.src = this.galleryItemData.video.url;
						videoPar.width = this.galleryItemData.video.w;
						videoPar.height = this.galleryItemData.video.h;
						videoPar.poster = this.galleryItemData.image.original;
						modal.els([
							new D.VideoPlayer(videoPar)
						]);
						return;
					case 3:
						size = scaleToContainer(1000, Math.max(window.innerHeight - 200, 400), this.galleryItemData.gif.w, this.galleryItemData.gif.h);
						modal = new D.Modal({
							width: size.w,
							height: size.h
						});
						var gifPar = new D.GifPlayerPar();
						gifPar.autoplay = true;
						gifPar.src = this.galleryItemData.gif.src;
						gifPar.width = this.galleryItemData.gif.w;
						gifPar.height = this.galleryItemData.gif.h;
						gifPar.poster = this.galleryItemData.image.original;
						modal.els([
							new D.GifPlayer(gifPar)
						]);
						return;
					default:
						return;
				}
			}
			modal = new D.Modal();
			modal.img(this.image);
		},

		error: function(message, nr){
			if( !in_array(nr, [204, 205]) ){
				message = D.Lang.get('upload_error_default') + ' #' + nr;
			}
			this.failed = true;
			if( this.node._drTitle ){
				D.ToolTip.hide();
			}
			if( this.node._drTitle ){
				this.node._drTitle = '';
			}
			this.node.setAttribute('title', '');
			this.setProgress(100);
			if( this._progressWNode ){
				this._progressWNode.style.display = 'none';
			}
			removeClassName(this.node, 'uploading');
			mkE({
				tag: 'div',
				className: 'error',
				els: [
					{
						tag: 'div',
						className: 'data',
						els: [
							{
								tag: 'div',
								className: 'triangle',
								els: [
									T.svgIcon({
										icon: 'info-triangle',
										size: 24
									})
								],
								attr: {
									title: message
								}
							},
							{
								tag: 'div',
								className: 'text',
								text: D.Lang.get('gallery_item_add_error'),
								attr: {
									title: message
								}
							}
						]
					}
				],
				attr: {
					title: message
				}
			}).append(this.node);
		},

		/**
		 * @param {DR.gallery.struct.Item} item
		 * @param {Boolean} [canRemove]
		 */
		fromGalleryItem: function(item, canRemove){
			this._id = 'gallery-' + item.id;
			this.galleryItem = true;
			this.galleryItemData = item;
			this.data = new DR.gallery.struct.SaveItem();
			this.data.pid = item.id;
			this.image = item.image.uber;
			D.bgImage(this.node, item.image.gm);
			if( this.node._drTitle ){
				D.ToolTip.hide();
			}
			this.node.removeAttribute('title');
			this.node._drTitle = '';
			removeClassName(this.node, 'uploading');
			if( item.type !== 0 ){
				addClassName(this.node, 'video');
			}
			if( item.type === 3 && item.gif && item.gif.ready ){
				this.encoded = true;
			}else if( item.type === 1 && item.video && item.video.ready ){
				this.encoded = true;
			}else if( item.type === 3 || item.type === 1 ){
				if( this.node._drTitle ){
					this.node._drTitle = D.Lang.get('file_video_not_finished');
				}
				this.node.setAttribute('title', D.Lang.get('file_video_not_finished'));
				D.onLoad('chat', D.closure(this, this._encodeSubscribe, item));
			}
			if( canRemove === false ){
				this._removeNode.remove();
			}
		},

		/**
		 * @param {DR.gallery.struct.Item} item
		 */
		_encodeSubscribe: function(item){
			D.chat.subscribe('encode_gallery_' + item.id, this._onEncodeStatus);
		},

		_onEncodeStatus: function(data){
			if( data.msg.status === 'failed' ){
				this.error(D.Lang.get('upload_encode_failed'));
				return;
			}
			this.galleryItemData = data.msg.galleryItem;
			if( this.node._drTitle ){
				D.ToolTip.hide();
			}
			this.node.removeAttribute('title');
			this.node._drTitle = '';
			this.encoded = true;
		}
	},
	mkE.Base
);

/**
 * @class {D.Say.Form.Gallery.Embed}
 * @extends {mkE.Base}
 */
D.Say.Form.Gallery.Embed = Class(
	/**
	 * @lends {D.Say.Form.Gallery.Embed#}
	 */
	{
		/**
		 * @constructs
		 */
		__construct: function(){
			this.node = mkE({
				tag: 'div',
				className: 'SayEmbedWindow',
				els: [
					{
						tag: 'div',
						className: 'content',
						els: [
							{
								tag: 'div',
								className: 'copy-link',
								text: D.Lang.get('copy_embed_link')
							},
							/*{
								tag: 'img',
								src: '/say/img/embed/img-url-new.png'
							},*/
							/*{
								tag: 'div',
								className: 'sites',
								els: [
									{
										tag: 'img',
										src: '/say/img/embed/logo-youtube.png'
									},
									{
										tag: 'img',
										src: '/say/img/embed/logo-vimeo.png'
									}
								]
							},*/
							this._textarea = mkE({
								tag: 'textarea',
								attr: {
									placeholder: D.Lang.get('copy_embed_link_here'),
									rows: 3
								},
								onkeyup: this._onKeyUp
							})
						]
					},
					new T.Form.Footer({
						els: [
							new T.Form.Button({
								caption: D.Lang.get('add_embed'),
								onclick: this._addEmbed,
								color: 'submit'
							})
						]
					})
				]
			});
		},

		_addEmbed: function(){
			if( this._error ){
				this._error.remove();
			}
			var link = trim(this._textarea.value);
			if( empty(link) ){
				alert(D.Lang.get('cant_save_empty_text'));
				return;
			}
			var ext = link.split(/#|\?/)[0].split('.').pop();
			if( in_array( ext, D.PIC_EXT ) ){
				this._onAddImage(link);
				D.Say.Form.stats('nsf_embed_added');
				return;
			}
			D.loadingOverlay(this.node);
			this._mGetLinkInfo = new DR.say.GetLinkInfo();
			this._mGetLinkInfo.url = link;
			this._mGetLinkInfo.select = [
				new DR.say.select.Link().id().title().url().descr().shortHost().image().dest(),
				new DR.say.select.LinkImage().w().h().gm().uber(),
				new DR.gallery.select.Embed().image(),
				new DR.gallery.select.EmbedImage().gm()
			];
			this._mGetLinkInfo.onLoad = this._onEmbedData;
			this._mGetLinkInfo.onError = this._onEmbedError;
			this._mGetLinkInfo.call();
		},

		_onEmbedData: function(){
			D.removeLoadingOverlay(this.node);
			if( !this._mGetLinkInfo || this._mGetLinkInfo.error || !this._mGetLinkInfo.re ){
				this._showError();
				return;
			}
			if( !this._mGetLinkInfo.re.embedData || !this._mGetLinkInfo.re.embed ){
				if( this._mGetLinkInfo.re.link && this._onAddLink(this._mGetLinkInfo.re) ){
					D.Say.Form.stats('nsf_embed_added');
					return;
				}
				this._showError();
				return;
			}
			this._onAdd(this._mGetLinkInfo.re.embedData, this._mGetLinkInfo.re.link.id, this._mGetLinkInfo.re.link.url);
			D.Say.Form.stats('nsf_embed_added');
		},

		_onEmbedError: function(){
			D.removeLoadingOverlay(this.node);
			this._showError();
		},

		_showError: function(){
			this._error = T.error(D.Lang.get('add_embed_error'));
			D.insertBefore(this._error, this._textarea);
		},

		_onAdd: function(embed, id){},

		_onAddLink: function(link){},

		_onAddImage: function(url){},

		focus: function(){
			this._textarea.focus();
		},

		_onKeyUp: function(e){
			switch( e.keyCode ){
				case 13:
					this._addEmbed();
					return false;
			}
		}
	},
	mkE.Base
);

/**
 * @class {D.Say.Form.Gallery.Title}
 * @extends {mkE.Base}
 */
D.Say.Form.Gallery.Title = Class(
	/**
	 * @lends {D.Say.Form.Gallery.Title#}
	 */
	{
		/**
		 * @constructs
		 */
		__construct: function(){
			this.node = mkE({
				tag: 'div',
				className: 'SayGalleryTitle'
			});

			this._input = mkE({
				tag: 'div',
				className: 'text-input',
				prop: {
					contentEditable: true,
					onfocus: this._onFocus,
					onblur: this._onBlur,
					onkeydown: this._onKeyDown
				}
			}).append(this.node);

			this._placeholderNode = mkE({
				tag: 'div',
				className: 'text-input-placeholder',
				text: D.Lang.get('say_gallery_title'),
				onclick: this.focus
			}).append(this.node);

			$(this._input).bind('paste', this._onPaste);
		},

		_onPaste: function(){
			setTimeout( this._onPasteAction, 20 );
		},

		_onPasteAction: function(){
			D.smileyReplace(this._input);
			this._clearDOM(this._input);
		},

		_clearDOM:function(node){
			if(!node){
				node = this._content;
			}
			var k = 0;
			while( k < node.childNodes.length ){
				var n = node.childNodes[k];
				if( n.nodeType === 3 ){
					++ k;
					continue;
				}
				if( n.nodeType === 1 ){
					n.setAttribute( 'style', '' );
					if( !D.Emoji.test(n.getAttribute('alt')) && !D.smileys[n.getAttribute('alt')] ){
						n.className = '';
					}
					n.id = '';
					if( this._clearDOM_OK(n) ){
						this._clearDOM(n);
						++ k;
						continue;
					}
					var childs = [];
					for( var i = 0; i < n.childNodes.length; ++ i ){
						childs.push( n.childNodes[i] );
					}
					for( var i in childs ){
						var ci = childs[i];
						if( ci.nodeType === 1 ){
							node.insertBefore( ci, n );
							this._clearDOM( ci );
						}
						if( ci.nodeType === 3 ){
							node.insertBefore( ci, n );
						}
					}
				}
				node.removeChild(n);
			}
		},

		_clearDOM_OK:function(n){
			switch( n.tagName ){
				case 'IMG':
					return n.alt && (D.smileys[ n.alt ] || D.Emoji.test(n.alt));
			}
			return false;
		},

		focus: function(){
			this._input.focus();
			this._onFocus();
		},

		_onFocus: function(){
			if( this._placeholderNode.parentNode ){
				this._placeholderNode.remove();
			}
		},

		_onBlur: function(){
			this._checkPlaceholder();
		},

		_onKeyDown: function(e){
			if( e.keyCode === 13 ){
				return false;
			}
			var value = this._getValue();
			if( value.length >= 50 && !e.ctrlKey && !in_array(e.keyCode, [8, 46]) ){
				return false;
			}
		},

		_checkPlaceholder: function(){
			if( !this._getValue() ){
				clearNode(this._input);
				this._placeholderNode.append(this.node);
			}
		},

		_getValue: function(){
			return this._getNodeText(this._input);
		},

		_getNodeText: function(node){
			var text = '';
			for( var i = 0, l = node.childNodes.length; i < l; i++ ){
				var childNode = node.childNodes[i];
				switch( childNode.nodeType ){
					case 1:
						if( childNode.tagName === 'IMG' && (existsClassName(childNode, 'smiley') || existsClassName(childNode, 'emoji')) ){
							text += childNode.getAttribute('alt');
							break;
						}
						text += this._getNodeText(childNode);
						break;
					case 3:
						text += childNode.nodeValue;
				}
			}
			return text;
		},

		value: function(v){
			if( isset(v) ){
				this._placeholderNode.remove();
				v = v.substr(0, 50);
				setNodeText(this._input, v);
				D.smileyReplace(this._input);
				this._checkPlaceholder();
				return v;
			}
			return this._getValue();
		},

		clear: function(){
			this.value('');
		}
	},
	mkE.Base
);
// --- form/gallery.js ---

// +++ form/movie.js +++
/**
 * @class {D.Say.Form.Movie}
 * @extends {mkE.Base}
 * @param {Object} [par]
 */
D.Say.Form.Movie = Class(
	/**
	 * @lends {D.Say.Form.Movie#}
	 */
	{
		/** @type {DR.kino.struct.Movie|null} */
		movie: null,

		/**
		 * @param {Object} [par]
		 * @constructs
		 */
		__construct: function(par){
			par = par || {};

			this.node = mkE({
				tag: 'div',
				className: 'SayMovieWindow',
				els: [
					this._inputContainer = mkE({
						tag: 'div',
						className: 'input-container'
					}),
					this._content = mkE({
						tag: 'div',
						className: 'content'
					})
				]
			});
			if( par.value ){
				this.movie = par.value;
			}
			this._draw();
			this._drawActive();
		},

		_draw: function(){
			this._input = new T.Form.Input({
				placeholder: D.Lang.get('search_movie_placeholder'),
				size: 'small',
				readOnly: true,
				onchange: this._onInputChange
			}).append(this._inputContainer);

			this._onKinoApi();
		},

		_onKinoApi: function(){
			this._mGetCurrent = new DR.kino.CurrentlyPlaying();
			this._mGetCurrent.pg = 1;
			this._mGetCurrent.count = 32;
			this._mGetCurrent.select = [
				new DR.kino.select.Movies().all(),
				new DR.kino.select.Movie().id().title().titleOriginal().year().genres().picture().descriptionPlain().imdbRating().url(),
				new DR.kino.select.Genre().name().nameTranslated(),
				new DR.base.select.Image().large()
			];
			this._mGetCurrent.onLoad = this._onCurrentMovies;
			this._mGetCurrent.call();
		},

		_onCurrentMovies: function(){
			this._input.readOnly(false);
			if( !this._mGetCurrent || this._mGetCurrent.error || !this._mGetCurrent.re ){
				return;
			}
			this._currentMovies = this._mGetCurrent.re.movies;
			this._drawMovies(this._currentMovies);
		},

		_drawMovies: function(movies, search){
			clearNode(this._content);

			if( empty(movies) ){
				return;
			}

			mkE({
				tag: 'div',
				className: 'section-title',
				text: search === true ? D.Lang.get('movie_search_results') : D.Lang.get('currently_in_cinema')
			}).append(this._content);

			this._moviesParent = mkE({
				tag: 'div',
				className: 'movies-container'
			}).append(this._content);
			this._moviesContainer = mkE({
				tag: 'div',
				className: 'movies'
			}).append(this._moviesParent);
			delete this._currentRow;
			for( var i = 0, l = movies.length; i < l; i++ ){
				if( !this._currentRow || this._currentRow.childNodes.length == 2 ){
					this._currentRow = mkE({
						tag: 'div',
						className: 'row'
					}).append(this._moviesContainer);
				}
				var movie = new D.Say.Form.Movie.Item(movies[i]);
				movie._onclick = this._onMovieClick;
				movie.append(this._currentRow);
			}
			var p = new T.ScrollBarPar;
			p.parent = this._moviesParent;
			p.element = this._moviesContainer;
			p.nativeMac = true;
			p.speed = 60;
			this._scrollBar = new T.ScrollBar(p);
		},

		_cancel: function(){

		},

		_save: function(){

		},

		_onMovieClick: function(movie){
			this.movie = movie;
			this._drawActive();
			this._movieChanged(true);
		},

		_drawActive: function(){
			if( this._activeMovie ){
				this._activeMovie.remove();
			}
			if( !this.movie ){
				return;
			}
			this._activeMovie = mkE({
				tag: 'div',
				className: 'active-movie-container',
				els: [
					{
						tag: 'div',
						className: 'section-title',
						text: D.Lang.get('selected_movie')
					},
					{
						tag: 'div',
						className: 'active-movie',
						els: [
							(this.movie.title || this.movie.titleOriginal) + ' (' + this.movie.year + ')',
							{
								tag: 'a',
								els: [
									T.svgIcon({
										icon: 'close-10'
									})
								],
								onclick: this._removeActiveMovie
							}
						]
					}
				]
			});
			D.insertAfter(this._activeMovie, this._inputContainer);
		},

		_removeActiveMovie: function(e){
			D.stopPropagation(e);
			delete this.movie;
			this._drawActive();
			this._movieChanged(true);
		},

		reset: function(){
			this._input.value('');
			this._drawMovies(this._currentMovies);
		},

		focus: function(){
			this._input.focus();
		},

		_onInputChange: function(){
			if( this.searching ){
				return;
			}
			var value = this._input.value();
			if( value == this._lastValue ){
				return;
			}
			this._lastValue = value;
			if( this._searchTimeout ){
				clearTimeout(this._searchTimeout);
			}
			if( empty(value) ){
				this._drawMovies(this._currentMovies || []);
				return;
			}
			this._searchTimeout = setTimeout(this._search, 200);
		},

		_search: function(){
			this.searching = true;
			addClassName(this.node, 'searching');
			D.loadingOverlay(this._content);
			this._mSearch = new DR.kino.Search();
			this._mSearch.pg = 1;
			this._mSearch.count = 32;
			this._mSearch.query = this._input.value();
			this._mSearch.select = [
				new DR.kino.select.Movies().all(),
				new DR.kino.select.Movie().id().title().titleOriginal().year().genres().picture().descriptionPlain().imdbRating().url(),
				new DR.kino.select.Genre().name().nameTranslated(),
				new DR.base.select.Image().large()
			];
			this._mSearch.onLoad = this._onSearch;
			this._mSearch.call();
		},

		_onSearch: function(){
			D.removeLoadingOverlay(this._content);
			this._drawMovies(this._mSearch.re.movies, true);
			this.searching = false;
			removeClassName(this.node, 'searching');
			if( this._input.value() != this._mSearch.query ){
				this._onInputChange();
			}
			if( !this.searchStats ){
				this.searchStats = true;
				D.Say.Form.stats('nsf_search_movie');
			}
		},

		_movieChanged: function(changed){
			this._onChange(this.movie, changed === true);
		},

		_onChange: function(movie){},

		clear: function(){
			delete this.movie;
			this._drawActive();
		}
	},
	mkE.Base
);

/**
 * @class {D.Say.Form.Movie.Item}
 * @extends {mkE.Base}
 * @param {DR.kino.struct.Movie} movie
 */
D.Say.Form.Movie.Item = Class(
	/**
	 * @lends {D.Say.Form.Movie.Item#}
	 */
	{
		/**
		 * @param {DR.kino.struct.Movie} movie
		 * @constructs
		 */
		__construct: function(movie){
			this.movie = movie;

			this.node = mkE({
				tag: 'div',
				className: 'SayMovieWindowItem',
				onclick: this._click
			});

			this._draw();
		},

		_draw: function(){
			this._drawImage();
			this._drawContent();
		},

		_drawImage: function(){
			this._imageNode = mkE({
				tag: 'div',
				className: 'image'
			}).append(this.node);
			D.bgImage(this._imageNode, this.movie.picture.large);
		},

		_drawContent: function(){
			mkE({
				tag: 'div',
				className: 'title',
				text: this.movie.title || this.movie.titleOriginal
			}).append(this.node);

			var genres = [];
			for( var i = 0, l = this.movie.genres.length; i < l; i++ ){
				var genre = this.movie.genres[i];
				genres.push(genre.nameTranslated || genre.name);
			}

			var text = '';
			if( genres ){
				text += genres.join(', ') + ' ';
			}
			text += '(' + this.movie.year + ')';
			mkE({
				tag: 'div',
				className: 'info',
				text: text
			}).append(this.node);
		},

		_click: function(){
			this._onclick(this.movie);
		},

		_onclick: function(movie){}
	},
	mkE.Base
);
// --- form/movie.js ---

// +++ form/test.js +++
D.Say.Form.Test = Class(
	/**
	 * @lends {D.Say.Form.Test#}
	 */
	{
		__construct:function(){
			this.node = mkE( {
				tag:'div',
				className:'SayFormTest radius3',
				onclick:D.stopPropagation
			} );
		},

		TK:10,

		steps:[
			{
				buttons: true,
				q:'Vai jaunajā Runā formā bija kādas kļūdas?'
			},
			{
				q:'Kas Tev patīk jaunajā Runā formā?'
			},
			{
				q:'Kas Tev nepatīk jaunajā Runā formā?'
			},
			{
				q:'Kādas satura pievienošanas iespējas šobrīd neeksistē, bet, ja mēs tās uztaisītu, Tu tās noteikti lietotu?'
			}
		],

		clear:function(){
			this.node.remove();
			D.Say.Form.Test.inst = null;
		},

		show:function(){
			if( D.Say.Form.Test.inst ){
				D.Say.Form.Test.inst.clear();
			}
			D.Say.Form.Test.inst = this;
			this._showRe();
		},

		_showRe:function(re){
			if(re){
				this.step = re.step + 1;
				D.store.set( 'sayFormTest', this.step );
			}
			this.step = this.step || 0;
			var step = this.steps[ this.step ];
			if(!step){
				return;
			}
			this._addQuest();
			this.node.append( D.chat.wins.main._win._headerNode );
		},

		remove:function(){
			this.node.remove();
		},

		_addQuest:function(){
			if( this._prevQuest ){
				clearNode( this.node );
			}
			this._prevQuest = true;
			this.value = null;
			mkE( {
				tag:'p',
				els:[
					this.steps[ this.step ].q,
					this._buttonsNode = mkE({
						tag:'div',
						className:'buttons',
						els:[
							this._yesNode = mkE( {
								tag:'div',
								className:'yes radius3',
								onclick:this._yes,
								els:[
									{
										tag:'span',
										text:'Jā'
									}
								]
							} ),
							this._noNode = mkE( {
								tag:'div',
								className:'no radius3',
								onclick:this._no,
								els:[
									{
										tag:'span',
										text:'Nē'
									}
								]
							} )
						]
					}) // .button
				]
			} ).append( this.node );
			this._input = new T.Form.TextArea( {
				placeholder:'Ieraksti savu komentāru',
				onkeydown:D.closure( this, function(e){
					if( D.checkCtrlEnter(e) ){
						this._send();
					}
				} )
			} ).append( this.node );
			this._sendButton = new T.Form.Button( {
				caption:'Iesūtīt atsauksmi',
				stretch:true,
				onclick:this._send
			} ).append( this.node );
			if( this.steps[ this.step ].buttons ){
				this._input.hide();
				this._sendButton.hide();
			}else{
				this._buttonsNode.style.display = 'none';
				D.insertBefore(mkE({
					tag: 'hr'
				}), this._buttonsNode);
			}
		},

		_yes:function(){
			this.value = 'Y';
			addClassName( this._yesNode, 'sel' );
			removeClassName( this._noNode, 'sel' );
			this._input.show();
			this._sendButton.show();
			this._save();
		},

		_no:function(){
			this.value = 'N';
			removeClassName( this._yesNode, 'sel' );
			addClassName( this._noNode, 'sel' );
			this._input.show();
			this._sendButton.show();
			this._save();
		},

		_save:function(){
			var rpc = new RPC('/messages/rq/app.php');
			rpc.send(
				'vote',
				{
					step:this.step,
					vote:this.value,
					text:this._input.value()
				},
				D.doNothing
			);
		},

		_send:function(){
			this._save();
			//this.clear();
			this._next();
		},

		_next:function(){
			++ this.step;
			D.store.set( 'sayFormTest', this.step );
			var step = this.steps[ this.step ];
			if(!step){
				this._thx();
				return;
			}
			this._addQuest();
		},

		_thx:function(){
			clearNode( this.node );
			mkE( {
				tag:'div',
				className:'thx',
				text:'Liels paldies'
			} ).append( this.node );
			setTimeout( this.remove, 1000 * this.TK );
		}
	}
);
// --- form/test.js ---

// +++ main.js +++
D.SayMain = function(par){
	par = par || {};
	this.DS = par.DS;
	this.count = par.count || 30;
	//this.worec = par.worec || false;
	this.smart = par.smart || false;
	this.noFriendPosts = par.noFriendPosts || false;
	this.openLast = par.openLast || 0;
	this.node = mkE( {
		tag:'div',
		id:'SayMain',
		els:[
			this._tabsNode = mkE( {
				tag:'div',
				id:'SayTabs'
			} ),
			this._feedNode = mkE( {
				tag:'div'
			} )
		]
	} );
	this._tabs = [];
	this.addTab( {
		caption:D.Lang.get('Runā'),
		onclick:D.closure( this, this._show ),
		selected:this.smart
	} );
	this.addTab( {
		caption:D.Lang.get('Jaunākie'),
		onclick:D.closure( this, this._showHron ),
		selected:!this.smart
	} );
	/*
	this.addTab( {
		caption:D.Lang.get('Hide recommends'),
		onclick:D.closure( this, this._showWORec ),
		selected:par.worec,
		title:D.Lang.get('Say without recommends')
	} );
	*/
	this.addTab( {
		caption:D.Lang.get('Atzīmētie'),
		onclick:D.closure( this, this._showFav )
	} );
	this._searchAdd();
	if( D.LV ){
		this.addTab( {
			caption:D.Lang.get('all'),
			onclick:D.closure( this, this._showLast )
		} );
	}
	this._createFeed();
	this.feed.showPosts( par.posts );
	this.feed.node.append( this._feedNode );
	if( par.pg ){
		this.feed.pg = par.pg;
	}
	this._lastSay = this.feed;
	var get = new Get();
	if( get.v('hashTag') ){
		this.searchHashTag( get.v('hashTag') );
	}
};

D.SayMain.prototype.addTab = function(par){
	var tabNode = mkE( {
		tag:'a',
		className:'tab radius3top',
		text:par.caption,
		prop:{
			title:par.title || ''
		}
	} ).append( this._tabsNode );
	if( par.badge ){
		mkE( {
			tag:'span',
			className:'badge on',
			els:[
				par.badge
			]
		} ).append(tabNode);
	}
	if( par.selected ){
		addClassName( tabNode, 'selected' );
		this._lastTab = tabNode;
	}
	tabNode.onclick = D.closure( this, this._tabClick, par, tabNode );
	this._tabs.push(tabNode);
};

D.SayMain.prototype._tabsReset = function(){
	for( var k in this._tabs ){
		removeClassName( this._tabs[k], 'selected' );
	}
};

D.SayMain.prototype._tabClick = function( par, tab ){
	this._tabsReset();
	this._lastTab = tab;
	addClassName( tab, 'selected' );
	if( par.onclick ){
		par.onclick();
	}
	this._searchClose();
};

D.SayMain.prototype._searchAdd = function(){
	this._searchNode = mkE( {
		tag:'div',
		className:'saySearch radius3 searchInputIcon',
		prop:{
			onclick:D.closure( this, this._openSearch )
		},
		els:[
			this._searchInput = mkE( {
				tag:'input',
				prop:{
					placeholder:D.Lang.get('search!'),
					onfocus:D.closure( this, this._searchOnFocus ),
					onblur:D.closure( this, this._searchOnBlur ),
					onkeydown:D.closure( this, this._searchKeyDown ),
					onkeyup:D.closure( this, this._searchKeyUp )
				}
			} )
		]
	} ).append( this._tabsNode );
};

D.SayMain.prototype._openSearch = function(){
	addClassName( this._searchNode, 'saySearchOpen' );
	this._searchInput.focus();
	D.Say.rpc.send('stats', {key: 'say_search_click'});
};

D.SayMain.prototype._searchClose = function(){
	removeClassName( this._searchNode, 'saySearchOpen' );
	this._searchInput.blur();
	this._searchInput.value = '';
	this._searchText = '';
};

D.SayMain.prototype._searchOnFocus = function(){
	clearTimeout( this._searchInputBlurTO );
};

D.SayMain.prototype._searchOnBlur = function(){
	if( this._searchInput.value ){
		return;
	}
	this._searchInputBlurTO = setTimeout( D.closure( this, this._searchOnBlurC ), 200 );
};

D.SayMain.prototype._searchOnBlurC = function(){
	this._searchClose();
	clearNode( this._feedNode );
	this._lastSay.node.append( this._feedNode );
	addClassName( this._lastTab, 'selected' );
};

D.SayMain.prototype._searchKeyDown = function(e){
	e = D.event(e);
	if( e.keyCode == 27 ){
		if( !this._searchInput.value ){
			this._searchInput.blur();
			return;
		}
		this._searchInput.value = '';
		this._searchText = '';
		return false;
	}
};

D.SayMain.prototype._searchKeyUp = function(e){
	clearTimeout( this._searchTimeout );
	if( this._searchInput.value.length < 2 ){
		return;
	}
	this._searchTimeout = setTimeout( D.closure( this, this._search ), 300 );
};

D.SayMain.prototype._search = function(){
	if( this._searchText == this._searchInput.value ){
		return;
	}
	this._tabsReset();
	this._searchText = this._searchInput.value;
	var node = mkE( {
		tag:'ul',
		className:'userComments sayList'
	} );
	var say = new D.Say( {
		method:'search',
		node:node,
		withoutForm:true,
		emptyText:D.Lang.get('nothing_found'),
		data:{
			query:this._searchInput.value
		}
	} );
	this._lastSearchSay = say;
	say.onLoad = D.closure( this, function(){
		if( say.pg == 1 && this._lastSearchSay == say ){
			clearNode( this._feedNode );
			say.node.append( this._feedNode );
		}
	} );
	say.pg = 0;
	D.loadingOverlay( this._feedNode, { backgroundPosition:'center 100px' } );
	say.loadPage();
};

D.SayMain.prototype._createFeed = function(){
	var node = mkE( {
		tag:'ul',
		className:'userComments sayList'
	} );
	this.feed = new D.Say( {
		method:( this.noFriendPosts ? 'getUserPosts' : 'getFriendPosts' ),
		node:node,
		DS:this.DS,
		//worec:this.worec,
		data:{
			count:this.count,
			// for getUserPosts
			withoutRecommends:this.worec,
			uid:D.ID
		},
		form:{
			//helpText:D.Lang.get('Say mention info')
		},
		smart:this.smart
	} );
	window.say = this.feed;
};

D.SayMain.prototype._show = function(){
	this._lastSay = this.feed;
	if( this.smart ){
		clearNode( this._feedNode );
		this.feed.node.append( this._feedNode );
		return;
	}
	this.smart = true;
	D.loadingOverlay( this._feedNode, { backgroundPosition:'center 100px' } );
	D.Say.rpc.send(
		'smart',
		{
			v:true
		},
		this._worecRe,
		this
	);
};

/*
D.SayMain.prototype._showWORec = function(){
	this._lastSay = this.feed;
	if( this.worec ){
		clearNode( this._feedNode );
		this.feed.node.append( this._feedNode );
		return;
	}
	this.worec = true;
	D.loadingOverlay( this._feedNode, { backgroundPosition:'center 100px' } );
	D.Say.rpc.send(
		'worec',
		{
			worec:true
		},
		this._worecRe,
		this
	);
};
*/

D.SayMain.prototype._worecRe = function(){
	this._createFeed();
	this.feed.pg = 0;
	this.feed.onLoad = D.closure( this, function(){
		if( this.feed.pg == 1 ){
			clearNode( this._feedNode );
			this.feed.node.append( this._feedNode );
			this.feed.resetScroll();
		}
	} );
	this.feed.loadPage();
	this._lastSay = this.feed;
};

D.SayMain.prototype._showHron = function(){
	this._lastSay = this.feed;
	if( !this.smart ){
		clearNode( this._feedNode );
		this.feed.node.append( this._feedNode );
		this.feed.resetScroll();
		return;
	}
	this.smart = false;
	D.loadingOverlay( this._feedNode, { backgroundPosition:'center 100px' } );
	D.Say.rpc.send(
		'smart',
		{
			v:false
		},
		this._worecRe,
		this
	);
};

D.SayMain.prototype._showFav = function(){
	D.loadingOverlay( this._feedNode, { backgroundPosition:'center 100px' } );
	var node = mkE( {
		tag:'ul',
		className:'userComments sayList'
	} );
	var say = new D.Say( {
		method:'getFavorites',
		node:node,
		withoutForm:true,
		emptyText:( D.Lang.exists('Say empty fav list') ? D.Lang.get('Say empty fav list') : '' )
	} );
	say.pg = 0;
	say.onLoad = D.closure( this, function(){
		if( say.pg == 1 ){
			clearNode( this._feedNode );
			say.node.append( this._feedNode );
			say.resetScroll();
		}
	} );
	say.onFav = D.closure( this, function( item, fav ){
		/** @var {D.SayItem} item */
		var feedItem = this.feed._items[ item.id ];
		if(!feedItem){
			return;
		}
		if(fav){
			addClassName( feedItem._favIcon, 'active' );
		} else {
			removeClassName( feedItem._favIcon, 'active' );
		}
	} );
	say.loadPage();
	this._lastSay = say;
};

D.SayMain.prototype._showLast = function(){
	D.loadingOverlay( this._feedNode, { backgroundPosition:'center 100px' } );
	if( this._rtFeed ){
		clearNode( this._feedNode );
		this._rtFeed.node.append( this._feedNode );
		this._lastSay = this._rtFeed;
		return;
	}
	var node = mkE( {
		tag:'ul',
		className:'userComments sayList',
		prop:{
			onmousemove:D.closure( this, this._lastMouseMove )
		}
	} );
	var say = new D.Say( {
		method:'getLast',
		node:node
	} );
	say.pg = 0;
	say.onLoad = D.closure( this, function(re){
		if( say.pg == 1 ){
			clearNode( this._feedNode );
			if( ++ this.openLast < 3 ){
				var infoNode = T.info( D.Lang.get('About say last') ).append( this._feedNode );
				infoNode.style.marginTop = '10px';
			}
			say.node.append( this._feedNode );
			say.resetScroll();
		}
	} );
	say.loadPage();
	this._lastSay = say;
	this._rtFeed = say;
	D.onLoad( 'chat', D.closure( this, function(){
		D.chat.subscribe( 'sayFeed', D.closure( this, this._sayFeed ) );
	} ) );
};

D.SayMain.prototype._lastMouseMove = function(){
	this._lastMouseTime = (new Date).getTime();
};

D.SayMain.prototype._sayFeed = function(data){
	if( data.msg.uid == D.ID || data.msg.LANG != D.LANG ){
		return;
	}
	if( this._lastMouseTime && (new Date).getTime() - this._lastMouseTime < 1500 ){ // 1.5sec pēc sāk atkal vienot postus.
		D.log( 'Say RT skip mouse' );
		return;
	}
	if( $(window).scrollTop() - 200 > D.position( this._lastSay.node ).top ){
		D.log( 'Say RT skip scroll' );
		return;
	}
	if( count( D.Say.users ) > 1000 ){
		D.Say.users = {};
	}
	if( D.me.age > 17 && !data.msg.age18 ){
		return;
	}
	O2O( D.Say.users, data.msg.users );
	var item = new D.SayItem( data.msg.item, this._rtFeed );
	//D.insertBefore( item.node, this._rtFeed.node.firstChild );
	D.insertAfter( item.node, this._rtFeed.form.node );
	$( item.node ).hide().slideDown();
	this._rtFeed._items = {}; // GC
	if( this._rtFeed.node.childNodes[100] ){
		removeNode( this._rtFeed.node.childNodes[100] );
	}
};

D.SayMain.prototype.searchHashTag = function(tag){
	D.log(tag);
	this._searchText = '';
	this._searchInput.value = '#' + tag;
	this._openSearch();
	this._search();
	document.location.hash = '#SayMain';
};
// --- main.js ---

// +++ item/with_popup.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param users
 */
D.SayItem.WithPopup = Class(
	/**
	 * @lends {D.SayItem.WithPopup#}
	 */
	{
		/**
		 * @param users
		 * @constructs
		 * @private
		 */
		__construct: function(users){
			this.users = users;

			this.node = mkE({
				tag: 'div',
				className: 'SayWithPopup'
			});

			this._draw();
		},

		_draw: function(){
			for( var i = 0, l = this.users.length; i < l; i++ ){
				new D.SayItem.WithPopup.User(this.users[i]).append(this.node);
			}
		}
	},
	mkE.Base
);

/**
 * @class
 * @extends {mkE.Base}
 * @param user
 */
D.SayItem.WithPopup.User = Class(
	/**
	 * @lends {D.SayItem.WithPopup.User#}
	 */
	{
		/**
		 * @param user
		 * @constructs
		 * @private
		 */
		__construct: function(user){
			if( user.uid ){
				this.user = D.Say.getUser(user.uid);
			}else{
				this.user = {
					title: user.title,
					image: {
						gm: D.PIMG + 'i/profile/0/ngm_1.png'
					}
				};
			}

			this.node = mkE({
				tag: user.uid ? 'a' : 'div',
				className: 'SayWithPopupUser'
			});

			if( user.uid ){
				this.node.setAttribute('href', this.user.url);
			}

			this._drawImage();
			this._drawInfo();
		},

		_drawImage: function(){
			mkE({
				tag: 'div',
				className: 'SayWithPopupImage radius3',
				style: {
					backgroundImage: 'url(' + this.user.image.gm + ')'
				}
			}).append(this.node);
		},

		_drawInfo: function(){
			this._infoNode = mkE({
				tag: 'div',
				className: 'SayWithPopupInfo'
			}).append(this.node);

			mkE({
				tag: 'div',
				className: 'userTitle' + (!this.user.id ? ' userTitleDark' : ''),
				text: htmlspecialchars_decode(this.user.title)
			}).append(this._infoNode);
		}
	},
	mkE.Base
);
// --- item/with_popup.js ---

// +++ item/profile_switch.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {D.SayItem.ProfileSwitch.Par} par
 */
D.SayItem.ProfileSwitch = Class(
	/**
	 * @lends {D.SayItem.ProfileSwitch#}
	 */
	{
		/**
		 * @param {D.SayItem.ProfileSwitch.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par;
			this.uid = par.uid || D.ID;

			this.node = mkE({
				tag: 'div',
				className: 'SayProfileSwitch'
			});

			D.Say.onProfiles(this._onProfiles);
		},

		_onProfiles: function(profiles){
			if( empty(profiles) ){
				this.node.remove();
				return;
			}
			this._profiles = [D.me].concat(profiles);
			var profile = D.me;
			for( var i = 0, l = this._profiles.length; i < l; i++ ){
				if( this._profiles[i].id == this.uid ){
					profile = this._profiles[i];
					break;
				}
			}
			this.uid = profile.id;
			this._draw(profile);
			this._onProfileSelect(profile);
		},

		_draw: function(user){
			var caption = mkE({
				tag: 'div',
				className: 'profileSwitchContainer',
				els: [
					{
						tag: 'span',
						className: 'userImage',
						els: [
							this._image = mkE({
								tag: 'img',
								src: user.image.icon
							})
						]
					}
				],
				title: D.Lang.get('switch_profile')
			});

			var menuPar = new D.SayItem.ProfileSwitch.Menu.Par().setProfiles(this._profiles).setActiveId(user.id).setOnChange(this._onProfileSelect);
			this._menu = new D.SayItem.ProfileSwitch.Menu(menuPar);

			var par = new T.DropDownBase__par();
			par.withoutArrow = true;
			par.withoutPadding = true;
			par.caption = caption;
			par.align = 'right';
			par.els = [
				this._menu
			];
			par.onShow = this._menu.onShow;
			this._dropDown = new T.DropDownBase(par);
			this._dropDown.append(this.node);
		},

		_onProfileSelect: function(profile){
			this._dropDown.hideMenu();
			this._image.src = profile.image.icon;
			this.par.onChange(profile);
			this.uid = profile.id;
		}
	},
	mkE.Base
);

/**
 * @class
 */
D.SayItem.ProfileSwitch.Par = Class(
	/**
	 * @lends {D.SayItem.ProfileSwitch.Par#}
	 */
	{
		onChange: D.doNothing,
		uid: D.ID,

		/**
		 * @param {Function} v
		 * @returns {D.SayItem.ProfileSwitch.Par}
		 */
		setOnChange: function(v){
			this.onChange = v;
			return this;
		},

		/**
		 * @param {Number} v
		 * @returns {D.SayItem.ProfileSwitch.Par}
		 */
		setUid: function(v){
			this.uid = v;
			return this;
		}
	}
);

/**
 * @class
 * @extends {mkE.Base}
 * @param {D.SayItem.ProfileSwitch.Menu.Par} par
 */
D.SayItem.ProfileSwitch.Menu = Class(
	/**
	 * @lends {D.SayItem.ProfileSwitch.Menu#}
	 */
	{
		/**
		 * @param {D.SayItem.ProfileSwitch.Menu.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par;
			this._profiles = [];

			this.node = mkE({
				tag: 'div',
				className: 'SayProfileSwitchMenu',
				els: [
					{
						tag: 'div',
						className: 'info',
						text: D.Lang.get('say_profileswitch_info')
					},
					this._profileListContainer = mkE({
						tag: 'div',
						className: 'profileListContainer',
						els: [
							this._profileList = mkE({
								tag: 'div',
								className: 'profileList'
							})
						]
					})
				]
			});

			this._drawProfiles();
		},

		_drawProfiles: function(){
			for( var i = 0, l = this.par.profiles.length; i < l; i++ ){
				var profileData = this.par.profiles[i];
				var par = new D.SayItem.ProfileSwitch.Menu.Item.Par().setProfile(profileData).setOnClick(this._onProfileClick);
				var profile = new D.SayItem.ProfileSwitch.Menu.Item(par);
				if( this.par.activeId == profileData.id ){
					profile.setActive(true);
				}
				this._profiles.push(profile);
				profile.append(this._profileList);
			}
			if( this.par.profiles.length <= 4 ){
				this._profileListContainer.style.height = 44 * this.par.profiles.length + 'px';
			}
			this._initScrollBar();
		},

		_initScrollBar: function(){
			var par = new T.ScrollBarPar();
			par.parent = this._profileListContainer;
			par.element = this._profileList;
			this._scrollBar = new T.ScrollBar(par);
		},

		_onProfileClick: function(profile){
			for( var i = 0, l = this._profiles.length; i < l; i++ ){
				var p = this._profiles[i];
				p.setActive(p.id == profile.id)
			}
			this.par.onChange(profile);
		},

		onShow: function(){
			this._scrollBar.refresh();
			var mStats = new DR.say.ClickStats();
			mStats.kw = 'say_feed_switch_profile';
			mStats.call();
		}
	},
	mkE.Base
);

/**
 * @class
 */
D.SayItem.ProfileSwitch.Menu.Par = Class(
	/**
	 * @lends {D.SayItem.ProfileSwitch.Menu.Par#}
	 */
	{
		profiles: [],
		activeId: D.ID,
		onChange: D.doNothing,

		/**
		 * @param {Array.<Object>} v
		 * @returns {D.SayItem.ProfileSwitch.Menu.Par}
		 */
		setProfiles: function(v){
			this.profiles = v;
			return this;
		},

		/**
		 * @param {Function} v
		 * @returns {D.SayItem.ProfileSwitch.Menu.Par}
		 */
		setOnChange: function(v){
			this.onChange = v;
			return this;
		},

		/**
		 * @param {Number} v
		 * @returns {D.SayItem.ProfileSwitch.Menu.Par}
		 */
		setActiveId: function(v){
			this.activeId = v;
			return this;
		}
	}
);

/**
 * @class
 * @extends {mkE.Base}
 * @param {D.SayItem.ProfileSwitch.Menu.Item.Par} par
 */
D.SayItem.ProfileSwitch.Menu.Item = Class(
	/**
	 * @lends {D.SayItem.ProfileSwitch.Menu.Item#}
	 */
	{
		/**
		 * @param {D.SayItem.ProfileSwitch.Menu.Item.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par;
			this.id = this.par.profile.id;
			this.title = htmlspecialchars_decode(this.par.profile.title);
			this.image = this.par.profile.image.icon;
			this.type = this.par.profile.type;

			this.node = mkE({
				tag: 'a',
				className: 'SayProfileSwitchItem',
				onclick: this._onclick
			});

			this._drawImage();
			this._drawInfo();
		},

		_drawImage: function(){
			var image= mkE({
				tag: 'div',
				className: 'image'
			});
			D.bgImage(image, this.image);
			image.append(this.node);
		},

		_drawInfo: function(){
			var info = mkE({
				tag: 'div',
				className: 'profileInfo'
			}).append(this.node);

			mkE({
				tag: 'div',
				className: 'title cut',
				text: this.title
			}).append(info);

			if( this.type != D.USER_TYPE_DEFAULT ){
				return;
			}

			mkE({
				tag: 'div',
				className: 'help',
				text: D.Lang.get('say_profile_' + this.type)
			}).append(info);
		},

		setActive: function(v){
			if( v ){
				addClassName(this.node, 'active');
			}else{
				removeClassName(this.node, 'active');
			}
		},

		_onclick: function(){
			this.par.onClick(this.par.profile);
		}
	},
	mkE.Base
);

/**
 @class
 */
D.SayItem.ProfileSwitch.Menu.Item.Par = Class(
	/**
	 * @lends {D.SayItem.ProfileSwitch.Menu.Item.Par#}
	 */
	{
		profile: null,
		onClick: D.doNothing,

		/**
		 * @param {Object} v
		 * @returns {D.SayItem.ProfileSwitch.Menu.Item.Par}
		 */
		setProfile: function(v){
			this.profile = v;
			return this;
		},

		/**
		 * @param {Function} v
		 * @returns {D.SayItem.ProfileSwitch.Menu.Item.Par}
		 */
		setOnClick: function(v){
			this.onClick = v;
			return this;
		}
	}
);
// --- item/profile_switch.js ---

// +++ item/like.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {D.SayItem.Like.Par} par
 */
D.SayItem.Like = Class(
	/**
	 * @lends {D.SayItem.Like#}
	 */
	{
		/**
		 * @param {D.SayItem.Like.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par;
			this.id = par.id;
			this.type = par.type;
			this.likes = par.likes;
			this.likeProfiles = par.likeProfiles || [];
			this.uid = par.uid;

			this.node = mkE({
				tag: 'span',
				className: 'SayLike'
			});

			this._init();
		},

		_init: function(){
			this._draw();
			D.onLoad('chat', this._subscribe);
		},

		_subscribe: function(){
			D.chat.subscribe('like:' + this.type + ':' + this.id, this._onLikeEvent);
		},

		_draw: function(){
			this.liked = in_array(this.uid, this.likeProfiles);
			clearNode(this.node);
			if( !D.ID && !this.likes && !this.par.showNone ){
				this.node.style.display = 'none';
				return;
			}else{
				this.node.style.display = '';
			}
			if( !D.ID ){
				mkE({
					tag: 'a',
					className: 'icon sayLikeIcon',
					els: [
						D.Lang.get('like') + ' ',
						this.likes ? {
							tag: 'strong',
							text: this.likes
						} : ''
					],
					onclick: this._showLikes
				}).append(this.node);
				return;
			}
			this._likeNode = mkE({
				tag: 'a',
				className: 'icon sayLikeIcon',
				text: this.liked ? D.Lang.get('Dislike it') : D.Lang.get('I like it'),
				onclick: this.liked ? this._cancelLike : this._like
			}).append(this.node);

			if( this.liked ){
				addClassName(this._likeNode, 'liked');
				addClassName(this.node, 'active');
			}else{
				removeClassName(this.node, 'active');
			}

			if( this.likes == 0 ){
				return;
			}

			mkE({
				tag: 'a',
				className: 'likes-count',
				els: [
					{
						tag: 'strong',
						text: this.likes
					}
				],
				onclick: this._showLikes
			}).append(this.node);
		},

		_showLikes: function(){
			InfoBox.open('/rq/like_modal.php?likeType=' + this.type + '&likeId=' + this.id, {
				title: D.Lang.get('like'),
				width: 820,
				modal: true,
				overlayClose: true
			});
		},

		_cancelLike: function(){
			if( this._mDislike && this._mDislike.processing ){
				return;
			}
			this._mDislike = new DR.like.Dislike();
			this._mDislike.type = this.type;
			this._mDislike.id = this.id;
			this._mDislike.uid = this.uid;
			this._mDislike.select = [
				new DR.like.select.GetRe().count()
			];
			this._mDislike.onLoad = this._onCancelLike;
			this._mDislike.call();
		},

		_onCancelLike: function(){
			if( !this._mDislike.re ){
				return;
			}
			var re = this._mDislike.re;
			this._removeUid(this.uid);
			this.likes = re.count;
			this._draw();
		},

		_like: function(){
			if( this._mLike && this._mLike.processing ){
				return;
			}
			var ac = new DR.ApiCall();
			this._mLike = new DR.like.LikeArray();
			this._mLike.type = this.type;
			this._mLike.id = this.id;
			this._mLike.uids = [
				this.uid
			];
			this._mLike.select = [
				new DR.like.select.GetRe().count().followType().pageName()
			];
			this._mLike.onLoad = this._onLike;
			ac.addMethod(this._mLike);

			var mStats = new DR.say.ClickStats();
			mStats.kw = 'say_feed_like';
			ac.addMethod(mStats);

			ac.call();
		},

		_onLike: function(){
			if( !this._mLike.re ){
				return;
			}
			var re = this._mLike.re;
			this._addUid(this.uid);
			this.likes = re.count;
			this._draw();
			this.par.onLike(re);
		},

		setUid: function(uid){
			this.uid = uid;
			this._draw();
		},

		_addUid: function(uid){
			if( !in_array(uid, this.likeProfiles) ){
				this.likeProfiles.push(uid);
			}
		},

		_removeUid: function(uid){
			var key = array_search(uid, this.likeProfiles);
			if( key !== false ){
				this.likeProfiles.splice(key, 1);
			}
		},

		_onLikeEvent: function(data){
			if( data.msg.method == 'like' ){
				this.likeEvent(data.msg);
			}else if( data.msg.method == 'dislike' ){
				this.dislikeEvent(data.msg);
			}
		},

		likeEvent: function(event){
			this._addUid(event.uid);
			this.likes = event.count;
			this._draw();
		},

		dislikeEvent: function(event){
			this._removeUid(event.uid);
			this.likes = event.count;
			this._draw();
		}
	},
	mkE.Base
);

/**
 * @class
 */
D.SayItem.Like.Par = Class(
	/**
	 * @lends {D.SayItem.Like.Par#}
	 */
	{
		id: null,
		type: null,
		likes: 0,
		likeProfiles: [],
		uid: null,
		onLike: D.doNothing,
		showNone: false,

		/**
		 * @param {D.SayItem} item
		 * @return {D.SayItem.Like.Par}
		 */
		fromSayItem: function(item){
			this.id = item.par.likeId;
			this.type = item.par.likeType;
			this.likes = item.par.likeCount;
			this.likeProfiles = item.likeProfiles;
			this.uid = D.ID;
			return this;
		}
	}
);
// --- item/like.js ---

// +++ item/recommend.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {D.SayItem.Recommend.Par} par
 */
D.SayItem.Recommend = Class(
	/**
	 * @lends {D.SayItem.Recommend#}
	 */
	{
		/** @type {D.SayItem.Recommend.Par} */
		par: null,
		/**
		 *
		 * @param {D.SayItem.Recommend.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par;
			this.id = par.id;
			this.recommends = par.recommends;
			this.recProfiles = par.recommendProfiles;
			this.uid = par.uid;

			this.node = mkE({
				tag: 'span',
				className: 'SayRecommend'
			});

			this._draw();
		},

		_draw: function(){
			this.recommended = in_array(this.uid, this.recProfiles);
			clearNode(this.node);
			if( !D.ID && !this.recommends ){
				this.node.style.display = 'none';
				return;
			}else{
				this.node.style.display = '';
			}
			if( !D.ID ){
				mkE({
					tag: 'a',
					className: 'icon sayRecommendIcon',
					els: [
						D.Lang.get('Iesaka') + ' ',
						{
							tag: 'strong',
							text: this.recommends
						}
					],
					onclick: this._showRecommends
				}).append(this.node);
				return;
			}

			this._recommendNode = mkE({
				tag: 'a',
				className: 'icon sayRecommendIcon',
				text: this.recommended ? D.Lang.get('Cancel') : D.Lang.get('Recommend'),
				onclick: this.recommended ? this._cancelRecommend : this._recommend
			}).append(this.node);

			if( this.recommended ){
				addClassName(this._recommendNode, 'recommended');
				addClassName(this.node, 'active');
			}else{
				removeClassName(this.node, 'active');
			}

			if( this.recommends == 0 ){
				return;
			}

			mkE({
				tag: 'a',
				className: 'recommend-count',
				els: [
					{
						tag: 'strong',
						text: this.recommends
					}
				],
				onclick: this._showRecommends
			}).append(this.node);
		},

		_showRecommends: function(e){
			InfoBox.open('/say/rq/recs.php?pid=' + this.id, {
				title: D.Lang.get('Iesaka'),
				width: 820,
				modal: true,
				overlayClose: true
			});
		},

		_recommend: function(){
			if( this._mRecommend && this._mRecommend.processing ){
				return;
			}
			var ac = new DR.ApiCall();
			this._mRecommend = new DR.say.Recommend();
			this._mRecommend.pid = this.id;
			this._mRecommend.uids = [
				this.uid
			];
			this._mRecommend.select = [
				new DR.say.select.RecommendRe().item().followType().pageName(),
				new DR.say.select.Item().recCount()
			];
			this._mRecommend.onLoad = this._onRecommend;
			ac.addMethod(this._mRecommend);

			var mStats = new DR.say.ClickStats();
			mStats.kw = 'say_feed_recommend';
			ac.addMethod(mStats);

			ac.call();
		},

		_onRecommend: function(){
			if( !this._mRecommend.re || !this._mRecommend.re.item ){
				return;
			}
			var re = this._mRecommend.re.item;
			this.recommends = re.recCount;
			this._addUid(this.uid);
			this._draw();
			this.par.onRecommend(this._mRecommend.re);
		},

		_cancelRecommend: function(){
			if( this._mCancelRecommend && this._mCancelRecommend.processing ){
				return;
			}
			this._mCancelRecommend = new DR.say.CancelRecommend();
			this._mCancelRecommend.pid = this.id;
			this._mCancelRecommend.uid = this.uid;
			this._mCancelRecommend.select = [
				new DR.say.select.CancelRecommendRe().item(),
				new DR.say.select.Item().recCount()
			];
			this._mCancelRecommend.onLoad = this._onCancelRecommend;
			this._mCancelRecommend.call();
		},

		_onCancelRecommend: function(){
			if( !this._mCancelRecommend.re || !this._mCancelRecommend.re.item ){
				return;
			}
			var re = this._mCancelRecommend.re.item;
			this.recommends = re.recCount;
			this._removeUid(this.uid);
			this._draw();
		},

		setUid: function(uid){
			this.uid = uid;
			this._draw();
		},

		_addUid: function(uid){
			if( !in_array(uid, this.recProfiles) ){
				this.recProfiles.push(uid);
			}
		},

		_removeUid: function(uid){
			var key = array_search(uid, this.recProfiles);
			if( key !== false ){
				this.recProfiles.splice(key, 1);
			}
		}
	},
	mkE.Base
);

D.SayItem.Recommend.Par = Class(
	/**
	 * @lends {D.SayItem.RecommendPar}
	 */
	{
		id: null,
		recommends: 0,
		recommendProfiles: [],
		uid: null,
		onRecommend: D.doNothing,
		/**
		 *
		 * @param {D.SayItem} data
		 */
		fromSayItem: function(data){
			this.id = data.id;
			this.recommends = data.recCount;
			this.recommendProfiles = data.recProfiles;
			this.uid = D.ID;
			return this;
		}
	}
);
// --- item/recommend.js ---

// +++ item/friend_comments.js +++
/**
 * @class {D.SayItem.FriendComments}
 * @extends {mkE.Base}
 * @param {D.SayItem.FriendComments.Par} par
 */
D.SayItem.FriendComments = Class(
	/**
	 * @lends {D.SayItem.FriendComments#}
	 */
	{
		/**
		 * @type {Object.<D.SayItem.FriendComments.Comment>}
		 */
		_comments: {},
		_replyTo: null,

		/**
		 * @param {D.SayItem.FriendComments.Par} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par;
			this.type = par.commentsParams.type;
			this.id = par.commentsParams.id;
			this.isBanned = par.commentsParams.isBanned > 0 || false;
			this.likeType = par.likeType;
			this.likeId = par.likeId;
			this.friendLikes = par.likes;
			this.iLike = par.iLike;
			this.likeUsers = par.likeUsers;
			this.commentsCount = par.commentsCount;
			this.uid = D.ID;

			this.node = mkE({
				tag: 'div',
				className: 'FriendComments'
			});

			this._draw();

			if(this.isBanned) {
				this.node.style.display = 'none';
			}
		},

		_draw: function(){
			this._drawLikes();
			this._drawComments();
			this._drawForm();
		},

		_drawLikes: function(){
			if( !this.friendLikes || (this.iLike && this.friendLikes == 1) ){
				return;
			}
			if( !this._likesNode ){
				this._likesNode = mkE({
					tag: 'div',
					className: 'likes'
				}).append(this.node);
			}
			clearNode(this._likesNode);
			var likes = this.friendLikes;
			var users = this.likeUsers;
			var l = Math.min(likes > 5 ? 4 : 5, users.length);
			for( var i = 0; i < l; i++ ){
				var user = users[i];
				var userLink = mkE({
					tag: 'a',
					className: 'user-like',
					els: [
						{
							tag: 'img',
							className: 'radius3',
							src: user.image.icon
						}
					]
				}).append(this._likesNode);
				D.Say.addUserTooltip(userLink, {
					id: user.id,
					type: user.type
				}, {
					withoutTimeout: true
				});
			}
			if( likes > l ){
				mkE({
					tag: 'a',
					className: 'more-likes',
					onclick: this._showLikes,
					text: '+' + (likes - l),
					title: ucfirst(D.Lang.nget(likes - l, 'friends'))
				}).append(this._likesNode);
			}
			mkE({
				tag: 'span',
				className: 'friends-like-count',
				text: D.Lang.nget(likes, 'friends_like')
			}).append(this._likesNode);
		},

		_showLikes: function(){
			InfoBox.open('/rq/like_modal.php?likeType=' + this.likeType + '&likeId=' + this.likeId + '&friends', {
				title: D.Lang.get('like'),
				width: 820,
				modal: true,
				overlayClose: true
			});
		},

		_drawComments: function(){
			this._commentsNode = mkE({
				tag: 'div',
				className: 'friend-comments'
			}).append(this.node);

			var visibleCount = 0;
			var i, l;
			for( i = 0, l = this.par.friendComments.length; i < l; i++ ){
				visibleCount++;
				if( this.par.friendComments[i].childs ){
					visibleCount += this.par.friendComments[i].childs.length;
				}
			}

			if( this.commentsCount && visibleCount && this.commentsCount > visibleCount ){
				mkE({
					tag: 'div',
					className: 'view-all-comments',
					els: [
						{
							tag: 'a',
							onclick: this._showAllComments,
							text: D.Lang.nget(this.commentsCount - visibleCount, 'view_all_comments')
						}
					]
				}).append(this._commentsNode);
			}

			for( i = 0, l = this.par.friendComments.length; i < l; i++ ){
				var comment = this.par.friendComments[i];
				var item = this.addItem(comment, true);
				item.append(this._commentsNode);
			}
		},

		/**
		 * @param {DR.comments.struct.Item} comment
		 * @param {Boolean} [firstLevel]
		 * @returns {D.SayItem.FriendComments.Comment}
		 */
		addItem: function(comment, firstLevel){
			var par = {
				comments: this,
				firstLevel: firstLevel === true
			};
			var item = new D.SayItem.FriendComments.Comment(comment, par);
			this._comments[comment.cid] = item;
			return item;
		},

		_drawForm: function(){
			var par = {
				type: this.type,
				id: this.id,
				onAdd: this._onAdd
			};
			this._form = new D.SayItem.FriendComments.Form(par);
			this._form.append(this.node);
		},

		/**
		 * @param {DR.comments.struct.AddRe} re
		 */
		_onAdd: function(re){
			if( !re.item.parent || !this._comments[re.item.parent] ){
				var item = this.addItem(re.item);
				item.append(this._commentsNode);
			}else{
				this._comments[re.item.parent].addChild(re.item);
			}
			this.resetForm();
		},

		getForm: function(){
			return this._form.getForm();
		},

		resetForm: function(){
			if( this._replyTo ){
				this._replyTo.cancelReply();
			}
			this._form.reset();
		},

		setReply: function(comment){
			if( this._replyTo ){
				this._replyTo.cancelReply();
			}
			if( !comment ){
				return;
			}
			this._replyTo = comment;
		},

		_showAllComments: function(){
			this.par.showComments();
		},

		setUid: function(uid){
			this.uid = uid;
			for( var i in this._comments ){
				if( !this._comments.hasOwnProperty(i) ){
					continue;
				}
				this._comments[i].drawLikes();
			}
			this._form.setUid(uid);
		}
	},
	mkE.Base
);

/**
 * @class {D.SayItem.FriendComments.Par}
 */
D.SayItem.FriendComments.Par = Class(
	/**
	 * @lends {D.SayItem.FriendComments.Par#}
	 */
	{
		likeType: 0,
		likeId: 0,
		likes: 0,
		iLike: false,
		/** @type {Array.<DR.users.struct.User>} */
		likeUsers: [],
		/** @type {Array.<DR.comments.struct.Item>} */
		friendComments: [],
		commentsCount: 0,
		/** @type {DR.comments.struct.ParamsRe} */
		commentsParams: null,
		showComments: D.doNothing
	}
);

/**
 * @class {D.SayItem.FriendComments}
 * @extends {mkE.Base}
 * @param {DR.comments.struct.Item} data
 * @param {Object} par
 */
D.SayItem.FriendComments.Comment = Class(
	/**
	 * @lends {D.SayItem.FriendComments.Comment#}
	 */
	{
		_replyOpen: false,

		/**
		 * @param {DR.comments.struct.Item} data
		 * @param {Object} par
		 * @constructs
		 */
		__construct: function(data, par){
			this.data = data;
			this.par = par || {};
			/** @type {DR.SayItem.FriendComments} */
			this.comments = this.par.comments;
			this.firstLevel = par.firstLevel || false;

			this.node = mkE({
				tag: 'div',
				className: 'FriendComment',
				attr: {
					'data-cid': this.data.cid
				}
			});

			this._drawUserImage();
			this._drawHeader();
			this._drawContent();
			this._drawFooter();
			this._drawChildren();
		},

		_drawUserImage: function(){
			var userImage = mkE({
				tag: 'a',
				className: 'user-image',
				href: this.data.user.url
			}).append(this.node);
			D.bgImage(userImage, this.data.user.image.small);
		},

		_drawHeader: function(){
			this._headerNode = mkE({
				tag: 'div',
				className: 'header'
			}).append(this.node);

			var userNode = mkE({
				tag: 'a',
				className: 'user-link',
				href: this.data.user.url,
				text: htmlspecialchars_decode(this.data.user.title)
			}).append(this._headerNode);
			D.Say.addUserTooltip(userNode, {id: this.data.user.id});

			mkE({
				tag: 'span',
				className: 'timestamp',
				text: D.ddate(this.data.created)
			}).append(this._headerNode);

			if( this.data.lastEditTime ){
				mkE({
					tag: 'span',
					className: 'edited',
					els: [
						{
							tag: 'span',
							className: 'icon editGrayIcon',
							attr: {
								title: D.Lang.get('Labots') + ' ' + D.ddate2(this.data.lastEditTime)
							}
						}
					]
				}).append(this._headerNode);
			}

			if( this.data.isHidden ){
				addClassName(this.node, 'FriendCommentHidden');
				mkE({
					tag: 'span',
					className: 'visibility',
					els: [
						{
							tag: 'span',
							className: 'sep',
							text: '·'
						},
						{
							tag: 'span',
							className: 'color1',
							text: D.Lang.get('comment_hidden')
						}
					]
				}).append(this._headerNode);
			}

			if( this.data.canDelete ){
				mkE({
					tag: 'a',
					className: 'delete',
					onclick: this._delete,
					els: [
						T.svgIcon({
							icon: 'close-10'
						})
					]
				}).append(this._headerNode);
			}
		},

		_drawContent: function(){
			this._bodyNode = mkE({
				tag: 'div',
				className: 'content',
				els:[
					{
						tag:'div',
						className:'comText',
						text:htmlspecialchars_decode( this.data.text )
					}
				]
			}).append(this.node);
			if(  this.data.giphy && T.Giphy ){
				new T.Giphy.Embed( this.data.giphy, { maxHeight:100 } ).append( this._bodyNode );
			}
			if( this.data.sound && T.Sounds ){
				new T.Sounds.Embed( this.data.sound ).append( this._bodyNode );
			}
			D.smileyReplace(this._bodyNode);
			D.replaceWithNode(this._bodyNode, /<!-- user:([0-9]+) -->/g, this._replaceUser);
			this._drawEmbeds();
			this._drawYoutube();
			D.linksReplace(this._bodyNode);
			this._drawImage();
			this._drawGif();
			this._drawVideo();
		},

		_drawImage: function(){
			if( !this.data.image ){
				return;
			}
			mkE({
				tag: 'div',
				className: 'image-container',
				els: [
					{
						tag: 'img',
						src: this.data.image.say,
						onclick: this._showImage
					}
				]
			}).append(this._bodyNode);
		},

		_showImage: function(){
			new D.Modal().img(this.data.image.uber);
		},

		_drawGif: function(){
			if( !this.data.gif ){
				return;
			}
			var gif = this.data.gif;
			var img = gif.tmpThumb || gif.thumb;
			mkE({
				tag: 'div',
				className: 'image-container' + (gif.tmpThumb ? ' temp-image' : '') + (gif.w > gif.h ? ' min-height' : ''),
				els: [
					{
						tag: 'div',
						onclick: this._showGif,
						els: [
							{
								tag: 'img',
								src: img
							},
							{
								tag: 'div',
								className: 'play'
							}
						]
					}
				]
			}).append(this._bodyNode);
		},

		_showGif: function(){
			if( this.data.gif.tmpThumb ){
				return;
			}
			var par = new D.GifPlayerPar();
			par.poster = this.data.gif.thumb;
			par.autoplay = true;
			par.src = this.data.gif.video;
			var player = new D.GifPlayer(par);
			new D.Modal().els(player);
		},

		_drawVideo: function(){
			if( !this.data.video ){
				return;
			}
			var video = this.data.video;
			var img = video.tmpThumb || video.thumb;
			mkE({
				tag: 'div',
				className: 'image-container' + (video.tmpThumb ? ' temp-image' : '') + (video.w > video.h ? ' min-height' : ''),
				els: [
					{
						tag: 'div',
						onclick: this._showVideo,
						els: [
							{
								tag: 'img',
								src: img
							},
							{
								tag: 'div',
								className: 'play'
							}
						]
					}
				]
			}).append(this._bodyNode);
		},

		_showVideo: function(){
			if( this.data.video.tmpThumb ){
				return;
			}
			var par = new D.VideoPlayerPar();
			par.autoplay = true;
			par.src = this.data.video.video;
			par.poster = this.data.video.thumb;
			var player = new D.VideoPlayer(par);
			new D.Modal().els(player);
		},

		_drawEmbeds: function(){
			if( empty(this.data.embeds) ){
				return;
			}
			for( var link in this.data.embeds ){
				if( !this.data.embeds.hasOwnProperty(link) ){
					continue;
				}
				var regexp = '(^|\s)(' + D.escapeRegExp(link) + ')($|\s)';
				D.replaceWithNode(this._bodyNode, new RegExp(regexp, 'g'), this._embedReplace);
			}
		},

		_embedReplace: function(matches){
			var link = matches[2];
			if( !this.data.embeds[link] ){
				return matches[0];
			}
			/** @type {DR.gallery.struct.Embed} */
			var embed = this.data.embeds[link];
			return mkE({
				tag: 'div',
				className: 'embed-container image-container' + (embed.image.w > embed.image.h ? ' min-height' : ''),
				els: [
					{
						tag: 'div',
						onclick: D.closure(this, this._showEmbed, link),
						els: [
							{
								tag: 'img',
								src: embed.image.gm
							},
							{
								tag: 'div',
								className: 'play'
							}
						]
					}
				]
			});
		},

		_showEmbed: function(link){
			if( !this.data.embeds[link] ){
				return;
			}
			/** @type {DR.gallery.struct.Embed} */
			var embed = this.data.embeds[link];
			var size = scaleToContainer(window.innerWidth - 100, window.innerHeight - 100, embed.w, embed.h);
			var node;
			var url = new Get(embed.src);
			url.add('autoplay', 1);
			url.add('autostart', 1);
			url = url.toUrl();
			switch( embed.type ){
				case 'youtube':
				case 'vimeo':
				case 'soundcloud':
				case 'coub':
				case 'slideshare':
				case 'rutube':
				case 'endomondo':
					node = mkE({
						tag: 'iframe',
						src: url,
						style: {
							width: size.w + 'px',
							height: size.h + 'px'
						},
						attr:{
							frameborder: '0',
							allowFullScreen: '',
							webkitAllowFullScreen: '',
							mozallowfullscreen: ''
						}
					});
					break;
				case 'vine':
					node = mkE({
						tag: 'div',
						style: {
							width: size.w + 'px',
							height: size.h + 'px'
						},
						els: [
							{
								tag:'iframe',
								attr:{
									frameborder: '0',
									width:'100%',
									height:'100%',
									src:url,
									allowFullScreen:'',
									webkitAllowFullScreen:'',
									mozallowfullscreen:''
								}
							},
							{
								tag: 'script',
								attr: {
									src: '//platform.vine.co/static/scripts/embed.js',
									async: true
								}
							}
						]
					});
					break;
				default:
					return;
			}
			if( !node ){
				return;
			}
			new D.Modal({
				width: size.w,
				height: size.h
			}).els(node);
		},

		_drawYoutube: function(){
			var domains = [
				D.escapeRegExp('youtube.com'),
				D.escapeRegExp('youtu.be')
			];
			var regexp = new RegExp('(.{0,1})(http(s?):\/\/[a-zA-Z0-9\.]*(' + domains.join('|') + ')[\/a-zA-Z0-9\?=\%\:\.\&;#_\-]*)(.{0,4})', 'ig');
			D.replaceWithNode(this._bodyNode, regexp, D.closure(this, this._youtubeReplace));
		},

		_youtubeReplace: function(matches){
			if( matches[1] == '"' || isset(matches[5][0]) && matches[5][0] == '"' || matches[5] == '</a>' ){
				return matches[0];
			}
			var link = matches[2];
			var youtubeID = this._youtubeID(link);
			if( !youtubeID ){
				return matches[0];
			}
			var src = '//img.youtube.com/vi/' + youtubeID + '/0.jpg';
			return mkE({
				tag: 'div',
				className: 'embed-container image-container min-height',
				els: [
					{
						tag: 'div',
						onclick: D.closure(this, this._showYoutube, youtubeID),
						els: [
							{
								tag: 'img',
								src: src
							},
							{
								tag: 'div',
								className: 'play'
							}
						]
					}
				]
			});
		},

		_youtubeID: function(link){
			var regexp = new RegExp('(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})', 'i');
			var matches = regexp.exec(link);
			if( empty(matches) || empty(matches[1]) ){
				return false;
			}
			return matches[1];
		},

		_showYoutube: function(id){
			var url = '//www.youtube.com/embed/' + id + '/?autoplay=1';
			var size = scaleToContainer(window.innerWidth - 100, window.innerHeight - 100, 1280, 720);
			var node = mkE({
				tag: 'iframe',
				src: url,
				style: {
					width: size.w + 'px',
					height: size.h + 'px'
				},
				attr:{
					frameborder: '0',
					allowFullScreen: '',
					webkitAllowFullScreen: '',
					mozallowfullscreen: ''
				}
			});
			new D.Modal({
				width: size.w,
				height: size.h
			}).els(node);
		},

		_drawFooter: function(){
			this._footerNode = mkE({
				tag: 'div',
				className: 'footer'
			}).append(this.node);

			this._replyNode = mkE({
				tag: 'a',
				onclick: this._reply,
				text: D.Lang.get('reply')
			}).append(this._footerNode);

			this.drawLikes();
		},

		_drawChildren: function(){
			if( !this.data.childs ){
				return;
			}
			for( var i = 0, l = this.data.childs.length; i < l; i++ ){
				var comment = this.data.childs[i];
				this.addChild(comment);
			}
		},

		_replaceUser: function(m){
			var uid = Number(m[1]);
			if( !uid || !this.data.users[uid] ){
				return ''
			}
			var user = this.data.users[uid];
			var userNode = mkE({
				tag: 'a',
				href: user.url,
				text: htmlspecialchars_decode(user.title)
			});
			D.Say.addUserTooltip(userNode, {id: user.id});
			return userNode;
		},

		/**
		 * @param {DR.comments.struct.Item} item
		 */
		addChild: function(item){
			var comment = this.comments.addItem(item);
			comment.append(this._getChildNode());
		},

		_getChildNode: function(){
			if( !this._childrenNode ){
				this._childrenNode = mkE({
					tag: 'div',
					className: 'children'
				}).append(this.node);
			}
			return this._childrenNode;
		},

		_reply: function(){
			if( this._replyOpen ){
				this.comments.resetForm();
				this.cancelReply();
				this.comments.setReply(null);
			}else{
				var form = this.comments.getForm();
				form.cid = this.data.cid;
				if( !this.data.parent || this.firstLevel ){
					form.append(this.node);
				}else{
					D.insertAfter(form.node, this._getChildNode());
				}
				form.focus();
				this.comments.setReply(this);
				setNodeText(this._replyNode, D.Lang.get('cancel'));
				this._replyOpen = true;
			}
		},

		cancelReply: function(){
			setNodeText(this._replyNode, D.Lang.get('reply'));
			this._replyOpen = false;
		},

		drawLikes: function(){
			if( this._likeContainerNode ){
				removeNode(this._likeContainerNode);
			}
			if( this._dislikeContainerNode ){
				removeNode(this._dislikeContainerNode);
			}
			this._likeContainerNode = mkE({
				tag: 'span',
				className: 'like',
				els: [
					this._likeNode = mkE({
						tag: 'a',
						className: in_array(this.comments.uid, this.data.likeProfiles) ? 'active' : '',
						onclick: this._like,
						attr: {
							title: D.Lang.get('I like it')
						},
						els: [
							T.svgIcon({
								icon: 'thumbs-up'
							})
						]
					})
				]
			}).append(this._footerNode);

			if( this.data.likes ){
				this._likesCountNode = mkE({
					tag: 'a',
					className: 'like-count',
					onclick: this._showLikes,
					text: this.data.likes
				});
				D.insertAfter(this._likesCountNode, this._likeNode);
			}

			this._dislikeContainerNode = mkE({
				tag: 'span',
				className: 'dislike',
				els: [
					this._dislikeNode = mkE({
						tag: 'a',
						className: in_array(this.comments.uid, this.data.dislikeProfiles) ? 'active' : '',
						onclick: this._dislike,
						attr: {
							title: D.Lang.get('I don\'t like it')
						},
						els: [
							T.svgIcon({
								icon: 'thumbs-down'
							})
						]
					})
				]
			}).append(this._footerNode);

			if( this.data.dislikes ){
				this._dislikesCountNode = mkE({
					tag: 'a',
					className: 'dislike-count',
					onclick: this._showDislikes,
					text: this.data.dislikes
				});
				D.insertAfter(this._dislikesCountNode, this._dislikeNode);
			}

			if( !this.data.canRate ){
				if( !this.data.likes ){
					this._likeContainerNode.remove();
				}else{
					this._likeNode.remove();
				}
				if( !this.data.dislikes ){
					this._dislikeContainerNode.remove();
				}else{
					this._dislikeNode.remove();
				}
			}
		},

		_like: function(){
			if( in_array(this.comments.uid, this.data.likeProfiles) ){
				this._cancelRate();
				return;
			}
			this._mLike = new DR.comments.Like();
			this._mLike.type = this.comments.type;
			this._mLike.id = this.comments.id;
			this._mLike.cid = this.data.cid;
			this._mLike.uid = this.comments.uid;
			this._mLike.select = [
				new DR.comments.select.LikeRe().all()
			];
			this._mLike.onLoad = this._onLike;
			this._mLike.call();
		},

		_onLike: function(){
			if( !this._mLike || this._mLike.error || !this._mLike.re ){
				return;
			}
			this._onLikeChange(this._mLike.re);
		},

		_dislike: function(){
			if( in_array(this.comments.uid, this.data.dislikeProfiles) ){
				this._cancelRate();
				return;
			}
			this._mDislike = new DR.comments.Dislike();
			this._mDislike.type = this.comments.type;
			this._mDislike.id = this.comments.id;
			this._mDislike.cid = this.data.cid;
			this._mDislike.uid = this.comments.uid;
			this._mDislike.select = [
				new DR.comments.select.LikeRe().all()
			];
			this._mDislike.onLoad = this._onDislike;
			this._mDislike.call();
		},

		_onDislike: function(){
			if( !this._mDislike || this._mDislike.error || !this._mDislike.re ){
				return;
			}
			this._onLikeChange(this._mDislike.re);
		},

		_cancelRate: function(){
			if( this._mCancelRate && this._mCancelRate.processing ){
				return;
			}
			this._mCancelRate = new DR.comments.CancelRate();
			this._mCancelRate.type = this.comments.type;
			this._mCancelRate.id = this.comments.id;
			this._mCancelRate.cid = this.data.cid;
			this._mCancelRate.uid = this.comments.uid;
			this._mCancelRate.select = [
				new DR.comments.select.LikeRe().all()
			];
			this._mCancelRate.onLoad = this._onCancelRate;
			this._mCancelRate.call();
		},

		_onCancelRate: function(){
			if( !this._mCancelRate || this._mCancelRate.error || !this._mCancelRate.re ){
				return;
			}
			this._onLikeChange(this._mCancelRate.re);
		},

		_onLikeChange: function(re){
			this.data.likeProfiles = re.likeProfiles;
			this.data.dislikeProfiles = re.dislikeProfiles;
			this.data.likes = re.likes;
			this.data.dislikes = re.dislikes;
			this.drawLikes();
		},

		_showLikes: function(){
			InfoBox.open('/rq/like_modal.php?likeType=' + this.comments.par.commentsParams.likeType + '&likeId=' + this.data.cid, {
				title: D.Lang.get('like'),
				width: 820,
				modal: true,
				overlayClose: true
			});
		},

		_showDislikes: function(){
			InfoBox.open('/rq/like_modal.php?likeType=' + this.comments.par.commentsParams.dislikeType + '&likeId=' + this.data.cid, {
				width: 820,
				modal: true,
				overlayClose: true
			});
		},

		_delete: function(){
			D.confirmDelete(this._doDelete);
		},

		_doDelete: function(){
			if( this._mDelete && this._mDelete.processing ){
				return;
			}
			D.loadingOverlay(this.node);
			this._mDelete = new DR.comments.Delete();
			this._mDelete.cid = this.data.cid;
			this._mDelete.id = this.comments.id;
			this._mDelete.type = this.comments.type;
			this._mDelete.onLoad = this._onDelete;
			this._mDelete.call();
		},

		_onDelete: function(){
			D.removeLoadingOverlay(this.node);
			if( !this._mDelete || this._mDelete.error || !this._mDelete.re.ok ){
				return;
			}
			this.node.remove();
		}
	},
	mkE.Base
);

/**
 * @class {D.SayItem.FriendComments.Form}
 * @extends {mkE.Base}
 * @param {Object} par
 */
D.SayItem.FriendComments.Form = Class(
	/**
	 * @lends {D.SayItem.FriendComments.Form#}
	 */
	{
		/**
		 * @param {Object} par
		 * @constructs
		 */
		__construct: function(par){
			this.par = par;

			this.node = mkE({
				tag: 'div',
				className: 'FriendCommentsForm'
			});

			this._draw();
		},

		_draw: function(){
			var par = new D.Comments.Form.Par();
			par.type = this.par.type;
			par.id = this.par.id;
			par.maxLength = 2000;
			par.onAdd = this._onAdd;
			par.profiles = D.Say.profiles;
			par.hideProfiles = true;
			par.addStats = 'in_feed_comments_add';
			this._form = new D.Comments.SmallForm(par);
			this._form.append(this.node);
		},

		/**
		 * @param {DR.comments.struct.AddRe} re
		 */
		_onAdd: function(re){
			if( !this.par.onAdd ){
				return;
			}
			this.par.onAdd(re);
		},

		getForm: function(){
			return this._form;
		},

		reset: function(){
			this._form.cid = 0;
			this._form.append(this.node);
		},

		setUid: function(uid){
			this._form.setUid(uid);
		}
	},
	mkE.Base
);
// --- item/friend_comments.js ---

// +++ event/gallery.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventGallery = function( item, event, par ){
	this.rpc = new RPC('/gallery/rq/app.php');
	this._data = event;
	this._item = item;
	if( !event.album.canComment || count( event.album.items ) != 1 ){
		delete this.comment;
	}
	if( item.par.galleryAd && item.par.galleryAd.showImage ){
		var img = document.createElement('img');
		img.src = item.par.galleryAd.showImage;
	}
	this.cantComment = !event.album.canComment;
	if( event.album.dayPhoto ){
		var badgeNode = mkE( {
			tag:'span',
			className:'badge sayDayPhoto',
			text:D.Lang.get('Day photo'),
			prop:{
				onclick:D.closure(this, function(){
					document.location = D.Say.link('/gallery/?tab=18', this._item.id);
				})
			}
		} );
		D.insertAfter( badgeNode, item.timeNode );
	}
	this.node = mkE( {
		tag:'div',
		className:'SayEventGallery'
	} );
	/*if( item.text ){
		this._textNode = mkE({
			tag: 'font',
			className: 'sayText',
			innerHTML: htmlspecialchars_decode(item.text)
		}).append(this.node);
		D.smileyReplace( this._textNode );
		D.linksReplace(this._textNode, {
			click: D.closure(this, function(href){
				return D.Say.link(href, this._item.id);
			})
		});
		D.Say.userReplace(this._textNode);
		D.Say.hashTagReplace(this._textNode);
	}
	var metaText = item.metaText(!isset(this._textNode));
	if( metaText ){
		if( this._textNode ){
			mkE({
				tag: 'span',
				text: ' — '
			}).prepend(metaText);
			metaText.append(this._textNode);
		}else{
			metaText.append(this.node);
			addClassName(metaText, 'sayText');
		}
	}*/
	if( event.album.permissions === 0 ){
		mkE({
			tag:'span',
			text: D.Lang.get('album is invisible'),
			style:{
				display: 'block',
				marginLeft: '0px',
				marginBottom: '12px',
				color: '#f58c00'
			}
		}).append(this.node);
	}
	if( event.album.count == 1 && event.album.video == 1 && event.album.items[0].type == 2 ){
		var r = event.album.items[0];
		if( r.embed && r.embed.site == 'SoundCloud' ){
			mkE( {
				tag: 'center',
				innerHTML: r.embed.html
			} ).append(this.node);
			return;
		}
		var imageNode = '';
		if( r.embed && r.embed.site == 'Youtube' ){
			imageNode = mkE({
				tag: 'div',
				className: 'sayYoutubeContainer',
				els: [
					{
						tag: 'div',
						className: 'sayYoutubeImage',
						style: {
							backgroundImage: 'url(' + r.image.say + ')'
						}
					}
				]
			});
		}else{
			imageNode = mkE({
				tag: 'img',
				src: r.image.say
			});
		}
		mkE({
			tag: 'div',
			className: 'galleryYoutubeItem',
			els: [
				{
					tag: 'div',
					els: [
						imageNode,
						{
							tag: 'div',
							className: 'overlay'
						},
						{
							tag: 'a',
							href: D.Say.link(r.url, this._item.id),
							prop: {
								onclick: D.closure(this, this._open, r.id)
							},
							els: [
								{
									tag:'div',
									className:'sayGalleryVideo'
								}
							]
						}
					]
				}
			]
		}).append(this.node);
		return;
	}else if(event.album.count == 1 && event.album.video == 1 && event.album.items[0].type == 1 && event.album.items[0].videoReady ){
		var galleryItem = event.album.items[0];
		var videoPar = {
			poster: galleryItem.image.L,
			src: galleryItem.videoUrl,
			onContainerClick: D.closure(this, this.onVideoClick),
			onStart: D.closure(this, this.checkAddView, true),
			onTimeUpdate: D.closure(this, this.onTimeUpdate),
			width: galleryItem.w,
			height: galleryItem.h,
			stats: {
				uid: D.ID,
				pid: galleryItem.id,
				type: 8
			}
		};
		item._drawVideoPlayer(videoPar, null, this.node);
		return;
	}else if(event.album.count == 1 && event.album.video == 1 && event.album.items[0].type == 3 && event.album.items[0].videoReady ){
		var galleryItem = event.album.items[0];
		var gifPar = {
			poster: galleryItem.image.L,
			src: galleryItem.videoUrl,
			width: galleryItem.w,
			height: galleryItem.h,
			onOverlayClick: D.closure(this, this.onGifClick, par)
		};
		item._drawGifPlayer(gifPar, par, this.node);
		return;
	}
	var m = new T.Mosaic( item.say.mosaicWidth(), true );
	var pid = 0;
	for( var k in event.album.items ){
		var r = event.album.items[k];
		if(!pid){
			pid = r.id;
		}
		var mi = new T.MosaicItem( r.image.say, r.w, r.h );
		mi.href = D.Say.link(r.url, this._item.id);
		if( !item.par.ad ){
			mi.onclick = D.closure(this, this._open, r.id)
		}
		mi.urlGM = r.image.GM;
		m.add(mi);
		if( r.type == 2 ){
			mi.scale = 1.1;
		}
		if( r.video && r.eSite != 'EndoMondo' ){
			var playNode = mkE( {
				tag:'div',
				className:'sayGalleryVideo'
			} ).append( mi.getClickNode() );
			if( r.eSite == 'Youtube' ){
				addClassName( playNode, 'sayGalleryVideo-Youtube' );
			}
		}
	}
	if( event.album.count > 4 ){
		mkE({
			tag: 'div',
			className: 'SayItemCount',
			els: [{
				tag: 'div',
				text: '+' + (event.album.count - 4)
			}]
		}).append( mi.getClickNode() );
	}
	m.append( this.node );
};
D.SayEventGallery.prototype = new D.SayEvents;
D.SayEventGallery.prototype.showText = true;

D.SayEventGallery.prototype._open = function(id){
	this._adClickStats();
	Say.slideShow(0, id, {
		stats: 'open_picture_say',
		sayClick: this._item.id
	} );
	return false;
};

D.SayEventGallery.prototype._adClickStats = function(){
	if( this._item.par.galleryAd && this._item.par.galleryAd.clickImage ){
		var img = document.createElement('img');
		img.src = this._item.par.galleryAd.clickImage;
	}
};

D.SayEventGallery.prototype.comment = function(){
	this.rpc.send('getFirstCommentedGalleryItem', {
		'aid': this._data.album.id
	}, D.closure(this, function (re) {
		var mStats = new DR.say.ClickStats();
		mStats.kw = 'say_feed_comment';
		mStats.call();
		if ( re.itemId > 0 ) {
			Say.slideShow( 0, re.itemId );
		} else {
			Say.slideShow( 0, reset( this._data.album.items ).id );
		}
	}));
	return false;
};

D.SayEventGallery.prototype.onVideoClick = function(player){
	if(player.fullscreen) {
		player.playToggle();
	} else {
		this._adClickStats();
		player.pause();
		var currentTime = player.player.currentTime;
		Say.slideShow(0, this._data.album.items[0].id, {
			startTime: currentTime,
			stats: 'open_picture_say',
			sayClick: this._item.id
		});
	}
};
D.SayEventGallery.prototype.checkAddView = function(){
	D.onLoad('DR.gallery', D.closure(this, this.addGalleryView));
};
D.SayEventGallery.prototype.addGalleryView = function(){
	if( this.viewAdded || !D.ID ){
		return;
	}
	this.viewAdded = true;
	var m = new DR.gallery.Stats();
	m.key = 'say_video_autoplay';
	m.call();
};
D.SayEventGallery.prototype.onTimeUpdate = function(time){
	if( time >= 3 && !this.galleryViewAdded ){
		this.galleryViewAdded = true;
		D.onLoad('DR.gallery', D.closure(this, function(){
			var apiCall = new DR.ApiCall;
			var m = new DR.gallery.Stats();
			m.key = 'say_video_3_sec';
			apiCall.addMethod(m);
			// if( this._item.highLighted ){
			// 	var m2 = new DR.gallery.Stats();
			// 	m2.key = 'say_video_3_sec_' + this._item.id;
			// 	apiCall.addMethod(m2);
			// }
			apiCall.call();
		}));
	}
};
D.SayEventGallery.prototype.onGifClick = function(par, player){
	if( player.isPlaying ){
		player.pause(false);
	}
	var galleryItem = this._data.album.items[0];
	var contentLink = this._item._getContentLink(galleryItem, par);
	if ( contentLink && galleryItem.image && !par.ad ) {
		var href = D.Say.link(this._item._getContentLinkHref(contentLink, par), this._item.id);
		window.open(href, '_blank');
	} else {
		this._adClickStats();
		return Say.slideShow(0, galleryItem.id, {
			stats: 'open_picture_say',
			sayClick: this._item.id
		});
	}
};
D.SayItem.prototype._events[1] = D.SayEventGallery;

// --- event/gallery.js ---

// +++ event/biz_market.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventBizMarket = function( item, event ){
	this.node = mkE( {
		tag:'div',
		className:'SayEventBizMarket'
	} );
	var m = new T.Mosaic( item.say.mosaicWidth() );
	var elementCounter = 1;
	for( var k in event.items ){
		var titleLength  = (elementCounter < 2) ? 30 : ((event.items.length < 4) ? 20 : 8);
		var r = event.items[k];
		var mi = new T.MosaicItem( r.imageSay, r.w, r.h );
		mi.href = D.Say.link(r.url, item.id);
		m.add(mi);
		mkE( {
			tag:'div',
			className:'price radius3',
			els:[
				{
					tag: 'span',
					innerHTML: D.shorten(r.title, titleLength, '...')+'<br />'
				},
				{
					tag:'span',
					innerHTML: r.price_euro
				}
			]
		} ).append( mi.getNode() );
		elementCounter++;
	}
	m.append( this.node );
	mkE( {
		tag:'a',
		className:'icon shopIcon cat_link',
		text:event.cat.name,
		href:D.Say.link(event.cat.url, item.id)
	} ).append( this.node );
};
D.SayEventBizMarket.prototype = new D.SayEvents;

D.SayItem.prototype._events[32] = D.SayEventBizMarket;
// --- event/biz_market.js ---

// +++ event/biz_poll.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventBizPoll = function( item, event ){
	this._item = item;
	this._data = event;
	this._editIcon = false;
	this._contactMe = null;
	if( item.par.canDel ){
		var user = D.Say.getUser( item.par.uid );
		this._editIcon = mkE( {
			tag:'a',
			className:'icon editGrayIcon',
			href:user.url + 'admin/polls/add/?edit=' + event.id
		} );
	}
	if ( !event.allowComments ) {
		delete this.comment;
	}
	this.cantComment = !event.allowComments;
	this.node = mkE( {
		tag:'div',
		className:'SayEventBizPoll',
		els:[
			{
				tag:'p',
				className:'SayEventBizPollQ',
				els:[
					event.question,
					this._editIcon
				]
			}
		]
	} );
	if( event.voted || !D.ID ){
		this.showResults();
		return;
	}
	var form = mkE( {
		tag:'form',
		prop:{
			onsubmit:function(){
				return false;
			}
		}
	} ).append( this.node );
	var totalVotes = 0;
	for( var k in event.answers ){
		totalVotes += event.answers[k].count;
	}
	var procTotal = 0;
	for( var k in event.answers ){
		var a = event.answers[k];
		var proc = 0;
		if(totalVotes){
			proc = Math.round( a.count / totalVotes * 100 );
		}
		if( procTotal && k == count( event.answers ) - 1 ){
			proc = 100 - procTotal;
		}

		mkE( {
			tag:'div',
			className:'SayEventBizPollAnswer',
			els:[
				{
					tag:'label',
					els:[
						{
							tag:'input',
							type:'radio',
							name:'answer',
							prop:{
								onclick:D.closure( this, this._answerOnclick, a )
							}
						},
						' ',
						a.caption
					]
				}
			]
		} ).append(form);
	}

	if ( event.contactMeTitle ) {
		this._contactMe = new T.Form.CheckBox({
			caption: event.contactMeTitle,
			name: 'contact_me'
		}).append( form );
	}

	// Fast but ugly, not DRY solution
	if( event.url && event.urlTitle ){
		var tmpDiv = mkE({
			tag: 'div',
			innerHTML: D.linksReplace( event.url )
		});
		var url = tmpDiv.childNodes.length ? tmpDiv.childNodes[0].href + '&pid=' + item.par.id + '&uid=' + item.par.uid : event.url;
		mkE( {
			tag:'a',
			className:'SayEventBizPollA',
			href: D.Say.link(url, this._item.id),
			text:event.urlTitle,
			attr:{
				target:'_blank'
			}
		} ).append( form );
	}

	if(totalVotes){
		mkE( {
			tag:'div',
			className:'color2 SayEventBizPollTotal',
			els:[
				D.Lang.get('biz poll total answers'),
				': ',
				totalVotes
			]
		} ).append( form );
	}

	T.submitButton( {
		caption:event.answerText,
		onclick:D.closure( this, this._answer )
	} ).append( this.node );
};
D.SayEventBizPoll.prototype = new D.SayEvents;

D.SayEventBizPoll.prototype.showResults = function(re){
	if( re && re.correct ){
		this._data.correct = re.correct;
	}
	clearNode( this.node );
	var event = this._data;
	mkE( {
		tag:'p',
		className:'SayEventBizPollQ',
		els:[
			event.question,
			this._editIcon
		]
	} ).append( this.node );
	var totalVotes = 0;
	for( var k in event.answers ){
		totalVotes += event.answers[k].count;
	}
	var procTotal = 0;
	for( var k in event.answers ){
		var a = event.answers[k];
		var proc = 0;
		if(totalVotes){
			proc = Math.round( a.count / totalVotes * 100 );
		}
		if( procTotal && k == count( event.answers ) - 1 ){
			proc = 100 - procTotal;
		}
		var node = mkE( {
			tag:'div',
			className:'SayEventBizPollAnswer',
			els:[
				a.caption,
				{
					tag:'span',
					els:[
						{
							tag:'font',
							className:'color2',
							els:[
								a.count,
								' - '
							]
						},
						proc,
						'%'
					]
				}, // span
				T.clear()
			]
		} ).append( this.node );
		if(proc){
			mkE( {
				tag:'div',
				className:'SayEventBizPollChart',
				els:[
					{
						tag:'div',
						style:{
							backgroundColor:T.chartColors[ k % count( T.chartColors ) ],
							width:proc + '%'
						}
					}
				]
			} ).append( this.node );
		}
		if( a.value == event.voted ){
			addClassName( node, 'SayEventBizPollSel' );
		}
		if( event.correct && event.correct == a.value ){
			addClassName( node, 'colorOk' );
		}
		if(totalVotes){
			procTotal += proc;
		}
	}
	if( event.url && event.urlTitle ){
		mkE( {
			tag:'a',
			className:'SayEventBizPollA',
			href:D.Say.link(event.url, this._item.id),
			text:event.urlTitle,
			attr:{
				target:'_blank'
			}
		} ).append( this.node );
	}
	if(totalVotes){
		mkE( {
			tag:'div',
			className:'color2 SayEventBizPollTotal',
			els:[
				D.Lang.get('biz poll total answers'),
				': ',
				totalVotes
			]
		} ).append( this.node );
	}
	T.clear().append(this.node);
};

D.SayEventBizPoll.prototype._answerOnclick = function(answer){
	D.Say.click(this._item.id);
	this._selectedAnswer = answer;
};

D.SayEventBizPoll.prototype._answer = function(){
	if( !this._selectedAnswer ){
		return;
	}
	++ this._selectedAnswer.count;
	this._data.voted = this._selectedAnswer.value;
	D.Say.click(this._item.id);
	var rpc = new RPC('/lapas/rq/app.php');
	D.loadingOverlay( this.node );
	rpc.send(
		'pollAnswer',
		{
			id:this._data.id,
			answer:this._selectedAnswer.value,
			bid:this._data.bid,
			contactMe: this._contactMe && this._contactMe.value() ? 1 : 0
		},
		this.showResults,
		this
	);
};

D.SayEventBizPoll.prototype.comment = function(focusForm){
	var url = this._data.pollUrl + ( focusForm ? '#addComment' : '' );
	var get = new Get('/stats/click.php');
	get.add('key', 'say_feed_comment');
	get.add('url', url);
	document.location.href = get.toUrl();
	return false;
};

D.SayItem.prototype._events[19] = D.SayEventBizPoll;

// --- event/biz_poll.js ---

// +++ event/emo.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventEmo = function( item, event ){
	var container;
	this.node = mkE( {
		tag:'div',
		className:'sayEmo',
		els:[
			container = mkE( {
				tag: 'span',
				els:[
					{
						tag: 'img',
						className: 'emoBigFp',
						prop:{
							src: '//i.ifrype.com/emo/v'+ D.EMOV+'/emo_'+ event.emo +'_big.png'
						}
					}
				]
			} ),
			{
				tag: 'div',
				className: 'sayEmoText',
				prop:{
					innerHTML:item.par.text
				}
			},
			{
				tag: 'div',
				className: 'clear'
			}
		]
	} );
	$(function(){
		var so1 = new SWFObject('//i.ifrype.com/emo/v'+D.EMOV+'/emo_'+event.emo+'_big.swf','emotion_swf',42,42,6,'#ffffff');
		so1.addParam('wmode','transparent');
		so1.write( container );
	} );
};
D.SayEventEmo.prototype = new D.SayEvents;

D.SayItem.prototype._events[17] = D.SayEventEmo;

// --- event/emo.js ---

// +++ event/event.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventEvent = function ( item, event ) {
	this._data = event;
	this._item = item;

	/** @type {DR.event.struct.Item} this._data.event */
	this._eventItem = this._data.event;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventEvent',
		els: [
			this._metaInfo = mkE({
				tag: 'div',
				className: 'sayEventInfoText',
				text: item.uid == this._eventItem.id ? '' : D.Lang.get('created_event')
			})
		]
	});

	this._drawEvent();
};
D.SayEventEvent.prototype = new D.SayEvents;

D.SayEventEvent.prototype._drawEvent = function () {
	this._eventContainer = mkE({
		tag: 'a',
		className: 'sayEventEventContainer',
		href: D.Say.link(this._eventItem.user.url, this._eventItem.id)
	}).append(this.node);

	this._drawImage();
	this._drawInfo();
};

D.SayEventEvent.prototype._drawImage = function () {
	mkE({
		tag: 'div',
		className: 'eventImage',
		style: {
			backgroundImage: 'url(' + this._eventItem.user.image.say + ')'
		}
	}).append(this._eventContainer);
};

D.SayEventEvent.prototype._drawInfo = function () {
	this._eventInfo = mkE({
		tag: 'div',
		className: 'eventInfo'
	}).append(this._eventContainer);

	mkE({
		tag: 'div',
		className: 'eventTitle',
		els: [
			{
				tag: 'strong',
				text: htmlspecialchars_decode(this._eventItem.user.title)
			}
		]
	}).append(this._eventInfo);

	var date = new D.Date(this._eventItem.startTime);
	var today = date.getDayNear();
	if( !today ) {
		today = date.format('l');
	}

	mkE({
		tag: 'div',
		className: 'eventDate cut',
		els: [
			today,
			', ',
			{
				tag: 'strong',
				els: [
					date.format('d. L H:i')
				]
			}
		]
	}).append(this._eventInfo);

	this._drawPlace();
	this._drawDescription();

	this._eventBottom = mkE({
		tag: 'div',
		className: 'eventBottom'
	}).append(this._eventInfo);

	T.clear().append(this._eventInfo);

	this._drawAttendees();
	D.onLoad('DR.event', D.closure(this, this._drawAttendButton));
};

D.SayEventEvent.prototype._drawPlace = function () {
	if( !this._eventItem.place ) {
		return;
	}
	var place = this._eventItem.place;
	var address = [];
	if( place.location.address ) {
		address.push(place.location.address);
	}
	if( place.location.country ) {
		address.push(place.location.country);
	}
	var title = place.name;
	if( address.length ) {
		title += ' - ' + address.join(', ');
	}
	mkE({
		tag: 'div',
		className: 'eventLocation cut',
		attr: {
			title: htmlspecialchars_decode(title)
		},
		text: htmlspecialchars_decode(title)
	}).append(this._eventInfo);
};

D.SayEventEvent.prototype._drawDescription = function () {
	if( !this._eventItem.description ) {
		return;
	}
	mkE({
		tag: 'div',
		className: 'eventDescription',
		text: D.shorten(strip_tags(this._eventItem.description), 95, '...')
	}).append(this._eventInfo);
};

D.SayEventEvent.prototype._drawAttendees = function () {
	var user = this._eventItem.user;
	if( !user.attendeesCount && !user.interestedCount ) {
		return;
	}

	var participantsNode = mkE({
		tag: 'div',
		className: 'eventVisitorInfo'
	}).append(this._eventBottom);

	if( user.attendeesCount ) {
		mkE({
			tag: 'span',
			els: [
				{
					tag: 'strong',
					text: user.attendeesCount
				},
				' ',
				D.Lang.nget(user.attendeesCount, 'guests')
			]
		}).append(participantsNode);
	}

	if( user.interestedCount ) {
		mkE({
			tag: 'span',
			els: [
				user.attendeesCount ? ' · ' : '',
				{
					tag: 'strong',
					text: user.interestedCount
				},
				' ', D.Lang.nget(user.interestedCount, 'ieinteresēti')
			]
		}).append(participantsNode);
	}

	if( !user.attendeesFriendsCount ) {
		return;
	}

	var friendsNode = mkE({
		tag: 'div',
		className: 'eventFriends'
	}).append(this._eventBottom);

	mkE({
		tag: 'span',
		els: [
			' · ',
			{
				tag: 'strong',
				text: user.attendeesFriendsCount
			},
			' ',
			D.Lang.nget(user.attendeesFriendsCount, 'friends')
		]
	}).append(participantsNode);

	for( var i = 0, l = user.attendeesPreview.length; i < l; i++ ) {
		var friend = user.attendeesPreview[i];
		mkE({
			tag: 'a',
			className: 'eventFriend',
			href: D.Say.link(friend.url, this._item.id),
			onclick: function ( e ) {
				D.stopPropagation(e);
			},
			attr: {
				title: htmlspecialchars_decode(friend.title)
			},
			style: {
				backgroundImage: 'url(' + friend.image.icon + ')'
			}
		}).append(friendsNode);
	}
};

D.SayEventEvent.prototype._drawAttendButton = function () {
	if( !this._eventItem.canAttend ) {
		return;
	}

	if( this._nAttendContainer ) {
		if( this._dropDownButton ) {
			this._dropDownButton.remove();
		}
		this._nAttendContainer.remove();
	}
	this._nAttendContainer = mkE({
		tag: 'div',
		className: 'eventButton'
	}).append(this._eventBottom);

	if( this._eventItem.isAttending || this._eventItem.isInterested ) {
		var par = new T.Form.DropDownButtonPar;
		par.color = 'link';
		par.svgIcon = this._eventItem.isAttending ? 'check' : 'music-bookmark';
		par.caption = D.Lang.get(this._eventItem.isAttending ? 'will_attend' : 'interested');
		par.className = 'eventInterestedButton';
		par.showOnHover = false;
		par.items = [
			{
				caption: D.Lang.get('interested'),
				onclick: D.closure(this, this._interested)
			},
			{
				caption: D.Lang.get('will_attend'),
				onclick: D.closure(this, this._attend)
			},
			{
				caption: D.Lang.get(this._eventItem.isAttending ? 'wont_attend' : 'not_interested'),
				onclick: D.closure(this, this._forgo)
			}
		];

		if( this._eventItem.isInterested ) {
			par.items.splice(0, 1);
		} else if( this._eventItem.isAttending ) {
			par.items.splice(1, 1);
		}
		this._dropDownButton = new T.Form.DropDownButton(par).append(this._nAttendContainer);
	} else {
		new T.Form.Button({
			caption: D.Lang.get('will_attend'),
			color: 'submit',
			className: 'eventAttendButton',
			onclick: D.closure(this, this._attend)
		}).append(this._nAttendContainer);

		(new T.Form.Button({
			caption: D.Lang.get('interested'),
			color: 'link',
			className: 'eventInterestedButton',
			onclick: D.closure(this, this._interested)
		})).append(this._nAttendContainer);
	}
};

D.SayEventEvent.prototype._attend = function ( e ) {
	e = D.event(e);
	D.stopPropagation(e);
	if( this._mAttend && this._mAttend.processing ) {
		return false;
	}
	D.Say.click(this._item.id);
	this._mAttend = new DR.event.Attend;
	this._mAttend.eventId = this._eventItem.id;
	this._mAttend.onLoad = D.closure(this, this._onAttend);
	this._mAttend.call();
	return false;
};

D.SayEventEvent.prototype._onAttend = function () {
	if( !this._mAttend || this._mAttend.error || !this._mAttend.re ) {
		return;
	}
	if( this._mAttend.re.ok ) {
		this._eventItem.isAttending = true;
		this._eventItem.isInterested = false;
		this._drawAttendButton();
	}
};

D.SayEventEvent.prototype._interested = function ( e ) {
	e = D.event(e);
	D.stopPropagation(e);
	if( this._mInterested && this._mInterested.processing ) {
		return false;
	}
	D.Say.click(this._item.id);
	this._mInterested = new DR.event.Interested;
	this._mInterested.eventId = this._eventItem.id;
	this._mInterested.onLoad = D.closure(this, this._onInterested);
	this._mInterested.call();
	return false;
};

D.SayEventEvent.prototype._onInterested = function () {
	if( !this._mInterested || this._mInterested.error || !this._mInterested.re ) {
		return;
	}
	if( this._mInterested.re.ok ) {
		this._eventItem.isAttending = false;
		this._eventItem.isInterested = true;
		this._drawAttendButton();
	}
};

D.SayEventEvent.prototype._forgo = function () {
	if( this._mForgo && this._mForgo.processing ) {
		return false;
	}
	D.Say.click(this._item.id);
	this._mForgo = new DR.event.Forgo;
	this._mForgo.eventId = this._eventItem.id;
	this._mForgo.onLoad = D.closure(this, this._onForgo);
	this._mForgo.call();
	return false;
};

D.SayEventEvent.prototype._onForgo = function () {
	if( !this._mForgo || this._mForgo.error || !this._mForgo.re ) {
		return;
	}
	if( this._mForgo.re.ok ) {
		this._eventItem.isAttending = false;
		this._eventItem.isInterested = false;
		this._drawAttendButton();
	}
};

D.SayItem.prototype._events[12] = D.SayEventEvent;
// --- event/event.js ---

// +++ event/event_attending.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventEventAttending = function ( item, event ) {
	this._item = item;
	this._data = event;

	/** @type {DR.event.struct.Item} this._data.event */
	this._eventItem = this._data.event;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventEventAttending',
		els: [
			this._metaInfo = mkE({
				tag: 'div',
				className: 'sayEventInfoText',
				text: event.isInterested ? D.Lang.get('interested to go to event') : D.Lang.get('going_to_event')
			})
		]
	});
	this._drawEvent();
};

D.SayEventEventAttending.prototype = Object.create(D.SayEventEvent.prototype);

D.SayItem.prototype._events[95] = D.SayEventEventAttending;

// --- event/event_attending.js ---

// +++ event/event_forum.js +++
/**
 * @class
 * @extends {D.SayEvents}
 * @param {D.SayItem} item
 * @param {Object} event
 */
D.SayEventEventForum = Class(
	/**
	 * @lends {D.SayEventEventForum}
	 */
	{
		/**
		 * @param {D.SayItem} item
		 * @param {Object} event
		 * @constructs
		 * @private
		 */
		__construct: function(item, event){
			this._item = item;
			this._event = event;

			this.node = mkE({
				tag: 'div',
				className: 'sayEventForum'
			});

			this._draw();
			//this._addEventLinkToHeader();
		},

		_draw: function(){
			mkE({
				tag: 'div',
				className: 'topicText',
				text: this._event.text
			}).append(this.node);

			mkE({
				tag: 'a',
				href: D.Say.link(this._event.url, this._item.id),
				text: D.Lang.get('open_event_discussion')
			}).append(this.node)
		},

		//@deprecated
		_addEventLinkToHeader: function(){
			var eventUser = D.Say.getUser(this._event.eventId);
			if( !eventUser ){
				return;
			}
			var title = htmlspecialchars_decode(eventUser.title);
			var eventLink = mkE({
				tag: 'a',
				href: D.Say.link(eventUser.url, this._item.id),
				text: D.shorten(title, 20, '...')
			});
			D.Say.addUserTooltip(eventLink, eventUser);
			this._item.appendToUser(mkE({
				tag: 'span',
				els: [
					D.Lang.get('in_event'),
					' ',
					eventLink
				]
			}));
		}
	},
	D.SayEvents
);

D.SayItem.prototype._events[39] = D.SayEventEventForum;
// --- event/event_forum.js ---

// +++ event/friend.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventFriend = function( item, event ){
	this._data = event;
	this._item = item;
	this.node = mkE( {
		tag:'div',
		className:'SayEventFriend',
		els: [
			this._metaInfo = mkE({
				tag: 'div',
				className: 'sayEventInfoText',
				text: event.text
			}),
			this._friendsList = mkE({
				tag: 'div',
				className: 'friendsList'
			})
		]
	} );
	if( this._data.uids.length == 1 ){
		this._drawSingleFriend();
		return;
	}
	this._drawMultipleFriends();
};
D.SayEventFriend.prototype = new D.SayEvents;
D.SayEventFriend.prototype._drawSingleFriend = function(){
	var uid = this._data.uids[0];
	var user = D.Say.getUser(uid);
	this._friendContainer = mkE({
		tag: 'a',
		className: 'singleFriend',
		href: D.Say.link(user.url, this._item.id)
	}).append(this._friendsList);

	mkE({
		tag: 'div',
		className: 'userImage',
		style: {
			backgroundImage: 'url(' + user.image.gm + ')'
		}
	}).append(this._friendContainer);

	var userInfo = mkE({
		tag: 'div',
		className: 'userInfo'
	}).append(this._friendContainer);

	mkE({
		tag: 'div',
		className: 'userName',
		text: htmlspecialchars_decode(user.aktitle)
	}).append(userInfo);

	var commonFriends = this._commonFriends();
	if( commonFriends ){
		commonFriends.append(userInfo);
	}

	if( user.isFriend || user.id == D.ID ){
		return;
	}
	mkE({
		tag: 'div',
		className: 'inviteButtonContainer',
		els: [
			new T.Form.Button({
				caption: D.Lang.get('invite'),
				color: 'link',
				onclick: D.closure(this, this._invite, uid)
			})
		]
	}).append(this._friendContainer);
};

D.SayEventFriend.prototype._commonFriends = function(){
	if( !this._data.common ){
		return;
	}

	var friendsNode = mkE({
		tag: 'div',
		className: 'commonFriends'
	});

	var i, uid, user;
	if( this._data.common < 4 || true ){
		mkE({
			tag: 'span',
			text: ucfirst(D.Lang.nget(this._data.common, 'common_friends')) + ': '
		}).append(friendsNode);
		for( i = 0; i < Math.min(3, this._data.common); i++ ){
			uid = this._data.commonIds[i];
			user = this._data.commonUsers[uid];

			if( i == 1 ){
				mkE({
					tag: 'span',
					text: ', '
				}).append(friendsNode);
			}else if( i == 2 ){
				mkE({
					tag: 'span',
					text: ' ' + D.Lang.get('and') + ' '
				}).append(friendsNode);
			}

			mkE({
				tag: 'span',
				text: htmlspecialchars_decode(user.title)
			}).append(friendsNode);
		}
	}else{
		var total = this._data.common;
		var remaining = total - 2;
		for( i = 0; i < Math.min(2, this._data.common); i++ ){
			uid = this._data.commonIds[i];
			user = this._data.commonUsers[uid];

			if( i > 0 ){
				mkE({
					tag: 'span',
					text: ', '
				}).append(friendsNode);
			}

			mkE({
				tag: 'span',
				text: htmlspecialchars_decode(user.title)
			}).append(friendsNode);
		}
		mkE({
			tag: 'span',
			text: ' ' + D.Lang.get('and') + ' ' + D.Lang.nget(remaining, 'other_common_friends')
		}).append(friendsNode);
	}

	return friendsNode;
};

D.SayEventFriend.prototype._invite = function(uid, e){
	e = D.event(e);
	D.stopPropagation(e);
	D.Say.click(this._item.id);
	InfoBox.iframe('/invitations/send/friend.php?fid=' + uid, {
		width: 350
	});
	return false;
};

D.SayEventFriend.prototype._drawMultipleFriends = function(){
	for( var i = 0, l = this._data.uids.length; i < l; i++ ){
		var uid = this._data.uids[i];
		var user = D.Say.getUser(uid);
		if( i == l - 1 ){
			mkE({
				tag: 'span',
				text: ' ' + D.Lang.get('and') + ' '
			}).append(this._metaInfo);
		}else if( i > 0 ){
			mkE({
				tag: 'span',
				text: ', '
			}).append(this._metaInfo);
		}
		var userLink = mkE({
			tag: 'a',
			href: D.Say.link(user.url, this._item.id),
			text: htmlspecialchars_decode(user.aktitle)
		}).append(this._metaInfo);
		D.Say.addUserTooltip(userLink, user);
		if( i < 5 ){
			var userIcon = new D.SayEventFriend.User(user);
			userIcon.append(this._friendsList);
		}
	}
	T.clear().append(this._friendsList);
};

/**
 * @class
 * @extends {mkE.Base}
 * @param {Object} user
 */
D.SayEventFriend.User = Class(
	/**
	 * @lends {D.SayEventFriend.User#}
	 */
	{
		/**
		 *
		 * @param {Object} user
		 */
		__construct: function(user){
			this.user = user;

			this.node = mkE({
				tag: 'a',
				className: 'inviteUserImage',
				href: this.user.url,
				attr: {
					title: htmlspecialchars_decode(this.user.title)
				},
				style: {
					backgroundImage: 'url(' + this.user.image.gm + ')'
				}
			});
		}
	},
	mkE.Base
);

D.SayItem.prototype._events[24] = D.SayEventFriend;

// --- event/friend.js ---

// +++ event/gallery_user.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventGalleryUser = function( item, event ){
	if( !event.album ){
		item.ok = false;
		return;
	}
	this._data = event;
	this._item = item;
	if( this._item.otherUsersNode ){
		this._item.otherUsersNode.remove();
	}
	this.node = mkE( {
		tag:'div',
		className:'SayEventGalleryUser',
		els: [
			this._metaInfo = mkE({
				tag: 'div',
				className: 'sayEventInfoText',
				text: event.text
			})
		]
	} );
	var m = new T.Mosaic( item.say.mosaicWidth() );
	for( var i = 0; i < event.album.items.length; ++ i ){
		if( i == 4 ){
			break;
		}
		var r = event.album.items[i];
		var mi = new T.MosaicItem( r.image.say, r.image.w, r.image.h );
		mi.urlGM = r.image.GM;
		mi.href = D.Say.link(r.url, this._item.id);
		mi.onclick = D.closure( Say, Say.slideShow, 0, r.id, {sayClick: this._item.id} );
		if( r.type == 2 ){ // embed
			mi.scale = 1.1;
		}
		m.add(mi);
	}
	m.append( this.node );
	D.replaceWithNode(this._metaInfo, /\$(album|friend)/g, D.closure(this, this._replaceText));
	if( !empty(this._data.uids) ){
		this._otherUsers();
	}
};
D.SayEventGalleryUser.prototype = new D.SayEvents;

D.SayEventGalleryUser.prototype.comment = function(){
	var mStats = new DR.say.ClickStats();
	mStats.kw = 'say_feed_comment';
	mStats.call();
	Say.slideShow( 0, reset( this._data.album.items ).id );
	return false;
};

D.SayEventGalleryUser.prototype._replaceText = function(match){
	switch( match[1] ){
		case 'album':
			return this._albumReplace();
		case 'friend':
			return this._friendReplace();
	}
	return match[0];
};

D.SayEventGalleryUser.prototype._albumReplace = function(){
	return mkE({
		tag: 'a',
		href: D.Say.link('/gallery/?aid=' + this._data.album.id, this._item.id),
		els: [
			{
				tag: 'strong',
				text: htmlspecialchars_decode(this._data.album.title)
			}
		]
	});
};

D.SayEventGalleryUser.prototype._friendReplace = function(){
	var user = D.Say.getUser( this._data.tagger );
	var node = mkE({
		tag: 'a',
		href: D.Say.link(user.url, this._item.id),
		text: htmlspecialchars_decode(user.dattitle)
	});
	D.Say.addUserTooltip(node, user);
	return node;
};

D.SayEventGalleryUser.prototype._otherUsers = function(){
	var node = mkE({
		tag: 'span',
		text: D.Lang.get('with') + ' '
	}).prepend(this._metaInfo);
	var userCount = count(this._data.uids);
	var uid, user, userNode;
	if( userCount == 1 ){
		uid = reset(this._data.uids);
		user = this._data.users[uid];
		userNode = mkE({
			tag: 'a',
			href: D.Say.link(user.url, this._item.id),
			text: htmlspecialchars_decode(user.aktitle)
		}).append(node);
		D.Say.addUserTooltip(userNode, user);
	}else{
		var l = Math.min(3, userCount);
		for( var i = 0; i < l; i++ ){
			if( i > 0 && i < l - 1 ){
				mkE({
					tag: 'span',
					text: ', '
				}).append(node);
			}else if( i > 0 && i == l - 1 ){
				mkE({
					tag: 'span',
					text: ' ' + D.Lang.get('and') + ' '
				}).append(node);
			}
			if( userCount > 3 && i == 2 ){
				var uidsCount = userCount - 2;
				this._moreUsersNode = mkE({
					tag: 'a',
					text: D.Lang.nget(uidsCount, 'and_more'),
					prop: {
						onmouseover: D.closure(this, this._moreHover)
					}
				}).append(node);
				continue;
			}
			uid = this._data.uids[i];
			user = this._data.users[uid];
			userNode = mkE({
				tag: 'a',
				href: D.Say.link(user.url, this._item.id),
				text: htmlspecialchars_decode(user.aktitle)
			}).append(node);
			D.Say.addUserTooltip(userNode, user);
		}
	}
	mkE({
		tag: 'span',
		text: ' '
	}).append(node);
};

D.SayEventGalleryUser.prototype._moreHover = function(){
	if(!this._moreUsersTooltip){
		this._moreUsersTooltip = mkE({
			tag:'div',
			style:{
				overflow:'hidden'
			}
		});
		for( var i = 2, l = this._data.uids.length; i < l; i++ ){
			var uid = this._data.uids[i];
			var otherUser = this._data.users[uid];
			var userNode = mkE({
				tag: 'a',
				text: htmlspecialchars_decode(otherUser.title),
				href: D.Say.link(otherUser.url, this._item.id),
				className: 'sayOtherUser',
				style:{
					backgroundImage: "url('" + otherUser.image.icon + "')"
				}
			} ).append( this._moreUsersTooltip );
			D.Say.addUserTooltip( userNode, otherUser );
		}
	}
	T.ToolTipBox.open({
		sender: this._moreUsersNode,
		node: this._moreUsersTooltip
	});
};

D.SayItem.prototype._events[8] = D.SayEventGalleryUser;

// --- event/gallery_user.js ---

// +++ event/gallery_append.js +++
/**
 * @extends D.SayEventGallery
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventGalleryAppend = function( item, event, par ){
	this._item = item;
	D.SayEventGallery.call(this, item, event, par);
};

D.SayEventGalleryAppend.prototype = Object.create(D.SayEventGallery.prototype);

D.SayEventGalleryAppend.prototype.comment = function(){
	var mStats = new DR.say.ClickStats();
	mStats.kw = 'say_feed_comment';
	mStats.call();
	Say.slideShow( 0, reset( this._data.album.items ).id );
	return false;
};

D.SayItem.prototype._events[97] = D.SayEventGalleryAppend;

// --- event/gallery_append.js ---

// +++ event/kino.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @param {Number} event.id
 * @param {String} event.title
 * @param {String} event.originalTitle
 * @param {String} event.description
 * @param {String} event.comment
 * @param {String} event.movieUrl
 * @param {Number} event.likes
 * @param {Object} event.poster
 * @param {Number} event.production_date
 * @param {Array.<Object>} event.genre
 * @param {Number} event.rating
 * @param {Number} event.imdb_rating
 * @param {Number} event.votes
 * @constructor
 */
D.SayEventKino = function( item, event ) {
	this._item = item;
	this._data = event;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventKino'
	});

	this._text();
	this._movie();
};
D.SayEventKino.prototype = new D.SayEvents;

D.SayEventKino.prototype._text = function() {
	var els = [];
	if( this._data.comment ){
		els.push({
			tag: 'span',
			className: 'kinoComment',
			text: this._data.comment
		});
	}
	var likesEls = [];
	if( this._data.likes ){
		if( this._data.comment ){
			likesEls.push(' — ');
		}
		likesEls.push(D.Lang.get('together_with'));
		likesEls.push(' ');
		likesEls.push({
			tag: 'a',
			text: D.Lang.nget(this._data.likes, 'movie_watchers'),
			onclick: D.closure(this, this._showMovieRecommends)
		});
		likesEls.push(' ');
		likesEls.push(D.Lang.get('recommends_to_watch'));
		els.push({
			tag: 'span',
			className: 'kinoLikes',
			els: likesEls
		});
	}else{
		els.push(' — ');
		els.push({
			tag: 'span',
			className: 'kinoLikes',
			text: D.Lang.get('recommends_to_watch')
		});
	}
	mkE({
		tag: 'div',
		className: 'kinoText',
		els: els
	}).append(this.node);
};

D.SayEventKino.prototype._showMovieRecommends = function(){
	D.Say.click(this._item.id);
	showKinoRecommendations(this._data.id)
};

D.SayEventKino.prototype._movie = function(){
	this._movieContainer = mkE({
		tag: 'a',
		className: 'sayMovieContainer',
		href: D.Say.link(this._data.movieUrl, this._item.id)
	}).append(this.node);

	this._image();
	this._info();
	this._rating();
};

D.SayEventKino.prototype._image = function(){
	mkE({
		tag: 'div',
		className: 'movieImage',
		style: {
			backgroundImage: 'url(' + this._data.poster.url + ')'
		}
	}).append(this._movieContainer);
};

D.SayEventKino.prototype._info = function(){
	this._movieInfo = mkE({
		tag: 'div',
		className: 'movieInfo'
	}).append(this._movieContainer);

	mkE({
		tag: 'div',
		className: 'movieTitle',
		els: [
			{
				tag: 'strong',
				text: this._data.originalTitle
			},
			' (' + this._data.production_date + ')'
		]
	}).append(this._movieInfo);

	this._nativeTitle();
	this._genres();
	this._description();
};

D.SayEventKino.prototype._nativeTitle = function(){
	if( !this._data.title ) {
		return;
	}
	mkE({
		tag: 'div',
		className: 'nativeTitle',
		text: this._data.title
	}).append(this._movieInfo);
};

D.SayEventKino.prototype._genres = function(){
	if( empty(this._data.genre) ){
		return;
	}
	var genres = [];
	for( var i = 0, l = this._data.genre.length; i < l; i++ ){
		genres.push(this._data.genre[i].name);
	}
	mkE({
		tag: 'div',
		className: 'movieGenres',
		text: genres.join(', ')
	}).append(this._movieInfo);
};

D.SayEventKino.prototype._description = function(){
	if( !this._data.description ){
		return;
	}
	mkE({
		tag: 'div',
		className: 'movieDescription',
		text: D.shorten(htmlspecialchars_decode(this._data.description), 140, '...')
	}).append(this._movieInfo);
};

D.SayEventKino.prototype._rating = function(){
	this._ratingRow = mkE({
		tag: 'div',
		className: 'ratingRow'
	}).append(this._movieInfo);

	this._drawIMDB();
};

D.SayEventKino.prototype._drawIMDB = function(){
	if( !Number(this._data.imdb_rating) ){
		return;
	}
	mkE({
		tag: 'span',
		className: 'imdbRating',
		els: [
			D.Lang.get('imdb_rating') + ': ',
			{
				tag: 'strong',
				text: Number(this._data.imdb_rating).toFixed(1)
			}
		]
	}).append(this._ratingRow)
};

D.SayItem.prototype._events[38] = D.SayEventKino;
// --- event/kino.js ---

// +++ event/kino_checkin.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @param {Object} par
 * @constructor
 */
D.SayEventKinoCheckin = function( item, event, par ) {
	this._pic = item.par.galleryItem;
	this._data = event;
	this._item = item;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventKinoCheckin'
	});

	if( this._pic ){
		item._drawGalleryItem(this._pic, par, this.node);
		T.clear().append(this.node);
	}else{
		this._drawMovie();
	}
};
D.SayEventKinoCheckin.prototype = new D.SayEvents;
D.SayEventKinoCheckin.prototype.showText = true;

D.SayEventKinoCheckin.prototype._drawGalleryItem = function(){

};

D.SayEventKinoCheckin.prototype._drawMovie = function() {
	this._movieContainer = mkE({
		tag: 'a',
		className: 'sayMovieContainer',
		href: D.Say.link(this._data.movieUrl, this._item.id)
	}).append(this.node);

	this._image();
	this._info();
	this._rating();
};

D.SayEventKinoCheckin.prototype._image = function(){
	mkE({
		tag: 'div',
		className: 'movieImage',
		style: {
			backgroundImage: 'url(' + this._data.moviePic + ')'
		}
	}).append(this._movieContainer);
};

D.SayEventKinoCheckin.prototype._info = function(){
	this._movieInfo = mkE({
		tag: 'div',
		className: 'movieInfo'
	}).append(this._movieContainer);

	mkE({
		tag: 'div',
		className: 'movieTitle',
		els: [
			{
				tag: 'strong',
				text: this._data.originalTitle
			},
			' (' + this._data.year + ')'
		]
	}).append(this._movieInfo);

	this._nativeTitle();
	this._genres();
	this._description();
};

D.SayEventKinoCheckin.prototype._nativeTitle = function(){
	if( !this._data.movieTitle ) {
		return;
	}
	mkE({
		tag: 'div',
		className: 'nativeTitle',
		text: this._data.movieTitle
	}).append(this._movieInfo);
};

D.SayEventKinoCheckin.prototype._genres = function(){
	if( empty(this._data.genres) ){
		return;
	}
	var genres = [];
	for( var i = 0, l = this._data.genres.length; i < l; i++ ){
		genres.push(this._data.genres[i].name);
	}
	mkE({
		tag: 'div',
		className: 'movieGenres',
		text: genres.join(', ')
	}).append(this._movieInfo);
};

D.SayEventKinoCheckin.prototype._description = function(){
	if( !this._data.description ){
		return;
	}
	mkE({
		tag: 'div',
		className: 'movieDescription',
		text: D.shorten(htmlspecialchars_decode(this._data.description), 140, '...')
	}).append(this._movieInfo);
};

D.SayEventKinoCheckin.prototype._rating = function(){
	this._ratingRow = mkE({
		tag: 'div',
		className: 'ratingRow'
	}).append(this._movieInfo);

	this._drawIMDB();
};

D.SayEventKinoCheckin.prototype._drawIMDB = function(){
	if( !Number(this._data.imdb) ){
		return;
	}
	mkE({
		tag: 'span',
		className: 'imdbRating',
		els: [
			D.Lang.get('imdb_rating') + ': ',
			{
				tag: 'strong',
				text: Number(this._data.imdb).toFixed(1)
			}
		]
	}).append(this._ratingRow)
};

D.SayItem.prototype._events[44] = D.SayEventKinoCheckin;

// --- event/kino_checkin.js ---

// +++ event/posts.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventPosts = function( item, event ) {
	this._item = item;
	this._data = event;
	this.cleanUrl = new Get( event.url ).add( 'utm_source', 'say' ).toUrl();
	this.url = D.Say.link(this.cleanUrl, this._item.id);
	if (!event.allowComments) {
		delete this.comment;
	}
	this.cantComment = !event.allowComments;
	this.node = mkE({
		tag: 'div',
		className: 'SayEventPosts sayBlog'
	});
	if( event.scheduled ){
		mkE({
			tag:'span',
			text: D.Lang.get('planned_postpone_date')+ ' '+ event.scheduled,
			style:{
				display: 'block',
				marginLeft: '0px',
				marginBottom: '5px',
				color: '#f58c00'
			}
		}).append(this.node);
	}
	if( event.isDraft ){
		mkE({
			tag:'span',
			text: D.Lang.get('draft'),
			style:{
				display: 'block',
				marginLeft: '0px',
				marginBottom: '5px',
				color: '#f58c00'
			}
		}).append(this.node);
	}

	var readMore = '';
	if (event.text.length > 225) {
		readMore = {
			tag: 'a',
			href: this.url,
			text: D.Lang.get('read more'),
			className: 'readMore',
			onclick: D.closure( this, this._open )
		}
	}

	var image = '';
	mkE.appendTypeElement( this.node, [
		{
			tag: 'div',
			els: [
				{
					tag: 'a',
					href: this.url,
					className: 'title',
					text: event.title,
					prop: {
						onclick: D.closure( this, this._open )
					}
				}
			]
		},
		image,
		{
			tag: 'p',
			els: [
				{
					tag: 'span',
					prop: {
						innerHTML: D.smileyReplace(event.text)
					}
				},
				' ',
				readMore
			]
		},
		{
			tag: 'div',
			className: 'clear'
		}
	] );
	var firstImage = !empty(event.images) ? reset(event.images) : null;
	if( firstImage && !firstImage.video && firstImage.main && (firstImage.w < firstImage.h || firstImage.w < 500) ){
		addClassName(this.node, 'sayBlogWithImage');
		mkE({
			tag: 'a',
			href: this.url,
			className: 'image',
			style: {
				backgroundImage: 'url(' + firstImage.image.GM + ')'
			},
			prop: {
				onclick: D.closure( this, this._open )
			}
		}).prepend(this.node);
	}else if( firstImage && (firstImage.video || firstImage.main) ) {
		var m = new T.Mosaic(item.say.mosaicWidth());
		var mi = new T.MosaicItem(firstImage.image.say, firstImage.w, firstImage.h);
		mi.href = this.url;
		mi.onclick = D.closure( this, this._open );
		mi.urlGM = firstImage.image.GM;
		m.add(mi);
		if (firstImage.type == 2) {
			mi.scale = 1.1;
		}
		if (firstImage.video) {
			mkE({
				tag: 'div',
				className: 'sayGalleryVideo'
			}).append(mi.getClickNode());
		}
		if( firstImage.main ){
			m.prepend(this.node);
		}else{
			m.append(this.node);
		}
	}
};
D.SayEventPosts.prototype = new D.SayEvents;

D.SayEventPosts.prototype._open = function(){
	if( this._item.par.ad ){
		return false;
	}
	D.Say.click(this._item.id);
	var mStats = new DR.say.ClickStats();
	mStats.kw = 'say_feed_comment';
	mStats.call();
	return Say.showBlog( this._data.id, this.cleanUrl );
};

D.SayEventPosts.prototype.comment = function() {
	var get = new Get(this.cleanUrl);
	get.add('comment', this._item._options.profileSwitch ? this._item._options.profileSwitch.uid : D.ID);
	Say.showBlog(this._data.id, get.toUrl());
	return false;
};

D.SayItem.prototype._events[2] = D.SayEventPosts;

// --- event/posts.js ---

// +++ event/prof_gal.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventProfGal = function( item, event ){
	this._data = event;
	this._item = item;
	if( !event.canComment ){
		delete this.comment;
	}

	var w, h;
	if( event.image.w > event.image.h ){
		w = Math.min(item.say.mosaicWidth(), 500, event.image.w);
		h = (w / event.image.w) * event.image.h;
	}else{
		h = Math.min(500, event.image.h);
		w = (h / event.image.h) * event.image.w;
	}

	this.node = mkE( {
		tag:'div',
		className:'SayEventProfGal',
		els:[
			{
				tag:'div',
				className:'sayEventInfoText',
				text:D.Lang.get('changed_profile_pic')
			},
			{
				tag: 'a',
				href: D.Say.link(event.url, this._item.id),
				onclick: D.closure( Say, Say.slideShow, 0, event.id, {sayClick: this._item.id} ),
				els: [
					{
						tag: 'img',
						src: event.image.say,
						style: {
							width: w + 'px',
							height: h + 'px'
						}
					},
					{
						tag: 'div',
						className: 'overlay'
					}
				]
			}
		]
	} );
};
D.SayEventProfGal.prototype = new D.SayEvents;

D.SayEventProfGal.prototype.comment = function(focusForm){
	var mStats = new DR.say.ClickStats();
	mStats.kw = 'say_feed_comment';
	mStats.call();
	Say.slideShow( 0, this._data.id );
	return false;
};

D.SayItem.prototype._events[9] = D.SayEventProfGal;

// --- event/prof_gal.js ---

// +++ event/rate.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventRate = function( item, event ){
	this._data = event;
	this._item = item;
	this.node = mkE( {
		tag:'div',
		className:'SayEvent SayEventRate',
		els:[
			{
				tag:'span',
				className: 'sayEventInfoText',
				els:[
					event.title.toLowerCase(),
					' ',
					{
						tag:'a',
						text:event.text,
						href:D.Say.link(event.url, this._item.id)
					}
				]
			},
			{
				tag:'a',
				href:event.url,
				className:'SayEventRatePic',
				els:[
					{
						tag: 'div',
						className: 'background'
					},
					this._img = mkE( {
						tag:'img',
						src:event.imageSay
					}),
					{
						tag: 'div',
						className: 'shadowOverlay'
					},
					this._overlay = mkE({
						tag: 'div',
						className: 'overlay'
					})
				]
			}
		]
	} );
	if( event.canVote || event.hasVoted ){
		D.onLoad('DR.rate', D.closure(this, this._drawActions));
	}
};
D.SayEventRate.prototype = new D.SayEvents;

D.SayEventRate.prototype.comment = function(focusForm){
	var url = this._data.url + ( focusForm ? '#addComment' : '' );
	var get = new Get('/stats/click.php');
	get.add('key', 'say_feed_comment');
	get.add('url', url);
	document.location.href = get.toUrl();
	return false;
};

D.SayEventRate.prototype._drawActions = function(){
	this._buttonContainer = mkE({
		tag: 'div',
		className: 'vote-button-container'
	}).append(this._overlay);
	if( this._data.hasVoted ){
		this._drawVoted();
	}else{
		this._drawButtons();
	}
};

D.SayEventRate.prototype._drawVoted = function(){
	mkE({
		tag: 'div',
		className: 'vote-button voted',
		els: [
			{
				tag: 'div',
				className: 'vote-icon',
				els: [
					{
						tag: 'div',
						className: 'icon-content'
					}
				]
			},
			{
				tag: 'div',
				className: 'vote-text',
				text: D.Lang.get('voted')
			}
		]
	}).append(this._buttonContainer);
};

D.SayEventRate.prototype._drawButtons = function(){
	mkE({
		tag: 'a',
		className: 'vote-button vote',
		onclick: D.closure(this, this._vote),
		els: [
			{
				tag: 'div',
				className: 'vote-icon',
				els: [
					{
						tag: 'div',
						className: 'icon-content'
					}
				]
			},
			{
				tag: 'div',
				className: 'vote-text',
				text: D.Lang.get('vote')
			}
		]
	}).append(this._buttonContainer);

	if( !this._data.superVotes ){
		return;
	}

	mkE({
		tag: 'a',
		className: 'vote-button vote super-vote',
		onclick: D.closure(this, this._superVote),
		els: [
			{
				tag: 'div',
				className: 'vote-icon',
				els: [
					{
						tag: 'div',
						className: 'icon-content'
					}
				]
			},
			{
				tag: 'div',
				className: 'vote-text',
				text: D.Lang.get('supervote')
			}
		]
	}).append(this._buttonContainer);
};

D.SayEventRate.prototype._vote = function(superVote){
	if( this._mVote && this._mVote.processing ){
		return;
	}
	D.Say.click(this._item.id);
	this._mVote = new DR.rate.Vote();
	this._mVote.pid = this._data.id;
	this._mVote.superVote = superVote === true;
	this._mVote.onLoad = D.closure(this, this._onVote);
	this._mVote.call();
};

D.SayEventRate.prototype._superVote = function(){
	this._vote(true);
};

D.SayEventRate.prototype._onVote = function(){
	if( !this._mVote || this._mVote.error || !this._mVote.re ){
		return;
	}
	if( !this._mVote.re.ok ){
		return;
	}
	this._data.hasVoted = true;
	clearNode(this._overlay);
	this._drawActions();
};

D.SayItem.prototype._events[5] = D.SayEventRate;

// --- event/rate.js ---

// +++ event/relship.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventRelship = function( item, event ){
	this._data = event;
	this._item = item;
	if( !event.uid  ){
		item.ok = false;
		return;
	}
	this._user = D.Say.getUser( item.par.uid );
	this._fr = D.Say.getUser( event.uid );
	var text = this._text();
	this.node = mkE( {
		tag:'div',
		className:'SayEventRelship',
		els:[
			text,
			mkE({
				tag: 'div',
				className: 'pictures',
				els: [
					{
						tag:'a',
						className:'SayEventRelshipLeft',
						href:D.Say.link(this._user.url, this._item.id),
						els:[
							this._img = mkE( {
								tag:'img',
								prop:{
									onload:D.SayEventRelship._imgOnload
								}
							} )
						]
					},
					{
						tag:'a',
						className:'SayEventRelshipRight',
						href:D.Say.link(this._fr.url, this._item.id),
						els:[
							this._imgFriend = mkE( {
								tag:'img',
								prop:{
									onload:D.SayEventRelship._imgOnload
								}
							} )
						]
					},
					{
						tag:'span',
						className:'SayEventRelshipStatus' + event.status
					}
				]
			})
		]
	} );
	this._img.src = event.image;
	this._imgFriend.src = event.friendImage;
};
D.SayEventRelship.prototype = new D.SayEvents;

D.SayEventRelship.RELAT_HIDDEN = 0;
D.SayEventRelship.RELAT_MARRIED = 1;
D.SayEventRelship.RELAT_IN = 2;
D.SayEventRelship.RELAT_OPEN = 3;
D.SayEventRelship.RELAT_DONTWANT = 4;
D.SayEventRelship.RELAT_ENGAGED = 5;

D.SayEventRelship._imgOnload = function(){
	if( this.width > this.height ){
		this.style.height = '100%';
		if( this.parentNode.offsetWidth ){
			this.style.marginLeft = Math.floor( ( this.parentNode.offsetWidth - this.width ) / 2 ) + 'px';
		}
	} else {
		this.style.width = '100%';
		if( this.parentNode.offsetHeight ){
			this.style.marginTop = Math.floor( ( this.parentNode.offsetHeight - this.height ) / 2 ) + 'px';
		}
	}
};

D.SayEventRelship.prototype._text = function(){
	if( this._data.fullText ){
		var textNode = mkE( {
			tag:'p',
			text:this._data.fullText
		} );
		D.replaceWithNode( textNode, /\$user/g, D.closure(this, function(){
			return mkE( {
				tag:'a',
				href:D.Say.link(this._user.url, this._item.id),
				text:htmlspecialchars_decode( this._user.title )
			} );
		} ));
		D.replaceWithNode( textNode, /\$friend/g, D.closure(this, function(){
			var re = mkE( {
				tag:'a',
				href:D.Say.link(this._fr.url, this._item.id),
				text:htmlspecialchars_decode( this._fr.title )
			} );
			D.Say.addUserTooltip( re, this._fr );
			return re;
		} ));
		return textNode;
	}
	return mkE( {
		tag:'p',
		els:[
			this._data.textPrefix, ' ',
			{
				tag:'a',
				href:D.Say.link('/account/', this._item.id),
				text:this._data.text
			},
			{
				tag:'br'
			},
			this._data.textWith, ' ',
			{
				tag:'a',
				href:D.Say.link(this._fr.url, this._item.id),
				text:htmlspecialchars_decode( this._fr.title )
			}
		]
	} );
};

D.SayItem.prototype._events[22] = D.SayEventRelship;

// --- event/relship.js ---

// +++ event/endomondo.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventEndoMondo = function( item, event ){
	//D.log(event);
	this._item = item;
	this._event = event;
	if( !D.DEV && empty( this._event.calories_total ) ){
		return;
	}
	this._l = new D.Lang('xEndoMondo');
	this.node = mkE({
		tag: 'div',
		className: 'SayEventEndoMondo',
		els: [
			{
				tag: 'div',
				className: 'sayEventInfoText',
				text: D.Lang.get('say_endomondo_activity')
			},
			this._endomondoContainer = mkE({
				tag: 'div',
				className: 'endomondoContainer'
			})
		]
	});
	if( event.encoded_polyline ){
		var mapNode;
		if( this._event.privacy && this._event.privacy.value === 'PUBLIC' ) {
			mapNode = mkE({
				tag: 'a',
				href: this._href(),
				className: 'endomondoMap',
				attr: {
					target: '_blank'
				}
			}).append(this._endomondoContainer);
		} else {
			mapNode = mkE({
				tag: 'div',
				className: 'endomondoMap'
			}).append(this._endomondoContainer);
		}
		new T.OSMMap(
			new T.OSMMap.Par()
				.setWidth(500)
				.setHeight(200)
				.setPath(event.encoded_polyline)
				.setZoomControl(false)
				.setDragging(false)
				.setScrollWheelZoom(false)
		).append(mapNode);
	}
	if( !D.onLoad( 'xEndoMondo', D.closure( this, this._langReady ) ) ){
		D.addLang('xEndoMondo');
	}
};
D.SayEventEndoMondo.prototype = new D.SayEvents;

D.SayEventEndoMondo.prototype._href = function(){
	return D.Say.link('http://www.endomondo.com/workouts/' + this._event.id, this._item.id);
};

D.SayEventEndoMondo.prototype._langReady = function(){
	if( this._event.privacy && this._event.privacy.value === 'PUBLIC' ){
		this._infoNode = mkE({
			tag: 'a',
			href: this._href(),
			className: 'endomondoInfo',
			attr: {
				target: '_blank'
			}
		}).append(this._endomondoContainer);
	}else{
		this._infoNode = mkE({
			tag: 'div',
			className: 'endomondoInfo'
		}).append(this._endomondoContainer);
	}

	var title = mkE({
		tag: 'div',
		className: 'title',
		text: this._l.get( this._event.sport )
	}).append(this._infoNode);

	this._fieldsNode = mkE({
		tag: 'div'
	}).append(this._infoNode);
	this._table();
};

D.SayEventEndoMondo.prototype._addField = function(par){
	mkE({
		tag: 'div',
		className: 'endomondoField',
		els: [
			{
				tag: 'div',
				className: 'value',
				text: par.value
			},
			{
				tag: 'div',
				className: 'caption',
				text: par.caption
			}
		]
	}).append(this._fieldsNode);
};

D.SayEventEndoMondo.prototype._duration = function(v){
	v = Number(v);
	var re = [];
	var d = Math.floor( v / 86400 );
	if(d){
		re.push( d + 'd' );
	}
	v = v % 86400;
	var h = Math.floor( v / 3600 );
	if( d || h ){
		re.push( h + 'h' );
	}
	v = v % 3600;
	var m = Math.floor( v / 60 );
	re.push( m + 'm' );
	v = Math.floor( v % 60 );
	re.push( v + 's' );
	return re.join(':');
};

D.SayEventEndoMondo.prototype._table = function(){
	this._row = 0;
	if( this._event.steps_total ){
		this._addField( {
			icon:D.PIMG + 'say/img/endomondo/steps_icon.png',
			caption:this._l.get('steps'),
			value:this._event.steps_total
		} );
	}
	if( this._event.distance_total ){
		this._addField( {
			icon:D.PIMG + 'say/img/endomondo/distance_icon.png',
			caption:this._l.get('distance'),
			value:Number( this._event.distance_total ).toFixed(2) + ' km'
		} );
	}
	if( this._event.duration_total ){
		this._addField( {
			icon:D.PIMG + 'say/img/endomondo/duration_icon.png',
			caption:this._l.get('duration'),
			value:this._duration( this._event.duration_total )
		} );
	}
	if( this._event.calories_total ){
		this._addField( {
			icon:D.PIMG + 'say/img/endomondo/calories_icon.png',
			caption:this._l.get('calories'),
			value:this._event.calories_total + ' kcal'
		} );
	}
	/*if( this._event.distance_total && this._event.duration_total ){
		this._addField( {
			icon:D.PIMG + 'say/img/endomondo/avgspeed_icon.png',
			caption:this._l.get('avg speed'),
			value:( this._event.distance_total * 3600 / this._event.duration_total ).toFixed(2) + ' km/h'
		} );
	}*/
	if( this._event.speed_max ){
		this._addField( {
			icon:D.PIMG + 'say/img/endomondo/speed_icon.png',
			caption:this._l.get('max speed'),
			value:this._event.speed_max + ' km/h'
		} );
	}
};

D.SayItem.prototype._events[59] = D.SayEventEndoMondo;

// --- event/endomondo.js ---

// +++ event/biz_hours.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {D.SayEventBizHours__event|Object} event
 * @constructor
 */
D.SayEventBizHours = function( item, event ){
	this.node = mkE( {
		tag:'div',
		className:'SayEventBizHours'
	} );
	this._event = new D.SayEventBizHours__event(event);
	this._l = new D.Lang('xBiz');
	this._tableNode = mkE( {
		tag: 'table',
		className: 'workingHours'
	} ).append( this.node );

	if ( !D.onLoad( 'xBiz', D.closure( this, this._langReady ) ) ) {
		D.addLang('xBiz');
	}
};
D.SayEventBizHours.prototype = new D.SayEvents;

D.SayEventBizHours.prototype._langReady = function() {
	D.insertBefore( mkE( {
		tag: 'p',
		text: this._l.get('say_work_hours_title')
	} ), this._tableNode );

	var today = ( new D.Date ).resetTime();
	var now = new D.Date;

 	for ( var ymd in this._event.holidays ) {
		var holiday = this._event.holidays[ymd];
		var date = ( new D.Date ).fromSqlDate( ymd );

		var hours = [];
		if ( holiday.closed ) {
			hours.push( this._l.get('venue_holiday_day') );
		} else {
			hours.push( holiday.from + ' &mdash; ' + holiday.to  );
		}

	  var className = '';
	  if ( today.format('Ymd') == date.format('Ymd') ) {
		  className += 'today';
			var from = ( new D.Date ).fromFormat('H:i', holiday.from);
			var to = ( new D.Date ).fromFormat('H:i', holiday.to);

		  if ( holiday.closed ) {
			  className += ' closed';
		  } else if ( now > from && now < to ) {
			  className += ' openNow';
		  }
	  }

		mkE( {
			tag: 'tr',
			className: className,
			els: [
				{
					tag: 'td',
					className: 'days',
					els: [
						date.getDayName() + '.',
						{
							tag: 'span',
							className: 'holidayDate',
							text: date.format('d.m.')
						}
					]
				},
				{
					tag: 'td',
					className: 'hours',
					els: hours
				}
			]
		} ).append( this._tableNode );
	}
};

D.SayEventBizHours__event = function( event ) {
	O2O( this, event );
};
/**
 * @type Object.<string,D.SayEventBizHours__holiday>
 */
D.SayEventBizHours__event.prototype.holidays = {};

D.SayEventBizHours__holiday = function(){};
D.SayEventBizHours__holiday.prototype.closed = false;
/** @type {string|null} */
D.SayEventBizHours__holiday.prototype.from = null;
/** @type {string|null} */
D.SayEventBizHours__holiday.prototype.to = null;

D.SayItem.prototype._events[74] = D.SayEventBizHours;
// --- event/biz_hours.js ---

// +++ event/bcard.js +++
D.SayEventBCard = function( item, event ){
	this._item = item;
	this._event = event;
	this.node = mkE( {
		tag:'div'
	} );
	if( !D.onLoad( 'bcard', D.closure( this, this._lib, event ) ) ){
		D.addJS('bcard/bcard.js');
		D.addCSS('bcard/bcard.css');
	}
};

D.SayEventBCard.prototype._lib = function(event){
	var item = new D.BCardItem(event, {
		sayId: this._item.id
	});
	item.replace( this.node );
	this.node = item.node;
};

D.SayEventBCard.prototype.comment = function(){
	var mStats = new DR.say.ClickStats();
	mStats.kw = 'say_feed_comment';
	mStats.call();
	D.BCardItemLarge.openModal(this._event.id);
	return false;
};

D.SayItem.prototype._events[76] = D.SayEventBCard;

// --- event/bcard.js ---

// +++ event/biz_magazine.js +++
/**
 * @param {D.SayItem} item
 * @param {D.SayEventBizMagazine__event} event
 * @constructor
 */
D.SayEventBizMagazine = function( item, event ) {
	event = new D.SayEventBizMagazine__event(event);

	var w = item.say.mosaicWidth();
	var h = (item.say.mosaicWidth() / event.image.w) * event.image.h

	this.node = mkE( {
		tag: 'div',
		className: 'SayEventBizMagazine',
		els: [
			{
				tag: 'a',
				className: 'imageUrl',
				href: D.Say.link(event.url, item.id),
				els: [
					{
						tag: 'img',
						src: event.image.url,
						prop: {
							width: w,
							height: h
						}
					},
					{
						tag: 'div',
						className: 'overlay'
					}
				]
			},
			{
				tag: 'div',
				className: 'title',
				els: [
					{
						tag: 'strong',
						text: event.titlePrefix
					},
					': ',
					{
						tag: 'a',
						href: D.Say.link(event.url, item.id),
						text: event.title
					}
				]
			},
			{
				tag: 'p',
				els: [
					event.intro,
					' ',
					{
						tag: 'a',
						href: D.Say.link(event.url, item.id),
						className: 'more',
						text: D.Lang.get('read more')
					}
				]
			}
		]
	} );
};
D.SayEventBizMagazine.prototype = new D.SayEvents;

D.SayEventBizMagazine__event = function( event ) {
	O2O(this, event);
};
D.SayEventBizMagazine__event.prototype.id = 0;
D.SayEventBizMagazine__event.prototype.url = '';
D.SayEventBizMagazine__event.prototype.titlePrefix = '';
D.SayEventBizMagazine__event.prototype.title = '';
D.SayEventBizMagazine__event.prototype.intro = '';

/**
 @typedef {Object} D.SayEventBizMagazine__eventImage
 @property {string} url
 @property {number} w
 @property {number} h
 */

/**
 * @type {D.SayEventBizMagazine__eventImage}
 */
D.SayEventBizMagazine__event.prototype.image = null;

D.SayItem.prototype._events[21] = D.SayEventBizMagazine;
// --- event/biz_magazine.js ---

// +++ event/d.js +++
D.SayEventD = function( item, event ){
	var link = event.link;
	var _l = mkE( {
		tag: 'a',
		href: D.Say.link(link, item.id)
	} );
	if ( /stats\/click\.php/.test( link ) ) {
		var g = new Get( _l.href );
		if ( !empty( g.v('url') ) ) {
			_l = mkE( {
				tag: 'a',
				href: D.Say.link(g.v('url'), item.id)
			} );
		}
	}
	var target = '_blank';
	if( document.location.host == _l.host || _l.host.match(/(^|www\.)draugiem\.lv$/i) || _l.host.match(/\.d[r]a\.lv$/i) ){
		target = '_self';
	}
	this.node = mkE( {
		tag:'div',
		id:'SayEventDAptaujas'
	} );
	if( event.imageSay ){
		this.node.id = '';
		addClassName( this.node, 'SayEventD' );
	}
	mkE( {
		tag:'a',
		href:D.Say.link(link, item.id),
		className:'img',
		els:[
			{
				tag:'img',
				src:event.imageSay || event.image
			}, // img
			{
				tag: 'div',
				className: 'overlay'
			}
		],
		prop: {
			target: target
		}
	} ).append( this.node );
	if( event.title ){
		mkE( {
			tag:'p',
			els:[
				{
					tag:'a',
					href:D.Say.link(link, item.id),
					text:event.title,
					prop: {
						target: target
					}
				},
				event.text ? ': ' : '',
				event.text
			]
		} ).append( this.node );
	}	else {
		mkE( {
			tag:'p',
			text:event.text
		} ).append( this.node );
	}
	if( event.buttonText ){
		mkE( {
			tag:'a',
			href:D.Say.link(link, item.id),
			className:'btnFindOutYour',
			text:event.buttonText,
			style:{
				backgroundColor:event.buttonBG
			},
			prop: {
				target: target
			}
		} ).append( this.node );
	}
};

D.SayItem.prototype._events[77] = D.SayEventD;

// --- event/d.js ---

// +++ event/groups.js +++
/**
 * @class
 */
D.SayEventGroups = Class.define(function() {
	return Class(
		/**
		 * @lends {D.SayEventGroups#}
		 */
		{
			node: null,

			_data: null,
			/*** @var {D.Say.getUser} */
			_user: null,
			/**
			 * @constructor
			 */
			__construct: function(item, data) {
				this._data = data;
				this._item = item;
				this._user = D.Say.getUser( data.uid );
				var href;
				if( item.say.type === 'groups' ) {
					href = data.url;
				} else {
					href = D.Say.link(this._data.url, this._item.id);
				}
				var titleNode;
				this.node = mkE({
					tag: 'div',
					className: 'groups-say-item',
					els: [
						this._postTitle = mkE({
							tag: 'div',
							className: 'title',
							els: [
								titleNode = mkE({
									tag: 'a',
									href: href,
									text: htmlspecialchars_decode( this._data.title )
								}),
								data.category?{
									tag: 'span',
									text: ' - '
								}:false,
								data.category?{
									tag: 'span',
									text: data.category
								}:false
							]
						}),
						this._postBody = mkE({
							tag: 'div',
							className: 'post-body',
							text: this._data.intro
						})
					]
				});

				D.smileyReplace(titleNode);
				D.smileyReplace(this._postBody);
				D.linksReplace(this._postBody);

				if(data.read_more) {
					mkE({
						tag: 'a',
						className: 'read_more',
						href: D.Say.link(this._data.url, this._item.id),
						text: D.Lang.get('Lasīt vairāk', 'xGroupsNew')
					}).append(this.node);
				}

				if(data.attachments > 0) {
					mkE({
						tag: 'div',
						className: 'attachments',
						text: data.attachments + ' ' + D.Lang.nget(data.attachments, 'attached_files')
					}).append(this._postBody);
				}

				var firstImage = !empty(data.images) ? reset(data.images) : null;

				if(count(data.images) == 1 && !firstImage.video && (firstImage.w < 500 || firstImage.w < firstImage.h)){
					var image = firstImage;
					addClassName(this.node, 'group-say-item-with-image');
					mkE({
						tag: 'a',
						href: D.Say.link(data.url, this._item.id),
						className: 'image',
						style: {
							backgroundImage: 'url(' + image.gm + ')'
						}
					}).prepend(this.node);
				}else if(!empty(data.images)){
					var m = new T.Mosaic(item.say.mosaicWidth(), true);
					for (var k in data.images) {
						var r = data.images[k];
						var mi = new T.MosaicItem(r.say, r.w, r.h);
						mi.href = D.Say.link(data.url, this._item.id);
						mi.urlGM = r.gm;
						m.add(mi);
						if (r.type == 2) {
							mi.scale = 1.1;
						}
						if (r.video) {
							mkE({
								tag: 'div',
								className: 'sayGalleryVideo'
							}).append(mi.getClickNode());
						}
					}
					m.append(this.node);
				}

				if(data.poll) {
					var poll = new D.SayEventGroups.Poll(data.poll, data.id, item.uid);
					poll.node.append(this._postBody);
				}

				if(this._data.canComment === false) {
					this.comment = false;
				}
			}
		}
	);
});

D.SayEventGroups.prototype.comment = function() {};

D.SayEventGroups.prototype._open = function() {
	var url = this._data.url;
	var get = new Get('/stats/click.php');
	get.add('key', 'say_feed_comment');
	get.add('url', url);
	document.location.href = get.toUrl();
};

D.SayItem.prototype._events[3] = D.SayEventGroups;

/**
 * @class
 */
D.SayEventGroups.Poll = Class.define(function() {
	return Class(
		/**
		 * @lends {D.groups.Discussion.Poll#}
		 */
		{
			node: null,

			_topic_id: 0,
			_group_id: 0,
			_poll: [],

			/**
			 * @constructor
			 */
			__construct: function(poll, topic_id, group_id) {
				this._topic_id = topic_id;
				this._group_id = group_id;
				/** @type {DR.groups.struct.Survey} */
				this._poll = poll;

				this.node = mkE( {
					tag:'div',
					id:'SayEventGroups-Poll',
					els: [
						{
							tag: 'div',
							className: 'question',
							text: htmlspecialchars_decode(this._poll.question)
						},
						this._form = mkE({
							tag:'div',
							className:'answers'
						})
					]
				} );

				var totalVotes = this._poll.totalAnswers;

				var procTotal = 0;
				var showResults = false;
				for( var k in this._poll.answers ){
					/** @type {DR.groups.struct.SurveyAnswer} */
					var answer = this._poll.answers[k];
					var text = trim(answer.text);
					if(!text) {
						continue;
					}
					var proc = 0;
					if(totalVotes && answer.voteCount){
						proc = Math.round( answer.voteCount / totalVotes * 100 );
					}
					if( procTotal && answer.id == count( this._poll.answers ) - 1 ){
						proc = 100 - procTotal;
					}
					mkE({
						tag: 'label',
						className: 'answer',
						els: [
							{
								tag: 'input',
								type: 'radio',
								name: 'poll_answer',
								value: answer.id
							},
							{
								tag: 'span',
								text: htmlspecialchars_decode(text)
							}
						]
					}).append(this._form);
					if (answer.myVote) {
						showResults = true;
					}
				}

				if( showResults ){
					this._showResults();
					return;
				}

				if( !showResults ){
					this._voteCT = mkE( {
						tag:'div',
						className:'totalVotes',
						els:[
							new T.Form.Button({
								caption: D.Lang.get('vote'),
								color: 'link',
								onclick: this._answer
							}),
							{
								tag: 'span',
								className: 'total',
								text: D.Lang.get('biz poll total answers') + ' ' + totalVotes
							}
						]
					} ).append( this.node );
				}
			},
			_answer: function() {
				var answers = this.node.getElementsByTagName('input'), answer;
				for(var i in answers) {
					if(answers[i].name == 'poll_answer' && answers[i].checked) {
						answer = answers[i].value;
					}
				}
				if(answer !== undefined) {
					this._saveVote(answer);
				}
			},
			_saveVote: function(answer_key) {
				D.onLoad( 'DR.groups', D.closure( this, function() {
					this._mSaveVote = new DR.groups.SaveVote;
					this._mSaveVote.topicId = this._topic_id;
					this._mSaveVote.answerKey = answer_key;
					this._mSaveVote.onLoad = this._saveVoteRe;
					this._mSaveVote.call();
				}, this ) );
			},
			_saveVoteRe: function() {
				removeNode(this._voteCT);
				this._poll = this._mSaveVote.re.survey;
				this._showResults();
			},
			_showResults: function() {
				clearNode(this._form);
				var totalVotes = this._poll.totalAnswers;
				var procTotal = 0;

				for( var k in this._poll.answers ){
					/** @type {DR.groups.struct.SurveyAnswer} */
					var answer = this._poll.answers[k];
					var proc = 0;
					if(totalVotes && answer.voteCount){
						proc = Math.round( answer.voteCount / totalVotes * 100 );
					}
					if( procTotal && k == count( this._poll.answers ) - 1 ){
						proc = 100 - procTotal;
					}

					var answeredItems = mkE({
						tag: 'div',
						className: 'answeredItem bgcolor'+ (k % 18),
						els: [{
							tag: 'div',
							className: 'answeredBg',
							style: {
								width:proc + '%'
							}
						},{
							tag: 'div',
							className: 'answeredText',
							text: answer.text
						}]
					}).append( this._form );

					if( answer.myVote ){
						addClassName( answeredItems, 'myVote' );
					}

					mkE({
						tag: 'div',
						className: 'answeredProc',
						text: proc+'%'
					}).append(answeredItems);

					if(totalVotes){
						procTotal += proc;
					}
				}

				if( totalVotes ){
					mkE( {
						tag:'div',
						className:'totalVotes',
						els:[
							{
								tag: 'span',
								className: 'thanks',
								text: D.Lang.get('vote thanks')
							},
							{
								tag: 'span',
								className: 'total',
								text: D.Lang.get('biz poll total answers') + ' ' + totalVotes
							}
						]
					} ).append( this.node );
				}

			}
		}
	);
});

D.loaded('groupsPoll');
// --- event/groups.js ---

// +++ event/groups/member.js +++
D.SayEventGroupsMember = function( item, data ){
	this._item = item;
	var nodes = [];
	var l = count( data.uids );
	for( var k  = 0; k < l; ++ k ){
		if(k){
			nodes.push( l == k + 1 && data.count < 4 ? {
				tag: 'span',
				className: 'metaText',
				text: ' ' + D.Lang.get( 'and' ) + ' '
			} : ', ' );
		}
		var user = D.Say.getUser( data.uids[k] );
		var userNode = mkE( {
			tag:'a',
			text:htmlspecialchars_decode( user.title ),
			href:D.Say.link(user.url, this._item.id)
		} );
		if( user.isFriend ){
			addClassName( userNode, 'color1' );
		}
		D.Say.addUserTooltip( userNode, user );
		nodes.push(userNode);
	}
	if( data.count > 3 ){
		nodes.push({
			tag: 'span',
			className: 'metaText',
			text: ' ' + D.Lang.get( 'and' ) + ' '
		});
		nodes.push(mkE( {
			tag:'a',
			href:D.Say.link(item.user.url + 'members', this._item.id),
			text: D.Lang.nget( data.count - l, 'x_more' )
		} ));
	}
	this.node = mkE( {
		tag:'div',
		className:'SayEventGroupsMember',
		els:[
			{
				tag: 'span',
				className: 'metaText',
				text: D.Lang.get('Grupai pievienojās').toLowerCase()
			},
			' ',
			nodes
		]
	} );
};

D.SayItem.prototype._events[79] = D.SayEventGroupsMember;

// --- event/groups/member.js ---

// +++ event/groups/auto.js +++
D.SayEventGroupsAuto = function( item, data ){

	this._data = data;
	this._item = item;

	this.getDateText = function( item ){
		var daynames = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
		var date = new D.Date(item.dateTimeFrom);
		var dayName = daynames[date.dayOfWeek() - 1];
		var dateText = '';

		var d = new Date(item.dateTimeFrom * 1000);
		var d2 = new Date(item.dateTimeTo * 1000);

		if( item.regular ){
			dateText = D.Lang.get('Regulārs: ');
			var dayBits = {1: 'Pr', 2: 'O', 4: 'T', 8: 'C', 16: 'Pk', 32: 'S', 64: 'Sv'};
			var days = [], dayBreak;
			var prevSelBit = false;
			var prevBit = false;
			for( var i in dayBits ){
				if( (i | item.days) == item.days ){
					if( days.length ){
						if( prevSelBit != prevBit ){
							dayBreak = true;
						}
					}
					days.push(dayBits[i]);
					prevSelBit = i;
				}
				prevBit = i;
			}
			dayText = !dayBreak ? days[0] + '. - ' + last(days) + '. ' : days.join('., ') + '. ';
			if( days.length == 1 ){
				dayText = days[0] + '. ';
			}
			dateText += dayText;

			dateText += d.getHours() + ':' + ("0" + d.getMinutes()).slice(-2)
				+ ' - '
				+ d2.getHours() + ':' + ("0" + d2.getMinutes()).slice(-2);
		} else {
			var today = new D.Date();
			var dayText = '';
			if( today.format('Y-m-d') === date.format('Y-m-d') ){
				dayText = D.Lang.get("Šodien");
			} else {
				if( today.setDate(today.getDate() + 1).format('Y-m-d') === date.format('Y-m-d') ){
					dayText = D.Lang.get("Rīt");
				} else if( today.setDate(today.getDate() + 1).format('Y-m-d') === date.format('Y-m-d') ){
					dayText = D.Lang.get("Parīt");
				}
				dayText += " " + date.getDate() + '. ' + D.Lang.get('months_a_' + (date.getMonth()));
			}
			var dateText = dayText + ' (' + D.Lang.get(dayName).toLowerCase() + ') ';
			dateText += d.getHours() + ':' + ("0" + d.getMinutes()).slice(-2)
				+ ' - '
				+ d2.getHours() + ':' + ("0" + d2.getMinutes()).slice(-2);
		}

		return dateText;
	}

	this._sendMsg = D.closure(this, function(){
		D.Say.click(this._item.id);
		D.sendMail(this._data.auto.uid, null, null, function( sent ){
			if( sent ){
				$.get('/stats/ping.php', {key: 'forum_auto_sentmail_s'});
			} else {
				$.get('/stats/ping.php', {key: 'forum_auto_sendmailclosed_s'});
			}
		});
	});


	var autoDirection = '';
	if( data.auto.direction ){
		autoDirection = data.auto.direction.from.name + " → " + data.auto.direction.to.name;
	}
	this.node = mkE({
		tag: 'div',
		className: 'SayEventGroupsAuto',
		els: [
			{
				tag: 'div',
				className: 'header',
				els: [
					{
						tag: 'div',
						els: [
							{
								tag: 'div',
								className: 'type' + data.auto.type,
								text: D.Lang.get(data.auto.type == 1 ? 'Šoferis' : 'Pasažieris')
							}
						]
					},
					{
						tag: 'div',
						els: [
							{
								tag: 'div',
								className: 'price',
								innerHTML: parseFloat(data.auto.price) + " &euro;"
							},
							{
								tag: 'div',
								className: 'seats',
								text: data.auto.seats + ' ' + D.Lang.nget(data.auto.seats, 'vieta')
							}
						]
					}
				]
			},
			{
				tag: 'div',
				className: 'bodyCT',
				els: [
					{
						tag: 'div',
						className: 'info',
						els: [
							{
								tag: 'div',
								className: 'direction',
								text: autoDirection
							},
							{
								tag: 'div',
								className: 'date',
								text: this.getDateText(data.auto)
							},
							data.auto.notes ? {
									tag: 'div',
									innerHTML: data.auto.notes
								} : false,
							data.auto.backTwo ? {
									tag: 'div',
									els: [
										{
											tag: 'span',
											className: 'icon autoPassengerIcon'
										},
										{
											tag: 'span',
											text: D.Lang.get('Aizmugurē divatā')
										}
									]
								} : false,
							data.auto.carModel ? {
									tag: 'div',
									els: [
										{
											tag: 'span',
											className: 'icon autoCarIcon'
										},
										{
											tag: 'span',
											text: data.auto.carModel + (data.auto.carYear ? ', ' + data.auto.carYear : '')
										}
									]
								} : false,
							data.auto.phone ? {
									tag: 'div',
									els: [
										{
											tag: 'span',
											className: 'icon autoPhoneIcon'
										},
										{
											tag: 'span',
											text: data.auto.phone
										}
									]
								} : false
						]
					},
					data.auto.canMessage ? {
							tag: 'div',
							className: 'msg',
							els: [
								new T.Form.Button({
									caption: D.Lang.get('Sūtīt vēstuli'),
									color: 'link',
									onclick: D.closure(this, this._sendMsg)
								})
							]
						} : false,
					T.clear()
				]
			}
		]
	});
};

D.SayItem.prototype._events[96] = D.SayEventGroupsAuto;

// --- event/groups/auto.js ---

// +++ event/achievement.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {D.SayEventAchievement__event|Object} event
 * @constructor
 */
D.SayEventAchievement = function( item, event ){
	if ( !D.onLoad( 'xAchievements', D.closure( this, this._langReady ) ) ) {
		D.addLang('xAchievements');
	}
	this.l = new D.Lang('xAchievements');
	this.node = mkE( {
		tag:'div',
		className:'SayEventsAchievement',
		els: [
			{
				tag: 'div',
				className: 'bigImg',
				els: [
					{
						tag: 'img',
						src: event.achievement.image
					}
				]
			},
			{
				tag: 'div',
				className: 'text',
				els: [
					{
						tag: 'span',
						className: 'caption',
						els: [
							{
								tag: 'span',
								className:'achievementIcon icon'
							},
							this.caption = mkE(
								{
									tag: 'a',
									href: D.Say.link(event.achievement.href. item.id),
									text: event.achievement.title
								}
							)
						]
					},
					{
						tag: 'p',
						text: event.achievement.descr
					},
					this.more = mkE({
						tag:'a',
						className: 'moreAbout',
						href: D.Say.link(event.achievement.moreHref, item.id),
						els:[
							(event.achievement.moreCaption)?{tag:'span',className:'caption more',text:event.achievement.moreCaption}:''
						]})
				]
			}
		]
	} );
	if (event.achievement.hasBonus) {
			mkE({
				tag: 'img',
				src: event.achievement.bonus.img
			}).append(this.more);
	} else {
		for (var i in event.achievement.moreImages) {
			mkE({
				tag: 'img',
				src: event.achievement.moreImages[i]
			}).append(this.more)
		}
	}
};

D.SayEventAchievement.prototype = new D.SayEvents;
D.SayEventAchievement.prototype._langReady = function() {
	D.insertBefore(
		mkE({ tag:'span',text:this.l.get('sanema')+' - ' }),
		this.caption
	);
};

D.SayItem.prototype._events[80] = D.SayEventAchievement;


D.SayEventAchievement__event = function( event ) {
	O2O( this, event );
};
D.SayEventAchievement__event.prototype = {
	achievement : {
		achievementData: {
			descr: null,
			title: null,
			href: null, //links uz atvērto skatu usera medaļās
			image: null
		},
		moreCaption: null,
		moreImages: [],
		moreHref: null
	}
};

// --- event/achievement.js ---

// +++ event/ratespecial.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventRateSpecial = function( item, event ){
	this._data = event;
	this._item = item.id;
	this._voted = false;
	this.node = mkE( {
		tag:'div',
		className:'SayEvent SayEventRate',
		els:[
			{
				tag:'span',
				className:'metaText',
				els:[
					event.title.toLowerCase(),
					' ',
					{
						tag:'a',
						text:event.text,
						href:D.Say.link(event.url, this._item.id)
					}
				]
			},
			{
				tag:'a',
				href:D.Say.link(event.url, this._item.id),
				className:'SayEventRatePic',
				els:[
					{
						tag: 'div',
						className: 'background'
					},
					this._img = mkE( {
						tag:'img',
						src:event.imageSay
					}),
					{
						tag: 'div',
						className: 'shadowOverlay'
					},
					this._overlay = mkE({
						tag: 'div',
						className: 'overlay'
					})
				]
			}
		]
	} );
	if( event.canVote){
		this._drawActions();
	}
};
D.SayEventRateSpecial.prototype = new D.SayEvents;

D.SayEventRateSpecial.prototype._drawActions = function(){
	this._buttonContainer = mkE({
		tag: 'div',
		className: 'vote-button-container'
	}).append(this._overlay);
	if( this._voted ){
		this._drawVoted();
		return;
	}
	this._drawButton();
};

D.SayEventRateSpecial.prototype._drawButton = function(){
	mkE({
		tag: 'a',
		className: 'vote-button vote',
		onclick: D.closure(this, this.rate),
		els: [
			{
				tag: 'div',
				className: 'vote-icon',
				els: [
					{
						tag: 'div',
						className: 'icon-content'
					}
				]
			},
			{
				tag: 'div',
				className: 'vote-text',
				text: this._data.buttonText
			}
		]
	}).append(this._buttonContainer);
};

D.SayEventRateSpecial.prototype._drawVoted = function(){
	mkE({
		tag: 'div',
		className: 'vote-button voted',
		els: [
			{
				tag: 'div',
				className: 'vote-icon',
				els: [
					{
						tag: 'div',
						className: 'icon-content'
					}
				]
			},
			{
				tag: 'div',
				className: 'vote-text',
				text: D.Lang.get('voted')
			}
		]
	}).append(this._buttonContainer);
};

D.SayEventRateSpecial.prototype.rate = function(){
	D.Say.click(this._item.id);
	var rpc = new RPC('/rate/rq/app.php');
	rpc.send(
		'rateSpecial',
		{
			pid:this._data.id
		},
		this._rate,
		this
	);
};

D.SayEventRateSpecial.prototype._rate = function(){
	if( this._buttonNode ){
		this._voted = true;
		clearNode(this._overlay);
		this._drawActions();
	}
};

D.SayEventRateSpecial.prototype.onRecommend = function(){
	if( this._buttonNode ){
		this._buttonNode.remove();
	}
};

D.SayEventRateSpecial.prototype.comment = function(focusForm){
	var url = this._data.url + ( focusForm ? '#addComment' : '' );
	var get = new Get('/stats/click.php');
	get.add('key', 'say_feed_comment');
	get.add('url', url);
	document.location.href = get.toUrl();
	return false;
};

D.SayItem.prototype._events[81] = D.SayEventRateSpecial;

// --- event/ratespecial.js ---

// +++ event/saypic.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @param {Object} par
 * @constructor
 */
D.SayEventSayPic = function( item, event, par ){
	this.event = event;
	this.item = item;
	addClassName( item.node, 'sayHasImage' );
	this.node = mkE({
		tag: 'div',
		className: 'sayPicNode'
	});
	if( event.item.video && event.item.type == 1 && event.item.videoReady ){
		this.clear = true;
		var videoPar = {
			poster: event.item.image.L,
			src: event.item.videoUrl,
			onContainerClick: D.closure(this, this.onVideoClick, par),
			onStart: D.closure(this, this.checkAddView),
			onTimeUpdate: D.closure(this, this.onTimeUpdate),
			width: event.item.w,
			height: event.item.h,
			stats: {
				uid: D.ID,
				pid: event.item.id,
				type: 8
			}
		};
		this.item._galleryItemNode = item._drawVideoPlayer(videoPar, par, this.node);
	}else if( event.item.video && (event.item.type == 1 || event.item.type == 3) && !event.item.videoReady ) {
		this.clear = true;
		this.item._galleryItemNode = item._drawLoadingVideo(this.node);
	}else if( event.item.video && event.item.type == 3 && event.item.videoReady ){
		this.clear = true;
		var gifPar = {
			poster: event.item.image.L,
			src: event.item.videoUrl,
			width: event.item.w,
			height: event.item.h,
			onOverlayClick: D.closure(this, this.onGifClick, par)
		};
		this.item._galleryItemNode = item._drawGifPlayer(gifPar, par, this.node);
	}else{
		this.clear = item._drawGalleryItem(event.item, par, this.node);
	}
	if( par.link ){
		item._drawExtLink(this.node);
		if( this.item._galleryItemNode && this.item._sayExtContainerNode ){
			this.item._galleryItemNode.prepend(this.item._sayExtContainerNode);
		}
	}
	if( event.item.video && event.item.videoReady === false ){
		mkE({
			tag: 'div',
			className: 'color1',
			text: D.Lang.get('say_video_encoding'),
			style: {
				marginTop: '10px'
			}
		}).append(this.node);
		// hide play button, when encoding
		$(item.node).find(".sayGalleryVideo").hide();
		this.subscribe();
	}
};
D.SayEventSayPic.prototype = new D.SayEvents;
D.SayEventSayPic.prototype.showText = true;
D.SayEventSayPic.prototype.comment = function(){
	var mStats = new DR.say.ClickStats();
	mStats.kw = 'say_feed_comment';
	mStats.call();
	return Say.slideShow(0, this.event.item.id);
};
D.SayEventSayPic.prototype.subscribe = function(){
	D.onLoad('chat', D.closure(this, function(){
		D.chat.subscribe('sayEncode_' + this.event.item.id, D.closure(this, this.onEncode));
	}));
};
D.SayEventSayPic.prototype.onEncode = function(data){
	if( !data.msg.pid ){
		D.reload();
		return;
	}
	var node = document.getElementById('sayPost' + data.msg.pid);
	if( !node ){
		return;
	}
	D.Say.rpc.send('item', {
		pid: data.msg.pid,
		fid: D.ID
	}, D.closure(this, function(re){
		var item = new D.SayItem(re.item, this.item.say);
		item.node.replace(node);
	}));
	D.onLoad('chat', D.closure(this, function(){
		D.chat.unsubscribe('sayEncode_' + this.event.item.id);
	}));
};
D.SayEventSayPic.prototype.onVideoClick = function(par, player){
	if(player.fullscreen) {
		player.playToggle();
	} else {
		player.pause();
		if( this.item.link && this.item.extLink ) {
			if (this.item.link.search('https://www.draugiem.lv/skatuve/') === 0) {
				window.location = D.Say.link(this.item.extLink, this.item.id)
				return;
			}
		}
		var contentLink = this.item._getContentLink(this.event.item, par);
		if ( contentLink && (this.item.user.type == D.USER_TYPE_BIZ || this.item.user.type == D.USER_TYPE_SAYHL) ) {
			var href = D.Say.link(this.item._getContentLinkHref(contentLink, par), this.item.id);
			window.open(href, '_blank');
			return;
		}
		var currentTime = player.player.currentTime;
		Say.slideShow(0, this.event.item.id, {
			startTime: currentTime,
			sayClick: this.item.id
		});
	}
};
D.SayEventSayPic.prototype.checkAddView = function(time){
	D.onLoad('DR.gallery', D.closure(this, this.addGalleryView));
};
D.SayEventSayPic.prototype.addGalleryView = function(){
	if( this.viewAdded ){
		return;
	}
	this.viewAdded = true;
	var m = new DR.gallery.Stats();
	m.key = 'say_video_autoplay';
	m.call()
};
D.SayEventSayPic.prototype.onTimeUpdate = function(time){
	if( time >= 3 && !this.galleryViewAdded ){
		this.galleryViewAdded = true;
		D.onLoad('DR.gallery', D.closure(this, function(){
			var apiCall = new DR.ApiCall;
			var m = new DR.gallery.Stats();
			m.key = 'say_video_3_sec';
			apiCall.addMethod(m);
			// if( this.item.highLighted ){
			// 	var m2 = new DR.gallery.Stats();
			// 	m2.key = 'say_video_3_sec_' + this.item.id;
			// 	apiCall.addMethod(m2);
			// }
			apiCall.call();
		}));
	}
};
D.SayEventSayPic.prototype.onGifClick = function(par, player){
	if( player.isPlaying ){
		player.pause(false);
	}
	var contentLink = this.item._getContentLink(this.event.item, par);
	if ( contentLink && (this.event.item.image && !par.ad || this.item.user.type == D.USER_TYPE_BIZ || this.item.user.type == D.USER_TYPE_SAYHL) ) {
		var href = D.Say.link(this.item._getContentLinkHref(contentLink, par), this.item.id);
		window.open(href, '_blank');
	} else {
		return Say.slideShow(0, this.event.item.id, {sayClick: this.item.id});
	}
};
D.SayItem.prototype._events[89] = D.SayEventSayPic;
// --- event/saypic.js ---

// +++ event/skin.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventSkin = function( item, event ) {
	this._item = item;
	this._data = event;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventSkinChanged',
		els: [
			this._skinInfo = mkE({
				tag: 'div',
				className: 'skinInfo'
			}),
			this._skinImage = mkE({
				tag: 'div',
				className: 'skinImage' + (this._data.skrape?' skrape':'')
			})
		]
	});

	this._text();

	switch( this._data.backgroundType ){
		case 'image':
			this._imageBackground();
			break;
		case 'background':
			this._solidBackground();
			break;
		default:
			break;
	}
};
D.SayEventSkin.prototype = new D.SayEvents;

D.SayEventSkin.prototype._text = function(){
	this._skinUrl = D.Say.link('/skins/?t=4&skinid=' + this._data.id, this._item.id);
	mkE({
		tag: 'span',
		els: [
			D.Lang.get(this._data.draugiem ? 'say_added_skin_to_draugiem_skins' : 'say_added_skin_to_shop').toLowerCase() + ': ',
			{
				tag: 'a',
				href: this._skinUrl,
				text: this._data.title
			}
		]
	}).append(this._skinInfo);
};

D.SayEventSkin.prototype._imageBackground = function(){
	mkE({
		tag: 'a',
		href: this._skinUrl,
		els: [
			{
				tag: 'img',
				src: this._data.image
			},
			{
				tag: 'div',
				className: 'skinOverlay'
			}
		]
	}).append(this._skinImage);
};

D.SayEventSkin.prototype._solidBackground = function(){
	mkE({
		tag: 'a',
		href: this._skinUrl,
		els: [
			{
				tag: 'div',
				className: 'solidSkin',
				style: {
					background: this._data.background
				}
			}
		]
	}).append(this._skinImage);
};

D.SayItem.prototype._events[20] = D.SayEventSkin;

// --- event/skin.js ---

// +++ event/skinchanged.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventSkinChanged = function( item, event ) {
	this._item = item;
	this._data = event;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventSkinChanged',
		els: [
			this._skinInfo = mkE({
				tag: 'div',
				className: 'skinInfo'
			}),
			this._skinImage = mkE({
				tag: 'div',
				className: 'skinImage' + (this._data.skrape?' skrape':'')
			})
		]
	});

	if ( this._data.special ) {
		this._specialText();
	} else {
		this._text();
		if( !this._data.user.id ){
			this._draugiemSkin();
		}else{
			this._authorText();
		}
	}

	switch( this._data.backgroundType ){
		case 'image':
			this._imageBackground();
			break;
		case 'background':
			this._solidBackground();
			break;
		default:
			break;
	}
};
D.SayEventSkinChanged.prototype = new D.SayEvents;

D.SayEventSkinChanged.prototype._specialText = function(){
	this._skinUrl = D.Say.link('/skins/?t=20', this._item.id);
	mkE({
		tag: 'span',
		els: [
			'Uzlika personisko profila ādiņu ar savu vārdu, ',
			{
				tag: 'a',
				href: this._skinUrl,
				text: 'ienāc arī Tu pēc savējās!'
			}
		]
	}).append(this._skinInfo);
};

D.SayEventSkinChanged.prototype._text = function(){
	this._skinUrl = D.Say.link('/stats/click.php?url=' + encodeURIComponent( '/skins/?t=4&skinid=' + this._data.id ) + '&key=skins_say_click_b', this._item.id);
	mkE({
		tag: 'span',
		els: [
			D.Lang.get('changedSkin') + ': ',
			{
				tag: 'a',
				href: this._skinUrl,
				text: htmlspecialchars_decode(this._data.title)
			}
		]
	}).append(this._skinInfo);
};

D.SayEventSkinChanged.prototype._draugiemSkin = function(){
	if (this._data.skrape) {
		mkE({
			tag: 'span',
			els: [
				', ' + D.Lang.get('author').toLowerCase() + ': ',
				{
					tag: 'a',
					text: 'Debesskrāpis',
					href: '/skrape?f=skin'
				}
			]
		}).append(this._skinInfo);
		return;
	}
	mkE({
		tag: 'span',
		text: ', ' + D.Lang.get('author').toLowerCase() + ': draugiem.lv'
	}).append(this._skinInfo);
};

D.SayEventSkinChanged.prototype._authorText = function(){
	mkE({
		tag: 'span',
		els: [
			', ' + D.Lang.get('author').toLowerCase() + ': ',
			{
				tag: 'a',
				href: this._data.user.url,
				text: this._data.user.title
			}
		]
	}).append(this._skinInfo);
};

D.SayEventSkinChanged.prototype._imageBackground = function(){
	mkE({
		tag: 'a',
		href: this._skinUrl,
		els: [
			{
				tag: 'img',
				src: this._data.image
			},
			{
				tag: 'div',
				className: 'skinOverlay'
			}
		]
	}).append(this._skinImage);
};

D.SayEventSkinChanged.prototype._solidBackground = function(){
	mkE({
		tag: 'a',
		href: this._skinUrl,
		els: [
			{
				tag: 'div',
				className: 'solidSkin',
				style: {
					background: this._data.background
				}
			}
		]
	}).append(this._skinImage);
};

D.SayItem.prototype._events[37] = D.SayEventSkinChanged;

// --- event/skinchanged.js ---

// +++ event/skinrate.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @constructor
 */
D.SayEventSkinRate = function( item, event ) {
	this._item = item;
	this._data = event;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventSkinChanged',
		els: [
			this._skinInfo = mkE({
				tag: 'div',
				className: 'skinInfo'
			}),
			this._skinImage = mkE({
				tag: 'div',
				className: 'skinImage'
			})
		]
	});

	this._text();
	if( this._data.user.id ){
		this._authorText();
	}

	switch( this._data.backgroundType ){
		case 'image':
			this._imageBackground();
			break;
		case 'background':
			this._solidBackground();
			break;
		default:
			break;
	}
};
D.SayEventSkinRate.prototype = new D.SayEvents;

D.SayEventSkinRate.prototype._text = function(){
	this._skinUrl = D.Say.link('/skins/?t=10&s=vote&skinid=' + this._data.id, this._item.id);
	mkE({
		tag: 'span',
		els: [
			D.Lang.get('ratedSkin') + ': ',
			{
				tag: 'a',
				href: this._skinUrl,
				text: this._data.title
			}
		]
	}).append(this._skinInfo);
};

D.SayEventSkinRate.prototype._authorText = function(){
	mkE({
		tag: 'span',
		els: [
			', ' + D.Lang.get('author').toLowerCase() + ': ',
			{
				tag: 'a',
				href: this._data.user.url,
				text: this._data.user.title
			}
		]
	}).append(this._skinInfo);
};

D.SayEventSkinRate.prototype._imageBackground = function(){
	mkE({
		tag: 'a',
		href: this._skinUrl,
		els: [
			{
				tag: 'img',
				src: this._data.image
			},
			{
				tag: 'div',
				className: 'skinOverlay'
			}
		]
	}).append(this._skinImage);
};

D.SayEventSkinRate.prototype._solidBackground = function(){
	mkE({
		tag: 'a',
		href: this._skinUrl,
		els: [
			{
				tag: 'div',
				className: 'solidSkin',
				style: {
					background: this._data.background
				}
			}
		]
	}).append(this._skinImage);
};

D.SayItem.prototype._events[36] = D.SayEventSkinRate;

// --- event/skinrate.js ---

// +++ event/profile_cover.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} item
 * @param {Object} event
 * @param {Object} par
 * @constructor
 */
D.SayEventProfileCover = function( item, event, par ){
	this.event = event;
	this.item = item;
	addClassName( item.node, 'sayHasImage' );
	this.node = mkE({
		tag: 'div',
		className: 'sayPicNode'
	});
	this.clear = item._drawGalleryItem(event.item, par, this.node);
	if( par.link ){
		item._drawExtLink(this.node);
		if( this.item._galleryItemNode && this.item._sayExtContainerNode ){
			this.item._galleryItemNode.prepend(this.item._sayExtContainerNode);
		}
	}
};
D.SayEventProfileCover.prototype = new D.SayEvents;
D.SayEventProfileCover.prototype.showText = true;
D.SayEventProfileCover.prototype.comment = function(){
	var mStats = new DR.say.ClickStats();
	mStats.kw = 'say_feed_comment';
	mStats.call();
	return Say.slideShow(0, this.event.item.id);
};
D.SayItem.prototype._events[98] = D.SayEventProfileCover;
// --- event/profile_cover.js ---

// +++ event/music.js +++
D.SayEventMusic = function( item, data ){

	this._data = data;
	this._item = item;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventMusic',
		els: [
			D.Lang.get('Pievienoja jaunu dziesmu').toLowerCase(),
			new D.Music.Player.Say(data.song, item)
		]
	});

};

D.SayItem.prototype._events[10] = D.SayEventMusic;

// --- event/music.js ---

// +++ event/musictop.js +++
D.SayEventMusicTop = function( item, data ){

	this._data = data;
	this._item = item;

	this.node = mkE({
		tag: 'div',
		className: 'SayEventMusic SayEventMusicTop',
		els: [
			D.Lang.get('Pievienoja jaunu dziesmu topam'),
			new D.Music.Player.Say(data.song, item, true)
		]
	});

};

D.SayItem.prototype._events[11] = D.SayEventMusicTop;

// --- event/musictop.js ---

// +++ event/zinas.js +++
/**
 * @extends D.SayEvents
 * @param {D.SayItem} say
 * @param {DR.zinas.struct.Item} item
 * @constructor
 */
D.SayEventZinas = function ( say, item ) {
	this.node = mkE({
		tag: 'div',
		className: 'SayEventZinas'
	});

	if( say.image ) {
		say._drawSayImage();
	}
	say._drawExtLink();

	mkE({
		tag: 'div',
		className: 'sayFollowContainer',
		els: [
			new T.Form.Button({
				caption: 'Apmeklēt sadaļu',
				href: '/stats/click.php?key=zinas_say_all&url=' + encodeURIComponent('/zinas')
			})
		]
	}).append(say._headingRightNode);

	addClassName(say._heading, 'heading-follow');

};

D.SayEventZinas.prototype = new D.SayEvents;

D.SayItem.prototype._events[101] = D.SayEventZinas;
// --- event/zinas.js ---

// +++ fake/rate.js +++
D.SayFakeRate = function(data, say){
	this.data = data;
	this.say = say;
	this.superVotes = +this.data.superVotes;

	var ext = 'pics=' + this.data.pids.join(',');

	this.node = mkE({
		tag: 'li',
		className: 'SayItem sayItemFakeRate',
		els: [
			this._content = mkE( {
				tag:'div',
				className:'commentContent',
				els:[
					{
						tag: 'div',
						className: 'pigsortHeader pigsortHeaderRate',
						els: [
							{
								tag: 'div',
								className: 'pigsortHeaderContent',
								els: [
									D.Lang.get('you_may_like') + ': ',
									D.LV ? {
										tag: 'a',
										href:this.data.url + '&picture=' + this.data.pids[0] + '&' + ext,
										els: [
											{
												tag: 'b',
												text: this.data.title
											}
										]
									} : D.Lang.get('rate_activities_' + this.data.sex)
								]
							},
							{
								tag: 'div',
								className: 'pigsortHeaderRight',
								els: [
									{
										tag:'a',
										className:'icon closeIcon',
										prop:{
											onclick: D.closure( this, this._close )
										}
									}
								]
							}
						]
					},
					this._body = mkE( {
						tag:'div',
						className:'body'
					} ) // div.body
				]
			} ) // div.commentContent
		]
	});

	this._pictures = mkE({
		tag: 'div',
		className: 'sayFakeRateItems'
	}).append(this._body);

	D.onLoad(['xRate','DR.rate'], D.closure(this, this.draw, ext));
};

D.SayFakeRate.rpc = new RPC('/rate/rq/app.php');

D.SayFakeRate.prototype = new mkE.Base();
D.SayFakeRate.prototype.items = [];
D.SayFakeRate.prototype._close = function(){
	D.SayFakeRate.rpc.send('closePigsort', {}, D.closure(this, function(){
		this.node.remove();
	}));
};
D.SayFakeRate.prototype.draw = function(ext){
	for( var i in this.data.pictures ){
		var picture = new D.SayFakeRateItem(this.data.pictures[i], ext, this);
		picture.append(this._pictures);
		if( i == 2){
			addClassName(picture.node, 'last');
		}
		this.items.push(picture);
	}
	this.updateSuperVotes();
	T.clear().append(this._pictures);
};
D.SayFakeRate.prototype.updateSuperVotes = function() {
	for( var i in this.items ){
		this.items[i].setSuperVote(this.superVotes);
	}
};

D.SayFakeRateItem = function(data, ext, owner){
	this._data = data;
	this._owner = owner;
	this.node = mkE({
		tag: 'div',
		className: 'sayFakeRateItem',
		els: [
			this._pictureCT = mkE({
				tag: 'a',
				className: 'picture' + ((data.w && data.h/data.w > 1)?' rollItLikeIts' + Math.floor(5 * data.h/data.w):''),
				href: data.url + '&' + ext,
				els: [
					{
						tag: 'div',
						className: 'img',
						style: {
							'background-image': "url(" + data.images.ll + ")"
						}
					}
				]
			}),
			T.clear(),
			{
				tag: 'div',
				className: 'info',
				els: [
					{
						tag: 'div',
						els: [
							{
								tag: 'a',
								innerHTML: D.shorten(data.title, 18),
								href: data.url + '&' + ext
							}
						]
					},
					{
						tag: 'div',
						className: 'votes',
						els: [
							{
								tag: 'b',
								text: data.votes
							},
							' ' + D.Lang.nget(data.votes, 'votes')
						]
					}
				]
			}
		]
	});

	if( D.ID && D.ID != data.uid  ){
		this.drawVoteOptions();
	}
};
D.SayFakeRateItem.prototype = new mkE.Base();
D.SayFakeRateItem.prototype.drawVoteOptions = function(){
	mkE({
		tag: 'div',
		className: 'pictureOverlay'
	}).append(this._pictureCT);
	this.voteOptions = mkE({
		tag: 'div',
		className: 'voteOptions'
	}).append(this._pictureCT);

	this.voteButton = mkE({
		tag: 'a',
		className: 'collageVote',
		els: [
			{
				tag: 'div',
				className: 'collageVoteIcon collageVoteIconStar'
			},
			{
				tag: 'div',
				className: 'collageVoteText',
				text: D.Lang.get('Balsot', 'xRate')
			}
		],
		onclick: D.closure(this, this.vote)
	}).append(this.voteOptions);

	this.superVoteButton = mkE({
		tag: 'a',
		className: 'collageVote',
		els: [
			{
				tag: 'div',
				className: 'collageVoteIcon collageVoteIconSuper'
			},
			{
				tag: 'div',
				className: 'collageVoteText',
				text: D.Lang.get('supervote', 'xRate')
			}
		],
		onclick: D.closure(this, this.vote, true)
	}).append(this.voteOptions);
};
D.SayFakeRateItem.prototype.voted = function(){
	mkE({
		tag: 'div',
		className: 'voted',
		text: D.Lang.get('Nobalsots', 'xRate')
	}).append(this.voteOptions);
};
D.SayFakeRateItem.prototype.vote = function( superVote ){
	superVote = superVote === true;
	if( !this._data.canVote || (this._mVote && this._mVote.processing) ){
		return;
	}
	this._mVote = new DR.rate.Vote();
	this._mVote.pid = this._data.id;
	this._mVote.superVote = superVote;
	this._mVote.onLoad = D.closure(this, this.onVote);
	this._mVote.onError = D.closure(this, this.resetButtons);
	this._mVote.call();

	if( this._mVote.superVote ){
		addClassName(this.superVoteButton, 'active');
		addClassName(this.voteButton, 'disabled');
	}else{
		addClassName(this.superVoteButton, 'disabled');
		addClassName(this.voteButton, 'active');
	}
};
D.SayFakeRateItem.prototype.resetButtons = function(){
	addClassName(this.superVoteButton, 'disabled');
	addClassName(this.voteButton, 'active');
};
D.SayFakeRateItem.prototype.onVote = function(){
	this._data.canVote = false;
	this.resetButtons();
	this.changeToVoted();
	if( this._mVote.superVote ){
		this._owner.superVotes--;
		this._owner.updateSuperVotes();
	}
};
D.SayFakeRateItem.prototype.changeToVoted = function(){
	clearNode(this.voteOptions);
	this.voted();
};
D.SayFakeRateItem.prototype.setSuperVote = function( superVotes ) {
	if( !this.superVoteButton ){
		return;
	}
	this.superVoteButton.setAttribute('title', superVotes ? D.Lang.get('vote_supervote','xRate') + ' (' + superVotes + ')' : D.Lang.get('no_supervotes','xRate'));
	if (!superVotes) {
		addClassName(this.superVoteButton, 'disabled');
		this.superVoteButton.onclick = function () {
		};
	}
};
// --- fake/rate.js ---

// +++ fake/pymk.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {DR.users.struct.PYMKMainRe} data
 */
D.Say.FakePYMK = Class(
	/**
	 * @lends {D.Say.FakePYMK#}
	 */
	{
		/**
		 * @param {DR.users.struct.PYMKMainRe} data
		 * @constructs
		 */
		__construct: function(data){
			this.node = mkE({
				tag: 'li',
				className: 'SayItem SayFakePYMK'
			});

			mkE({
				tag: 'div',
				className: 'header',
				els: [
					T.svgIcon({
						icon: 'pigsort-pymk',
						size: 24,
						color: true
					}),
					D.Lang.get('say_fake_pymk_title'),
					this._viewAll = mkE({
						tag: 'a',
						href: '/stats/click.php?key=pymk_pigsort_all&url=' + encodeURIComponent('/friends/?tab=3'),
						text: D.Lang.get('view_all') + ' »'
					})
				]
			}).append(this.node);

			if( data.count <= 4 ){
				this._viewAll.remove();
			}

			new D.PYMKScroll(data, 'pymk_pigsort_').append(this.node);
		}
	},
	mkE.Base
);
// --- fake/pymk.js ---

// +++ fake/zinas.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {DR.zinas.GetItems} m
 */
D.Say.FakeZinas = Class(
	/**
	 * @lends {D.Say.FakeZinas#}
	 */
	{
		/**
		 * @param {DR.zinas.GetItems} m
		 * @constructs
		 */
		__construct: function ( m ) {
			this.node = mkE({
				tag: 'li',
				className: 'SayItem SayFakeZinas',
				els: [
					{
						tag: 'div',
						className: 'header',
						els: [
							{
								tag: 'div',
								className: 'icon-draugiem'
							},
							{
								tag: 'div',
								className: 'text',
								els: [
									{
										tag: 'a',
										text: D.Lang.get('say_fake_zinas_title'),
										href: '/stats/click.php?key=zinas_pigsort_all&url=' + encodeURIComponent('/zinas')
									},
									D.Lang.get('say_fake_zinas_descr')
								]
							},
							new T.Form.Button({
								caption: 'Apmeklēt sadaļu',
								href: '/stats/click.php?key=zinas_pigsort_all&url=' + encodeURIComponent('/zinas')
							}),
							T.clear()
						]
					},
					new D.ZinasScroll(m)
				]
			});
		}
	},
	mkE.Base
);
// --- fake/zinas.js ---

// +++ fake/gifts.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {DR.gifts.GetJubilars} m
 */
D.Say.FakeGifts = Class(
	/**
	 * @lends {D.Say.FakeGifts#}
	 */
	{
		/** @type {DR.users.struct.UserDefault} */
		_jubilar: null,
		/**
		 * @param {DR.gifts.GetJubilars} m
		 * @constructs
		 */
		__construct: function ( m ) {
			this.jubilars = m.re.users;
			this.gifts = m.re.gifts;

			this.node = mkE({
				tag: 'li',
				className: 'SayItem SayFakeGifts'
			});

			D.addCSS('/gifts/colors.css');
			D.addLang('xSmsGifts');
			D.onLoad('DR.gifts', this._draw);
		},
		_draw: function () {
			this.wrapper = mkE({
				tag: 'div',
				className: 'wrapper',
				els: [
					this._jubilarNode = mkE({
						tag: 'div'
					}),
					this._listContainer = mkE({
						tag: 'div',
						className: 'box'
					}),
					{
						tag: 'a',
						className: 'icon closeIcon',
						prop: {
							onclick: D.closure(this, this._close)
						}
					}
				]
			}).append(this.node);

			this._mSend = new DR.gifts.SendGift();
			this._mSend.onLoad = this._mSendRe;

			this.nextJubilar();
		},
		nextJubilar: function () {
			this._jubilar = this.jubilars.shift();
			this.jubilars.push(this._jubilar);

			this._jubilarNode = mkE({
				tag: 'div',
				className: 'jubilar',
				els: [
					{
						tag: 'a',
						className: D.closure(this, function () {
							var re = ['profileImage', 'jubilar-image'];
							if( this._jubilar.online ) {
								re.push('online');
								re.push('profileOnline' + (this._jubilar.online === 'www' ? 'WWW' : 'IPHONE'));
							}
							return re.join(' ');
						})(),
						style: {
							backgroundImage: 'url(' + this._jubilar.image.small + ')'
						}
					},
					{
						tag: 'div',
						className: 'jubilar-info',
						els: [
							{
								tag: 'div',
								className: 'jubilar-info-title',
								els: [
									T.svgIcon({
										icon: this._jubilar.isBirthday ? 'birthday' : 'nameday'
									}),
									{
										tag: 'a',
										href: this._jubilar.url,
										text: this._jubilar.title
									},
									' ',
									{
										tag: 'span',
										text: this._jubilar.isBirthday ? 'svin šodien dzimšanas dienu' : 'svin šodien vārda dienu'
									}
								]
							},
							{
								tag: 'div',
								className: 'jubilar-info-descr',
								text: this._jubilar.isBirthday ? 'Apsveic draugu dzimšanas dienā, nosūtot kādu jauku dāvaniņu' : 'Apsveic draugu vārda dienā, nosūtot kādu jauku dāvaniņu'
							}
						]
					}
				]
			}).replace(this._jubilarNode);

			if( this._list ) {
				this._list.remove();
			}

			var gifts = [];
			if( this._jubilar.sex === 2 && this._jubilar.isBirthday ) {
				gifts = this.gifts.femaleBirthday;
			} else if( this._jubilar.sex === 2 && this._jubilar.isNameday ) {
				gifts = this.gifts.femaleNameday;
			} else if( this._jubilar.sex === 1 && this._jubilar.isBirthday ) {
				gifts = this.gifts.maleBirthday;
			} else if( this._jubilar.sex === 1 && this._jubilar.isNameday ) {
				gifts = this.gifts.maleNameday;
			}
			this._list = new D.Say.FakeGifts.List(gifts, this.sendGift).append(this._listContainer);
		},
		/** @param {DR.gifts.struct.ListItem} gift */
		sendGift: function ( gift ) {
			if( this._mSend.processing ) {
				return;
			}
			this._lastGift = gift;
			this._mSend.fids = [this._jubilar.id];
			this._mSend.allFriends = false;
			this._mSend.allJubilee = false;
			this._mSend.gid = gift.id;
			this._mSend.privacy = this._jubilar.privateOnly ? 2 : 1;
			this._mSend.ribbonColor = getRandomInt(0, 9);
			this._mSend.boxColor = getRandomInt(0, 19);
			this._mSend.captcha = '';
			this._mSend.text = gift.title;
			this._mSend.title = gift.description;
			this._mSend.creditCount = 0;
			this._mSend.fromSection = 'fake_gifts';
			this._mSend.call();
		},
		_resendGift: function () {
			if( this._lastGift ) {
				this.sendGift(this._lastGift);
				this._lastGift = false;
				return;
			}
			alert('Dāvana ir nosūtīta');
		},
		_mSendRe: function () {
			if( !this._mSend.re.ok && !empty(this._mSend.re.error) ) {
				switch( this._mSend.re.error ) {
					case 'wrong_captcha':
						window.location = '/gifts';
						return false;
					case 'no_gifts_allowed':
						alert(D.Lang.get("refuse_receive_smsgifts", 'xSmsGifts'));
						return false;
					case 'no_frfr_gift':
						alert(D.Lang.get("refuse_from_nofriends", 'xSmsGifts'));
						return false;
					case 'receiver_blocked_sender':
						alert(D.Lang.get("err_receiver_blocked_sender", 'xSmsGifts'));
						return false;
					case 'too_many_recipients':
						alert(D.Lang.get("too_many_recipients", 'xSmsGifts'));
						return false;
					case 'not_paid':
						D.pb('gifts_month', {
							callback: D.closure(this, function () {
								InfoBox.close();
								this._resendGift();
							})
						});
						return false;
					case 'exclusive_payment':
						D.pb('gifts3', {
							customId: this._mSend.re.next,
							callback: D.closure(this, function () {
								InfoBox.close();
								this._onSent();
							})
						});
						return false;
					case 'require_pin':
						window.location = '/gifts';
						return false;
					case 'not_enough_credits':
						alert(D.Lang.get('No more credits', 'xServices2'));
						return false;
					default:
						alert("Kļūda: " + this._mSend.re.error);
						return false;
				}
			}
			if( !this._mSend.re.ok && this._mSend.re.next ) {
				window.location = this._mSend.re.next;
				return;
			}
			this._onSent();
		},
		_onSent: function () {
			addClassName(this.wrapper, 'success');
			setTimeout(D.closure(this, function () {
				removeClassName(this.wrapper, 'success');
				if( this.jubilars.length > 1 ) {
					this.nextJubilar();
				} else {
					this._list.popSentGift();
				}
			}), 1000);
		},
		_close: function () {
			new RPC('/gifts/rq/app.php').send('closePigsort', {}, D.closure(this, function () {
				this.node.remove();
			}));
		}
	},
	mkE.Base
);

/**
 * @class
 * @extends mkE.Base
 */
D.Say.FakeGifts.List = Class(
	/**
	 * @lends {D.Say.FakeGifts.List#}
	 */
	{
		PR: 4,
		PG: 1,
		_currIndex: 0,
		_itemNodes: {},
		__construct: function ( gifts, onSelect ) {
			this.onSelect = onSelect;
			this.node = mkE({
				tag: 'div',
				className: 'box-list',
				els: [
					this._listNode = mkE({
						tag: 'ul',
						className: 'box-list-wrapper'
					})
				]
			});
			this._drawGifts(gifts);
		},
		popSentGift: function () {
			if( this._lastSentGift && this._itemNodes[this._lastSentGift.id] ) {
				this._itemNodes[this._lastSentGift.id].remove();
				this._scroll(0);
				this._lastSentGift = null;
			}
		},
		/** @param {DR.gifts.struct.ListItem[]} items */
		_drawGifts: function ( items ) {
			for( var i = 0; i < items.length; i++ ) {
				if ( i === 2 ) {
					this._addGiftCardsBox();
				}
				var gift = items[i];
				if( !gift.type || this._itemNodes[gift.id] ) {
					continue;
				}
				this._itemNodes[gift.id] = mkE({
					tag: 'li',
					className: 'box-list-item',
					onclick: D.closure(this, this._onSelectGift, gift),
					els: [
						{
							tag: 'div',
							className: 'box-list-item-image' + (gift.animated ? (' hoverClip steps' + gift.animated) : ''),
							style: {
								backgroundImage: 'url(' + (gift.animated ? gift.imageAnimated : gift.imageGM) + ')'
							}
						},
						{
							tag: 'div',
							className: 'box-list-item-title',
							text: gift.title
						},
						{
							tag: 'div',
							className: 'box-list-item-send',
							els: [
								new T.Form.Button({
									caption: 'Sūtīt'
								})
							]
						}
					]
				}).append(this._listNode);
			}
			this._addPrevNextCtrls();
		},
		_onSelectGift: function ( gift ) {
			this._lastSentGift = gift;
			this.onSelect(gift);
		},
		_scroll: function ( dir ) {
			this._currIndex -= dir * this.PR;
			removeClassName(this.prevBtn, 'disabled');
			removeClassName(this.nextBtn, 'disabled');
			this.nextBtnOverlay.style.display = '';
			if( this._currIndex <= 0 ) {
				this._currIndex = 0;
				addClassName(this.prevBtn, 'disabled');
			} else if( this._currIndex >= this._listNode.childNodes.length - this.PR ) {
				this._currIndex = this._listNode.childNodes.length - this.PR;
				addClassName(this.nextBtn, 'disabled');
				this.nextBtnOverlay.style.display = 'none';
			}
			this._listNode.style.left = (-this._listNode.childNodes[this._currIndex].offsetLeft) + 'px';
		},
		_onOverlayHover: function () {
			if( existsClassName(this.nextBtn, 'disabled') ) {
				return;
			}
			addClassName(this._listNode, 'toLeft');
		},
		_onOverlayHoverOut: function () {
			removeClassName(this._listNode, 'toLeft');
		},
		_addPrevNextCtrls: function () {
			if( !this.prevBtn ) {
				this.prevBtn = mkE({
					tag: 'div',
					className: 'prevNextBtn prevBtn disabled',
					els: [
						T.svgIcon({
							icon: 'arrow-1-le',
							size: 24,
							fill: false
						})
					],
					prop: {
						onclick: D.closure(this, this._scroll, 1)
					}
				}).append(this.node);
			}
			if( !this.nextBtnOverlay ) {
				this.nextBtnOverlay = mkE({
					tag: 'div',
					className: 'nextBtnOverlay',
					prop: {
						onmouseover: D.closure(this, this._onOverlayHover),
						onmouseout: D.closure(this, this._onOverlayHoverOut)
					}
				}).append(this.node);
			}
			if( !this.nextBtn ) {
				this.nextBtn = mkE({
					tag: 'div',
					className: 'prevNextBtn nextBtn',
					els: [
						T.svgIcon({
							icon: 'arrow-1-ri',
							size: 24,
							fill: false
						})
					],
					prop: {
						onclick: D.closure(this, this._scroll, -1),
						onmouseover: D.closure(this, this._onOverlayHover),
						onmouseout: D.closure(this, this._onOverlayHoverOut)
					}
				}).append(this.node);
			}
			this._scroll(0);
		},

		_addGiftCardsBox: function () {
			mkE({
				tag: 'li',
				className: 'box-list-item giftCardsBox',
				els: [
					{
						tag: 'a',
						href: '/services/?tab=giftcards_buy'
					},
					{
						tag: 'div',
						className: 'giftCardsTooltip',
						text: D.Lang.get('fake_gifts_giftcards_box_tt', 'xSmsGifts')
					}
				]
			}).append(this._listNode);
		}
	},
	mkE.Base
);

// --- fake/gifts.js ---
