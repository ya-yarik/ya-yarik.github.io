// +++ chat.js +++ 
"use strict";

D.chat = {

	CALL:{ chat:true },
	V:8,
	_id:new Date().getTime(),

	CONV_WIN_WIDTH:350,
	MAIN_WIN_WIDTH:250,
	HISTORY_LENGTH:50, // Msg pēc refreš
	HISTORY_LOAD:20,
	WRITING_TIMEOUT:5,
	AWAY_TIMEOUT:600,

	MAIL_OPT_SYSTEM:2, // leave
	MAIL_OPT_CHAT:8,
	MAIL_OPT_JSON:32,
	MAIL_OPT_SPAM:128,

	CMD_CONV_MAILS:108,
	CMD_AUTH:51,
	CMD_SS:111,
	CMD_READ:79,
	CMD_POPUP:85,
	CMD_JSON:87,
	CMD_API:117,

	CB_ONLINE:51,
	CB_OFFLINE:52,
	CB_IDLE:53,
	CB_SS:54,
	CB_MOBILE:55,
	CB_POPUP:56,
	CB_SERVER_MSG:57,
	CB_JSON:58,
	CB_JSON_CONV:59,
	CB_MSG:60,
	CB_UNREAD:61, // update badges
	CB_READ:62, // update readers
	CB_DEL_CONV:63,
	CB_EDIT:115,

	CONV_COLOR:[
		'#95b4da',
		'#c0d56e',
		'#ff9e57',
		'#f6c943',
		'#ceadd5',
		'#f8a0c1',
		'#97d3df'
	],

	cb_mapping:{
		51:'online',
		52:'offline',
		53:'idle',
		54:'subscriptionMessage',
		55:'isMobile',
		56:'popup',
		57:'serverMessage',
		58:'json',
		59:'jsonConv',
		60:'msg',
		61:'unread',
		62:'read',
		63:'delConv',
		115:'edit',
		125:'emo',
		126:'emo',
		130:'bizMsg',
		131:'bizUnread'
	},

	ts:0,
	autologin:false,

	reset:false,
	withSound:true,
	withOnlineEvents:true,
	withProfileNews:true,
	withGalleryStats:true,
	log:false,
	connected:false,
	rpc:new RPC('/messages/talk/app.php'),
	l:new D.Lang('xGlobal'),
	popup:false,
	_popup:false, // init
	/** @type {Object.<D.ChatUser>} */
	_online:{},
	_subscribeCallback:{},
	_users:{}, // cache
	/** @type {D.SortedMap.<D.ChatConvWin>} */
	wins:new D.SortedMap,
	/** @type {Object.<D.ChatWin>} */
	_wins:[],
	_galStatTimeout:null,
	_sounds:{},
	// for async msg API
	/** @type {Object.< Array.<DR.users.struct.User> >} */
	_msgsReaders:{},
	_msgsReadAllMid:0,

	minimizeAllWindows:function(){
		for( var k in this._wins ){
			this._wins[k].minimize();
		}
	},

	/**
	 * @param {Array} wins
	 * @returns {D.SortedMap}
	 */
	winsToSortedMap:function(wins){
		var sm = new D.SortedMap;
		for( var i = 0; i < wins.length; ++ i ){
			sm.set( wins[i].fid, wins[i] );
		}
		return sm;
	},

	onMsg:function( mail, conv ){
	},

	/**
	 * Global badge, total unread
	 * @param {Number} count
	 */
	onUnread:function(count){
	},

	/**
	 * izlasīja savu saraksti
	 * @param {D.chat.OnUnread} par
	 */
	onConvUnread:function(par){
	},

	/**
	 * saņēmējs izlasīja
	 * @param {DR.users.struct.User} user
	 * @param {D.chat.OnRead} par
	 */
	onConvRead:function( user, par ){
	},

	/**
	 * @param {DR.users.struct.User} user
	 * @param {{fid:Number}} par
	 */
	onWriting:function( user, par ){
	},

	onEdit:function( msg, conv ){
	},

	onOnline:function( uid, online ){
	},

	/**
	 * @param {{uid:number,fid:number,cid:number}} par
	 */
	onEmo:function(par){
	},

	unbindAll:function(){
		this.onMsg = D.doNothing;
		this.onUnread = D.doNothing;
		this.onConvUnread = D.doNothing;
		this.onConvRead = D.doNothing;
		this.onWriting = D.doNothing;
		this.onEdit = D.doNothing;
		this.onOnline = D.doNothing;
		this.onEmo = D.doNothing;
	},

	isOnline:function(uid){
		var o = this._online[uid];
		if(!o){
			return null;
		}
		return o.mobile ? 'mobile' : 'www';
	},

	fixHTTP:function(o){
		if( typeof o != 'object' ){
			return;
		}
		var rp = function( str, v ){
			return '//' + v
		};
		for( var k in o ){
			var v = o[k];
			switch( typeof v ){
				case 'object':
					this.fixHTTP(v);
					break;
				case 'string':
					if( v[0] == 'h' && v[4] == ':' ){
						try{
							v = v.replace( /^http:\/\/([a-z0-9]*\.draugiem\.lv)/, rp );
							v = v.replace( /^http:\/\/([a-z0-9]*\.ifrype\.com)/, rp );
							v = v.replace( /^http:\/\/(ifrype\.com)/, rp );
							v = v.replace( new RegExp( '^http://(' + location.host.replace( '.', '\\.' ) ) + ')', rp );
						} catch(e){}
					}
					o[k] = v;
					break;
			}
		}
	},

	/**
	 * @param v {string}
	 */
	docTitleAlert:function(v){
		if( !this.docTitle ){
			this.docTitle = document.title;
		}
		if( this.docTitleTimer ){
			clearInterval( this.docTitleTimer );
		}
		this.docTitleTimer = setInterval( function(){
			if( document.title == D.chat.docTitle ){
				document.title = v;
			} else {
				document.title = D.chat.docTitle;
			}
		}, 1000 );
	},

	docTitleAlertStop:function(){
		if( !D.chat.docTitle ){
			return;
		}
		clearInterval( this.docTitleTimer );
		document.title = D.chat.docTitle;
		delete D.chat.docTitle;
	},

	connect:function(){
		/**
		 * @type {D.chat.Socket}
		 * @public
		 */
		this._socket = new D.chat.Socket;
		this._socket.onConnect = D.closure( this, this._onConnect );
		this._socket.onDisconnect = D.closure( this, this._onDisconnect );
		this._socket.onData = D.closure( this, this._onData );
	},

	disconnect:function(){
		this._socket.disconnect();
	},

	reconnect:function(){
		this._socket.disconnect();
		this.connect();
	},

	init:function(){
		try{
			if( window.localStorage ){
				window.localStorage.setItem( 'chatId', this._id );
			}
		} catch(e){
		}
		this._popup = this.popup = ( document.location.pathname.indexOf('/messages/') == 0 );
		if( D.browser.browser == 'Explorer' && D.browser.version < 10 ){
			return;
		}
		if( this.node ){
			return;
		}
		this.node = mkE( {
			tag:'div',
			id:'chat'
		} );
		if( this.uid ){
			this.content = document.getElementById('chatContent');
			this.node.append( this.content );
		}
		this.connect();
		// galeriju statistikas notification
		var lastSeen = D.store.get('galStatVisitorsTime');
		if( lastSeen ){
			D.chat._galStatTimeout = setTimeout(D.chat._serverEvents.galStatsNotification, Math.max(0, lastSeen + 60000 - new Date().getTime()));
		}
		this._lastActivity = new Date().getTime();
		$(document).mousemove( D.closure( this, this._activity ) );
		$(document).keydown( D.closure( this, this._activity ) );
		this._sounds.win = mkE( {
			tag:'audio',
			prop:{
				src:D.PIMG + 'messages/sounds/win.mp3',
				volume:0.3
			}
		} );
		this._sounds.msg = mkE( {
			tag:'audio',
			prop:{
				src:D.PIMG + 'messages/sounds/msg.mp3',
				volume:0.3
			}
		} );
		this._sounds.read = mkE( {
			tag:'audio',
			prop:{
				src:D.PIMG + 'messages/sounds/read.mp3',
				volume:0.5
			}
		} );
		this._sounds.typing = mkE( {
			tag:'audio',
			prop:{
				src:D.PIMG + 'messages/sounds/typing2.mp3',
				volume:1
			}
		} );
	},

	isMaster:function(){
		try{
			if( window.localStorage ){
				return this._id == window.localStorage.getItem('chatId');
			}
		} catch(e){
		}
		return false;
	},


	_activity:function(){
		this._lastActivity = new Date().getTime();
	},

	isActive:function(){
		if( document.hidden ){
			return false;
		}
		return new Date().getTime() - this._lastActivity < 180 * 1000;
	},
	_onConnect:function(){
		this.connected = true;
		this._socket.send(
			D.chat.CMD_AUTH,
			{
				u:D.ID,
				t:D.chat.ts,
				h:D.chat.hash,
				i:D.chat.invis,
				p:D.chat.popup
			},
			D.closure( this, this._onAuth )
		);
		this._event('ready');
	},

	_onAuth:function(data){
		if( !data || !isset( data.online ) ){
			return;
		}
	// convert online format
		var online = [];
		for( var i = 0, l = data.online.length; i < l; i++ ){
			var r = data.online[i];
			online.push( {
				uid:r[0],
				last_active:r[1],
				mobile:!!r[2]
			} );
		}
		data.online = online;
		D.chat._event( 'login', [data] );
		for( var k in this._subscribeCallback ){
			this.subscribe( k, this._subscribeCallback[k] );
		}
		this.popup = !!data.popup;
	},

	_onDisconnect:function(){
		this.connected = false;
	},

	_onData:function( cmd, data ){
		switch(cmd){
			case 0: // callback
				return;
			default:
				if( this.cb_mapping[cmd] ){ // if data struct similar
					this._event( this.cb_mapping[cmd], [data] );
					return;
				}
				if( !data._ ){
					D.log('unknown callback cmd' + cmd, data);
				}
		}
	},

	_event:function( method, args ){
		args = args || [];
		setTimeout( D.closure( this, function(){
			var args_ = [];
			for( var i = 0; i < args.length; ++ i ){
				args_.push( args[i] );
			}
			if( this._events[method] ){
				this._events[method].apply( this, args_ );
				return;
			}
			D.log( 'Chat undefined event: ' + method, args_ );
		} ), 1 );
	},

	startConv:function(fid){
		var mConvMails = new DR.msg.ConvMails;
		mConvMails.pg = 1;
		mConvMails.fid = fid;
		mConvMails.select = D.ChatMsg.SELECT.concat(
			new DR.msg.select.Conv().topic().friend(),
			new DR.users.select.User().title(),
			new DR.msg.select.ConvMailsRe().conv().items()
		);
		var mUsersGet = new DR.users.Get;
		mUsersGet.uids = [fid];
		mUsersGet.select = [
			new DR.users.select.User().title()
		];
		var ac = new DR.ApiCall;
		ac.onLoad = D.closure( this, this._mConvMailsRe, fid, mConvMails, mUsersGet );
		ac.addMethod(mConvMails);
		if( fid > 0 ){
			ac.addMethod(mUsersGet);
		}
		ac.call( D.chat.CALL );
	},

	/**
	 * @param {Number} fid
	 * @param {DR.msg.ConvMails} mConvMails
	 * @param {DR.users.Get} mUsersGet
	 * @private
	 */
	_mConvMailsRe:function( fid, mConvMails, mUsersGet ){
		/** @type {D.ChatConvWin} win */
		var win;
		if( mConvMails.re ){
			D.chat.fixHTTP(mConvMails);
			/** @type {DR.msg.struct.Conv} */
			var conv = mConvMails.re.conv;
			win = this.wins.get(fid);
			if(win){
				win.focus();
				return;
			}
			var title;
			if( conv.friend ){
				title = conv.friend.title;
			} else {
				title = conv.topic || D.Lang.get('Group conversation');
			}
			win = new D.ChatConvWin( {
				conv:mConvMails.re.conv,
				fid:fid,
				title:title,
				his:( conv.count > 10 ? D.ChatConvWin.HIS_IS : D.ChatConvWin.HIS_NO )
			} );
			this.wins.set( fid, win );
			win.badge( conv.unread );
			win.focus();
			for( var i = 0; i < mConvMails.re.items.length; ++ i ){
				win._msgAppend( new D.ChatMsg( mConvMails.re.items[i] ) );
			}
			win.scrollToEndDelay();
			win.save();
			return;
		}
		if( mConvMails.error == 'conv not exists' && fid > 0 ){
			win = this.wins.get(fid);
			if(win){
				win.focus();
				return;
			}
			win = new D.ChatConvWin( {
				fid:fid,
				title:mUsersGet.re.users[fid].title,
				his:D.ChatConvWin.HIS_NO
			} );
			this.wins.set( fid, win );
			win.noMails();
			win.focus();
			return;
		}
		// tmp error
		D.console.error( mConvMails.error );
	},

	_jsonEvents:{
	}, // _jsonEvents

	_jsonEventsConv:{

		/**
		 * @param {{fid:Number,sender:Number,cid:Number}} par
		 */
		write:function(par){
			if( par.sender == D.ID ){
				return;
			}
			if( D.checkDoNothing( this.onWriting ) && !this.wins.get( par.fid ) ){
				return;
			}
			this.getUsersNew( [ par.sender ], D.closure( this, this._jsonEventsConv._writing, par ) );
		},

		/**
		 * @param {{fid:Number,sender:Number,cid:Number}} par
		 * @param {Array.<DR.users.struct.User>} users
		 */
		_writing:function( par, users ){
			var win = this.wins.get( par.fid );
			if(win){
				win.writing( users[ par.sender ] );
			}
			this.onWriting( users[ par.sender ], par );
		}

	},

	pingTimes:{},

	doFirst:function( prefix, id ){
		var str = prefix + String(id);
		var key = 'char_first';
		try{
			var v = D.JSON.decode( localStorage.getItem(key) || '{}' );
			if( v[str] ){
				return false;
			}
			var vn = {};
			vn[str] = D.TIME;
			for( var k in v ){
				if( D.TIME - v[k] < 30 ){
					vn[k] = v[k];
				}
			}
			var js = D.JSON.encode(vn);
			localStorage.setItem( key, js );
			return localStorage.getItem(key) === js;
		} catch(e){
		}
		return false;
	},

	ping:function(name){
		if( !this.isMaster() ){
			return;
		}
		name = name || 'msg';
		if( !this.withSound ){
			return;
		}
		var sound = this._sounds[name];
		if(!sound){
			D.log( 'sound not found', name );
			return;
		}
		this.pingTimes[name] = new Date().getTime();
		if( name == 'read' && this.pingTimes.msg && new Date().getTime() - this.pingTimes.msg < 1000 ){
			return;
		}
		if( !sound.play ){
			return;
		}
		try {
			sound.currentTime = 0;
			sound.play();
		} catch(e){
		}
	},

	soundPlay:function(name){
		if( !this.isMaster() ){
			return;
		}
		if( !this.withSound ){
			return;
		}
		switch(name){
			case 'typing':
				if( !D.chat.isActive() ){
					return;
				}
				break;
		}
		var sound = this._sounds[name];
		if(!sound){
			D.log( 'sound not found', name );
			return;
		}
		if( !sound.paused ){
			return;
		}
		try {
			sound.currentTime = 0;
			sound.play();
		} catch(e){
		}
	},

	soundStop:function(name){
		var sound = this._sounds[name];
		if(!sound){
			D.log( 'sound not found', name );
			return;
		}
		try{
			sound.pause();
		} catch(e){
		}
	},

	subscribe:function( key, callback, par ){
		par = par || {};
		if(!key){
			return false;
		}
		this._subscribeCallback[key] = callback;
		if( this.connected ){
			this._socket.send(
				this.CMD_SS,
				{
					key:key,
					add:true,
					notify:par.notify || false
				},
				D.doNothing
			);
		}
		return true;
	},

	unsubscribe:function( keyOrCallback ){
		var key;
		if( typeof keyOrCallback == "function" ){
			key = array_search( keyOrCallback, this._subscribeCallback, true );
		} else if( typeof keyOrCallback == "string" ){
			key = keyOrCallback
		} else {
			return false;
		}
		if(!key){
			return false;
		}
		delete this._subscribeCallback[key];
		if( this.connected ){
			this._socket.send(
				this.CMD_SS,
				{
					key:key,
					add:false
				},
				D.doNothing
			);
		}
		return true;
	},

	getSaved:function(k){
		var v = D.store.get( 'V', 'chat' );
		if( v != this.V ){
			return null;
		}
		return D.store.get( k, 'chat' );
	},

	_setSavedV:false,

	setSaved:function( k, v ){
		if( !this._setSavedV ){
			this._setSavedV = true;
			D.store.set( 'V', this.V, 'chat' );
		}
		D.store.set( k, v, 'chat' );
	},

	delSaved:function(k){
		return D.store.remove( k, 'chat' );
	},

	/**
	 * @deprecated
	 * @param {Array.<number>} uids
	 * @param {function} callback
	 */
	getUsers:function( uids, callback ){
		if( empty(uids) ){
			callback.call( this, [] );
			return;
		}
		var noCache = [];
		var users = {};
		for( var k = 0; k < uids.length; ++ k ){
			var uid = Number( uids[k] );
			if(!uid){
				continue;
			}
			if( this._users[uid] ){
				users[uid] = this._users[uid];
				continue;
			}
			var v = this.getSaved( 'u' + uid );
			if(v){
				users[uid] = this._users[uid] = v;
				continue;
			}
			noCache.push(uid);
		}
		if( empty(noCache) ){
			callback.call( this, users );
			return;
		}
		var mUsers = new DR.users.Get;
		mUsers.select = [
			new DR.users.select.User().id().title().type().url().image(),
			new DR.users.select.UserDefault().isFriend(),
			new DR.users.select.Image().icon()
		];
		mUsers.uids = noCache;
		var mRates = new DR.users.LinkSortRates;
		mRates.select = [
			new DR.users.select.LinkSortRatesRe().rates()
		];
		mRates.uids = noCache;
		var ac = new DR.ApiCall( {
			methods:[
				mUsers,
				mRates
			],
			onLoad:D.closure( this, this._getUsersApi, callback, users, mUsers, mRates )
		} );
		ac.call( D.chat.CALL );
		/**/
	},

	/**
	 * @param {Function} callback
	 * @param {Array} users
	 * @param {DR.users.Get} mUsers
	 * @param {DR.users.LinkSortRates} mRates
	 * @private
	 */
	_getUsersApi:function( callback, users, mUsers, mRates ){
		if (!mUsers.re) {
			callback.call(this, users);
			return;
		}
		for( var k in mUsers.re.users ){
			var u = mUsers.re.users[k];
			if(u){
				var user = {
					i:u.id,
					fr:u.isFriend || false,
					n:u.title,
					ns:u.title.split(' ')[0],
					type:u.type,
					rate:( mRates.re ? mRates.re.rates[ u.id ] : 0 ),
					uIc:u.image.icon.replace( /^http:/, '' )
				};
				users[ user.i ] = user;
				this.setSaved( 'u' + user.i, user );
			}
		}
		callback.call( this, users );
	},

/*
	_getUsers:function( callback, users, re ){
		if( !re.users ){
			return;
		}
		for( var k in re.users ){
			var user = re.users[k];
			user.uIc = user.uIc.replace( /^http:/, '' );
			users[ user.i ] = this._users[ user.i ] = user;
			this.setSaved( 'u' + user.i, user );
		}
		callback.call( this, users );
	},
*/

	/** @type {Object.<DR.users.struct.User>} */
	_usersNew:{},

	getUsersNew:function( uids, cb ){
		var usersInCache = {};
		var noCache = [];
		var mGetUsers = new DR.users.Get;
		mGetUsers.uids = [];
		for( var k in uids ){
			var uid = Number( uids[k] );
			if(!uid){
				continue;
			}
			if( this._usersNew[uid] ){
				usersInCache[uid] = this._usersNew[uid];
			} else {
				mGetUsers.uids.push(uid);
			}
		}
		if( empty( mGetUsers.uids ) ){
			cb.call( this, usersInCache );
			return;
		}
		mGetUsers.select = D.ChatMsg.SELECT;
		if( D.msg ){
			mGetUsers.select.concat( D.msg.MAIL_SELECT );
		}
		mGetUsers.onLoad = function(){
			D.chat.fixHTTP(mGetUsers);
			for( var k in mGetUsers.re.users ){
				D.chat._usersNew[k] = mGetUsers.re.users[k];
				usersInCache[k] = mGetUsers.re.users[k];
			}
			cb.call( this, usersInCache );
		};
		mGetUsers.call( D.chat.CALL );
	},


	/** @type Array.<D.ChatNotify> */
	_notifyItems:[],

	/**
	 * @param {D.ChatNotify} notify
	 */
	notify:function(notify){
		if( !this.wins.main ){
			return;
		}
		if( Section.last && window.SectionMessages && Section.last instanceof SectionMessages && Section.last._conv ){
			return;
		}
		var first = this._notifyItems[ count( this._notifyItems ) - 1 ];
		if(first){
			D.insertBefore( notify.node, first.node );
		} else {
			notify.node.append( this.notifyNode );
		}
		notify.expand();
		notify.fade();
		this._notifyItems.push(notify);
		if( !this._notifyItems[4] ){
			return;
		}
		var last = this._notifyItems.shift();
		last.node.remove();
	},

	/**
	 * @param {Number} fid
	 * @param {Number} [ID]
	 */
	readConv:function( fid, ID ){
		this._socket.send(
			this.CMD_READ,
			{
				ID:ID || 0,
				fid:String(fid)
			},
			D.doNothing
		);
	},

	/**
	 * @param {Number} fid
	 * @param {Object} par
	 * @param {Number} [ID]
	 */
	sendJsonConv:function( fid, par, ID ){
		if( !this._socket ){
			return;
		}
		this._socket.send(
			this.CMD_JSON,
			{
				ID:ID || 0,
				fid:String(fid),
				msg:D.JSON.encode(par)
			},
			D.doNothing
		);
	},

	/**
	 * @param uid
	 * @param par
	 */
	sendJson:function( uid, par ){
		if( this.log ){
			D.log( 'chat send JSON: ', par );
		}
		this._socket.send(
			this.CMD_JSON,
			{
				uid:Number(uid),
				msg:D.JSON.encode(par)
			},
			D.doNothing
		);
	},

	setPopup:function( is, override ){
		if( this.popup == is ){
			return;
		}
		if(override){ // from section.js
			this.popup = is;
			this._popup = is;
		} else {
			this.popup = Boolean(is) || this._popup;
		}
		if( this.connected ){
			this._socket.send(
				this.CMD_POPUP,
				{
					is:Boolean( this.popup )
				},
				D.doNothing
			);
		}
	},

	date:function(d){
		var now = new Date();
		if( now.getYear() == d.getYear() && now.getMonth() == d.getMonth() && now.getDate() == d.getDate() ){
			return this.l.get('today');
		}
		return String( d.getDate() ) + '. ' + this.l.get( 'm' + ( d.getMonth() + 1 ) );
	},

	sendWriting:function( uid, cid ){
		if(!uid){
			return;
		}
		if( this._sentWriting ){
			return;
		}
		D.chat.sendJson( uid, { type:'write', cid:cid } );
		this._sentWriting = true;
		setTimeout( D.closure( this, function(){
			this._sentWriting = false;
		} ), 2000 );
	},

	sendWritingConv:function( fid, ID ){
		if(!fid){
			return;
		}
		if( this._sentWriting ){
			return;
		}
		D.chat.sendJsonConv( fid, { type:'write' }, ID || 0 );
		this._sentWriting = true;
		setTimeout( D.closure( this, function(){
			this._sentWriting = false;
		} ), 2000 );
	},

	menuBadge:function(v){
		clearTimeout( this._menuBadgeTO );
		var badge = $('#menuMessages .badge');
		if( !v || v > 1000000 ){
			badge.remove();
			return;
		}
		if( badge[0] ){
			badge.html(v);
			return;
		}
		var p = $('#menuMessages a');
		if( !p[0] ){
			return;
		}
		this._menuBadgeTO = setTimeout( D.closure( this, function(){
			mkE( {
				tag:'span',
				className:'badge on',
				text:v
			} ).append( p[0] );
		} ), 200 );
	},

	menuBizBadge:function(uid, v){
		var pageBadge = v;
		if( !v ){
			delete D.MMenu.badges["bizpage" + uid];
		}else{
			if( v > 10 ){
				pageBadge = "10+";
			}
			D.MMenu.badges["bizpage" + uid] = {
				c: String(pageBadge)
			};
		}
		if( D.MMenu.items.pages && D.MMenu.items.pages[0] ){
			for( var i in D.MMenu.items.pages[0].items ){
				if( !D.MMenu.items.pages[0].items.hasOwnProperty(i) ){
					continue;
				}
				if( D.MMenu.items.pages[0].items[i].icon === "bizpage" + uid ){
					D.MMenu.items.pages[0].items[i].badge = pageBadge;
					break;
				}
			}
		}
		D.MMenu.bizBadge();
	},

	remove:function(){
		this._socket.disconnect();
		this.node.remove();
	}

};
// --- chat.js --- 
// +++ socket.js +++ 
/**
 * @class
 */
D.chat.Socket = Class(
	/**
	 * @lends {D.chat.Socket#}
	 */
	{
		_callbacks:{},
		_callbTime:{},
		_callbacksId:0,
		/** @type {ArrayBuffer} */
		_arrayBuffer:null,
		connected:false,
		reconnect:true,
		onConnect:D.doNothing,

		__construct:function(){
			this.connect();
			$(window).bind( 'beforeunload', this.disconnect );
			this._pingInterval = setInterval( this._ping, D.DEV ? 10000 : 30000 );
		},

		isNative:function(){
			return Boolean( window.WebSocket && window.ArrayBuffer && window.DataView );
		},

		_fallback:function(){
			//TODO
		},

		connect:function(){
			if( !this.isNative() ){
				this._fallback();
				return;
			}
			var rc = this.reconnect;
			this.disconnect();
			this.reconnect = rc;

			this._ws = new WebSocket("wss://wss.ifrype.com/");
			this._ws.binaryType = 'arraybuffer';
			if( D.DEV_NAME == 'z' ){
				//this._ws = new WebSocket("ws://213.175.75.45:20000/");
				//this._ws = new WebSocket("ws://213.175.75.165:20109/");
			}
			this._ws.onopen = this._onConnect;
			this._ws.onclose = this._onDisconnect;
			this._ws.onmessage = this._wsOnMessage;
			this._ws.onerror = D.closure( this, function(e){
				D.console.error(e);
				if( this.connected && this._ws.readyState != 1 ){
					this._onDisconnect();
				}
			} );
		},

		_reconnect:function(){
			if( this._ws ){
				this.connected = false;
				try{
					this._ws.close();
				} catch(e){
				}
			}
			this.connect();
		},

		_onConnect:function(){
			this.connected = true;
			D.log('chat connect');
			this.onConnect();
		},

		onDisconnect:D.doNothing,

		_onDisconnect:function(){
			this.connected = false;
			D.log('chat disconnect');
			if( this.reconnect ){
				setTimeout( this._reconnect, 1000 + Math.random() * 1000 );
			}
			this.onDisconnect();
		},

		_sendStr:function( cmd, str ){
			if( !window.Blob ){
				return;
			}
			var strBlob = new Blob([str]);
			var b = new ArrayBuffer(6);
			var w = new DataView(b);
			w.setUint32( 0, strBlob.size + 6, true );
			w.setUint16( 4, cmd, true );
			try{
				this._ws.send( new Blob( [ b, strBlob ] ) );
			} catch(e){
				D.console.error(e);
			}
		},

		send:function( cmd, data, callback ){
			if( !this.connected ){
				return;
			}
			if( callback || D.DEV ){
				data._ = ++ this._callbacksId;
				this._callbTime[ data._ ] = new Date().getTime();
			}
			if(callback){
				this._callbacks[ data._ ] = callback;
			}
			this._sendStr( cmd, D.JSON.stringify(data) );
		},

		_ping:function(){
			if( !this.connected ){
				return;
			}
			var p = {};
			if( !D.chat.isActive() || ( ( new Date().getTime() - D.mouseTime ) / 1000 > 600 ) ){
				p.afk = true;
			}
			this.send( 2, p );
		},

		disconnect:function(){
			this.reconnect = false;
			if( !this.connected ){
				return;
			}
			if( !this._ws ){
				return;
			}
			this._ws.close();
		},

		/**
		 * @param {number} cmd
		 * @param {string} str
		 * @private
		 */
		_onRecv:function( cmd, str ){
			var data = D.JSON.decode(str);
			if( data && data._ ){
				var cb = data._;
				//D.log( 'cb:' + cmd, str, + ( new Date().getTime() - this._callbTime[cb] ) + 'ms' );
				//D.log( ( new Date().getTime() - this._callbTime[cb] ) + 'ms'  );
				delete this._callbTime[cb];
				if( this._callbacks[cb] ){
					this._callbacks[cb](data);
					delete this._callbacks[cb];
				}
			} else {
				//D.log( 'cb:' + cmd, str );
			}
			if( typeof data == 'object' ){
				data.master = D.chat.isMaster(); //( str[ str.length - 1 ] == "\n" );
			}
			this.onData( cmd, data );
		},

		onData:function( cmd, data ){
		},

		_wsOnMessage:function(e){
			//var reader = new FileReader();
			//reader.onload = D.closure( this, this._wsOnMessageData, reader );
			//reader.readAsArrayBuffer( e.data );
			this._wsOnMessageData( e.data );
		},

		_wsOnMessageData:function(result){
			//D.log( 'rec:', reader.result.byteLength );
			if( this._arrayBuffer ){
				this._arrayBuffer = D.chat.Socket.appendBuffer( this._arrayBuffer, result );
				//D.log( 'after append', this._arrayBuffer.byteLength );
			} else {
				this._arrayBuffer = result;
			}
			var n = 0;
			do{
				if( ++n == 100 ){
					D.console.error('loop');
					//this._arrayBuffer = null;
					return;
				}
				var b = this._arrayBuffer;
				if( b.byteLength < 5 ){
					D.log( 'received: ' + this._arrayBuffer.byteLength + '/5' );
					return;
				}
				var w = new DataView(b);
				var cmd = w.getUint8(0);
				var l = w.getUint32( 1, true );
				if( b.byteLength < l ){
					//D.log( 'received: ' + this._arrayBuffer.byteLength + '/' + l );
					return;
				}
				var buf = D.chat.Socket.ab2str( b.slice( 5, l ) );
				this._arrayBuffer = b.slice( l, b.byteLength );
				this._onRecv( cmd, buf );
				if( !this._arrayBuffer.byteLength ){
					this._arrayBuffer = null;
					return;
				}
				D.log( 'not proc:', this._arrayBuffer.byteLength );
			} while( this._arrayBuffer.byteLength );
		}

	}
);

D.chat.Socket.ab2str = function(buf){
	if(window.TextDecoder instanceof Function){
		this._textDecoder = this._textDecoder || new TextDecoder('utf-8');
		try{
			return this._textDecoder.decode(buf);
		} catch(e){}
	}
	var re = String.fromCharCode.apply( null, new Uint8Array(buf) );
	return decodeURIComponent(escape(re));
};

D.chat.Socket.str2ab = function(str) {
  var buf = new ArrayBuffer( str.length * 2 ); // 2 bytes for each char
  var bufView = new Uint16Array(buf);
  for( var i = 0, strLen = str.length; i < strLen; i++ ){
    bufView[i] = str.charCodeAt(i);
  }
  return buf;
};

D.chat.Socket.appendBuffer = function( buffer1, buffer2 ){
  var tmp = new Uint8Array( buffer1.byteLength + buffer2.byteLength );
  tmp.set( new Uint8Array(buffer1), 0 );
  tmp.set( new Uint8Array(buffer2), buffer1.byteLength );
  return tmp.buffer;
};

// For IE10
if( window.ArrayBuffer && !ArrayBuffer.prototype.slice ){
  ArrayBuffer.prototype.slice = function (begin, end) {
    var len = this.byteLength;
    begin = (begin|0) || 0;
    end = end === (void 0) ? len : (end|0);

    // Handle negative values.
    if (begin < 0) begin = Math.max(begin + len, 0);
    if (end < 0) end = Math.max(end + len, 0);

    if (len === 0 || begin >= len || begin >= end) {
      return new ArrayBuffer(0);
    }

    var length = Math.min(len - begin, end - begin);
    var target = new ArrayBuffer(length);
    var targetArray = new Uint8Array(target);
    targetArray.set(new Uint8Array(this, begin, length));
    return target;
  };
}
// --- socket.js --- 
// +++ events.js +++ 
/**
 * @this {D.chat}
 */
D.chat._events = {

	log:function(str){
		if( this.log ){
			D.log(str);
		}
	},

	ready:function(){
		if( this.reset ){
			D.store.remove('chat');
		}
		if( !this.wins.main ){
			this.wins.main = new D.ChatMainWin;
		}
		this.wins.main.icon('');
		$(document).trigger('chat.loaded');
	},

	login:function(o){
		if( !o || !isset( o.online ) ){
			return;
		}
		/** @type {Object.<D.ChatUser>} */
		this._online = {};
		for( var k = 0, l = o.online.length; k < l; k++ ){
			var online = o.online[k];
			var user = new D.ChatUser( online.uid, online.last_active );
			user.mobile = online.mobile;
			this._online[ online.uid ] = user;
		}
		if( !this.wins.main ){
			return;
		}
		this.wins.main.drawOnline();
		if( this.offline ){
			return;
		}
		this.wins.main.icon('onlineWWW');
		var wins = this.getSaved('wins') || [];
		for( var i = 0; i < wins.length; ++ i ){
			var data = wins[i];
			var fid = data.fid;
			if( this.wins.get(fid) ){
				continue;
			}
			var win = new D.ChatConvWin( {
				conv:data.conv,
				fid:fid,
				uid:( data.uid || 0 )
			} );
			win.restore(data);
			if( fid > 0 && this._online[fid] ){
				win.icon( this._online[fid].icon() );
			}
			D.chat.wins.set( fid, win );
		}
	},

	online:function(par){
		var uid = par.uid;
		if( this.offline ){
			return;
		}
		var notify = false;
		var redraw = false;
		var user = this._online[uid];
		if(user){
			if( user.mobile != par.mobile ){
				redraw = true;
			}
		} else {
			user = this._online[uid] = new D.ChatUser(uid);
			notify = true;
			redraw = true;
		}
		user.mobile = par.mobile;
		user.status( D.ChatUser.STATUS_ONLINE );
		if( redraw && D.chat.wins.main ){
			D.chat.wins.main.drawOnline();
		}
		var win = this.wins.get(uid);
		if(win){
			win.icon( user.icon() );
		}
		if( notify && D.chat.withOnlineEvents ){
			D.chat.getUsers( [uid], D.closure( this, function(users){
				if( !users[uid] ){
					return;
				}
				var notify = new D.ChatNotify;
				notify.onclick = function(){
					D.chat.startConv(uid);
					D.chat.rpc.send(
						'clickOnlineNotify',
						{},
						function(){}
					);
				};
				mkE( {
					tag:'a',
					href:'/user/' + uid + '/',
					text:users[uid].n,
					className:'chatNotifyUser',
					prop:{
						onclick:function(){
							return false;
						}
					}
				} ).append(notify);
				mkE( {
					tag:'div',
					text:D.chat.l.get('chat User come online')
				} ).append(notify);
				D.chat.notify(notify);
			} ) );
		}
		D.chat.wins.each( function(){
			/** @this {D.ChatConvWin} */
			this.online( uid, par.mobile ? 'mobile' : 'www' );
		} );
		this.onOnline( uid, par.mobile ? 'mobile' : 'www' );
	},

	idle:function(uid){
		var user = this._online[uid];
		if(user){
			user.status( D.ChatUser.STATUS_AWAY );
		}
		var win = this.wins.get(uid);
		if(win){
			win.icon('onlineInvisible');
		}
		D.chat.wins.each( function(){
			/** @this {D.ChatConvWin} */
			//this.online( uid, 'idle' );
		} );
	},

	offline:function(uid){
		var user = this._online[uid];
		if( user && user.node ){
			user.node.remove();
		}
		delete this._online[uid];
		if( D.chat.wins.main ) {
			D.chat.wins.main.drawOnline();
		}
		var win = this.wins.get(uid);
		if(win){
			win.icon('');
		}
		D.chat.wins.each( function(){
			/** @this {D.ChatConvWin} */
			this.online( uid, '' );
		} );
		this.onOnline( uid, '' );
	},

	isMobile:function(par){
		var user = this._online[ par.uid ];
		if(user){
			user.mobile = par.mobile;
			user.status( D.ChatUser.STATUS_ONLINE );
			D.chat.wins.main.drawOnline();
		}
	},

	popup:function(is){
		this.popup = Boolean(is);
	},

	subscriptionMessage:function(par){
		par.msg = D.JSON.decode( par.msg );
		D.log(par);
		if( this._subscribeCallback[ par.kw ] ){
			this._subscribeCallback[ par.kw ](par);
		}
	},

	serverMessage:function(par){
		par.data = D.JSON.decode( par.msg );
		D.log( par.data );
		if( !par.data || !par.data.t ){
			return;
		}
		if(par.data.DEV && !D.DEV){
			return;
		}
		if( this._serverEvents[ par.data.t ] ){
			this._serverEvents[ par.data.t ].call( this, par.data );
			return;
		}
		D.console.error( 'Unknown server event: ', par.data.t, par.data );
	},

	msg:function(par){
		this.menuBadge( par.unread );
		this._msgsReaders[ par.mail.id ] = [];
		var m = new DR.msg.GetMail;
		m.select = D.ChatMsg.SELECT;
		if( D.msg ){
			m.select = m.select.concat( D.msg.MAIL_SELECT );
		}
		m.mid = par.mail.id;
		m.onLoad = D.closure( this, D.chat._events._msg, m, par );
		//m.call( D.chat.CALL );
		var ac = new DR.ApiCall;
		ac.addMethod(m);
		if( D.chat.wins.main && D.chat.wins.main.open() ){
			D.chat.wins.main.lastConvs.update(ac);
		}
		ac.call( D.chat.CALL );
		this.onUnread( par.unread );
		if( par.mail.sender != D.ID || ( par.mail.opt & D.chat.MAIL_OPT_CHAT || par.mail.opt & D.chat.MAIL_OPT_SYSTEM ) ){
			this.onConvUnread( par.conv.fid );
		}
		D.chat.pingTimes.msg = new Date().getTime();
	},

	/**
	 * @param {DR.msg.GetMail} m
	 * @param {object} par
	 * @private
	 */
	_msg:function( m, par ){
		D.chat.fixHTTP(m);
		var mail = m.re.mail;
		var conv = m.re.conv;
		mail.readAll = ( mail.id == this._msgsReadAllMid );
		// async fix/update
		var readers = this._msgsReaders[ par.mail.id ];
		delete this._msgsReaders[ par.mail.id ];
		if( !empty(readers) ){
			for( var k = 0; k < readers.length; ++ k ){
				if( readers && readers[k].id != D.ID ){
					mail.readersUsersPreview.push( readers[k] );
				}
			}
			mail.readersCount += count(readers);
		}
		var notAlert = ( mail.sender == D.ID || this.popup || this.offline || conv.muted || mail.event instanceof DR.msg.struct.MailEventLeft );
		var w = function(){
			var win = this.wins.get( conv.fid );
			var newWin = false;
			if(!win){
				if(notAlert){
					return false;
				}
				win = new D.ChatConvWin( {
					conv:conv,
					fid:par.conv.fid,
					title:par.conv.topic || ( par.conv.fid > 0 ? mail.senderUser.title : D.Lang.get('Group conversation') ),
					his:( par.conv.count > 1 ? D.ChatConvWin.HIS_IS : D.ChatConvWin.HIS_NO )
				} );
				this.wins.set( par.conv.fid, win );
				newWin = true;
			}
			if( !this.popup ){
				win.badge( conv.unread ); // par.conv.unread
			}
			win.newMail( m.re );
			if( !( mail.options & D.chat.MAIL_OPT_SYSTEM ) && !conv.muted && D.chat.doFirst( 'm', mail.id ) ){
				this.ping( newWin ? 'win' : '' );
			}
			return true;
		};
		w.call(this);
		try{
			D.chat.onMsg( mail, conv );
		} catch(e){
			D.console.error(e);
		}
		if(!notAlert){
			if( conv.isGroup ){
				D.chat.docTitleAlert( D.chat.l.get( 'chat new message in conversation' ) + ( conv.topic ? ' "' + conv.topic + '"' : '' ) );
			} else {
				D.chat.docTitleAlert( mail.senderUser.title + ' ' + D.chat.l.get( 'chat send to you message' ) + '!' );
			}
		}
	},

	bizMsg:function(par){
		this.menuBizBadge( par.uid, par.unread );
		if( D.checkDoNothing( this.onMsg ) ){
			return;
		}
		this._msgsReaders[ par.mail.id ] = [];
		var m = new DR.msg.GetMail;
		m.uid = par.uid;
		m.select = D.ChatMsg.SELECT;
		if( D.msg ){
			m.select = m.select.concat( D.msg.MAIL_SELECT );
		}
		m.mid = par.mail.id;
		m.onLoad = D.closure( this, D.chat._events._bizMsg, m, par );
		var ac = new DR.ApiCall;
		ac.addMethod(m);
		ac.call( D.chat.CALL );
	},

	/**
	 * @param {DR.msg.GetMail} m
	 * @param {object} par
	 * @private
	 */
	_bizMsg:function( m, par ){
		D.chat.fixHTTP(m);
		var mail = m.re.mail;
		var conv = m.re.conv;
		mail.readAll = ( mail.id == this._msgsReadAllMid );
		// async fix/update
		var readers = this._msgsReaders[ par.mail.id ];
		delete this._msgsReaders[ par.mail.id ];
		if( !empty(readers) ){
			for( var k = 0; k < readers.length; ++ k ){
				if( readers && readers[k].id != D.ID ){
					mail.readersUsersPreview.push( readers[k] );
				}
			}
			mail.readersCount += count(readers);
		}
		try{
			this.onMsg( mail, conv, false );
		} catch(e){
			D.console.error(e);
		}
	},

	// read my conv
	/**
	 * @typedef {{unread:Number,fid:Number,cid:Number,spam:Boolean}} D.chat.OnUnread
	 */

	/**
	 * @param {D.chat.OnUnread} par
	 */
	unread:function(par){
		this.menuBadge( par.unread );
		if( par.fid ){ // read conv
			var win = this.wins.get( par.fid );
			if(win){
				win.badge(0);
				win.blink(false);
				if( par.spam ){
					win.close();
				}
				win.save();
			}
			this.onConvUnread(par);
		}
		this.onUnread( par.unread );
		this.docTitleAlertStop();
		if( D.chat.wins.main && D.chat.wins.main.open() ){
			D.chat.wins.main.lastConvs.update();
		}
	},

	bizUnread:function(par){
		this.menuBizBadge( par.uid, par.unread );
	},

	/**
	 * @param {D.chat.OnRead} par
	 */
	read:function(par){
		if( !par.unread ){
			this._msgsReadAllMid = par.mid;
		}
		if( !this.wins.get( par.fid || par.uid ) && D.checkDoNothing( this.onConvRead ) ){
			return;
		}
		// cleanup
		for( var k in this._msgsReaders ){
			if( par.mid < k ){
				continue;
			}
			var readers = this._msgsReaders[k];
			for( var i = 0; i < readers.length; ++ i ){
				if( readers[i].id == par.uid ){
					readers.splice( i, 1 );
					break;
				}
			}
			if( empty(readers) ){
				delete this._msgsReaders[k];
			}
		}
		this.getUsersNew( [ par.uid ], D.closure( this, D.chat._events._read, par ) );
	},

	/**
	 * @typedef {{uid:Number,mid:Number,cid:Number,fid:Number,mc:Number,unread:Number,cuid:Number}} D.chat.OnRead
	 */

	/**
	 * @param {D.chat.OnRead} par
	 * @param {Object.<DR.users.struct.User>} users
	 * @private
	 */
	_read:function( par, users ){
		var user = users[ par.uid ];
		if( this._msgsReaders[ par.mid ] ){
			this._msgsReaders[ par.mid ].push(user);
			return;
		}
		var win = this.wins.get( par.fid || par.uid );
		if(win){
			win.onRead( user, par );
		}
		this.onConvRead( user, par );
		if( par.uid != D.ID && par.cuid == D.ID && D.chat.doFirst( 'rm', par.mid ) ){
			D.chat.ping('read');
		}
	},

	/**
	 * @param {{fid:number,cid:number}} par
	 */
	delConv:function(par){
		var win = this.wins.get( par.fid );
		if(win){
			win.close();
		}
	},

	json:function(par){
		par.msg = D.JSON.decode( par.msg );
		var cb = this._jsonEvents[ par.msg.type ];
		if(!cb){
			D.log( 'Chat: unknow json event ', par );
			return;
		}
		cb.call( this, par );
	},

	jsonConv:function(par){
		par.msg = D.JSON.decode( par.msg );
		par.fid = par.fid || par.sender;
		var cb = this._jsonEventsConv[ par.msg.type ];
		if(!cb){
			D.log( 'Chat: unknow json conv event ', par );
			return;
		}
		cb.call( this, par );
	},

	edit:function(par){
		if( D.checkDoNothing( this.onEdit ) && !( this.wins.get( par.conv.fid ) && this.wins.get( par.conv.fid ).getMsg( par.mail.id ) ) ){
			return;
		}
		var mGetMail = new DR.msg.GetMail;
		mGetMail.uid = par.uid;
		mGetMail.mid = par.mail.id;
		mGetMail.select = D.ChatMsg.SELECT.concat(
			new DR.msg.select.Conv().id().fid()
		);
		if( D.msg ){
			mGetMail.select = mGetMail.select.concat( D.msg.MAIL_SELECT );
		}
		mGetMail.onLoad = D.closure( this, D.chat._events._edit, par, mGetMail );
		//mGetMail.call( D.chat.CALL );
		var ac = new DR.ApiCall;
		ac.addMethod( mGetMail );
		if( D.chat.wins.main && D.chat.wins.main.open() ){
			D.chat.wins.main.lastConvs.update(ac);
		}
		ac.call( D.chat.CALL );
	},

	/**
	 * @param par
	 * @param {DR.msg.GetMail} mGetMail
	 * @private
	 */
	_edit:function( par, mGetMail ){
		D.chat.fixHTTP(mGetMail);
		var conv = mGetMail.re.conv;
		var win = this.wins.get( conv.fid );
		if(win){
			win.onEdit( mGetMail.re.mail );
		}
		this.onEdit( mGetMail.re.mail, mGetMail.re.conv );
	},
	
	emo:function(par){
		par.emotions = [];
		for( var i = 0; i < par.emo.length; ++ i ){
			var r = par.emo[i];
			var e = new DR.msg.struct.Emo;
			e.emo = r.emo;
			e.count = r.count;
			e.my = r.my;
			par.emotions.push(e);
		}
		delete par.emo;
		var win = D.chat.wins.get( par.fid );
		if(win){
			win.onEmo(par);
		}
		D.chat.onEmo(par);
	}

};// --- events.js --- 
// +++ events_server.js +++ 
/**
 * @this {D.chat}
 * @private
 */
D.chat._serverEvents = {

	logout:function(){
	},

	login:function(){
	},

	sayAdd:function(par){
		if(!window.say){
			return;
		}
		if( par.uid != D.ID ){
			/** @var say D.Say */
			say.newPost(par);
		}
	},

	sayLike:function(par){
		if(!window.say){
			return;
		}
		var item = window.say._items[ par.id ];
		if ( !item ) {
			return;
		}
		item._likeEvent(par);
	},

	sayDislike:function(par){
		if(!window.say){
			return;
		}
		var item = window.say._items[ par.id ];
		if ( !item ) {
			return;
		}
		item._dislikeEvent(par);
	},

	sayRec:function(par){
		if( !window.say || say.method != 'getFriendPosts' || say.worec ){
			return;
		}
		if( par.uid != D.ID ){
			/** @var say D.Say */
			say.newRecommend(par);
		}
	},

	sayDel:function(par){
		if( !window.say ){
			return;
		}
		var item = window.say._items[ par.id ];
		if(item){
			item.remove();
		}
		if( say._newItems ){
			say._newItems.removeById( par.id );
		}
	},

	achievement: function(par) {
		var notify = new D.ChatNotify;
		notify.persistent = true;
		mkE( {
			tag:'div',
			className:'chatEventIcon medal2Icon'
		} ).append(notify);
		mkE( {
			tag:'a',
			className: 'chatNotifyUser',
			href: par.href,
			text: par.title
		} ).append(notify);
		mkE( {
			tag:'div',
			className:'clear'
		} ).append(notify);
		mkE( {
			tag:'div',
			className:'color2',
			innerHTML:par.text
		} ).append(notify);
		var p = new T.Form.ButtonPar;
		mkE({tag:'hr'}).append(notify);
		new T.Form.Button({
			caption: 'Apskatīt',
			color: 'submit',
			href: par.href
		}).append(notify);
		new T.Form.Button({
			caption: 'Aizvērt',
			color: 'link',
			onclick: function(){notify.hide()}
		}).append(notify);
		D.chat.notify(notify);
	},

	tele2Iesaki: function (par) {
		if (!window.tele2IesakiApp) {
			return;
		}
		tele2IesakiApp._onMessage(par);
	},

	invitationsTotal: function (par) {
		D.invitations._onChatEvent(par);
	},

	galleryStats: function (par) {
		if( !D.chat.withGalleryStats || (window.location && window.location.pathname.substr(0, 8) == '/gallery') ){
			return;
		}
		var users = D.store.get('galStatVisitors') || {};
		users[par.user.id] = par.user;
		D.store.set('galStatVisitors', users);
		if( !D.chat._galStatTimeout ){
			D.store.set('galStatVisitorsTime', new Date().getTime());
			D.chat._galStatTimeout = setTimeout(D.chat._serverEvents.galStatsNotification, 60000);
		}
	},

	galStatsNotification: function(){
		var notify = new D.ChatNotify;
		mkE({
			tag: 'div',
			className: 'chatEventIcon galleryStatsIcon'
		}).append(notify);
		var users = D.store.get('galStatVisitors') || {};
		var viewers = Object.keys(users).length;
		var text = '';
		if( viewers > 1 ){
			text = D.chat.l.nget(viewers, 'currently_x_users');
		}else{
			var user = reset(users);
			text = htmlspecialchars_decode(user.title);
		}
		mkE({
			tag: 'a',
			className: 'chatNotifyUser',
			href: '/stats/click.php?key=gal_stats_from_notif&url=' + encodeURIComponent(D.me.url + 'gallery/?tab=8'),
			text: text
		}).append(notify);
		mkE({
			tag: 'div',
			className: 'color2',
			innerHTML: (viewers > 1 ? D.chat.l.get('viewing_your_galleries_2') : D.chat.l.get('viewing_your_galleries') )
		}).append(notify);
		mkE({
			tag: 'div',
			className: 'clear'
		}).append(notify);
		notify.onclick = function(){
			window.location.href = '/stats/click.php?key=gal_stats_from_notif&url=' + encodeURIComponent(D.me.url + 'gallery/?tab=8');
		};
		notify.node.style.cursor = 'pointer';
		D.chat.notify(notify);
		D.store.set('galStatVisitors', {});
		D.store.remove('galStatVisitorsTime');
		D.chat._galStatTimeout = null;
	},

	galleryStatsClear: function (par) {
		var users = D.store.get('galStatVisitors') || {};
		D.store.set('galStatVisitors', users);
		if( par.fid && users[par.fid] ){
			delete users[par.fid];
			if( empty(users) && D.chat._galStatTimeout ){
				clearTimeout(D.chat._galStatTimeout)
			}
		}
	},

	profileVisitor: function(event){
		if( event.badge ){
			var element = $('#menuVisitors').find('> a');
			element.find('.badge').remove();
			element.append(event.badge);
		}
		var notify = new D.ChatNotify();
		mkE({
			tag: 'div',
			className: 'chatEventIcon ' + (event.hasService ? 'lookingProfileBg' : 'lookingProfileIcon'),
			style: (event.hasService ? {backgroundImage: 'url(' + event.user.image + ')'} : {})
		}).append(notify.node);
		if( event.hasService ){
			mkE({
				tag: 'a',
				className: 'chatNotifyUser',
				href: '/stats/click.php?key=visitors_notif_1&url=' + encodeURIComponent(event.user.url),
				text: event.user.title
			}).append(notify.node);
			mkE({
				tag: 'div',
				className: 'color2',
				innerHTML: D.chat.l.get('looking_at_your_profile')
			}).append(notify.node);
		}else{
			mkE({
				tag: 'div',
				className: 'color2',
				innerHTML: D.chat.l.get('profile_visit') + ' - ' + D.chat.l.get('profile_visit_' + getRandomInt(1, 3)),
				style: {
					paddingTop: '1px'
				}
			}).append(notify.node);
		}
		mkE({
			tag: 'div',
			className: 'clear'
		}).append(notify.node);
		notify.onclick = function(){
			if( event.hasService ){
				window.location.href = '/stats/click.php?key=visitors_notif_1&url=' + encodeURIComponent(event.user.url);
			}else{
				window.location.href = '/stats/click.php?key=visitors_notif_0&url=' + encodeURIComponent('/visitors/');
			}
		};
		notify.node.style.cursor = 'pointer';
		D.chat.notify(notify);
	},

	galleryEvents: {},

	galleryPublish: function(event){
		if( D.chat._serverEvents.galleryEvents[event.aid] ){
			return;
		}
		D.chat._serverEvents.galleryEvents[event.aid] = true;
		var rpc = new RPC('/gallery/rq/app.php');
		rpc.send('getAlbumInfo', {
			aid: event.aid
		}, D.chat._serverEvents._galleryPublish);
	},

	_galleryPublish: function(event){
		if( event.error ){
			return;
		}
		var notify = new D.ChatNotify();
		mkE({
			tag: 'div',
			className: 'chatEventIcon galleryPublishThumb',
			attr: {
				title: event.title
			},
			style: {
				backgroundImage: 'url(' + event.thumb + ')'
			}
		}).append(notify.node);

		mkE({
			tag: 'a',
			className: 'chatNotifyUser',
			href: '/stats/click.php?key=notif_gallery_publish_click&url=' + encodeURIComponent(event.href),
			text: event.user.title
		}).append(notify.node);
		mkE({
			tag: 'div',
			className: 'color2',
			innerHTML: D.chat.l.get('published_gallery')
		}).append(notify.node);

		mkE({
			tag: 'div',
			className: 'clear'
		}).append(notify.node);
		notify.onclick = function(){
			window.location.href = '/stats/click.php?key=notif_gallery_publish_click&url=' + encodeURIComponent(event.href);
		};
		notify.node.style.cursor = 'pointer';
		D.chat.notify(notify);
		D.chat.rpc.send('stats', {
			key: 'notif_gallery_publish'
		})
	},

	/**
	 * @deprecated
	 * @param event
	 */
	event: function (event) {
		var notify = new D.ChatNotify;
		mkE({
			tag: 'div',
			className: 'chatEventIcon' + ( empty(event.i) ? '' : ' ' + event.i + 'Icon' ),
			style: {
				backgroundImage: ( empty(event.i) ? "url('" + event.icon + "')" : '' )
			}
		}).append(notify);
		if (event.creator) {
			mkE({
				tag: 'a',
				className: 'chatNotifyUser',
				href: event.creator.url,
				text: htmlspecialchars_decode(event.creator.title)
			}).append(notify);
			mkE({
				tag: 'div',
				className: 'clear'
			}).append(notify);
		}
		mkE({
			tag: 'div',
			className: 'color2',
			innerHTML: event.content
		}).append(notify);
		D.chat.notify(notify);
		if (!$('#menuProfileNews > a')[0]) {
			return;
		}
		var rpc = new RPC('/rq/app.php');
		rpc.send(
			'profileNewsCount',
			{},
			function (re) {
				if (!re || !re.count) {
					return;
				}
				var node = $('#menuProfileNews > a .badge')[0];
				if (!node) {
					node = mkE({
						tag: 'span',
						className: 'badge'
					}).appendTo('#menuProfileNews > a');
				}
				node.innerHTML = re.count;
				node.style.display = '';
				addClassName(node, 'on');
				D.MMenu.ProfileNews.loaded = false;
			}
		);
	}, // event

	news:function(data){
		D.onLoad( 'ProfileNews', D.closure( this, D.chat._serverEvents._news, data ) );
	},

	_news:function(data){
		var node = $('#menuProfileNews > a .badge')[0];
		if( !data.badge ){
			if( node ){
				removeNode(node);
			}
		}else{
			if (!node) {
				node = mkE({
					tag: 'span',
					className: 'badge'
				}).appendTo('#menuProfileNews > a');
			}
			node.innerHTML = data.badge;
			node.style.display = '';
			addClassName(node, 'on');
		}

		if( !data.item ){
			return;
		}

		var item = new DR.news.struct.Item( data.item );
		if( D.ProfileNews && D.ProfileNews._inst[data.uid] ){
			D.ProfileNews._inst[data.uid].addItem(item, true);
		}

		var notify = new D.ChatNotify;
		var ul = mkE({
			tag: 'ul'
		});
		new D.ProfileNews.Item(item, D.ID, {
			noOptions: true,
			chat: true
		}).append(ul);
		notify.appendChild(ul);
		D.chat.notify(notify);
	},

	activity: function(data){
		if( !D.ProfileActivities ){
			return;
		}
		for( var k = 0, l = D.ProfileActivities.i.length; k < l; k++ ){
			var inst = D.ProfileActivities.i[k];
			if( !(inst.firstPage || inst.uid == data.item.user.id) ){
				return;
			}
			inst.addItem(data.item, {
				prepend: true
			});
		}
	},
	
	logoutdevice: function (data) {
		if( data && data.device === D.Cookie.read('__name') ) {
			D.reload();
		}
	}

};
// --- events_server.js --- 
// +++ win.js +++ 
/**
 * @class
 */
D.ChatWin = Class( {
	/**
	 * @constructor
	 * @param {object} par
	 * @public
	 */
	__construct:function(par){
		par = par || {};
		this.name = par.name || '';
		this._icon = false;
		this.node = mkE( {
			tag:'div',
			className:'chatWin',
			prop:{
				onclick:D.closure( this, this._onclick )
			},
			els:[
				this._wrapNode = mkE( {
					tag:'div',
					className:'chatWinW radius3top',
					els:[
						this._headerNode = mkE( {
							tag:'div',
							className:'chatWinHeader radius3top',
							prop:{
								onclick:D.closure( this, this.toggle )
							},
							els:[
								{
									tag:'div',
									className:'chatWinHeaderBG radius3top'
								}
							]
						} ), // header
						this.contentNode = mkE( {
							tag:'div',
							className:'chatWinContent'
						} )
					]
				} )
			]
		} );
		mkE( {
			tag:'table',
			els:[
				{
					tag:'tbody',
					els:[
						this._headerTrNode = mkE( {
							tag:'tr',
							els:[
								{
									tag:'td',
									className:'chatWinIcon',
									els:[
										this._iconNode = mkE( {
											tag:'div'
										} )
									],
									attr:{
										align:'center'
									}
								},
								{
									tag:'td',
									attr:{
										valign:'middle'
									},
									els:[
										this._titleWNode = mkE( {
											tag:'div',
											className:'chatWinTitle',
											els:[
												this._titleNode = mkE( {
													tag:'div',
													className:'chatWinTitleText cut',
													els:[
														this._titleTextNode = mkE( {
															text:''
														} ),
														{ tag:'b' }
													]
												} )
											]
										} ) // win
									]
								} // td
							]
						} ) // tr
					]
				} //tbody
			]
		} ).append( this._headerNode );
		if( par.title ){
			this.title( par.title );
		}
		if( par.className ){
			addClassName( this.node, par.className );
		}
		D.chat._wins.push(this);
		this._resize();
	},

	_resize:function(){
		var k, l, win;
		if( D.chat._wins.length < 3 || D.chat._wins.length * D.chat.CONV_WIN_WIDTH - 100 < D.chat.content.offsetWidth ){
			for( k = 0, l = D.chat._wins.length; k < l; k++ ){
				win = D.chat._wins[k];
				win.node.style.width = '';
				win._titleNode.title = '';
			}
			return;
		}
		var w = Math.floor( ( D.chat.content.offsetWidth - ( D.chat.CONV_WIN_WIDTH + D.chat.MAIN_WIN_WIDTH + 20 ) ) / ( D.chat._wins.length - 2 ) ) - 10;
		for( k = 0, l = D.chat._wins.length; k < l; k++ ){
			win = D.chat._wins[k];
			win._titleNode.title = htmlspecialchars( win.title() );
			if( win.name == 'main' ){
				continue;
			}
			if( this == win ){
				win.node.style.width = '';
				continue;
			}
			win.open(false);
			win.node.style.width = w + 'px';
		}
	},
	
	/**
	 * @param {Node} parent
	 * @returns {D.ChatWin}
	 */
	append:function(parent){
		this.node.append(parent);
		return this;
	},
	
	remove:function(){
		var i = array_search( this, D.chat._wins );
		if( i !== false ){
			D.chat._wins.splice( i, 1 );
		}
		this.node.remove();
		this._resize();
		return this;
	},
	
	onNorm:function(){
	},
	
	onMin:function(){
	},
	
	_onclick:function(){
		this.onclick();
	},
	
	onclick:function(){
	},
	
	open:function(v){
		if( typeof v != 'undefined' ){
			if(v){
				addClassName( this.node, 'chatWinOpen' );
				this._resize();
			} else {
				removeClassName( this.node, 'chatWinOpen' );
			}
		}
		return existsClassName( this.node, 'chatWinOpen' );
	},
	
	toggle:function(){
		if( existsClassName( this.node, 'chatWinOpen' ) ){
			removeClassName( this.node, 'chatWinOpen' );
			this.onMin();
		} else {
			addClassName( this.node, 'chatWinOpen' );
			this.onNorm();
			this._resize();
		}
	},

	minimize:function(){
		if( existsClassName( this.node, 'chatWinOpen' ) ){
			removeClassName( this.node, 'chatWinOpen' );
			this.onMin();
		}
	},
	
	/**
	 * @param {number} [v]
	 * @returns {number}
	 */
	badge:function(v){
		if( typeof v == 'undefined' ){
			return Number( this._badgeNode ? this._badgeNode.innerHTML : 0 );
		}
		if(!v){
			if( !this._badgeNode ){
				return 0;
			}
			this._badgeNode.style.display = 'none';
			this._badgeNode.innerHTML = 0;
			return Number( this._badgeNode.innerHTML );
		}
		if( !this._badgeNode ){
			this._badgeNode = mkE( {
				tag:'span',
				className:'badge on'
			} ).append( this._titleWNode );
		}
		this._badgeNode.innerHTML = v;
		this._badgeNode.style.display = '';
		return Number(v);
	},
	
	/**
	 * @param {string} [v]
	 * @returns {string}
	 */
	title:function(v){
		if(v){
			this._titleTextNode.nodeValue = v;
		}
		return this._titleTextNode.nodeValue;
	},
	
	/**
	 * @param {string} [v]
	 * @returns {string}
	 */
	icon:function(v){
		if( typeof v != 'undefined' ){
			if(v){
				this._iconNode.className = 'chatWinIcon ' + v + 'Icon';
			} else {
				this._iconNode.className = 'chatWinIcon';
			}
			this._icon = v;
		}
		return this._icon;
	},
	
	/**
	 * @param {boolean} [v]
	 * @returns {boolean}
	 */
	blink:function(v){
		if( typeof v == 'undefined' ){
			return Boolean( this._blinkTimeout );
		}
		if(v){
			if( this._blinkTimeout ){
				return true;
			}
			addClassName( this.node, 'blink' );
			this._blinkTimeout = setInterval( D.closure( this, this._blink ), 1300 );
			return true;
		}
		if( !this._blinkTimeout ){
			return false;
		}
		clearInterval( this._blinkTimeout );
		removeClassName( this.node, 'blink' );
		this._blinkTimeout = 0;
		return false;
	},
	
	/**
	 * @private
	 */
	_blink:function(){
		$( this.node ).toggleClass('blink');
	},
	
	/**
	 * @param {D.ChatWinIcon} icon
	 */
	addIcon:function(icon){
		icon.node.append( this._headerTrNode );
	}

} );


/**
 * @class
 * @extends {mkE.Base}
 */
D.ChatWinIcon = Class(
	{
		__construct:function(par){
			this.node = mkE( {
				tag:'td',
				className:'chatWinIcon',
				onclick:this._onclick,
				title:par.title || ''
			} );
			if( par.icon ){
				addClassName( this.node, par.icon + 'Icon' );
			}
			this.onclick = par.onclick || this.onclick;
		},
		_onclick:function(e){
			D.stopPropagation(e);
			this.onclick();
		},
		onclick:function(){
		},
		setIcon:function(v){
			this.node.className = 'chatWinIcon ' + v + 'Icon';
		},
		setTitle:function(v){
			this.node.title = v;
		}
	},
	mkE.Base
);
// --- win.js --- 
// +++ main_win.js +++ 
D.ChatMainWin = Class( {

	__construct:function(){
		this._win = new D.ChatWin( {
			name:'main',
			className:'chatWinMain'
		} );
		this.node = this._win.node;
		D.chat.notifyNode = mkE( {
			tag:'div',
			className:'chatNotifies'
		}).append( this._win._wrapNode );
		this._waiting();
		this._win.onNorm = this._onNorm;
		this._win.onMin = this._onMin;
		this._settingsNode = mkE( {
			tag:'div',
			className:'chatSettings'
		} ).append( this._win.contentNode );
	
		this._adsNode = mkE( {
			tag:'div',
			className:'adv',
			prop : {
				id : 'adv278'
			}
		} ).append( this._win.contentNode );
		this._onlineNode = mkE( {
			tag:'div',
			className:'chatOnline'
		} ).append( this._win.contentNode );
		if( window.innerHeight < 590 ){
			this._onlineNode.style.maxHeight = 200 + 'px';
		}
		this.lastConvs = new D.ChatMainWin.LastConvs;
		this.lastConvs.restore();
		this.lastConvs.append( this._win.contentNode );
		this._searchDraw();
		this._settingsIcon = new D.ChatWinIcon( {
			icon:'chatSettings',
			onclick:this.toggleSettings,
			title:D.chat.l.get('settings')
		} );
		this._win.addIcon( this._settingsIcon );
		this._win.append( D.chat.node );
		if( D.chat.getSaved( 'main_open') ){
			this.open(true);
		}
	},

	append:function(parent){
		this._win.append(parent);
		return this;
	},

	open:function(v){
		if(isset(v)){
			if(v){
				D.chat.setSaved( 'main_open', true );
			} else {
				D.chat.delSaved('main_open');
			}
		}
		return this._win.open(v);
	},

	icon:function(v){
		return this._win.icon(v);
	},

	_waiting:function(){
		this._win.title( D.chat.l.get('Chat') + ' ...' );
	},

	_onNorm:function(){
		D.chat.setSaved( 'main_open', true );
		this.lastConvs.badgeDelay = false;
		this.lastConvs.update();
		if( D.chat.offline ){
			this._waiting();
			D.chat.rpc.send(
				'settings',
				{
					name:'offline',
					value:false
				},
				this._toOnline,
				this
			);
			return;
		}
		this.drawOnline();
		try{ // ad block & shit
			this.getAdvert();
		} catch(e){}
	},

	_toOnline:function(re){
		if( !re.data ){
			return;
		}
		O2O( D.chat, re.data );
		D.chat.reconnect();
		if( !this._settingCBx ){
			return;
		}
		this._settingCBx.offline.checked = false;
	},

	_onMin:function(){
		D.chat.delSaved('main_open');
	},

	drawOnline:function(force){
		if( !force && this._searchInputNode.value ){
			return;
		}
		if( D.chat.offline ){
			this._win.title( D.chat.l.get('Chat') + ' (' + D.chat.l.get('offline') + ')' );
			return;
		}
		if( empty( D.chat._online ) ){
			this._win.title( D.chat.l.get('Chat') );
		} else {
			this._win.title( D.chat.l.get('Chat') + ' (' + count( D.chat._online ) + ')' );
		}
		if( !this._win.open() ){
			return;
		}
		clearNode( this._onlineNode );
		this._onlineUsersNode = mkE( {
			tag:'div'
		} ).append( this._onlineNode );
		this._onlineSearchNode = mkE( {
			tag:'div'
		} ).append( this._onlineNode );
		if( empty( D.chat._online ) ){
			mkE( {
				tag:'center',
				text:D.chat.l.get('chat no online users')
			} ).append( this._onlineUsersNode );
		}
		D.chat.getUsers( array_keys( D.chat._online ), this._drawOnline );
	},

	getAdvert:function () {
		var params = 'xx'+D.Ads.encodeAd('278.'+D.ID)+(new D.Date()).getTime();

		mkE({
			tag:'script',
			prop:{
				type:'text/javascript',
				src:D.Ads.url+'get?' + params
			}
		}).append( getHeadElement() );


		var rpc = new RPC('/rq/melon.php');
		rpc.send('impression', {place_ids : [278]});
	},

	_sortOnline:function( a, b ){
		if( a._userData.rate == b._userData.rate ){
			if( !a._sort ){
				a._sort = a._userData.ns.toLocaleLowerCase();
			}
			if( !b._sort ){
				b._sort = b._userData.ns.toLocaleLowerCase();
			}
			if( a._sort == b._sort ){
				return 0;
			}
			return ( a._sort < b._sort ? -1 : 1 );
		}
		return ( a._userData.rate > b._userData.rate ? -1 : 1 );
	},

	_drawOnline:function(users){
		var online = [];
		for( var k in D.chat._online ){
			var user = D.chat._online[k];
			if( !user || !users[ user.uid ] ){
				D.console.error( 'Chat: uid ' + user.uid );
				continue;
			}
			user._userData = users[ user.uid ];
			online.push(user);
		}
		online.sort( this._sortOnline );
		var found = false;
		for( var k = 0; k < online.length; ++ k ){
			var o = online[k];
			if( !o || !o.getNode ){
				continue;
			}
			if( this._searchInputNode.value && o._userData.n.toLocaleLowerCase().indexOf( this._searchInputNode.value.toLocaleLowerCase() ) == -1 ){
				continue;
			}
			found = true;
			o.getNode().append( this._onlineUsersNode );
		}
		if( this._searchInputNode.value && !found ){
			// TODO nekas netika atrasts
		}
	},

	toggleSettings:function(){
		if( !this.open() ){
			addClassName( this._settingsNode, 'chatSettingsOpen' );
		} else {
			if( !$( this._settingsNode ).toggleClass('chatSettingsOpen').hasClass('chatSettingsOpen') ){
				return;
			}
		}
		this.open(true);
		if( this._settingsNode.firstChild ){
			return;
		}
		var sett = {
			sound:{
				caption:D.chat.l.get('chat with sound')
			},
			onlineEvent:{
				caption:D.chat.l.get('chat with online event')
			},
			profileNews:{
				caption:D.chat.l.get('chat with profile news')
			},
			galleryStats:{
				caption:D.chat.l.get('chat gallery stats')
			},
			offline:{
				caption:D.chat.l.get('chat turn off')
			}
		};
		this._settingCBx = {};
		for( var k in sett ){
			var inp;
			mkE( {
				tag:'label',
				els:[
					inp = mkE( {
						tag:'input',
						type:'checkbox',
						name:k
					} ),
					' ',
					sett[k].caption
				]
			} ).append( this._settingsNode );
			inp.onclick = D.closure( this, this._settingClick, inp );
			this._settingCBx[k] = inp;
			switch(k){
				case 'sound':
					inp.checked = D.chat.withSound;
					break;
				case 'onlineEvent':
					inp.checked = D.chat.withOnlineEvents;
					break;
				case 'profileNews':
					inp.checked = D.chat.withProfileNews;
					break;
				case 'galleryStats':
					inp.checked = D.chat.withGalleryStats;
					break;
			}
		}
	},

	_settingClick:function(inp){
		inp.disabled = true;
		D.chat.rpc.send(
			'settings',
			{
				name:inp.name,
				value:inp.checked
			},
			D.closure( this, this._settingClickRe, inp )
		);
		switch( inp.name ){
			case 'offline':
				this.open(false);
				this._waiting();
				break;
		}
	},

	_settingClickRe:function( inp, re ){
		inp.disabled = false;
		if( re.data ){
			O2O( D.chat, re.data );
		}
		switch( inp.name ){
			case 'offline':
				clearNode( this._onlineNode );
				D.chat.reconnect();
				break;
		}
	},

	_searchDraw:function(){
		mkE( {
			tag:'div',
			className:'chatInput',
			els:[
				this._placeHolder = mkE( {
					tag:'div',
					className:'color2 icon searchIcon',
					text:D.chat.l.get('Search friend')
				} ),
				{
					tag:'div',
					className:'chatInputW',
					els:[
						this._searchInputNode = mkE( {
							tag:'input',
							onkeyup:this._searchKeyUp,
							onblur:this._searchInputOnblur,
							attr: {
								maxlength:50
							}
						} )
					]
				} // div.
			]
		} ).append( this._win.contentNode );
	},

	_searchInputOnblur:function(){
		if( this._searchResult ){
			this._searchResult.onBlur();
		}
	},

	_searchPlaceHolder:function(){
		if( this._searchInputNode.value ){
			this._placeHolder.style.display = 'none';
		} else {
			this._placeHolder.style.display = '';
		}
	},

	_searchReset:function(){
		D.removeLoadingOverlay( this._win.contentNode );
		if( this._searchResult ){
			this._searchResult.remove();
			this._searchResult = null;
		}
		this._searchInputNode.value = '';
		this._searchPlaceHolder();
		this.lastConvs.node.style.display = '';
		this.drawOnline();
	},

	_searchKeyUp:function(e){
		e = D.event(e);
		switch( e.keyCode ){
			case 27:
				this._searchReset();
				return;
			case 38:
				if( this._searchResult ){
					this._searchResult.onUp();
				} 
				return;
			case 40:
				if( this._searchResult ){
					this._searchResult.onDown();
				}
				return;
			case 13:
				if( this._searchResult ){
					this._searchResult.onEnter();
				}
				return;
		}
		this._searchPlaceHolder();
		if( !trim( this._searchInputNode.value ) ){
			this._searchReset();
			return;
		}
		clearTimeout( this._searchTO );
		this._searchTO = setTimeout( this._searchDo, 300 );
		this._searchResult = new D.ChatMainWin.SearchResult( this._searchInputNode.value );
		this._searchResult.onLoad = D.closure( this, this._onSearchResult, this._searchResult );
		D.loadingOverlay( this._win.contentNode );
	},

	_onSearchResult:function(result){
		if( this._searchResult != result ){
			return;
		}
		D.removeLoadingOverlay( this._win.contentNode );
		this.lastConvs.node.style.display = 'none';
		clearNode( this._onlineNode );
		this._searchResult.append( this._onlineNode );
	}
	
} );

/**
 * @extends {mkE.Base}
 */
D.ChatMainWin.LastConvs = Class(
	{
		__construct:function(par){
			this.node = mkE( {
				tag:'div',
				className:'ChatLastConvs'
			} );
		},

		/**
		 * @param {DR.msg.struct.ConvList} [re]
		 */
		_mRe:function(re){
			if(!re){
				D.chat.fixHTTP( this._m.re );
				re = this._m.re;
				D.chat.setSaved( 'lastConvs', re );
			}
			clearNode( this.node );
			if( empty( re.items ) ){
				return;
			}
			mkE( {
				tag:'h3',
				text:D.Lang.get('Last conversations')
			} ).append( this.node );
			for( var k = 0; k < re.items.length; ++ k ){
				var conv = re.items[k];
				if(!conv){ // wtf???
					continue;
				}
				var item = new D.ChatMainWin.LastConvs.Item( re.items[k] );
				item.append( this.node );
				item.badge( conv.unread, !this.badgeDelay );
				if( this.cid == item.id ){
					addClassName( item.node, 'active' );
				}
			}
			this.badgeDelay = true;
		},

		restore:function(){
			var history = D.chat.getSaved('lastConvs');
			if(!history){
				return false;
			}
			this._mRe(history);
		},

		/**
		 * @param {DR.ApiCall} [apiCall]
		 */
		update:function(apiCall){
			if( this._m && this._m.processing ){
				return;
			}
			this._m = new DR.msg.LastConvs;
			this._m.onLoad = this._mRe;
			this._m.select = [
				new DR.msg.select.Conv().all().membersUsersPreview(0),
				new DR.base.select.Image().icon(),
				new DR.msg.select.Mail().intro(),
				new DR.users.select.User().title().image(),
				new DR.users.select.Image().icon()
			];
			if(apiCall){
				apiCall.addMethod( this._m );
			} else {
				this._m.call( { chat:true } );
			}
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.ChatMainWin.LastConvs.Item = Class(
	{
		/**
		 * @param {DR.msg.struct.Conv} conv
		 */
		__construct:function(conv){
			this.conv = conv;
			this.id = conv.id;
			this.statsKw = DR.msg.Stats.KW_CHAT_MAIN_CONV;
			this.onMouseOver = D.doNothing;
			this.node = mkE( {
				tag:'div',
				className:'ChatConv',
				onclick:this._onclick,
				onmouseover:this._onmouseover,
				els:[
					this._imgNode = mkE( {
						tag:'div',
						className:'image picBorder',
						style:{
							backgroundColor:conv.color
						}
					} ),
					{
						tag:'div',
						className:'title cut',
						text:conv.topic || ( conv.friend ? conv.friend.title : '' ) || D.Lang.get('Group conversation')
					},
					this._textNode = mkE( {
						tag:'div',
						className:'msg cut color2',
						text:( conv.lastMail ? conv.lastMail.intro : '' )
					} )
				]
			} );
			if( conv.image ){
				D.bgImage( this._imgNode, conv.image.icon );
			} else if( conv.friend ){
				D.bgImage( this._imgNode, conv.friend.image.icon );
			}
		},

		badge:function( v, noDelay ){
			if( !v || noDelay ){
				this._badge(v);
				return;
			}
			clearTimeout( this._bageTO );
			this._bageTO = setTimeout( D.closure( this, this._badge, v ), 200 );
		},

		_badge:function(v){
			if(v){
				if( !this._badgeNode ){
					this._badgeNode = mkE( {
						tag:'span',
						className:'badge on'
					} ).append( this.node );
				} else {
					this._badgeNode.append( this.node );
				}
				setNodeText( this._badgeNode, v );
				return;
			}
			if( this._badgeNode ){
				this._badgeNode.remove();
			}
		},

		_onclick:function(){
			D.chat.startConv( this.conv.fid );
			var m = new DR.msg.Stats;
			m.kw = this.statsKw;
			m.call();
		},

		_onmouseover:function(){
			this.onMouseOver();
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.ChatMainWin.User = Class(
	{

		/**
		 * @param {DR.users.struct.User} user
		 */
		__construct:function(user){
			this.id = user.id;
			this.user = user;
			this.onMouseOver = D.doNothing;
			this.node = mkE( {
				tag:'a',
				className:'chatUser cut',
				href:user.url,
				onclick:this._onclick,
				onmouseover:this._onmouseover,
				els:[
					this._imgNode = mkE( {
						tag:'b',
						className:'chatBgImg'
					} ),
					this._onlineIconNode = mkE( {
						tag:'i'
					} ),
					user.title
				]
			} );
			D.bgImage( this._imgNode, user.image.icon );
		},

		_onclick:function(){
			D.chat.startConv( this.user.id );
			var m = new DR.msg.Stats;
			m.kw = DR.msg.Stats.KW_CHAT_SEARCH_USER;
			m.call();
			return false;
		},
		
		onlineIcon:function(v){
			this._onlineIconNode.className = '';
			if(v){
				this._onlineIconNode.className = v + 'Icon';
			}
		},

		_onmouseover:function(){
			this.onMouseOver();
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.ChatMainWin.SearchResult = Class(
	{

		/** @type {Array.<mkE.Base|D.ChatMainWin.User|D.ChatMainWin.LastConvs.Item>} */
		_items:[],
		_index:-1,

		__construct:function(query){
			this.query = query;
			this.onLoad = D.doNothing;
			this.node = mkE( {
				tag:'div',
				className:'ChatSearchResult'
			} );
			this._mSearch = new DR.msg.ChatSearch;
			this._mSearch.query = query;
			this._mSearch.onLoad = this._mSearchRe;
			this._mSearch.select = [
				new DR.msg.select.Conv().all().membersUsersPreview(0),
				new DR.base.select.Image().icon(),
				new DR.msg.select.Mail().intro(),
				new DR.msg.select.Attach().name().ext(),
				new DR.users.select.User().id().title().image().url(),
				new DR.users.select.Image().icon()
			];
			this._mSearch.call();
		},
		
		_mSearchRe:function(){
			this.onLoad();
			if( empty( this._mSearch.re.users ) && empty( this._mSearch.re.convs ) ){
				mkE( {
					tag:'div',
					className:'chatNoMails',
					text:D.Lang.get('No results found')
				} ).append( this.node );
				return;
			}
			var i;
			if( !empty( this._mSearch.re.users ) ){
				mkE( {
					tag:'h3',
					text:D.Lang.get('Users')
				} ).append( this.node );
				for( i = 0; i < this._mSearch.re.users.length; ++ i ){
					var u = new D.ChatMainWin.User( this._mSearch.re.users[i] );
					u.append( this.node );
					u.onMouseOver = D.closure( this, this._onMouseOver, u );
					if( D.chat._online[ u.id ] ){
						u.onlineIcon( D.chat._online[ u.id ]._icon );
					}
					this._items.push(u);
				}
			}
			if( !empty( this._mSearch.re.convs ) ){
				mkE( {
					tag:'h3',
					text:D.Lang.get('Conversations')
				} ).append( this.node );
				for( i = 0; i < this._mSearch.re.convs.length; ++ i ){
					var c = new D.ChatMainWin.LastConvs.Item( this._mSearch.re.convs[i] );
					c.append( this.node );
					c.onMouseOver = D.closure( this, this._onMouseOver, c );
					c.statsKw = DR.msg.Stats.KW_CHAT_SEARCH_CONV;
					this._items.push(c);
				}
			}
			/*new T.Form.Button( {
				caption:'Meklēt vēstules',
				color:'link',
				stretch:true
			} ).append( this.node );*/
		},

		_active:function(v){
			var i = this._items[ this._index ];
			if(i){
				if(v){
					addClassName( i.node, 'active' );
					//this.node.parentNode.scrollTop = i.node.offsetTop - 30;
				} else {
					removeClassName( i.node, 'active' );
				}
			}
		},

		_onMouseOver:function(item){
			this._active(false);
			this._index = array_search( item, this._items, true );
			this._active(true);
		},

		onUp:function(){
			this._active(false);
			-- this._index;
			if( this._index < 0 ){
				this._index = count( this._items ) - 1;
			}
			this._active(true);
		},
		
		onDown:function(){
			this._active(false);
			++ this._index;
			if( this._index > count( this._items ) - 1 ){
				this._index = 0;
			}
			this._active(true);
		},

		onEnter:function(){
			if( this._items[ this._index ] ){
				this._items[ this._index ]._onclick();
			}
		},

		onBlur:function(){
			this._active(false);
			this._index = -1;
		}
	},
	mkE.Base
);// --- main_win.js --- 
// +++ conv_win.js +++ 
/**
 * @class
 */
D.ChatConvWin = Class(
{

	/** @type {D.chat.Upload} */
	_upload:null,
	fid:0,
	his:0,
	/** @type {Node} */
	_loadMoreNode:null,
	/** @type {Node} */
	_msgsNode:null,
	/** @type {Array.<D.ChatMsg>} */
	_itemsSorted:[],
	/** @type {Object.<D.ChatMsg>} */
	_items:{},
	/** @type {D.ChatMsg|null} */
	_msgFirst:null,
	/** @type {D.ChatMsg|null} */
	_msgLast:null,
	/** @type {Node} */
	_inputNode:null,
	/** @type {DR.msg.struct.Conv} */
	conv:null,
	/** @type {Object.<{timeout:Number,user:DR.users.struct.User}>} */
	_writingUsers:{},
	/** @type {D.ChatMsg} */
	edit:null,

	__construct:function(par){
		par = par || {};
		this.conv = par.conv || null;
		this.his = par.his || D.ChatConvWin.HIS_NO_DATA;
		this._win = new D.ChatWin( {
			title:par.title || '',
			className:'chatWinConv'
		} );
		this.node = this._win.node;
		this._win.onNorm = this._onNorm;
		this._win.onMin = this._onMin;
		this._win.onclick = this._onclick;
		this._loadMoreNode = mkE( {
			tag:'a',
			className:'chatLoadMore',
			text:D.chat.l.get('Load history'),
			onclick:D.closure( this, this.loadMore, null )
		} );
		if( this.his != D.ChatConvWin.HIS_IS ){
			this._loadMoreNode.style.display = 'none';
		}
		this._msgsNode = mkE( {
			tag:'div',
			className:'chatMsgs',
			els:[
				this._loadMoreNode,
				this._writingNode = mkE( {
					tag:'div',
					className:'chatWriting cut',
					style:{
						display:'none'
					}
				} )
			]
		} ).append( this._win.contentNode );
		$( this._msgsNode ).bind( 'mousewheel DOMMouseScroll', this._mousewheel );
		this._inputNode = mkE( {
			tag:'div',
			className:'chatInput SIconHovered',
			els:[
				this._placeHolder = mkE( {
					tag:'div',
					className:'color2',
					text:D.chat.l.get('Chat write msg') + '...',
					prop:{
						onclick:D.closure( this, function(e){
							this._textareaNode.focus();
						} )
					}
				} ),
				this._textareaNode = new D.SayEditor( {
					onkeydown:this._keyDown,
					onkeyup:this._keyUp,
					onFocus:this._taOnFocus,
					onBlur:this._taOnBlur,
					onCtrlEnter:this.send,
					//disableMention: !D.DEV,
					mentionListUp:true,
					noLinkReplace: true
				} ),
				this._iconsNode = mkE({
					tag:'div',
					className:'insert',
					els:[
						this._attachIcon = mkE({
							tag:'span',
							className:'SVGIcon attach',
							els:[
								T.svgIcon('box-attachment')
							]
						}),
						this._addGifNode = mkE( {
							tag:'span',
							className:'SVGIcon',
							els:[
								T.svgIcon('box-gif')
							],
							onclick:this._addGif
						} ),
						this._addSoundNode = mkE( {
							tag:'span',
							className:'SVGIcon',
							els:[
								T.svgIcon('box-sound')
							],
							onclick:this._addSound,
						} ),
						this._insertSmileyNode = mkE( {
							tag:'span',
							className:'SVGIcon',
							els:[
								T.svgIcon('box-emoji')
							],
							onclick:this._insertSmiley
						} )
					]
				})
			]
		} ).append( this._win.contentNode );
		if( !T.Sounds.available() ){
			this._addSoundNode.remove();
		}
		var isBlobSupported = function() {
			try {
				return !!new Blob();
			} catch (e) {
				return false;
			}
		};
		if ( !isBlobSupported() ) {
			D.insertAfter( T.error( D.chat.l.get('chat_unsupported_send') ), this._inputNode );
			this._inputNode.style.display = 'none';
		}
		if( D.chat.node.firstChild ){
			D.insertBefore( this._win.node, D.chat.node.firstChild );
		} else {
			this._win.append( D.chat.node );
		}
		var icon;
		if( this.conv ){
			this._drawMuteIcon();
		}
		// open conv
		icon = new D.ChatWinIcon( {
			icon:'chatOpen',
			title:D.chat.l.get('Open conversation'),
			onclick:this._openConv
		} );
		this._win.addIcon(icon);
		this._openConvIcon = icon;
		this._openConvIcon.node.style.display = ( this.his == D.ChatConvWin.HIS_IS ? '' : 'none' );
		// close
		icon = new D.ChatWinIcon( {
			icon:'chatClose',
			title:D.chat.l.get('close'),
			onclick:this.close
		} );
		this._win.addIcon(icon);
		this.setFid( par.fid || 0 );
		// upload
		this._upload = new D.chat.Upload( {
			buttonNode:this._attachIcon,
			onSelect:this._uploadOnSelect,
			onComplete:this._onUploadComplete,
			dropNode:this._win._wrapNode
		} );
		D.insertBefore( this._upload.node, this._inputNode.firstChild );
		if( D.msg.VoiceRecorder.isSupported() ) {
			this._addVoiceMessage = new D.msg.VoiceRecorder(
				new D.msg.VoiceRecorder.Par()
					.setOnOpenRecorder(this._onVoiceRecorderOpen)
					.setOnCloseRecorder(this._onVoiceRecorderClose)
					.setOnUploadComplete(this._onVoiceRecorderUploadComplete)
			).prepend(this._iconsNode);
		}
	},

	_drawMuteIcon:function(){
		var icon = new D.ChatWinIcon( {
			onclick:this._toggleMute
		} );
		this._win.addIcon(icon);
		this._muteIcon = icon;
		this._updateMuteIcon();
	},

	_updateMuteIcon:function(){
		this._muteIcon.setIcon( this.conv.muted ? 'chatUnmute' : 'chatMute' );
		this._muteIcon.setTitle( D.Lang.get( this.conv.muted ? 'Turn on notifications' : 'Turn off notifications' ) );
	},

	_toggleMute:function(){
		this.conv.muted = !this.conv.muted;
		// TODO redraw
		var mMute = new DR.msg.Mute;
		mMute.cid = this.conv.id;
		mMute.mute = this.conv.muted;
		mMute.call( D.chat.CALL );
		this._updateMuteIcon();
		this.save();
	},

	/**
	 * @param {Node} parent
	 * @returns {D.ChatConvWin}
	 */
	append:function(parent){
		this._win.append(parent);
		return this;
	},

	open:function(v){
		return this._win.open(v);
	},

	icon:function(v){
		return this._win.icon(v);
	},

	focus:function(){
		this.open(true);
		setTimeout( D.closure( this, function(){
			this._textareaNode.focus();
		} ), 100 );
	},

	_badge:0,

	badge:function(v){
		if(!isset(v)){
			return this._badge;
		}
		this._badge = v;
		clearTimeout( this._badgeTO );
		// reserve for network event TO
		this._badgeTO = setTimeout( D.closure( this._win, this._win.badge, v ), 200 );
		return this._badge;
	},

	blink:function(v){
		if( typeof v != 'undefined' ){
			if(v){
				if( this.isGroupConv() ){
					D.chat.docTitleAlert( D.chat.l.get( 'chat new message in conversation' ) + ' "' + this._win.title() + '"' );
				} else {
					D.chat.docTitleAlert( this._win.title() + ' ' + D.chat.l.get( 'chat send to you message' ) + '!' );
				}
			} else {
				D.chat.docTitleAlertStop();
			}
		}
		return this._win.blink(v);
	},

	isGroupConv:function(){
		return this.fid < 0;
	},

	setFid:function(fid){
		if( empty(fid) ){
			return;
		}
		if( this.fid ){
			return;
		}
		if( Number( this.fid ) < 0 ){
			this._openConvIcon.node.style.display = '';
		}
		this.fid = fid;
		if( this.isGroupConv() ){
			this.icon('chatRoom');
		} else if( D.chat._online[fid] ){
			this.icon( D.chat._online[fid].icon() );
		}
	},

	save:function(){
		if( !this.fid ){
			return false;
		}
		var wins = D.chat.winsToSortedMap( D.chat.getSaved('wins') || [] );
		/** @type {Array.<Object>} msgs */
		var msgs = [];
		for( var k = 0; k < this._itemsSorted.length; ++ k ){
			msgs.push( this._itemsSorted[k].data );
		}
		var data = {
			fid:this.fid,
			his:this.his,
			title:this._win.title(),
			open:this._win.open(),
			blink:this.blink(),
			badge:this.badge(),
			mails:msgs,
			conv:this.conv
		};
		wins.set( data.fid, data );
		D.chat.setSaved( 'wins', wins.toArray() );
		return true;
	},

	restore:function(v){
		this.conv = v.conv || null; // teorijā nevajadzētu būt
		this.his = v.his;
		this._win.title( v.title );
		this._win.open( D.chat.popup ? false : v.open );
		this.blink( v.blink );
		this.badge( v.badge );
		for( var k in v.mails ){
			var msg = new D.ChatMsg( v.mails[k] );
			this._msgAppend(msg);
		}
		if( this.his == D.ChatConvWin.HIS_IS ){
			this._openConvIcon.node.style.display = '';
			this._loadMoreNode.style.display = '';
		}
		this.scrollToEndDelay();
	},

	scrollToEndDelay:function(){
		this.scrollToEnd(true);
		setTimeout( D.closure( this, function(){
			this.scrollToEnd(true);
		} ), 500 );
	},

	/**
	 * @param {D.ChatMsg} msg
	 * @param {D.ChatMsg} m
	 * @private
	 */
	_msgClass:function( msg, m ){
		if(!m){
			addClassName( msg.node, 'd1 u1' );
			return;
		}
		if( existsClassName( m.node, 'd1' ) ){
			addClassName( msg.node, m.Ymd == msg.Ymd ? 'd1' : 'd2' );
		} else {
			addClassName( msg.node, m.Ymd == msg.Ymd ? 'd2' : 'd1' );
		}
		if( ( msg.data.opt & D.chat.MAIL_OPT_SYSTEM ) == 0 ){
			if( existsClassName( m.node, 'u1' ) ){
				addClassName( msg.node, m.sender == msg.sender ? 'u1' : 'u2' );
			} else {
				addClassName( msg.node, m.sender == msg.sender ? 'u2' : 'u1' );
			}
		}
	},

	/**
	 * @param {D.ChatMsg} msg
	 * @public
	 */
	_msgAppend:function(msg){
		if( this._noMailsNode ){
			this._noMailsNode.remove();
			this._noMailsNode = null;
		}
		this._msgClass( msg, this._itemsSorted[ this._itemsSorted.length - 1 ] );
		this._itemsSorted.push(msg);
		this._items[ msg.id ] = msg;
		if( this._itemsSorted.length > D.chat.HISTORY_LENGTH ){
			var m = this._itemsSorted.shift();
			this.his = D.ChatConvWin.HIS_IS;
		}
		msg.append( this._msgsNode );
		this._msgFirst = this._msgFirst || msg;
		if( this._msgLast ){
			removeClassName( this._msgLast.node, 'last' );
		}
		this._msgLast = msg;
		addClassName( this._msgLast.node, 'last' );
		if( this._writingNode ){
			this._writingNode.append( this._msgsNode );
			this._writingNode.style.display = '';
		}
		this.group();
		this.writingSoundT = 0;
	},

	/**
	 * @param {D.ChatMsg} msg
	 * @private
	 */
	_msgPrepend:function(msg){
		if( this._noMailsNode ){
			this._noMailsNode.remove();
			this._noMailsNode = null;
		}
		this._msgClass( msg, this._msgFirst );
		if( this._itemsSorted.length < D.chat.HISTORY_LENGTH ){
			this._itemsSorted.unshift(msg);
			this._items[ msg.id ] = msg;
		}
		if( this._msgFirst ){
			D.insertBefore( msg.node, this._msgFirst.node );
		} else {
			msg.node.append( this._msgsNode );
		}
		this._msgFirst = msg;
		if( this._writingNode ){
			this._writingNode.append( this._msgsNode );
			this._writingNode.style.display = '';
		}
		this.group();
	},

	group:function(){
		clearTimeout( this._groupTO );
		this._groupTO = setTimeout( this._group, 5 );
	},

	_group:function(){
		/** @type {D.ChatMsg} */
		var prev;
		//for( var i = this._itemsSorted.length - 1; i >= 0; -- i ){
		for( var i = 0; i < this._itemsSorted.length - 1; i ++ ){
			var msg = this._itemsSorted[i];
			if(prev){
				if( msg.sender == prev.sender ){
					if( msg.senderNameNode ){
						msg.senderNameNode.style.display = 'none';
					}
				} else {
					if( msg.senderNameNode ){
						msg.senderNameNode.style.display = '';
					}
				}
				if( msg.sender == prev.sender && msg.m == prev.m ){
					if( msg.timeNode ){
						msg.timeNode.style.display = 'none';
					}
				} else {
					if( msg.timeNode ){
						msg.timeNode.style.display = '';
					}
				}
				if( empty( msg.data.readersUsersPreview ) && msg.sender == prev.sender && msg.m == prev.m ){
					addClassName( msg.node, 'chatNoInfo' );
				} else {
					removeClassName( msg.node, 'chatNoInfo' );
				}
			}
			prev = msg;
		}
	},

	/**
	 * @param {D.ChatMsg} msg
	 * @private
	 */
	_msgReplace:function(msg){
		var m = this._items[ msg.id ];
		if(!m){
			return;
		}
		addClassName( msg.node, m.node.className ); // copy classes
		if( this._msgFirst === m ){
			this._msgFirst = msg;
		}
		this._items[ msg.id ] = msg;
		msg.node.replace( m.node );
		var i = array_search( m, this._itemsSorted, true );
		if( i !== false ){
			this._itemsSorted[i] = msg;
		}
	},

	/**
	 * @param {Number} mid
	 * @returns {D.ChatMsg|null}
	 */
	getMsg:function(mid){
		return this._items[mid] || null;
	},

	/**
	 * @param {DR.msg.struct.GetMailRe} par
	 */
	newMail:function(par){
		this.conv = par.conv;
		if( !this.fid ){
			this.setFid( par.conv.fid );
		}
		this._readerRemove( par.mail.sender );
		var scroll = false; //this._requireScrollToNewMsg();
		var msg = new D.ChatMsg( par.mail );
		this._msgAppend(msg);
		this.scrollToEnd( scroll || par.mail.sender == D.ID );
		if( count( this._itemsSorted ) == 1 && par.conv.unread > 1 ){
			this.loadMore( par.conv.unread - 1 );
		}
		this._writingRemove( par.mail.sender );
		var openActive = this.open() && D.chat.isActive();
		if( par.mail.sender != D.ID ){
			if(openActive){
				this.read();
			} else if( !D.chat.popup && ( this.conv && !this.conv.muted ) ){
				msg.unseen = true;
				this.blink(true);
			}
		}
		if( openActive && msg.sound && D.chat.autoPlay && D.chat.doFirst( 'ms', msg.id ) ){
			this.stopAllSounds();
			msg.sound.play();
		}
		this.save();
	},

	_readerRemove:function(uid){
		for( var k = 0; k < this._itemsSorted.length; ++ k ){
			this._itemsSorted[k].readerRemove(uid);
		}
	},

	/**
	 * @param {DR.users.struct.User} user
	 * @param {D.chat.OnRead} par
	 */
	onRead:function( user, par ){
		this._readerRemove( par.uid );
		if( this._items[ par.mid ] ){
			this._items[ par.mid ].readerAdd(user);
			if( !par.unread ){
				this._items[ par.mid ].readAll();
			}
		}
		this.save();
		this.group();
	},

	send:function(){
		this._sentWriting = false;
		if( !this.fid ){
			D.console.error( 'Chat: win cid && uid' );
			return;
		}
		if( this.edit ){
			this._edit();
			return;
		}
		D.chat._sendWin = this; // hack
		if( !this._textareaNode.value() ){
			return;
		}
		if( this._lastText == this._textareaNode.value() ){
			return;
		}
		var mSend = new DR.msg.Send;
		mSend.chat = true;
		mSend.isHTML = true;
		mSend.text = this._textareaNode.value();
		if(this.conv && this.conv.id){
			mSend.cid = this.conv.id;
		} else {
			mSend.fid = this.fid;
		}
		mSend.call();
		this._lastText = this._textareaNode.value();
		this._textareaNode.value('');
	},

	/**
	 * @param {Event} e
	 * @returns {boolean|undefined}
	 * @private
	 */
	_keyDown:function(e){
		e = D.event(e);
		switch( e.keyCode ){
			case 27: // esc
				if( this.edit ){
					this._cancelEdit();
					return false;
				}
				this._textareaNode.value();
				return false;
			case 38: // up
				if( !this._textareaNode.value() ){
					this._doEdit();
					return false;
				}
				break;
			case 13: // enter
				if( !e.shiftKey ){
					this.send();
					return false;
				}
				break;
		}
		setTimeout( D.closure( this, this.sendWriting ), 0 );
	},

	_keyUp:function(){
	},

	_taOnFocus:function(){
		addClassName( this._win.node, 'chatWinFocus' );
		this._placeHolder.style.display = 'none';
		this._soundsTour();
	},

	_taOnBlur:function(){
		removeClassName( this._win.node, 'chatWinFocus' );
		if( this._textareaNode.value() ){
			this._placeHolder.style.display = 'none';
		} else {
			this._placeHolder.style.display = '';
		}
	},

	sendWriting:function(){
		if( this._sentWriting ){
			return;
		}
		D.chat.sendJsonConv( this.fid, { type:'write' } );
		this._sentWriting = true;
		setTimeout( D.closure( this, function(){
			this._sentWriting = false;
		} ), 2000 );
	},

	close:function(){
		if( this.blink() ){
			D.chat.docTitleAlertStop();
		}
		D.chat.wins.del( this.fid );
		this._win.open(false);
		setTimeout( this._close, 300 );
		if( !this.fid ){
			return;
		}
		var wins = D.chat.winsToSortedMap( D.chat.getSaved('wins') || [] );
		wins.del( this.fid );
		D.chat.setSaved( 'wins', wins.toArray() );
	},

	_close:function(){
		this._win.remove();
	},

	_requireScrollToNewMsg:function(){
		var lastMail = this._itemsSorted[ this._itemsSorted.length - 1 ];
		if(!lastMail){
			return;
		}
		return D.inScreen( lastMail.node );
	},

	scrollToEnd:function(force){
		var h = this._msgsNode.scrollHeight - this._msgsNode.offsetHeight;
		if( !force && h - this._msgsNode.scrollTop > 300 ){
			return;
		}
		this._msgsNode.scrollTop = h;
	},

	_userIconClick:function(uid){
		document.location.href = '/user/' + uid + '/';
	},

	_onNorm:function(){
		this.save();
		this.scrollToEnd(true);
		for( var k in this._items ){
			var msg = this._items[k];
			if( msg.unseen ){
				msg.unseen = false;
				//addClassName( msg.node, 'unread' );
			}
		}
	},

	_onMin:function(){
		this.save();
	},

	_onclick:function(){
		this.read();
	},

	_insertSmiley:function(e){
		D.insertSmiley( {
			onclick:this._insertSmileyClick,
			parent:this._insertSmileyNode,
			arrow:{
				top:false,
				left:false
			}
		} );
	},

	_insertSmileyClick:function(v){
		D.smallPopUp.close();
		this._textareaNode.insertHTML(v);
		this.focus();
	},

	_addGif:function(){
		T.Giphy.insert( this._onGifChoose, {
			parent:this._addGifNode,
			arrow:{
				top:false,
				left:false
			}
		} );
	},

	/**
	 * @param {T.Giphy.Item} item
	 */
	_onGifChoose:function(item){
		var mSend = new DR.msg.Send;
		mSend.chat = true;
		mSend.fid = this.fid;
		mSend.text = '';
		mSend.giphyId = item.id;
		mSend.call();
	},

	_addSound:function(){
		T.Sounds.insert( this._onSoundChoose, {
			parent:this._addSoundNode,
			arrow:{
				top:false,
				left:false
			}
		} );
	},

	/**
	 * @param {T.Sounds.Item} item
	 */
	_onSoundChoose:function(item){
		var mSend = new DR.msg.Send;
		mSend.chat = true;
		mSend.fid = this.fid;
		mSend.text = '';
		mSend.sound = item.id;
		mSend.call();
	},

	loadMore:function(c){
		if( isset(c) && !c ){
			return;
		}
		if(!this._loadMoreNode.offsetHeight ){
			return;
		}
		if( this._mConvMails && this._mConvMails.processing ){
			return;
		}
		this._mConvMails = new DR.msg.ConvLoadMore;
		if(c){
			this._mConvMails.count = Math.min( c, 100 );
		}
		this._mConvMails.fid = this.fid;
		if( this._msgFirst ){
			this._mConvMails.mid = this._msgFirst.id;
		}
		this._mConvMails.select = D.ChatMsg.SELECT;
		this._mConvMails.onLoad = this._mConvMailsRe;
		this._mConvMails.call( D.chat.CALL );
		D.loadingOverlay( this._loadMoreNode );
	},

	_mConvMailsRe:function(){
		D.chat.fixHTTP( this._mConvMails );
		D.removeLoadingOverlay( this._loadMoreNode );
		this._mConvMails.re.items = this._mConvMails.re.items.reverse();
		var shBefore = this._msgsNode.scrollHeight;
		for( var k in this._mConvMails.re.items ){
			var msg = new D.ChatMsg( this._mConvMails.re.items[k] );
			this._msgPrepend(msg);
		}
		if( !this._mConvMails.re.items[0] ){
			this._loadMoreNode.remove();
		}
		this._msgsNode.scrollTop = this._msgsNode.scrollHeight - shBefore;
		if( empty( this._mConvMails.re.items ) ){
			this.his = D.ChatConvWin.HIS_NO;
		}
		this.save();
	},

	read:function(){
		this.blink(false);
		if( !D.chat.popup && !this.badge() && ( !this.conv || !this.conv.muted ) ){
			return;
		}
		D.chat.readConv( this.fid );
	},

	writingSoundT:0,

	/**
	 * @param {DR.users.struct.User} user
	 */
	writing:function(user){
		if( this.open() && new Date().getTime() - this.writingSoundT > 10000 ){
			this.writingSoundT = new Date().getTime();
			D.chat.soundPlay('typing');
		}
		if( !this._writingNode ){
			this._writingNode = mkE( {
				tag:'div',
				className:'chatWriting cut'
			} ).append( this._msgsNode );
		}
		if( this._writingUsers[ user.id ] ){
			clearTimeout( this._writingUsers[ user.id ].timeout );
		}
		this._writingUsers[ user.id ] = {
			user:user,
			timeout:setTimeout( D.closure( this, this._writingRemove, user.id ), 4000 )
		};
		this._writingDraw();
		this.scrollToEnd();
	},

	_writingRemove:function(uid){
		D.chat.soundStop('typing');
		if( !this._writingUsers[uid] ){
			return;
		}
		clearTimeout( this._writingUsers[uid].timeout );
		delete this._writingUsers[uid];
		this._writingDraw();
	},

	_writingDraw:function(){
		clearNode( this._writingNode );//.innerHTML = '&nbsp;';
		if( empty( this._writingUsers ) ){
			return;
		}
		var c = count( this._writingUsers );
		var els = [];
		for( var k in this._writingUsers ){
			var user = this._writingUsers[k].user;
			if( els.length ){
				els.push(', ');
			}
			els.push( {
				tag:'a',
				text:( c > 2 ? user.name : user.title ),
				href:'/user/' + user.id + '/'
			} );
			if( els.length > 7 ){
				break;
			}
		}
		els.push( ' ' + D.Lang.get('writing') );
		els.push( {
			tag:'div',
			className:'loading',
			els:[
				{ tag:'b' },
				{ tag:'i' },
				{ tag:'s' }
			]
		} );
		mkE.appendTypeElement( this._writingNode, els );
	},

	_openConv:function(){
		D.onLoad( 'msg', D.closure( this, function(){
			D.msg.openConv( this.fid );
			this._win.open(false);
		} ) );
	},

	_uploadOnSelect:function(){
		this.open(true);
	},

	_onUploadComplete:function(){
		if( empty( this._upload.ids() ) ){
			return;
		}
		var mSend = new DR.msg.Send;
		mSend.chat = true;
		mSend.text = '';
		mSend.fid = this.fid;
		mSend.attach = this._upload.ids();
		mSend.call();
		this._upload.clear();
	},

	_mousewheel:function(event){
		var up = event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0;
		if(!up){
			if( !this._msgsNode.scrollHeight ){
				return;
			}
			if( this._msgsNode.scrollTop + this._msgsNode.offsetHeight >= this._msgsNode.scrollHeight ){ // disable document scrolling
				return false;
			}
			return;
		}
		if( this._msgsNode.scrollTop > 0 ){
			return;
		}
		this.loadMore();
		return false;
	},

	/**
	 * @param {DR.msg.struct.Mail} mail
	 */
	onEdit:function(mail){
		var oldMail = this._items[ mail.id ];
		if(!oldMail){
			return;
		}
		mail.readersCount = oldMail.data.readersCount;
		mail.readAll = oldMail.data.readAll;
		mail.readersUsersPreview = oldMail.data.readersUsersPreview;
		var msg = new D.ChatMsg(mail);
		this._msgReplace(msg);
		this.scrollToEnd();
		this._writingRemove( msg.sender );
		this.save();
	},

	_doEdit:function(){
		for(var k = this._itemsSorted.length - 1; k >= 0; -- k ){
			/** @type {D.ChatMsg} */
			var m = this._itemsSorted[k];
			if( m.canEdit() ){
				this.editMsg(m);
				return;
			}
		}
	},

	/**
	 * @param {D.ChatMsg} msg
	 */
	editMsg:function(msg){
		this.edit = msg;
		msg.editing(true);
		this._textareaNode.value( msg.data.text );
		this._textareaNode.userReplace( msg.data.users );
		this._textareaNode.setCursorAtEnd();
	},

	_cancelEdit:function(){
		this.edit.editing(false);
		this.edit = null;
		this._textareaNode.value('');
	},

	_edit:function(){
		var msg = this.edit;
		this.edit = null;
		msg.editing(false);
		D.loadingOverlay( msg.node );
		var mEdit = new DR.msg.Edit;
		mEdit.mid = msg.id;
		mEdit.isHTML = true;
		mEdit.text = this._textareaNode.value();
		mEdit.onError = function(){
			D.removeLoadingOverlay( msg.node );
		};
		mEdit.call( D.chat.CALL );
		this._textareaNode.value('');
	},

	noMails:function(){
		this._noMailsNode = mkE( {
			tag:'div',
			className:'chatNoMails',
			text:D.Lang.get('Šeit nav nevienas vēstulītes.')
		} );
		this._noMailsNode.append( this._msgsNode );
	},

	online:function( uid, online ){
		var changed = false;
		for( var k in this._items ){
			if( this._items[k].sender == uid ){
				this._items[k].updateOnline(online);
			}
		}
		if(changed){
			this.save();
		}
	},
	
	onEmo:function(par){
		var mail = this._items[ par.mid ];
		if(mail){
			mail.onEmo(par);
			//this.scrollToEnd();
			this.save();
		}
	},

	stopAllSounds:function(){
		for( var k in this._items ){
			var msg = this._items[k];
			if( msg.sound ){
				msg.sound.stop();
			}
		}
	},

	_soundsTour:function(){
		T.Sounds.tour( this._addSoundNode );
	},

	_onVoiceRecorderOpen:function (  ) {
		this._placeHolder.style.display = 'none';
		this._textareaNode.node.style.display = 'none';
		this._attachIcon.style.display = 'none';
		this._addGifNode.style.display = 'none';
		this._addSoundNode.style.display = 'none';
		this._insertSmileyNode.style.display = 'none';
	},

	_onVoiceRecorderClose:function (  ) {
		this._placeHolder.style.display = '';
		this._textareaNode.node.style.display = '';
		this._attachIcon.style.display = '';
		this._addGifNode.style.display = '';
		this._addSoundNode.style.display = '';
		this._insertSmileyNode.style.display = '';
	},

	_onVoiceRecorderUploadComplete: function (id) {
		var mSend = new DR.msg.Send;
		mSend.chat = true;
		mSend.fid = this.fid;
		mSend.text = '';
		mSend.attach = [id];
		mSend.call();
	}
} );

D.ChatConvWin.HIS_NO_DATA = 0;
D.ChatConvWin.HIS_IS = 1;
D.ChatConvWin.HIS_NO = 2;// --- conv_win.js --- 
// +++ user.js +++ 
D.ChatUser = function( uid, ts ){
	this.uid = uid;
	if(ts){
		if( D.TIME - ts > D.chat.AWAY_TIMEOUT ){
			this.status( D.ChatUser.STATUS_AWAY );
			return;
		}
	}
	this.status( D.ChatUser.STATUS_ONLINE );
};

D.ChatUser.STATUS_ONLINE = 0;
D.ChatUser.STATUS_AWAY = 1;
D.ChatUser.STATUS_OFFLINE = 2;

/** @type {number} */
D.ChatUser.prototype.uid = 0;
/** @type {Node} */
D.ChatUser.prototype.node = null;
D.ChatUser.prototype.mobile = false;

D.ChatUser.prototype.status = function(v){
	if( typeof v != 'undefined' ){
		this._status = v;
		switch(v){
			case D.ChatUser.STATUS_ONLINE:
				this.icon( this.mobile ? 'onlineMobile' : 'onlineWWW' );
				break;
			case D.ChatUser.STATUS_AWAY:
				this.icon('onlineInvisible');
				break;
		}
	}
	return this._status;
};

D.ChatUser.prototype.getNode = function(user){
	if( this.node ){
		return this.node;
	}
	user = user || this._userData;
	this.node = mkE( {
		tag:'a',
		className:'chatUser cut',
		text:user.n,
		href:'/user/' + this.uid + '/',
		els:[
			this._imageNode = mkE( {
				tag:'b',
				className:'chatBgImg'
			} ),
			this._iconNode = mkE( {
				tag:'i'
			} )
		],
		onclick:D.closure( this, this._onclick )
	} );
	D.bgImage( this._imageNode, user.uIc );
	this.status( this._status ); // icon
	return this.node;
};


D.ChatUser.prototype._onclick = function(){
	D.chat.startConv( this.uid );
	var m = new DR.msg.Stats;
	m.kw = DR.msg.Stats.KW_CHAT_MAIN_USER;
	m.call( D.chat.CALL );
	return false;
};

/**
 * @param {string} [v]
 * @returns {string}
 */
D.ChatUser.prototype.icon = function(v){
	if( typeof v != 'undefined' ){
		this._icon = v;
		if( !this.node ){
			return v;
		}
		if(v){
			this._iconNode.className = v + 'Icon';
		} else {
			this._iconNode.className = '';
		}
	}
	return this._icon;
};
// --- user.js --- 
// +++ msg.js +++ 
/**
 * @class
 * @extends {mkE.Base}
 */
D.ChatMsg = Class(
/** @lends {D.ChatMsg#} */
{

	giphy:null,
	/** @type {D.msg.Mail.Sound} */
	sound:null,
	unseen:false,

	/**
	 * @param {DR.msg.struct.Mail} data
	 */
	__construct:function(data){
		this.id = data.id;
		this.data = data;
		this._date = new D.Date( data.ts );
		this.Ymd = Number( this._date.format('Ymd') );
		this.m = this._date.getMinutes();
		this.sender = data.sender;
		this.node = mkE( {
			tag:'div',
			className:'chatMsg',
			attr:{
				'data-id':this.id
			},
			els:[
				{
					tag:'div',
					className:'chatMsgDate',
					els:[
						{
							tag:'div',
							text:D.ddate( data.ts, { time:false } )
						}
					]
				},
				this._userImageNode = mkE( {
					tag:'div',
					className:'chatMsgImage picBorder',
					onclick:this._userIconClick,
					els:[
						this._userOnlineNode = mkE( {
							tag:'div'
						} )
					]
				} ),
				{
					tag:'div',
					className:'chatMsgBubble',
					els:[
						this._textNode = mkE( {
							tag:'p',
							innerHTML:nl2br( data.text )
						} ),
						this.infoNode = mkE( {
							tag:'div',
							className:'chatMsgInfo'
						} )
					]
				}, // Bubble
				T.clear()
			]
		} );
		if( this.data.opt & D.chat.MAIL_OPT_SYSTEM ){
			this._systemMsg();
			return;
		}
		this._drawInfoNode();
		if( data.text.length < 20 && data.text.indexOf('!') != -1 ){
			addClassName( this.node, 'chatMsgScream' );
		}
		D.bgImage( this._userImageNode, data.senderUser.image.icon );
		if( data.sender == D.ID ){
			addClassName( this.node, 'chatMsgMy' );
		}
		D.smileyReplace( this._textNode );
		D.linksReplace( this._textNode );
		D.emojiReplace( this._textNode );
		D.replaceCommentsWithNode( this._textNode, this._replaceUsers );
		if( data.editedEmpty ){
			clearNode( this._textNode );
			mkE( {
				tag:'i',
				text:D.Lang.get('Lietotājs dzēsis šo saturu.')
			} ).append( this._textNode );
		}
		if( data.sticker ){ // gan jau varēs ravēt drīz nost
			mkE( {
				tag:'img',
				src:D.getStickerImageUrl( data.sticker, '' ),
				prop:{
					style:{
						width:'auto',
						height:'170px',
						display:'block',
						margin:'0 auto'
					}
				}
			} ).append( this._textNode );
		}
		if( T.Giphy && this.data.giphy ){
			this.giphy = new T.Giphy.Embed( this.data.giphy, { maxHeight:236 } ).append( this._textNode );
		}
		if( this.data.sound && D.msg ){
			this.sound = new D.msg.Mail.Sound( this.data.sound ).append( this._textNode );
		}
		if( !empty( data.attach ) ){
			new D.ChatMsgAttachList( data.attach, { uid:this.uid } ).append( this._textNode );
		}
		this._readersDraw();
		this._drawLinks();
		this.updateOnline();
		this._drawEmo();
		new D.msg.MsgEmo.Add( {
			mid:this.id,
			noParent:true
		} ).append( this._textNode );
	},

	_drawEmo:function(){
		if( !empty( this.data.emotions ) && !this._emotions ){
			this._emotions = new D.msg.MsgEmo( {
				uid:this.uid,
				mid:this.id
			} );
			D.insertBefore( this._emotions.node, this.infoNode );
		}
		if( this._emotions ){
			this._emotions.set( this.data.emotions );
		}
	},

	_replaceUsers:function(text){
		var m = text.match(/user:([0-9]*)/);
		if( !m || !this.data.users[ m[1] ] ){
			return;
		}
		var user = this.data.users[ m[1] ];
		var a = mkE( {
			tag:'a',
			text:user.title,
			href:user.url
		} );
		//D.Say.addUserTooltip( a, user );
		return a;
	},

	_systemMsg:function(){
		clearNode( this.node );
		addClassName( this.node, 'ChatMsgSystem' );
		if( !this.data.event ){
			return;
		}
		mkE.appendTypeElement( this.node, [
			{
				tag:'a',
				text:this.data.senderUser.title,
				href:this.data.senderUser.url
			},
			' '
		] );
		if( this.data.event.type == DR.msg.struct.MailEvent.TYPE_LEFT ){
			mkE.appendTypeElement( this.node, D.Lang.get('Chat leave room') );
			return;
		}
		if( this.data.event.type == DR.msg.struct.MailEvent.TYPE_JOIN || this.data.event.type == DR.msg.struct.MailEvent.TYPE_REMOVE ){
			/** @type {DR.msg.struct.MailEventJoin} */
			var eJoin = this.data.event;
			var users = [];
			for( var k in eJoin.usersPreview ){
				var member = eJoin.usersPreview[k];
				if( member.id == D.ID ){
					users.push( D.Lang.get('Chat you') );
					continue;
				}
				var u = mkE( {
					tag:'a',
					text:member.aktitle || member.title,
					href:member.url
				} );
				users.push(u);
			}
			mkE.appendTypeElement( this.node, [
				D.Lang.get( this.data.event.type == DR.msg.struct.MailEvent.TYPE_JOIN ? 'pievienoja sarakstei:' : 'atvienoja no sarakstes' ),
				' ',
				new T.AndMore( {
					els:users,
					count:eJoin.count,
					limit:10//D.msg.Mail.MEMBERS_PREVIEW_COUNT
				} )
			] );
			return;
		}
		if( this.data.event.type == DR.msg.struct.MailEvent.TYPE_SET_TOPIC ){
			/** @type {DR.msg.struct.MailEventSetTopic} */
			var eTopic = this.data.event;
			mkE.appendTypeElement( this.node, [
				D.Lang.get('changed the topic')
					.replace( '$from', eTopic.from || D.Lang.get('Group conversation') )
					.replace( '$to', eTopic.to || D.Lang.get('Group conversation') )
			] );
			return;
		}
		if( this.data.event.type == DR.msg.struct.MailEvent.TYPE_SET_IMAGE ){
			mkE.appendTypeElement( this.node, D.Lang.get('changed the conversation picture') );
			return;
		}
		D.log( 'Unknown msg event', this.data.event );
	},

	_drawInfoNode:function(){
		var data = this.data;
		var els = [];
		var n;
		if( data.sender != D.ID && data.fid < 0 ){
			els.push( [
				this.senderNameNode = mkE( {
					tag:'span',
					className:'chatMsgSender',
					els:[
						{
							tag:'a',
							text:this.data.senderUser.name,
							onclick:this._userIconClick
						},
						' • '
					]
				} )
			] );
		}
		els.push(
			this.timeNode = mkE( {
			tag:'span',
			className:'chatMsgTime',
			text:this._date.format('H:i')
			} )
		);
		if( data.edited ){
			n = mkE( {
				tag:'span',
				className:'icon editGrayIcon',
				onmousemove:function(){
					this.title = D.Lang.get('Labots') + ' ' + D.ddate2( data.edited );
				}
			} );
			els.push(n);
		}
		this._readerNode = mkE( {
			tag:'span',
			className:'chatMsgReaders'
		} );
		els.push( this._readerNode );
		if( data.sender == D.ID ){
			els = els.reverse();
		}
		mkE.appendTypeElement( this.infoNode, els );
	},

	_drawLinks:function(){
		if( empty( this.data.linksObj ) ){
			return;
		}
		D.onLoad( 'msg', this._drawLinksMsg );
	},

	_drawLinksMsg:function(){
		// pievieno 1x vienu linku
		var linksAdded = [];
		for( var k in this.data.linksObj ){
			var isAdded = false;
			for ( var i = 0, l = linksAdded.length; i < l; i++ ) {
				if ( linksAdded[i] == this.data.linksObj[k].url ) {
					isAdded = true;
					break;
				}
			}
			if(isAdded){
				continue;
			}
			if( !this._linksNode ){
				this._linksNode = mkE( {
					tag:'div'
				} );
				D.insertAfter( this._linksNode, this._textNode );
			}
			new D.msg.Mail.Link( this.data.linksObj[k] ).append( this._linksNode );
			linksAdded.push( this.data.linksObj[k].url );
		}
	},

	_userIconClick:function(){
		Section.navigate( this.data.senderUser.url );
	},

	readerRemove:function(uid){
		var readAll = this.data.readAll;
		this.data.readAll = false;
		for( var k = 0; k < this.data.readersUsersPreview.length; ++ k ){
			var u = this.data.readersUsersPreview[k];
			if( u && u.id == uid ){
				-- this.data.readersCount;
				this.data.readersUsersPreview.splice( k, 1 );
				this._readersDraw();
				return;
			}
		}
		if(readAll){
			this._readersDraw();
		}
	},

	/**
	 * @param {DR.users.struct.User} user
	 */
	readerAdd:function(user){
		++ this.data.readersCount;
		if( user.id != D.ID ){
			this.data.readersUsersPreview.push(user);
		}
		this._readersDraw();
	},

	_readersDraw:function(){
		if( !this._readerNode ){
			return;
		}
		clearNode( this._readerNode );
		if( this.data.readAll ){
			if( this.data.fid > 0 && this.data.sender != D.ID ){
				return;
			}
			mkE( {
				tag:'span',
				className:'chatMsgReader chatMsgReadAll checkIcon',
				title:D.Lang.get('Read')
			} ).append( this._readerNode );
			return;
		}
		if( !this.data.readersCount ){
			return;
		}
		var els = [];
		var READER_ICONS = 5;
		for( var k = 0; k < this.data.readersUsersPreview.length; ++ k ){
			var reader = this.data.readersUsersPreview[k];
			var n = mkE( {
				tag:'a',
				title:htmlspecialchars( reader.title ),
				href:reader.url,
				className:'chatMsgReader picBorder'
			} );
			els.push(n);
			D.bgImage( n, reader.image.icon );
			if( k == READER_ICONS - 1 ){
				break;
			}
		}
		if( this.data.sender == D.ID ){
			els = els.reverse();
		}
		var more = this.data.readersCount - READER_ICONS; //count( this.data.readersUsersPreview );
		if( more > 0 ){
			els.push( {
				tag:'span',
				className:'chatMsgReader chatMsgReaderC',
				text:'+' + more
			} );
		}
		mkE.appendTypeElement( this._readerNode, els );
	},

	readAll:function(){
		this.data.readAll = true;
		this._readersDraw();
	},

	canEdit:function(){
		if( this.sender != D.ID ){
			return false;
		}
		if( this.data.sticker ){
			return false;
		}
		if( this.data.opt & D.chat.MAIL_OPT_SYSTEM ){
			return false;
		}
		if( !empty( this.data.attach ) ){ // chat attachments
			return false;
		}
		return this.data.ts > D.TIME - 300;
	},

	editing:function(v){
		if(v){
			addClassName( this.node, 'editing' );
			return;
		}
		removeClassName( this.node, 'editing' );
	},

	attachIds:function(){
		var re = [];
		for( var k in this.data.attach ){
			re.push( this.data.attach[k].id );
		}
		return re;
	},

	updateOnline:function(online){
		if( isset(online) ){
			this.data.senderUser.online = online;
		}
		switch( this.data.senderUser.online || D.chat.isOnline( this.sender ) ){
			case 'www':
				this._userOnlineNode.className = 'onlineWWWIcon icon';
				break;
			case 'mobile':
				this._userOnlineNode.className = 'onlineMobileIcon icon';
				break;
			default:
				this._userOnlineNode.className = '';
		}
	},

	onEmo:function(par){
		this.data.emotions = par.emotions;
		this._drawEmo();
	}

},
mkE.Base
);

D.ChatMsg.SELECT = [
	new DR.users.select.User().id().type().title().image().name().url(),
	new DR.users.select.UserDefault().aktitle().online(),
	new DR.msg.select.Mail().all().readers(false),
	new DR.msg.select.Attach().all(),
	new DR.msg.select.AttachImage().all(),
	new DR.users.select.Image().icon(),
	new DR.msg.select.Conv().all().membersUsersPreview(0),
	// say
	new DR.say.select.Link().id().url().title().host().image().favicon(),
	new DR.say.select.LinkImage().small()
];

/**
 * @class
 */
D.ChatMsgAttachList = Class(
	{
		/** D.ChatMsgAttach */
		_items:[],

		__construct:function(attaches, par){
			this.node = mkE( {
				tag:'div',
				className:'chatMsgAttaches'
			} );
			for( var i = 0; i < attaches.length; i++ ) {
				var attach = attaches[i];
				if( (attach.opt & D.msg.Attach.OPT_VOICE_MESSAGE) === D.msg.Attach.OPT_VOICE_MESSAGE ) {
					var a = new D.msg.Attach.VoiceMessage( attach, par ).append( this.node );
				} else {
					var a = new D.ChatMsgAttach( attach ).append( this.node );
				}
				a.list = this;
				this._items.push(a);
			}
			if( attaches[1] ){
				this._drawDownloadAll();
			}
		},

		gallery:function(item){
			D.onLoad( 'msg', D.closure( this, this._gallery, item ) );
		},

		_gallery:function(item){
			var l = new D.msg.Attach.Gallery(this);
			l.open(item);
		},

		_drawDownloadAll:function(){
			var optNode = mkE( {
				tag:'div'
			} ).append( this.node );
			var ids = [];
			for( var k in this._items ){
				ids.push( this._items[k].id );
			}
			var get = new Get( {
				i:ids.join(',')
			} );
			var getStr = '';
			try{
				getStr = get.str();
			} catch(e){
				get.add( 'name', '' ); // broken str
				getStr = get.str();
			}
			mkE( {
				tag:'a',
				className:'icon downloadIcon',
				text:D.Lang.get('Lejuplādēt visu'),
				href:D.ATTACH_DOWNLOAD + 'messages/down_all.php?' + getStr,
				prop:{
					target:'_blank'
				},
				attr:{
					download:''
				}
			} ).append(optNode);
		}
	},
	mkE.Base
);

/**
 * @class
 */
D.ChatMsgAttach = Class(
/** @lends {D.ChatMsgAttach#} */
{

	id:0,
	/** @type {D.ChatMsgAttachList} */
	list:null,

	/**
	 * @param {DR.msg.struct.Attach} attach
	 * @private
	 */
	__construct:function(attach){
		this.id = attach.id;
		this.attach = attach;
		var name = attach.name + ( attach.ext ? '.' + attach.ext : '' );
		this.node = mkE( {
			tag:'div',
			className:'chatAttach radius3',
			els:[
				this._imageNode = mkE( {
					tag:'div',
					className:'image radius3'
				} ),
				{
					tag:'div',
					className:'name cut',
					title:name,
					text:name
				}
			]
		} );
		D.bgImage( this.node, D.extIcon( attach.ext ) );
		if( attach.image ){
			if( attach.ext.toLowerCase() == 'gif' ){
				addClassName( this.node, 'gif' );
				mkE( {
					tag:'img',
					src:attach.downloadUrl
				} ).append( this._imageNode );
				this.node.style.backgroundImage = '';
				if( attach.image.w < 220 ){
					this.node.style.width = 'auto';
				}
			} else {
				D.bgImage( this._imageNode, attach.image.gm );
			}
		}
		this._drawOptions();
	},

	isDoc:function(){
		var ext = {
			'doc':true,
			'docx':true,
			'xls':true,
			'xlsx':true,
			'ppt':true,
			'pptx':true,
			'pdf':true,
			'rtf':true,
			'txt':true,
			'svg':true,
			'tif':true
		};
		return ext[ this.attach.ext.toLowerCase() ] || false;
	},

	isAudio:function(){
		var ext = {
			'mp3':true,
			'ogg':true,
			'wav':true,
			'webm':true
		};
		return ext[ this.attach.ext.toLowerCase() ] || false;
	},

	_drawOptions:function(){
		this._optNode = mkE( {
			tag:'div',
			className:'chatAttachOpt radius3',
			onclick:this._onclick,
			els:[
				{
					tag:'center',
					className:'size',
					text:this.attach.size ? D.fileSize( this.attach.size ) : ''
				}
			]
		} ).append( this.node );
		if( this.attach.opt & D.ChatMsgAttach.OPT_NOT_EXISTS ){
			mkE( {
				tag:'div',
				text:D.Lang.get('Šis pielikums vairs nav pieejams!'),
				className:'errorIcon icon colorWarn'
			} ).append( this._optNode );
			this._optNode.onclick = D.doNothing;
			this._optNode.style.cursor = 'default';
			return;
		}
		if( this.attach.image ){
			mkE( {
				tag:'a',
				className:'icon previewIcon',
				text:D.Lang.get('open'),
				onclick:this._onclick
			} ).append( this._optNode );
		} else if( this.isAudio() ){
			mkE( {
				tag:'a',
				className:'icon musicIcon',
				text:D.Lang.get('open'),
				onclick:this._onclick
			} ).append( this._optNode );
		}
		if( this.isDoc() ){
			mkE( {
				tag:'a',
				className:'icon googleDriveIcon',
				text:D.Lang.get('Atvērt ar google'),
				onclick:this._preview
			} ).append(this._optNode);
		}
		this._optDownloadNode = mkE( {
			tag:'a',
			className:'icon downloadIcon',
			text:D.Lang.get('Lejuplādēt'),
			href:this.attach.downloadUrl,
			onclick:D.stopPropagation
		} ).append( this._optNode );
		if( this.attach.opt & D.ChatMsgAttach.OPT_OK ){
			this._optDownloadNode.setAttribute( 'download', '' );
		}
	},

	_onclick:function(e){
		D.stopPropagation(e);
		if( this.isAudio() ){
			InfoBox.els( [
				{
					tag:'audio',
					src:this.attach.downloadUrl,
					className:'chatAttachAudio',
					attr:{
						controls:'',
						autoplay:''
					}
				}
			], { width:'auto' } );
			return;
		}
		if( this.isDoc() ){
			this._preview(e);
			return;
		}
		if( this.attach.image ){
			if( this.list ){
				this.list.gallery(this);
			} else {
				InfoBox.img( this.attach.image.large );
			}
			return;
		}
		location.assign( this.attach.downloadUrl );
	},

	_preview:function(e){
		D.stopPropagation(e);
		var downloadUrl = this.attach.downloadUrl.replace( D.ATTACH_DOWNLOAD, 'https://www.draugiem.lv/attach/' );
		var get = new Get( {
			url:( downloadUrl[0] == '/' ? document.location.protocol + downloadUrl : downloadUrl )
		} );
		window.open( 'https://docs.google.com/viewer?' + get, 'attach' + this.id );
	}
}, mkE.Base );

D.ChatMsgAttach.OPT_OK = 1;
D.ChatMsgAttach.OPT_NOT_EXISTS = 8;// --- msg.js --- 
// +++ notify.js +++ 
D.ChatNotify = function(){
	this.node = mkE( {
		tag:'div',
		className:'chatNotify radius3',
		prop:{
			onmouseover:D.closure( this, this._onmouseover ),
			onmouseout:D.closure( this, this._onmouseout ),
			onclick:D.closure( this, this._onclick )
		}
	} );
};

D.ChatNotify.prototype.timeout = 10000;
D.ChatNotify.prototype.persistent = false;

/**
 * @param {Node} child
 */
D.ChatNotify.prototype.appendChild = function(child){
	this.node.appendChild(child);
	return this;
};

D.ChatNotify.prototype.expand = function(){
	setTimeout( D.closure( this, function(){
		addClassName( this.node, 'chatNotifyExp' );
	} ), 10 );
};

D.ChatNotify.prototype.hide = function(){
	var i = array_search( this, D.chat._notifyItems, true );
	if( i !== false ){
		D.chat._notifyItems.splice( i, 1 );
	}
	this.node.remove();
};

D.ChatNotify.prototype.fade = function(){
	if (!this.persistent) {
		this._fadeTO = setTimeout( D.closure( this, function(){
			removeClassName( this.node, 'chatNotifyExp' );
		} ), this.timeout - 500 );
		this._removeTO = setTimeout( D.closure( this, function(){
			this.hide();
		} ), this.timeout );
	}
};

D.ChatNotify.prototype._onmouseover = function(){
	clearTimeout( this._fadeTO );
	clearTimeout( this._removeTO );
	addClassName( this.node, 'chatNotifyExp' );
};
D.ChatNotify.prototype._onmouseout = function(){
	this.fade();
};

D.ChatNotify.prototype.onclick = function(){
};

D.ChatNotify.prototype._onclick = function(){
	this.hide();
	this.onclick();
};
// --- D.ChatNotify ---
// --- notify.js --- 
// +++ upload.js +++ 
D.chat.Upload = function(par){
	var doNothing = function(){};
	this.buttonNode = par.buttonNode;
	this.onInit = par.onInit || doNothing;
	this.onSelect = par.onSelect || doNothing;
	this.onComplete = par.onComplete || doNothing;
	D.onLoad( 'Upload', D.closure( this, this._onLib, par ) );
	this.node = mkE( {
		tag:'div',
		className:'chatUpload'
	} );
	this._items = {};
};

D.chat.Upload.prototype._onLib = function(par){
	this._uploader = new Uploader( {
		caption:'',
		title:D.chat.l.get('Chat add file'),
		onInit:this.onInit,
		thumbWidth:70,
		thumbHeight:70,
		thumbCrop:true,
		uploadNextWithoutData:true,
		DS:D.chat.DS,
		onSelect:D.closure( this, this._onSelect ),
		dropNode:par.dropNode || null,
		onGetUploadData:function(par){
			return {
				url:D.ATTACH_UPL + 'messages/upload.php?DS=' + D.chat.DS
			}
		},
		onListUploadComplete:D.closure( this, this._onUploadComplete ),
		onThumb:D.closure( this, this._onThumb ),
		onUploadProgress:D.closure( this, this._onUploadProgress ),
		onError:D.closure( this, this._onError ),
		onUploadIOError:D.closure( this, this._onError ),
		onUploadCompleteData:D.closure( this, this._onUploadCompleteData )
	} );
	this._uploader.append( this.buttonNode );
};

D.chat.Upload.prototype._onUploadComplete = function(){
	this.onComplete();
};

D.chat.Upload.prototype._onSelect = function(par){
	this.onSelect();
	var item = new D.chat.UploadItem( this, par );
	this._items[ par.id ] = item;
	item.node.append( this.node );
	if( !par.size || par.size > 10 * 1024 * 1024 ){
		item.error('size');
		return false;
	}
	return true;
};

D.chat.Upload.prototype._onThumb = function(par){
	if( !this._items[ par.id ] ){
		return;
	}
	if( !par.data ){
		return;
	}
	this._items[ par.id ].src( 'data:image/jpg;base64,' + par.data );
};

D.chat.Upload.prototype._onUploadCompleteData = function(par){
	if( !this._items[ par.id ] ){
		return;
	}
	this._items[ par.id ]._onUploadCompleteData(par);
};

D.chat.Upload.prototype._onUploadProgress = function(par){
	if( !this._items[ par.id ] ){
		return;
	}
	this._items[ par.id ]._onUploadProgress(par);
};

D.chat.Upload.prototype._onError = function(par){
	if( !this._items[ par.id ] ){
		return;
	}
	this._items[ par.id ].error('net');
};

D.chat.Upload.prototype.clear = function(){
	clearNode( this.node );
	this._items = {};
};

D.chat.Upload.prototype.ids = function(){
	var re = [];
	for( var k in this._items ){
		var item = this._items[k];
		if( item.id ){
			re.push( item.id );
		}
	}
	return re;
};


D.chat.Upload.prototype.uploading = function(){
	return Boolean( this._uploader.uploading );
};

D.chat.Upload.extIcon = function(ext){
	var fn = 'def.png';
	switch(ext){
		case 'doc':
		case 'docx':
			fn = 'doc.png';
			break;
		case 'csv':
		case 'xls':
		case 'xlsx':
			fn = 'xls.png';
			break;
		case 'ppt':
			fn = 'ppt.png';
			break;
		case 'exe':
			fn = 'exe.png';
			break;
		case 'pdf':
			fn = 'pdf.png';
			break;
		case 'avi':
		case 'mov':
		case 'mp4':
		case 'mpeg':
		case 'wmv':
			fn = 'mov.png';
			break;
		case 'wav':
		case 'mp3':
		case 'ogg':
		case 'wma':
		case 'webm':
			fn = 'mus.png';
			break;
		case 'jpg':
		case 'png':
		case 'gif':
		case 'psd':
		case 'bmp':
			fn = 'pic.png';
			break;
	}
	return D.PIMG + 'i/ext/small/' + fn;
};

D.chat.UploadItem = function( upload, par ){
	this.id = false;
	this._id = par.id; // faila identifikators uploadā
	this._upload = upload;
	this.node = mkE( {
		tag:'div',
		className:'chatUploadItem',
		els:[
			this._img = mkE( {
				tag:'img',
				style:{
					display:'none'
				}
			} ),
			{
				tag:'div'
			},
			this._progressNode = mkE( {
				tag:'div',
				className:'chatUploadItemProgress radius10',
				els:[
					this._progressC = mkE( {
						tag:'div',
						className:'radius10'
					} )
				]
			} ),
			{
				tag:'a',
				className:'chatUploadItemDel',
				prop:{
					onclick:D.closure( this, this.remove )
				}
			},
			{
				tag:'div',
				className:'chatUploadItemFn',
				text:par.name
			}
		]
	} );
	var exts = par.name.toLocaleLowerCase().split('.');
	this.icon( D.chat.Upload.extIcon( exts[ exts.length - 1 ] ) );
};

D.chat.UploadItem.prototype.src = function(src){
	this._img.style.display = '';
	this._img.src = src;
};

D.chat.UploadItem.prototype.icon = function(src){
	this.node.style.backgroundImage = "url('" + src + "')";
};

D.chat.UploadItem.prototype._onUploadCompleteData = function(item){
	var upload = new DR.msg.struct.AttachUploadRe( D.JSON.decode( item.data ) );
	if( upload.error ){
		//TODO set error
		return;
	}
	this.id = upload.attach.id;
	if( upload.attach.image ){
		this.src( upload.attach.image.gm );
	}
	this._progressNode.remove();
};

D.chat.UploadItem.prototype.progress = function(p){
	this._progressC.style.width = Math.round(p) + '%'
};

D.chat.UploadItem.prototype._onUploadProgress = function(par){
	this.progress( par.bytesLoaded / par.bytesTotal * 100 );
};

D.chat.UploadItem.prototype.remove = function(){
	delete this._upload._items[ this._id ];
	removeNode( this.node );
};

D.chat.UploadItem.prototype.error = function(error){
	this._progressNode.remove();
	this.node.style.background = '';
	addClassName( this.node, 'errorIcon' );
	switch(error){
		case 'size':
		case 'Filedata size':
			this.node.title = D.Lang.get('Attach upload error size');
			break;
		case 'Closed':
			this.node.title = D.Lang.get('Attach upload error closed');
			break;
		case 'Auth':
		case 'Tmp':
		case 'Filedata':
		case 'Filedata error':
			this.node.title = D.Lang.get('Attach upload error tmp');
			break;
		case 'net':
			this.node.title = D.Lang.get('Attach upload error net');
			break;
	}
};
// --- upload.js --- 
// +++ msg.js +++ 
D.msg = {

	l:new D.Lang('xMsg'),

	CALL:{ chat:true },

	MAIL_SELECT:[
		new DR.msg.select.MailList().all(),
		new DR.msg.select.ConvMailsRe().all(),
		new DR.msg.select.Mail().all().readers(false).membersUsersPreview(false).membersCount(false),
		new DR.msg.select.Attach().all().senderUser(false),
		new DR.msg.select.AttachImage().h().w().gm().large(),
		new DR.users.select.User().id().type().title().image().url().deleted(),
		new DR.users.select.UserDefault().aktitle(),
		new DR.users.select.Image().icon(),
		new DR.users.select.UserDefault().online(),
		// draft
		new DR.users.select.Group().all(),
		// say
		new DR.say.select.Link().id().url().title().host().image().favicon(),
		new DR.say.select.LinkImage().small()
	],

	OPEN_CONV_SELECT:[
		new DR.msg.select.Conv().all().membersUsersPreview(0),
		new DR.base.select.Image().icon().original(),
		new DR.users.select.User().title()
	],

	BOX_PG_SIZE:10,

	CONV_COLOR:[
		'#95b4da',
		'#c0d56e',
		'#ff9e57',
		'#f6c943',
		'#ceadd5',
		'#f8a0c1',
		'#97d3df'
	],

	/**
	 * @param {number} mid
	 * @param {number} [uid]
	 */
	openMailConv:function( mid, uid ){
		var _mMailOffset = new DR.msg.MailOffset;
		_mMailOffset.uid = uid || null;
		_mMailOffset.mid = mid;
		_mMailOffset.select = [
			new DR.msg.select.MailOffsetRe().all()
		].concat( D.msg.OPEN_CONV_SELECT );
		_mMailOffset.onLoad = function(){
			if( _mMailOffset.re.offset < 0 ){
				alert('Covn not found');
				return;
			}
			var url = './' + D.msg.convUrl( _mMailOffset.re.conv );
			var get = new Get({});
			get.add( 'mid', _mMailOffset.mid );
			if( _mMailOffset.re.pg > 1 ){
				get.add( 'pg', _mMailOffset.re.pg );
			}
			url += '?' + get;
			Section.navigate(url);
		};
		_mMailOffset.onError = function(){
			if( _mMailOffset.error == 'conv not exists' ){
				alert('Covn not found');
			}
		};
		_mMailOffset.call();
	},

	openConv:function( fid, uid ){
		var _mConvMails = new DR.msg.ConvMails;
		_mConvMails.pg = 1;
		_mConvMails.fid = fid;
		_mConvMails.select = [
			new DR.msg.select.ConvMailsRe().conv()
		].concat( D.msg.OPEN_CONV_SELECT );
		_mConvMails.onLoad = function(){
			var path;
			if( Url.get().match(/\/messages\//) ){
				path = '../messages/';
			} else {
				path = '/messages/';
			}
			Section.navigate( path + D.msg.convUrl( _mConvMails.re.conv ) );
		};
		_mConvMails.call();
	},

	/**
	 * @param {DR.msg.struct.Conv} conv
	 */
	convUrl:function(conv){
		var re = encodeURIComponent( D.translit( conv.topic || ( conv.friend ? conv.friend.title : '' ) ).replace( ' ', '_' ) );
		re += ( re ? '_' : '' ) + String( conv.id );
		return re;
	},

	/**
	 * @param {DR.msg.struct.Conv} conv
	 */
	convCaption:function(conv){
		return conv.topic || ( conv.friend ? conv.friend.title : '' ) || D.Lang.get('Group conversation');
	},

	/**
	 * @param {D.msg.Form.Par|Object} [par]
	 */
	newMail:function(par){
		if( D.MAIL_CLOSED ){
			InfoBox.els( [
				T.error( D.Lang.get('section_down') )
			] );
			return;
		}
		par = par || {};
		var fp = new D.msg.Form.Par;
		fp.uid = par.uid;
		fp.draft = par.draft || 0;
		fp.text = par.text || '';
		fp.topic = par.topic || '';
		fp.recipient = par.recipient || par.fid || 0;
		fp.acMethod = par.acMethod;
		fp.acData = par.acData;
		var changed = false;
		fp.onChange = function(){
			changed = true;
		};
		this._newMailForm = new D.msg.Form(fp);
		this._newMailForm.expand(true);
		this._newMailForm.onSend = D.closure( this, this._newMailOnSend, par );
		this._newMailModal = new D.Modal( {
			width:720,
			withoutPadding:true,
			overflowVisible:true,
			title:D.Lang.get( par.mail ? 'Pārsūtīta vēstule' : 'Jauna vēstule' ),
			overlayClose:false,
			onClose:D.closure( this, function(){
				this._newMailForm.draftSave( {
					sync:true
				} );
				if( par.draft && changed ){
					Section.navigate();
				}
				if( par.onClose ){
					par.onClose();
				}
			} )
		} );
		this._newMailModal.els( [ this._newMailForm ] );
		if( par.mail ){ // forward
			this._newMailForm.setMail( par.mail, { forward:true } );
		}
		if (par.text) {
			this._newMailForm.setText(par.text);
		}
		this._newMailForm.focus();
	},

	_newMailOnSend:function( par, mail, conv ){
		D.log( mail, conv );
		this._newMailModal.onClose = D.doNothing;
		this._newMailModal.close();
		var modal = new D.Modal( {
			title:D.Lang.get('Jauna vēstule')
		} );
		var els = [
			T.success('Vēstule nosūtīta.'),
			new T.Form.Button( {
				caption:D.Lang.get('Open conversation'),
				color:'link',
				onclick:function(){
					modal.close();
					if( location.href.indexOf('/messages') == -1 ){
						Section.navigate( '/messages/' + D.msg.convUrl(conv) );
					} else {
						Section.navigate( '../messages/' + D.msg.convUrl(conv) );
					}
				}
			} ),
			new T.Form.Button( {
				caption:D.Lang.get('close'),
				color:'link',
				onclick:function(){
					modal.close();
					if( par.draft ){ // send draft
						Section.navigate();
					}
				}
			} )
		];
		modal.els(els);
		if( par.onSend ){
			par.onSend();
		}
	},

	/**
	 * @param {DR.msg.struct.Attach} attach
	 * @return {Boolean}
	 */
	canAttachAddGallery:function(attach){
		if( attach.ext.toLowerCase() == 'gif' ){
			return false;
		}
		return attach.image && attach.image.w > 240 && attach.image.h > 240;
	},

	/**
	 * @param {object} data
	 * @returns {DR.msg.struct.Mail}
	 */
	chatMail2API:function(data){
		D.log(data);
		/** @type {DR.msg.struct.Mail} */
		var re = new DR.msg.struct.Mail;
		re.id = Number(data.id);
		re.sender = data.sender;
		re.opt = data.opt;
		re.ts = data.ts;
		re.membersCount = 0;
		re.membersUsersPreview = [];
		if( re.opt & D.msg.Mail.OPT_JSON ){
			var body = D.JSON.decode( data.body );
			if(body){
				re.text = body.b || '';
				if( body.x ){
					re.sticker = body.x.stickerId || 0;
				}
				if( re.opt & D.msg.Mail.OPT_SYSTEM ){
					var members = ( body.members || body.add || [] ); // for user load
					re.members = members.slice( 0, D.msg.Mail.MEMBERS_PREVIEW_COUNT );
					re.membersCount = count(members);
				}
				if( body.edited ){
					re.edited = body.edited;
				}
			} else {
				re.text = '';
			}
		} else {
			re.text = data.body;
		}
		re.attach = [];
		if(!data.attach){
			return re;
		}
		for( var k in data.attach ){
			var r = data.attach[k] ;
			var a = new DR.msg.struct.Attach(r);
			var get = new Get( {
				i:a.id
			} );
			if( D.DEV ){
				get.add( 'DS', D.DS );
			}
			a.downloadUrl = D.ATTACH_DOWNLOAD + 'messages/down.php?' + get;
			if( r.image_ ){
				a.image = new DR.msg.struct.AttachImage;
				a.image.large = r.image_;
				a.image.gm = r.image_gm;
			}
			re.attach.push(a);
		}
		return re;
	}
};

// +++++++++++++++++++++++++++++++++++++++++++++++++
// +++ D.msg.LoadMore +++
/**
 * @class
 */
D.msg.LoadMore = Class(
	/**
	 * @lends {D.msg.LoadMore}
	 */
	{
		__construct:function(par){
			par = par || {};
			this.onLoad = par.onLoad || function(){};
			this.node = mkE( {
				tag:'div',
				className:'LoadMore',
				els:[
					this._button = new T.Form.Button( {
						caption:( par.caption || D.Lang.get('more') ),
						color:'link',
						onclick:this._onclick
					} )
				]
			} );
		},

		loading:false,

		append:function(parent){
			this.node.append(parent);
			return this;
		},

		remove:function(){
			this.node.remove();
		},

		disableAutoLoad:false,

		_onclick:function(){
			this.disableAutoLoad = false;
			this.load();
		},

		load:function(){
			if( this.loading || this.disableAutoLoad ){
				return;
			}
			if( this.node.style.display == 'none' ){
				return;
			}
			this.loading = true;
			D.loadingOverlay( this.node );
			this._button.disable(true);
			if( this.onLoad() === false ){
				this.reset();
			}
		},

		reset:function(){
			this.loading = false;
			D.removeLoadingOverlay( this.node );
			this._button.disable(false);
			this.node.style.display = '';
		},

		hide:function(){
			this.loading = false; // for check hidden status
			this.node.style.display = 'none';
		},

		show:function(){
			this.node.style.display = '';
		},

		badge:function(v){
			this._button.badge(v);
		}
	}
);


// +++ Confirm +++
/**
 * @class
 */
D.msg.Confirm = Class(
	/**
	 * @lends {D.msg.Confirm}
	 */
	{
		__construct:function(par){
			this.confirmText = par.confirmText;
			this.onConfirm = par.onConfirm || this.onConfirm;
			var els = [
				this._pNode = mkE( {
					tag:'p',
					text:par.text
				} ),
				this._input = new T.Form.Input( {
				} ),
				new T.Form.Footer( {
					els:[
						new T.Form.Button( {
							caption:par.buttonCaption,
							onclick:this._check
						} )
					]
				} )
			];
			if( par.html ){
				this._pNode.innerHTML = par.html;
			}
			this._modal = new D.Modal( {
				title:par.title || '',
				width:300
			} );
			this._modal.els(els);
		},

		_check:function(){
			var v = this._input.value();
			if( v == this.confirmText ){
				this._onConfirm();
				return;
			}
			if( D.translit( v.toLowerCase() ) == D.translit( this.confirmText.toLowerCase() ) ){
				this._onConfirm();
				return;
			}
			this._input.error(true);
		},

		_onConfirm:function(){
			this._modal.close();
			this.onConfirm();
		},

		onConfirm :D.doNothing
	}
);

// +++ Report +++
/**
 * @class
 */
D.msg.Report = Class(
	/**
	 * @lends {D.msg.Report}
	 */
	{
		__construct:function(par){
			this.mid = par.mid || 0;
			var rlp = new T.Form.RadioListPar;
			rlp.options = [
				new T.Form.Option( D.msg.l.get('abuse_chain_letter'), 'kede' ),
				new T.Form.Option( D.msg.l.get('abuse_dignity'), 'ciena' ),
				new T.Form.Option( D.msg.l.get('abuse_harassment'), 'uzmaksanas' ),
				new T.Form.Option( D.msg.l.get('abuse_other'), 'cits' )
			];
			rlp.onchange = this._onchange;
			this.node = mkE( {
				tag:'div',
				els:[
					{
						tag:'p',
						innerHTML:D.msg.l.get('report_abuse_text')
					},
					this._rl = new T.Form.RadioList(rlp),
					this._otherTa = new T.Form.TextArea( {
						//caption:D.msg.l.get('abuse_other') + ':'
					} ),
					new T.Form.Footer( {
						els:[
							this._reportButton = new T.Form.Button( {
								caption:D.msg.l.get('report'),
								onclick:this._report
							} ),
							new T.Form.Button( {
								caption:D.Lang.get('cancel'),
								color:'link',
								onclick:this._cancel
							} )
						]
					} )
				]
			} );
			this._otherTa.hide();
			this._reportButton.disable(true);
			this._modal = new D.Modal( {
				title:D.msg.l.get('Ziņot par pārkāpumu'),
				width:400
			} );
			this._modal.els([ this.node ]);
		},

		_onchange:function(){
			this._reportButton.disable(false);
			var other = ( this._rl.value() == 'cits' );
			this._otherTa.visible(other);
			if(other){
				this._otherTa.focus();
			}
		},

		_report:function(){
			this._reportButton.disable();
			D.loadingOverlay( this.node );
			var mReport = new DR.msg.Report;
			mReport.mid = this.mid;
			mReport.type = this._rl.value();
			mReport.text = this._otherTa.value();
			mReport.onLoad = this._mReportRe;
			mReport.call();
		},

		_mReportRe:function(){
			clearNode( this.node );
			T.success(
				D.msg.l.get('Paldies!'),
				D.msg.l.get('Tavs ziņojums ir nodots administrācijai.')
			).append( this.node );
			new T.Form.Footer( {
				els:[
					new T.Form.Button( {
						caption:D.Lang.get('close'),
						color:'link',
						onclick:this._cancel
					} )
				]
			} ).append( this.node );
		},

		_cancel:function(){
			this._modal.close();
		}
	}
);
// --- msg.js --- 
// +++ mail_list.js +++ 
/**
 * @constructor
 * @extends {mkE.Base}
 */
D.msg.MailListBase = Class(
	/**
	 * @lends {D.msg.MailListBase#}
	 */
	{
		__construct:function(){
			this._pgFrom = 1;
		},

		/** @type {T.Pg} */
		_pg:null,

		_updatePgOffset:function(offset){
			if( this._updatePgRev ){ // reverse
				offset = this._itemsSorted.length - offset - 1; // inv
				this._pg.value( Math.floor( offset / D.msg.Conv.PG_SIZE ) + this._pgFrom );
				return;
			}
			this._pg.value( Math.floor( offset / D.msg.Conv.PG_SIZE ) + this._pgFrom );
		},

		_updatePg:function(up){
			if( !this._pg || !this._itemsSorted.length ){
				return;
			}
			var i;
			if(up){
				for( i = 0; i < this._itemsSorted.length; ++ i ) {
					if( D.inScreen( this._itemsSorted[i].node ) ){
						this._updatePgOffset(i);
						return;
					}
				}
				return;
			}
			for( i = this._itemsSorted.length - 1; i > 0; -- i ){
				if( D.inScreen( this._itemsSorted[i].node ) ){
					this._updatePgOffset(i);
					return;
				}
			}
		}

	},
	mkE.Base
);

/**
 * @extends {D.msg.MailListBase}
 * @constructor
 */
D.msg.MailList = Class(
	/**
	* @lends {D.msg.MailList#}
	*/
	{
		__construct:function(par){
			par = par || {};
			this._items = {};
			this._itemsSorted = [];
			this.node = mkE( {
				tag:'div',
				className:'Msg',
				els:[
					this._itemsNode = mkE( {
						tag:'div',
						els:[
							this._emptyNode = T.info( par.emptyText || D.msg.l.get('Šeit nav nevienas vēstulītes.') )
						]
					} ),
					this.loadMoreButton = new D.msg.LoadMore( {
						caption:D.Lang.get('more'),
						onLoad:this._loadMore
					} ),
					this._footerHolderNode = mkE( {
						tag:'div',
						className:'MsgConvFooterW',
						els:[
							this._footerNode = mkE( {
								tag:'div',
								className:'MsgConvFooter'
							} )
						]
					} )
				]
			} );
			this.loadMoreButton.hide();
		},

		showPager:true,

		clear:function(){
			this._items = {};
			this._itemsSorted = [];
			clearNode( this._itemsNode );
			this.loadMoreButton.reset();
		},

		/**
		 * @param {D.msg.Mail} mail
		 */
		addMail:function(mail){
			if( this._emptyNode ){
				this._emptyNode.remove();
				this._emptyNode = null;
			}
			if( this._items[ mail.id ] ){
				return;
			}
			this._items[ mail.id ] = mail;
			this._itemsSorted.push(mail);
			mail.append( this._itemsNode );
		},

		onLoadMore:D.doNothing,

		_loadMore:function(){
			this.onLoadMore();
		},

		onSetPg:D.doNothing,

		_setPg:function(pg){
			this._pgFrom = pg;
			this.onSetPg(pg);
			Section.replaceUrl( '?' + ( new Get().add( 'pg', pg ) ) );
		},

		setPgs:function( pg, pgs ){
			if( this._pg ){
				this._pg.remove();
			}
			if( pg < pgs ){
				this.loadMoreButton.reset();
			} else {
				this.loadMoreButton.hide();
			}
			if( pgs < 2 || !this.showPager ){
				return;
			}
			this._pg = new T.Pg( {
				pg:pg,
				pgs:pgs,
				callback:this._setPg
			} );
			this._pg.append( this._footerNode );
		},

		onScroll:function(){
			/*
			if( this.loadMoreButton.loading ){
				if( !D.inScreen( this._footerHolderNode ) ){
					addClassName( this._footerHolderNode, 'fixed' );
				}
				return;
			}*/
			if( D.inScreen( this._footerHolderNode ) ){
				removeClassName( this._footerHolderNode, 'fixed' );
			} else {
				addClassName( this._footerHolderNode, 'fixed' );
			}
			if( D.inScreen( this.loadMoreButton.node ) ){
				this.loadMoreButton.load();
			}
		}

	},
	D.msg.MailListBase
);
// --- mail_list.js --- 
// +++ mail.js +++ 
D.msg.Mail = Class(
	{

		cid:0, // set form outside
		/** @type {null|D.msg.Conv} */
		conv:null, // set form outside

		/**
		 * @constructor
		 * @param {DR.msg.struct.Mail} mail
		 * @param {D.msg.Mail.Par} [par]
		 */
		__construct:function( mail, par ){
			this.data = mail;
			par = par || {};
			this.par = par;
			this._emoButton = par.emoButton || false;
			this.id = mail.id;
			this.sender = mail.sender;
			this.senderUser = mail.senderUser;
			this.isFav = mail.isFav;
			this.ts = mail.ts;
			this.opt = mail.opt;
			this.uid = par.uid || null;
			var date = new D.Date( mail.ts );
			this.date = date.toSqlDate();
			this.isDraft = ( mail.opt & D.msg.Mail.OPT_DRAFT );
			this.edited = mail.edited;
			/** @type {DR.msg.struct.Mail} */
			this.data = mail;
			this._skipTrash = par.skipTrash;
			var k;
			this.node = mkE( {
				tag:'div',
				className:'MsgMail SIconHover',
				attr:{
					'data-id':mail.id
				},
				els:[
					this._dateNode = mkE( {
						tag:'div',
						className:'date',
						els:[
							{
								tag:'b',
								text:D.ddate( this.ts, { time:false } )
							}
						]
					} ),
					this._senderIconNode = mail.senderUser.deleted ? mkE( {
						tag: 'span',
						className:'userIcon picBorder'
					} ) : mkE( {
						tag:'a',
						className:'userIcon picBorder',
						href:mail.senderUser.url
					} ),
					this._contentNode = mkE( {
						tag:'div',
						className:'content',
						els:[
							this._senderNode = mkE( {
								tag:'div'
							} ),
							{
								tag:'div',
								className:'optionsW',
								els:[
									this._optNode = mkE( {
										tag:'div',
										className:'options',
										prop:{
											onclick:D.stopPropagation
										},
										els:[
											this._iconsNode = mkE( {
												tag:'span'
											} )
										]
									} )
								]
							}, // .optionsW
							this._textNode = mkE( {
								tag:'p',
								className:'radius5'
							} )
						]
					} ), // .content
					this._footerNode = mkE( {
						tag:'div',
						className:'footer',
						els:[
							this._timeNode = mkE( {
								tag:'font',
								className:'color2',
								els:[
									( par.fullTime ? new T.Time( mail.ts ) : date.format('H:i') )
								]
							} ),
							this._readerNode = mkE( {
								tag:'span',
								className:'readers'
							} )
						]
					} )
				]
			} );
			if( this.sender == ( this.uid || D.ID ) ){
				addClassName( this.node, 'MsgMailMy' );
			}
			if( mail.opt & D.msg.Mail.OPT_SYSTEM ){
				this._systemMsg();
				return;
			}
			if( this.edited ){
				addClassName( this._timeNode, 'icon editGrayIcon' );
				this._timeNode.onmouseover = this._timeMouseOver;
			}
			if( !this.isDraft && mail.senderUser instanceof DR.users.struct.UserDefault ){
				this._userOnlineNode = mkE( {
					tag:'span'
				} ).append( this._senderIconNode );
				this.updateOnline();
			}
			/*
			if( this.uid != mail.sender && mail.sender != 4975532 && mail.senderUser instanceof DR.users.struct.UserDefault ){
				this._senderIconNode.title = D.Lang.get( 'last_time_seen_' + mail.senderUser.sex ) + ' ' + D.ddate2( mail.senderUser.lastSeen );
			}*/
			if( mail.opt & D.msg.Mail.OPT_ADS ){
				this._textNode.innerHTML = mail.text;

				mkE({ tag: 'br' }).append( this._footerNode );

				if ( mail.advertAgreement ) {
					if ( mail.advertAgreement.value !== DR.msg.struct.AdvertAgreement.VALUE_AGREE ) {
						this._contentNode.style.display = 'none';
						this._senderIconNode.style.display = 'none';
						var agr = new D.msg.Mail.AdvertAgreement(
							mail.advertAgreement,
							D.closure( this, function() {
								this._contentNode.style.display = '';
								this._senderIconNode.style.display = '';
								agr.node.style.display = 'none';
								this._advAgreeCloseNode.style.display = '';
							}),
							D.closure( this, function() {
								if ( mail.advertAgreement.disagreeImage ) {
									agr.node.style.display = 'none';
									clearNode( this._contentNode );
									this._contentNode.style.display = '';
									this._senderIconNode.style.display = '';
									if ( mail.advertAgreement.disagreeUrl ) {
										mkE({
											tag: 'a',
											href: mail.advertAgreement.disagreeUrl,
											target: '_blank',
											els: [{
												tag: 'img',
												src: mail.advertAgreement.disagreeImage.original
											}]
										}).append( this._contentNode );
									} else {
										mkE({
											tag: 'img',
											src: mail.advertAgreement.disagreeImage.original
										}).append( this._contentNode );
									}
								} else {
									Section.navigate('./');
								}
							}),
							mail.advertId
						);
						D.insertAfter( agr.node, this._contentNode );
					}

					this._advAgreeCloseNode = mkE({
						tag: 'a',
						className: 'optOutAdvert',
						onclick: D.closure( this, function() {
							this._mAagree = new DR.msg.AdvertAgree();
							this._mAagree.advertId = mail.advertId;
							this._mAagree.value = false;
							this._mAagree.onLoad = function() {
								Section.navigate('./');
							};
							this._mAagree.call();
						}),
						text: D.msg.l.get('close_advert_agree')
					}).append( this._footerNode );
					mkE({ tag: 'br' }).append( this._footerNode );
					this._advAgreeCloseNode.style.display = mail.advertAgreement.value === DR.msg.struct.AdvertAgreement.VALUE_AGREE ? '' : 'none';
				}

				if ( mail.advertClose && mail.advertId ) {
					this._advCloseNode = mkE({
						tag: 'a',
						className: 'optOutAdvert',
						onclick: this._closeAdvert,
						text: D.msg.l.get('close_advert')
					}).append( this._footerNode );
				}
			} else {
				this._textNode.innerHTML = nl2br( mail.text );
			}
			if( mail.sticker ){
				mkE( {
					tag:'img',
					className:'sticker',
					src:D.getStickerImageUrl( mail.sticker )
				} ).append( this._textNode );
			}
			if( mail.editedEmpty ){
				mkE( {
					tag:'i',
					className:'color2',
					text:D.Lang.get('Lietotājs dzēsis šo saturu.')
				} ).append( this._textNode );
			}
			if( mail instanceof DR.msg.struct.DraftMail ){
				this.isDraft = true;
				var recUserNode;
				if( mail.fid < 0 ){
					recUserNode = mkE( {
						tag:'b',
						text:mail.topic || D.Lang.get('Group conversation')
					} );
					this._senderIconNode.style.backgroundColor = D.msg.CONV_COLOR[ Math.abs( mail.fid ) % D.msg.CONV_COLOR.length ];
					D.bgImage( this._senderIconNode, D.PIMG + 'messages/img/icn_grupassarak_s.png' );
				} else if( !empty( mail.membersUsers ) || !empty( mail.groupsObj ) ){
					var els = [];
					for( k in mail.groupsObj ){
						if( els.length ){
							els.push(', ');
						}
						els.push( mkE( {
							tag:'b',
							els:[
								mail.groupsObj[k].caption, ' (', mail.groupsObj[k].count, ')'
							]
						} ) );
					}
					for( k in mail.membersUsers ){
						if( els.length ){
							els.push(', ');
						}
						els.push( mkE( {
							tag:'a',
							className:'user',
							href:mail.membersUsers[k].url,
							text:mail.membersUsers[k].title
						} ) );
					}
					recUserNode = mkE( {
						tag:'div',
						className:'cut',
						els:els
					} );
					if( !empty( mail.groupsObj ) || els.length > 1 ){
						this._senderIconNode.style.backgroundColor = D.msg.CONV_COLOR[Math.abs(mail.fid) % D.msg.CONV_COLOR.length];
						D.bgImage( this._senderIconNode, D.PIMG + 'messages/img/icn_grupassarak_s.png' );
					} else if( mail.membersUsers[0] ){
						D.bgImage( this._senderIconNode, mail.membersUsers[0].image.icon );
					}
				} else {
					recUserNode = mkE( {
						tag:'b',
						text:mail.topic || D.msg.l.get('Bez adresāta')
					} );
					D.bgImage( this._senderIconNode, D.PIMG + 'i/profile/i_no_pic.png' );
				}
				recUserNode.append( this._senderNode );
			} else if (mail.senderUser.deleted) {
				mkE( {
					tag:'b',
					className:'user',
					text:mail.senderUser.title
				} ).append( this._senderNode );
				D.bgImage( this._senderIconNode, mail.senderUser.image.icon );
			} else {
				mkE( {
					tag:'a',
					className:'user',
					href:mail.senderUser.url,
					text:mail.senderUser.title
				} ).append( this._senderNode );
				D.bgImage( this._senderIconNode, mail.senderUser.image.icon );
			}
			if( !(mail.opt & D.msg.Mail.OPT_ADS) ){
				D.linksReplace( this._textNode );
			}
			this._drawOptions();
			this._drawLinks();
			this._drawAttach();
			D.replaceCommentsWithNode( this._textNode, this._replaceUsers );
			D.smileyReplace( this._textNode );
			if( par.optOpenConv || count( mail.attach ) > 1 || ( mail.opt & D.msg.Mail.OPT_DRAFT ) ){
				this._optLinksNode = mkE( {
					tag:'div',
					className:'optLinks',
					prop:{

					}
				} ).append( this._contentNode );
				if( par.optOpenConv ){
					mkE({
						tag:'a',
						className:'icon replyIcon',
						text:D.msg.l.get('Atvērt saraksti'),
						onclick:this._openInConv
					}).append(this._optLinksNode);
				}
				if( this.isDraft ){
					mkE( {
						tag:'a',
						//className:'icon replyIcon',
						text:D.msg.l.get('Turpināt'),
						onclick:this._optResume
					} ).append(this._optLinksNode);
				}
				var attachCount = 0;
				var attachPics = 0;
				for( k in mail.attach ){
					var attach = mail.attach[k];
					if( attach.opt & D.msg.Attach.OPT_NOT_EXISTS ){
						continue;
					}
					++ attachCount;
					if( D.msg.canAttachAddGallery(attach) ){
						++ attachPics;
					}
				}
				if( attachCount > 1 ){
					var ids = [];
					for( k in mail.attach ){
						ids.push( mail.attach[k].id );
					}
					var get = new Get( {
						i:ids.join(','),
						name:( mail.senderUser.title.split(' ')[0] + ' ' + mail.text.substr( 0, 30 ) ).replace( /[^0-9 a-zā-ž]/i, '' )
					} );
					if( this.uid && D.ID != this.uid ){
						get.add( 'uid', this.uid );
					}
					var getStr = '';
					try{
						 getStr = get.str();
					} catch(e){
						get.add( 'name', '' ); // broken str
						getStr = get.str();
					}
					mkE( {
						tag:'a',
						className:'',
						text:D.msg.l.get('Lejuplādēt visu'),
						href:D.ATTACH_DOWNLOAD + 'messages/down_all.php?' + getStr,
						prop:{
							target:'_blank'
						},
						attr:{
							download:''
						}
					} ).append( this._optLinksNode );
				}
				if( attachPics > 1 ){
					mkE( {
						tag:'a',
						className:'',
						text:D.msg.l.get('Izveidot galeriju'),
						onclick:this._addGallery
					} ).append( this._optLinksNode );
				}
			}
			if( this.uid != mail.sender && mail.isSpam ){
				clearNode( this._textNode );
				var bx = T.error( D.msg.l.get('spam') );
				bx.style.marginRight = '30px'; // hax
				bx.append( this._textNode );
			}
			this._readersDraw();
			this._drawEmo();
		},

		_drawEmo:function(){
			if( !empty( this.data.emotions ) && !this._emotions ){
				this._emotions = new D.msg.MsgEmo( {
					uid:this.uid,
					mid:this.id
				} );
				this._emotions.append( this._contentNode );
			}
			if( this._emotions ){
				this._emotions.set( this.data.emotions );
			}
		},

		_replaceUsers:function(text){
			var m = text.match(/user:([0-9]*)/);
			if( !m || !this.data.users[ m[1] ] ){
				return;
			}
			var user = this.data.users[ m[1] ];
			var a = mkE( {
				tag:'a',
				text:user.title,
				href:user.url
			} );
			D.Say.addUserTooltip( a, user );
			return a;
		},
		
		/**
			* @param {DR._Method} method
			* @private
			*/
		_call:function(method){
			if( this.conv ){
				this.conv._call(method);
				return;
			}
			var ac = new DR.ApiCall;
			ac.addMethod(method);
			this.onBeforeApiCall(ac);
			ac.call();
		},

		updateOnline:function(online){
			if( !this._userOnlineNode ){
				return;
			}
			if( isset(online) ){
				this.data.senderUser.online = online;
			}
			switch( this.data.senderUser.online || ( D.chat && D.chat.isOnline( this.sender ) ) ){
				case 'www':
					this._userOnlineNode.className = 'onlineStatus onlineWWWIcon';
					break;
				case 'mobile':
					this._userOnlineNode.className = 'onlineStatus onlineMobileIcon';
					break;
				default:
					this._userOnlineNode.className = '';
			}
		},
		
		onBeforeApiCall:D.doNothing,
		
		append:function(parent){
			this.node.append(parent);
			return this;
		},

		_timeMouseOver:function(){
			this._timeNode.title = D.Lang.get('Labots') + ' ' + D.ddate2( this.edited );
		},
		
		_drawLinks:function(){
			if( empty( this.data.linksObj ) ){
				return;
			}
		
			// pievieno 1x vienu linku
			var linksAdded = [];
			for( var k in this.data.linksObj ){
				var isAdded = false;
				for ( var i = 0, l = linksAdded.length; i < l; i++ ) {
					if ( linksAdded[i] == this.data.linksObj[k].url ) {
						isAdded = true;
						break;
					}
				}
				if ( isAdded ) {
					continue;
				}
		
				new D.msg.Mail.Link( this.data.linksObj[k] ).append( this._contentNode );
				linksAdded.push( this.data.linksObj[k].url );
			}
		},
		
		_drawAttach:function(){
			if( T.Giphy && this.data.giphy ){
				this.giphy = new T.Giphy.Embed( this.data.giphy, { maxWidth:350, maxHeight:350 } ).append( this._contentNode );
			}
			if( T.Sounds && this.data.sound ){
				this.sound = new D.msg.Mail.Sound( this.data.sound ).append( this._contentNode );
			}
			if( empty( this.data.attach ) ){
				return;
			}
			var al = new D.msg.AttachList( this.data.attach, { uid:this.uid } );
			al.append( this._contentNode );
			var gifs = al.getGifs();
			for( var k in gifs ){
				mkE( {
					tag:'div',
					els:[
						gifs[k]
					]
				} ).append( this._contentNode );
			}
			if( empty(gifs) && count( this.data.attach ) == 1 && this.data.attach[0].image ){

			}
		},
		
		setUnread:function(v){
			if( !isset(v) || v ){
				addClassName( this.node, 'unread' );
			} else {
				removeClassName( this.node, 'unread' );
			}
		},
		
		_drawOptions:function(){
			if( this.opt & D.msg.Mail.OPT_SYSTEM ){
				return;
			}
			var isDraft = !!( this.opt & D.msg.Mail.OPT_DRAFT );
			if(!isDraft){
				this._favIconNode = mkE( {
					tag:'a',
					className:'SIcon favSIcon',
					onclick:this._favToggle
				} ).append(this._iconsNode);
				if( this.isFav ){
					addClassName( this._favIconNode, 'on' );
				}
			}
			mkE( {
				tag:'a',
				className:'SIcon trashSIcon',
				onclick:this._optDel
			} ).append( this._iconsNode );
			if( this._emoButton ){
				this._emoAdd = new D.msg.MsgEmo.Add( {
					mid:this.id,
					uid:this.uid
				} ).append( this._iconsNode );
				if( this.par.emoToolTip ){
					this._drawEmoToolTip();
				}
			}
			if(!isDraft){
				mkE( {
					tag:'a',
					className:'SIcon optionsSIcon',
					onclick:this._optionsShow
				} ).append( this._iconsNode );
			}
		},

		_drawEmoToolTip:function(){
			var sp = new D.smallPopUp;
			sp.open(
				null,
				{
					//color:'White',
					title:'Jaunums!',
					parent:this._emoAdd.node
				}
			);
			sp.arrowPosition( false, false );
			var node = mkE( {
				tag:'div',
				style:{
					padding:'12px',
					fontSize:'13px',
					//fontWeight:'bold',
					color:'#393939'
				},
				els:[
					'Tagad vēstulēm vari pievienot emocijas! Ja patīk vēstule, pievieno tai smaidiņu :)'
				]
			} ).append( sp.content );
			D.smileyReplace(node);
			sp.node.style.right = '-8px';
			sp.node.style.bottom = '24px';
		},
		
		_optDel:function(){
			if( !( this.opt & D.msg.Mail.OPT_DRAFT ) && !this._skipTrash ){
				this.del();
				return;
			}
			D.confirmDelete( this.del );
		},
		
		del:function(){
			D.loadingOverlay( this.node );
			this._mDel = new DR.msg.MailDel;
			this._mDel.mid = this.id;
			this._mDel.cid = this.cid;
			this._mDel.uid = this.uid;
			this._mDel.skipTrash = this._skipTrash;
			this._mDel.onLoad = this._mDelRe;
			this._call( this._mDel );
		},
		
		_mDelRe:function(){
			if( this._mDel.re.convDel ){
				Section.navigate('./');
				return;
			}
			if( !this._mDel.re.ok ){
				D.removeLoadingOverlay( this.node );
				return;
			}
			this._fadeOutAndRemove();
		},

		_fadeOutAndRemove:function(){
			$( this.node ).fadeOut( 300, D.closure( this, function(){
				if( this.conv ){
					this.conv.removeMail(this);
				} else {
					this.node.remove();
				}
			} ) );
		},
		
		_favToggle:function(){
			if( this._mFav && this._mFav.processing ){
				return;
			}
			if( this.isFav ){
				this._mFav = new DR.msg.FavDel;
				this._mFav.onLoad = this._favDelRe;
			} else {
				this._mFav = new DR.msg.FavAdd;
				this._mFav.onLoad = this._favAddRe;
			}
			this._mFav.mid = this.id;
			this._mFav.uid = this.uid;
			this._call( this._mFav );
		},
		
		_favAddRe:function(){
			this.isFav = true;
			addClassName( this._favIconNode, 'on' );
		},
		
		_favDelRe:function(){
			this.isFav = false;
			removeClassName( this._favIconNode, 'on' );
		},
		
		_optionsShow:function(){
			if( this._optionsDropDown && this._optionsDropDown.isVisible() ){
				this._optionsDropDown.remove();
				this._optionsDropDown = null;
				//this._optionsDropDown.toggle( this._optNode );
				return;
			}
			this._optionsDropDown = new T.Options();
			var opt;
			if( this.conv && this.conv.inTrash ){
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Atjaunot'),
					onclick:this._optRestore
				} );
				this._optionsDropDown.addItem(opt);
			}
			opt = new T.Options.Item( {
				caption:D.msg.l.get('Pārsūtīt'),
				onclick:this._optForward
			} );
			this._optionsDropDown.addItem(opt);
			if( this.uid != this.sender && D.ID != this.sender ){
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Ziņot par pārkāpumu'),
					onclick:this._optReport
				} );
				this._optionsDropDown.addItem(opt);
			}
			if( this.onDoEdit && this.canEdit() ){
				opt = new T.Options.Item( {
					caption:D.Lang.get('edit'),
					onclick:this._optEdit
				} );
				this._optionsDropDown.addItem(opt);
			}
			if( this.sender != this.uid && this.conv.isGroup ){
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Reply private'),
					onclick:this._optReplyPrivate
				} );
				this._optionsDropDown.addItem(opt);
			}
			if( this.conv.lastMail === this && !this.conv.inTrash && !this._markedAsUnread ){
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Atzīmēt kā nelasītu'),
					onclick:D.closure( this, this._optMarkAsUnread, opt )
				} );
				this._optionsDropDown.addItem(opt);
			}
			if ( this.data.advertId ) {
				opt = new T.Options.Item( {
					caption: D.Lang.get( 'Why am I seeing this ad' ),
					onclick: D.closure( this, function() {
						new D.Ads.TargetingInfo({
							id: this.data.advertId,
							type: D.Ads.OptionsPar.TYPE_CPM
						});
					} )
				} );
				this._optionsDropDown.addItem(opt);
			}
			this._optionsDropDown.append( this._optNode );
		},
		
		_openInConv:function(){
			D.msg.openMailConv( this.id, this.uid );
		},
		
		_optRestore:function(){
			D.loadingOverlay( this.node );
			this._mMailRestore = new DR.msg.MailRestore;
			this._mMailRestore.uid = this.uid;
			this._mMailRestore.mid = this.id;
			this._mMailRestore.onLoad = this._mMailRestoreRe;
			this._call( this._mMailRestore );
		},
		
		_mMailRestoreRe:function(){
			this._fadeOutAndRemove();
		},
		
		_optResume:function(){
			D.msg.newMail( {
				uid:this.uid,
				draft:this.id
			} );
		},
		
		_optForward:function(){
			D.msg.newMail( {
				mail:this.data
			} );
		},
		
		_optReport:function(){
			new D.msg.Report( {
				mid:this.id
			} );
		},

		_optReplyPrivate:function(){
			D.sendMail( this.sender );
		},

		/**
		 * @param {T.Options.Item} opt
		 * @private
		 */
		_optMarkAsUnread:function(opt){
			this._markedAsUnread = true;
			this.conv.optMarkAsUnread(opt);
		},

		_optEdit:function(){
			this.onDoEdit();
		},
		
		_systemMsg:function(){
			clearNode( this.node );
			addClassName( this.node, 'MsgMailSystem' );
			if( !this.data.event ){
				return;
			}
			this._contentNode.append( this.node );
			mkE.appendTypeElement( this._textNode, [
				{
					tag:'a',
					text:this.data.senderUser.title,
					href:this.data.senderUser.url
				},
				' '
			] );
			if( this.data.event.type == DR.msg.struct.MailEvent.TYPE_LEFT ){
				mkE.appendTypeElement( this._textNode, D.Lang.get('Chat leave room') );
				return;
			}
			if( this.data.event.type == DR.msg.struct.MailEvent.TYPE_JOIN || this.data.event.type == DR.msg.struct.MailEvent.TYPE_REMOVE ){
				/** @type {DR.msg.struct.MailEventJoin} */
				var eJoin = this.data.event;
				var users = [];
				for( var k in eJoin.usersPreview ){
					var member = eJoin.usersPreview[k];
					if( member.id == D.ID ){
						users.push( D.Lang.get('Chat you') );
						continue;
					}
					var u = mkE( {
						tag:'a',
						text:member.aktitle || member.title,
						href:member.url
					} );
					users.push(u);
				}
				mkE.appendTypeElement( this._textNode, [
					D.Lang.get( this.data.event.type == DR.msg.struct.MailEvent.TYPE_JOIN ? 'pievienoja sarakstei:' : 'atvienoja no sarakstes' ),
					' ',
					new T.AndMore( {
						els:users,
						count:eJoin.count,
						limit:D.msg.Mail.MEMBERS_PREVIEW_COUNT
					} )
				] );
				return;
			}
			if( this.data.event.type == DR.msg.struct.MailEvent.TYPE_SET_TOPIC ){
				/** @type {DR.msg.struct.MailEventSetTopic} */
				var eTopic = this.data.event;
				mkE.appendTypeElement( this._textNode, [
					D.Lang.get('changed the topic')
						.replace( '$from', eTopic.from || D.Lang.get('Group conversation') )
						.replace( '$to', eTopic.to || D.Lang.get('Group conversation') )
				] );
				return;
			}
			if( this.data.event.type == DR.msg.struct.MailEvent.TYPE_SET_IMAGE ){
				mkE.appendTypeElement( this._textNode, D.Lang.get('changed the conversation picture') );
				return;
			}
			D.log( 'Unknown msg event', this.data );
		},
		
		/**
		 * @param {Node} v
		 */
		setRead:function(v){
			if( this._readNode ){
				this._readNode.remove();
			}
			if(!v){
				this._readNode = null;
				return;
			}
			this._readNode = v;
			this._readNode.append( this.node );
		},
		
		canEdit:function(){
			if( this.uid != this.sender ){
				return false;
			}
			if( this.data.sticker ){
				return false;
			}
			if( this.data.opt & D.msg.Mail.OPT_SYSTEM ){
				return false;
			}
			return this.ts > D.TIME - 300;
		},

		editing:function(v){
			if(v){
				addClassName( this.node, 'editing' );
				return;
			}
			removeClassName( this.node, 'editing' );
		},

		/**
		 * @param {DR.users.struct.User} user
		 */
		readerAdd:function(user){
			if( user.id != D.ID ){
				this.data.readersUsersPreview.push(user);
			}
			++ this.data.readersCount;
			this._readersDraw();
		},

		readerRemove:function(uid){
			var readAll = this.data.readAll;
			this.data.readAll = false;
			for( var k in this.data.readersUsersPreview ){
				if( this.data.readersUsersPreview[k].id == uid ){
					-- this.data.readersCount;
					this.data.readersUsersPreview.splice( k, 1 );
					this._readersDraw();
					return;
				}
			}
			//if(readAll){ // chrome?
				this._readersDraw();
			//}
		},

		readAll:function(){
			this.data.readAll = true;
			this._readersDraw();
		},

		_readersDraw:function(){
			clearNode( this._readerNode );
			if( this.data.readAll ){
				if( this.data.fid > 0 && this.data.sender != this.uid ){
					return;
				}
				mkE( {
					tag:'span',
					className:'chatMsgReader chatMsgReadAll checkIcon',
					onclick:this._showReaders,
					title:D.Lang.get('Read')
				} ).append( this._readerNode );
				return;
			}
			if( !this.data.readersCount ){
				return;
			}
			var els = [];
			var READER_ICONS = 5;
			for( var k in this.data.readersUsersPreview ){
				var reader = this.data.readersUsersPreview[k];
				// if( reader.id == D.ID ){
				// 	continue;
				// }
				var n = mkE( {
					tag:'a',
					title:htmlspecialchars( reader.title ),
					href:'/user/' + reader.id + '/',
					className:'chatMsgReader picBorder'
				} );
				els.push(n);
				D.bgImage( n, reader.image.icon );
				if( k == READER_ICONS - 1 ){
					break;
				}
			}
			var more = this.data.readersCount - READER_ICONS; //count( this.data.readersUsersPreview );
			if( more > 0 ){
				els.push( {
					tag:'a',
					className:'chatMsgReader chatMsgReaderC',
					text:'+' + more,
					onclick:this._showReaders
				} );
			}
			mkE.appendTypeElement( this._readerNode, els );
		},

		_showReaders:function(){
			this.conv.showReaders();
		},

		_addGallery:function(){
			var urls = [];
			for( var k in this.data.attach ){
				var attach = this.data.attach[k];
				if( D.msg.canAttachAddGallery(attach) ){
					urls.push( attach.downloadUrl );
				}
			}
			D.galleryUploadFromUrls(urls);
		},

		onEmo:function(par){
			this.data.emotions = par.emotions;
			this._drawEmo();
		},

		_closeAdvert: function() {
			var m = new DR.msg.CloseAdvert();
			m.advertId = this.data.advertId;
			m.onLoad = D.closure( this, function() {
				var node = mkE({
					tag: 'span',
					className: 'optOutAdvert',
					text: D.msg.l.get('close_advert_done')
				});
				D.insertAfter( node, this._advCloseNode );
				removeNode( this._advCloseNode );
			});
			m.call();
		}

	}
); // D.msg.Mail

/**
 * @constructor
 */
D.msg.Mail.Par = Class(
	/**
	 * @lends {D.msg.Mail.Par#}
	 */
	{
		fullTime:false,
		optOpenConv:false,
		skipTrash:false,
		uid:null
	}
);

D.msg.Mail.OPT_SYSTEM = 2;
D.msg.Mail.OPT_JSON = 32;
D.msg.Mail.OPT_DRAFT = 16;
D.msg.Mail.OPT_ADS = 128;
D.msg.Mail.MAX_TEXT_LENGTH = 10000;
D.msg.Mail.MEMBERS_PREVIEW_COUNT = 10;


// +++ Link +++
/**
 * @constructor
 * @extends {mkE.Base}
 */
D.msg.Mail.Link = Class(
	/**
	 * @lends {D.msg.Mail.Link#}
	 */
	{
		/**
		 * @param {DR.say.struct.Link} link
		 * @constructor
		 */
		__construct:function(link){
			this.url = link.url;
			this.embedUrl = null;
			this._checkVideo();
			this._clickUrl = '/say/click.php?' + ( new Get( { url:link.url } ) );
			this.node = mkE( {
				tag:'div',
				className:'MsgMailLink radius3',
				onclick:this._onclick,
				els:[
					{
						tag:'div',
						className:'right',
						els:[
							{
								tag:'a',
								href:this._clickUrl,
								text:link.title,
								className:'cut',
								prop:{
									target:'_blank',
									title:( link.title.length > 35 ? htmlspecialchars( link.title ) : '' ),
									onclick:function(){
										return T.checkLink( this, link.url );
									}
								},
								attr: {
									rel: 'noopener noreferrer'
								}
							},
							{
								tag:'div',
								className:'color2',
								text:link.host
							}
						]
					}
				],
				attr:{
					'data-id':link.id
				}
			} );
			//if( link.image ){
				var imgNode = mkE( {
					tag:'a',
					className:'image',
					href:this._clickUrl,
					prop:{
						target:'_blank',
						onclick:function(){
							return T.checkLink( this, link.url );
						}
					},
					attr: {
						rel: 'noopener noreferrer'
					}
				} );
				if( link.image ){
					D.bgImage( imgNode, link.image.small );
				} else {
					D.bgImage( imgNode, link.favicon );
					imgNode.style.backgroundSize = 'auto';
					if( this.embedUrl ){
						imgNode.style.backgroundPosition = 'right 10px';
					}
				}
				D.insertBefore( imgNode, this.node.firstChild );
				if( this.embedUrl ){
					mkE( {
						tag:'div',
						className:'sayGalleryVideo'
					} ).append(imgNode);
					imgNode.onclick = this._showEmbed;
					addClassName( imgNode, 'galleryYoutubeItem' );
				}
			//}
		},

		_checkVideo:function(){
			switch( D.rootDomain( this.url ) ){
				case 'youtube.com':
				case 'youtu.be':
					var get = new Get( this.url );
					if( get.v('v') ){
						this.embedUrl = '//www.youtube.com/embed/' + get.v('v') + '?autoplay=1';
					}
					break;
				case 'vimeo.com':
					var m = this.url.match( /\/([0-9]+)$/ ) || this.url.match( /clip_id=([0-9]+)/ );
					if(m){
						this.embedUrl = '//player.vimeo.com/video/' + m[1] + '?autoplay=1';
					}
					break;
			}
		},

		_showEmbed:function(){
			InfoBox.iframe( this.embedUrl, { width:800, height:600 } );
			return false;
		},

		_onclick:function(){
			var m = new DR.msg.Stats;
			m.kw = DR.msg.Stats.KW_MSG_LINK_INFO_CLICK;
			m.call();
		}

	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.msg.Mail.Giphy = Class(
	{
		/**
		 * @param {DR.giphy.struct.Item} item
		 * @private
		 */
		__construct:function(item){
			this.node = mkE( {
				tag:'div',
				className:'giphy',
				attr:{
					'data-id':item.id
				},
				style:{
					width:'350px'
				},
				els:[
					this._videoNode = mkE( {
						tag:'video',
						src:item.mp4,
						autoplay:true,
						loop:true
					} )
				]
			} );
			if( item.h > item.w ){
				if( item.h > 350 ){
					this._videoNode.style.height = '350px';
					this.node.style.height = '350px';
				}
			} else {
				this.node.style.minHeight = ( item.w > 350 ?  item.h / ( item.w / 350 ) : item.h ) + 'px';
			}
			if( item.plus18 ){
				mkE( {
					tag:'span',
					className:'badge nsfw',
					title: D.Lang.get('is18plus'),
					text:'18+'
				} ).append( this.node );
			}
		}
	},
	mkE.Base
);

/**
 * @extends {T.Sounds.Embed}
 */
D.msg.Mail.Sound = Class(
	{
		/**
		 * @param {DR.sounds.struct.Item} item
		 * @private
		 */
		__construct:function(item){
			this.data = item;
			PARENT.__construct(item);
			mkE( {
				tag:'div',
				className:'controlSound',
				onclick:this._toggleAutoPlay,
				els:[
				this._muteIconNode = mkE( {
					tag:'a',
					className:'SVGIcon',
					els:[
						T.svgIcon('music-volume-high')
					]
				} ),
				this._unmuteIconNode = mkE( {
					tag:'a',
					className:'SVGIcon',
					els:[
						T.svgIcon('music-volume-mute')
					]
				} )
			]
			} ).append( this.node );
			this._stopButtonNode.style.display = 'none';
			this._muteIconNode.title = 'Atskaņo automātiski';
			this._unmuteIconNode.title = 'Neatskaņo automātiski';
			this.updateAutoPlay();
			$( D.msg ).bind( 'msgSoundAutoPlay', this.updateAutoPlay );
		},

		updateAutoPlay:function(){
			this._muteIconNode.style.display = D.chat.autoPlay ? '' : 'none';
			this._unmuteIconNode.style.display = D.chat.autoPlay ? 'none' : '';
		},

		_toggleAutoPlay:function(e){
			D.stopPropagation(e);
			D.chat.autoPlay = !D.chat.autoPlay;
			$( D.msg ).trigger('msgSoundAutoPlay');
			new RPC('/messages/talk/app.php').send(
				'settings',
				{
					name:'autoPlay',
					value:D.chat.autoPlay
				},
				D.doNothing
			);
		}
	},

	T.Sounds.Embed
);

/**
 * @extends {mkE.Base}
 */
D.msg.Mail.AdvertAgreement = Class(
	{
		onAgree: D.doNothing,
		onDisagree: D.doNothing,
		advertId: 0,

		/**
		 * @param {DR.msg.struct.AdvertAgreement} agr
		 * @param {Function} onAgree
		 * @param {Function} onDisagree
		 * @param {Number} advertId
		 * @private
		 */
		__construct:function( agr, onAgree, onDisagree, advertId ){
			this.onAgree = onAgree;
			this.onDisagree = onDisagree;
			this.advertId = advertId;

			this.node = mkE( {
				tag:'div',
				className:'aAgreement',
				els:[
					{
						tag: 'div',
						className: 'h1',
						text: agr.textH1
					},
					{
						tag: 'div',
						className: 'topText',
						text: agr.textTop
					},
					{
						tag: 'div',
						className: 'btnAgreeCont',
						els: [
							new T.Form.Button({
								caption: agr.btnAgreeTitle,
								onclick: this._agree,
								size: 'medium'
							})
						]
					},
					{
						tag: 'div',
						els: [{
							tag: 'a',
							href: 'javascript:',
							text: agr.btnDisagreeTitle,
							onclick: this._disagree
						}]
					},
					{
						tag: 'div',
						className: 'bottomText',
						text: agr.textBottom
					}
				]
			} );
		},

		_agree: function() {
			this._mAagree = new DR.msg.AdvertAgree();
			this._mAagree.advertId = this.advertId;
			this._mAagree.value = true;
			this._mAagree.onLoad = this.onAgree;
			this._mAagree.call();
		},

		_disagree: function() {
			this._mAagree = new DR.msg.AdvertAgree();
			this._mAagree.advertId = this.advertId;
			this._mAagree.value = false;
			this._mAagree.onLoad = this.onDisagree;
			this._mAagree.call();
		}
	},
	mkE.Base
);// --- mail.js --- 
// +++ attach.js +++ 
/**
 * @extends {mkE.Base}
 * @constructor
 */
D.msg.Attach = Class(
	/**
	 * @lends {D.msg.Attach#}
	 */
	{
		/**
		 * @param {DR.msg.struct.Attach} attach
      * @param {Object} par
		 */
		__construct:function( attach, par ){
			this.id = attach.id;
			this.attach = attach;
			this.uid = par.uid;
			this.gif = attach.image && attach.ext.toLowerCase() == 'gif';
			this.node = mkE({
				tag:'div',
				className:'MsgAttach radius3',
				attr:{
					'data-id':attach.id
				},
				els:[
					this._imgNode = mkE({
						tag:'div',
						className:'image radius3'
					})
				]
			});
			D.bgImage(this.node, D.extIcon(attach.ext));
			if( attach.image ){
				D.bgImage( this._imgNode, attach.image.gm );
				if(attach.image.w < 175){
					this._imgNode.style.backgroundSize = 'auto';
					this._imgNode.style.backgroundColor = '#fafafa';
				}
				if( this.gif ){
					addClassName( this.node, 'gif' );
					mkE( {
						tag:'img',
						src:attach.downloadUrl
					} ).append( this._imgNode );
				}
			}
			mkE({
				tag:'div',
				className:'name cut',
				els:[attach.name, '.', attach.ext]
			}).append(this.node);
			this._drawOptions();
		},

		isDoc:function(){
			var ext = {
				'doc':true,
				'docx':true,
				'xls':true,
				'xlsx':true,
				'ppt':true,
				'pptx':true,
				'pdf':true,
				'rtf':true,
				'txt':true,
				'svg':true,
				'tif':true
			};
			return ext[ this.attach.ext.toLowerCase() ] || false;
		},

		isAudio:function(){
			var ext = {
				'mp3':true,
				'ogg':true,
				'wav':true,
				'webm':true
			};
			return ext[ this.attach.ext.toLowerCase() ] || false;
		},

		_drawOptions:function(){
			this._optNode = mkE( {
				tag:'div',
				className:'MsgAttachOpt radius3',
				onclick:this._onclick,
				title:htmlspecialchars( [ this.attach.name, '.', this.attach.ext ].join('') ),
				els:[
					{
						tag:'center',
						className:'size',
						els:[
							this.gif ? [ this.attach.name, '.', this.attach.ext, ' ' ] : false,
							this.attach.size ? D.fileSize( this.attach.size ) : false
						]
					}
				]
			} ).append( this.node );
			if( this.attach.opt & D.msg.Attach.OPT_NOT_EXISTS ){
				mkE( {
					tag:'div',
					text:D.msg.l.get('Šis pielikums vairs nav pieejams!'),
					className:'errorIcon icon colorWarn'
				} ).append( this._optNode );
				this._optNode.onclick = D.doNothing;
				this._optNode.style.cursor = 'default';
				return;
			}
			if( this.attach.image ){
				mkE( {
					tag:'a',
					className:'icon previewIcon',
					text:D.Lang.get('open'),
					onclick:this._onclick
				} ).append( this._optNode );
			} else if( this.isAudio() ){
				mkE( {
					tag:'a',
					className:'icon musicIcon',
					text:D.Lang.get('open'),
					onclick:this._onclick
				} ).append( this._optNode );
			}
			if( this.isDoc() ){
				mkE( {
					tag:'a',
					className:'icon googleDriveIcon',
					text:D.msg.l.get('Atvērt ar google'),
					onclick:this._preview
				} ).append(this._optNode);
			}
			var downloadUrl = new Get( this.attach.downloadUrl );
			if( this.uid && D.ID != this.uid ){
				downloadUrl.add( 'uid', this.uid );
			}
			this._optDownloadNode = mkE( {
				tag:'a',
				className:'icon downloadIcon',
				text:D.msg.l.get('Lejuplādēt'),
				href:downloadUrl.toUrl(),
				prop:{
					onclick:D.stopPropagation
				}
			} ).append( this._optNode );
			if( this.attach.opt & D.msg.Attach.OPT_OK ){
				this._optDownloadNode.setAttribute( 'download', '' );
			}
		},

		_onclick:function(e){
			D.stopPropagation(e);
			if( this.isAudio() ){
				InfoBox.els( [
					{
						tag:'audio',
						src:this.attach.downloadUrl,
						className:'chatAttachAudio',
						attr:{
							controls:'',
							autoplay:''
						}
					}
				], { width:'auto' } );
				return;
			}
			if( this.isDoc() ){
				this._preview(e);
				return;
			}
			if( this.attach.image ){
				if( this.list ){
					this.list.gallery(this);
				} else {
					InfoBox.img( this.attach.image.large );
				}
				return;
			}
			location.assign( this.attach.downloadUrl );
		},

		_openConv:function(){
			D.msg.openMailConv( this.attach.mid );
		},

		_preview:function(e){
			D.stopPropagation(e);
			D.loadingOverlay( this.node );
			this._mAttchTmpUrl = new DR.msg.AttachTmpUrl;
			this._mAttchTmpUrl.aid = this.id;
			this._mAttchTmpUrl.onLoad = this._mAttachTmpUrlRe;
			var ac = new DR.ApiCall;
			ac.async = false;
			ac.addMethod( this._mAttchTmpUrl );
			ac.call();
		},

		_mAttachTmpUrlRe:function(){
			D.removeLoadingOverlay( this.node );
			var url = this._mAttchTmpUrl.re.url;
			if(D.DEV){
				url = url.replace( D.ATTACH_DOWNLOAD, 'https://www.draugiem.lv/attach/' );
			}
			D.log(url);
			var get = new Get( {
				url:url//,embedded:'true'
			} );
			window.open( 'https://docs.google.com/viewer?' + get, 'attach' + this.id );
		}

	},
	mkE.Base
);

D.msg.Attach.OPT_OK = 1;
D.msg.Attach.OPT_THUMB = 4;
D.msg.Attach.OPT_NOT_EXISTS = 8;
D.msg.Attach.OPT_VOICE_MESSAGE = 16;

// +++ AttachList +++
D.msg.AttachList = Class(
	/**
	 * @lends {D.msg.AttachList#}
	 */
	{
		/**
		 * @protected
		 * @type {Array.<D.msg.Attach>}
		 */
		_items:[],

		/**
		 * @param {Array.<DR.msg.struct.Attach>} attachs
		 * @param {Object} [par]
		 */
		__construct:function( attachs, par ){
			this.node = mkE( {
				tag:'div',
				className:'MsgAttachList'
			} );
			for( var i = 0; i < attachs.length; i++ ) {
				var attach = attachs[i];
				if( (attach.opt & D.msg.Attach.OPT_VOICE_MESSAGE) === D.msg.Attach.OPT_VOICE_MESSAGE ) {
					var a = new D.msg.Attach.VoiceMessage( attach, par );
				} else {
					var a = new D.msg.Attach( attach, par );
				}
				a.list = this;
				a.append( this.node );
				this._items.push(a);
			}
		},

		/**
		 * @param {D.msg.Attach} a
		 */
		gallery:function(a){
			var l = new D.msg.Attach.Gallery(this);
			l.open(a);
		},

		/**
		 * @returns {Array.<D.msg.Attach>}
		 */
		getGifs:function(){
			var re = [];
			for( var k in this._items ){
				if( this._items[k].gif ){
					re.push( this._items[k] );
				}
			}
			return re;
		}

	},
	mkE.Base
);

/**
 * @class
 */
D.msg.Attach.Gallery = Class(
	{
		/** @type {D.msg.Attach} */
		_prev:null,
		/** @type {D.msg.Attach} */
		_next:null,
		/** @type {D.msg.AttachList} */
		_list:null,
		/**
		 * @param {D.msg.AttachList} list
		 * @private
		 */
		__construct:function(list){
			this._list = list;
			this.node = mkE( {
				tag:'div',
				className:'MsgAttachGallery'
			} );
		},

		/**
		 * @param {D.msg.Attach} a
		 */
		show:function(a){
			var items = this._list._items;
			var i = array_search( a, items );
			if( i === false ){
				return;
			}
			this._prev = null;
			this._next = null;
			var k;
			for( k = i + 1; k < items.length; ++ k ){
				if( items[k].attach.image ){
					this._next = items[k];
					break;
				}
			}
			for( k = i - 1; k >= 0; -- k ){
				if( items[k].attach.image ){
					this._prev = items[k];
					break;
				}
			}
			clearNode( this.node );
			mkE( {
				tag:'img',
				src:a.attach.ext.toLowerCase() == 'gif' ? a.attach.downloadUrl : a.attach.image.large,
				style:{
					maxHeight:( $(window).height() - 50 ) + 'px'
				}
			} ).append( this.node );
			var downloadUrl = new Get( a.attach.downloadUrl );
			if( a.uid && D.ID != a.uid ){
				downloadUrl.add( 'uid', a.uid );
			}
			var icon;
			var icons = [
				new T.IconListItem( {
					icon:'download',
					caption:D.msg.l.get('Lejuplādēt'),
					href:downloadUrl.toUrl(),
					target:'_blank'
				} )
			];
			if( D.msg.canAttachAddGallery( a.attach ) ){
				icon = new T.IconListItem( {
					icon:'galleryIInPicture',
					caption:D.msg.l.get('Set as profile picture')
				} );
				icon.onclick = D.closure( this, this._setAsProfile, a, icon );
				icons.push(icon);
				icon = new T.IconListItem( {
					icon:'galleryAdd',
					caption:D.Lang.get('Izveidot galeriju')
				} );
				icon.onclick = D.closure( this, this._addGallery, a, icon );
				icons.push(icon);
			}
			new T.Form.Footer( {
				els:[
					new T.IconList( {
						items:icons,
						inlineList:true
					} )
				]
			} ).append( this.node );
			if( this._prev ){
				mkE( {
					tag:'div',
					className:'prev',
					onclick:this.showPrev
				} ).append( this.node );
			}
			if( this._next ){
				mkE( {
					tag:'div',
					className:'next',
					onclick:this.showNext
				} ).append( this.node );
			}
		},

		showNext:function(){
			if( this._next ){
				this.show( this._next );
			}
		},

		showPrev:function(){
			if( this._prev ){
				this.show( this._prev )
			}
		},

		/**
		 * @param {Event} e
		 * @private
		 */
		_onKey:function(e){
			switch( e.keyCode ){
				case 37:
					D.stopPropagation(e);
					this.showPrev();
					break;
				case 39:
					D.stopPropagation(e);
					this.showNext();
					break;
			}
		},

		_bind:function(){
			$( document.body ).bind( 'keydown', this._onKey );
		},

		_unbind:function(){
			$( document.body ).unbind( 'keydown', this._onKey );
		},

		/**
		 * @param {D.msg.Attach} [a]
		 */
		open:function(a){
			InfoBox.els( this.node, {
				width:'auto',
				onClose:this._unbind
			} );
			this._bind();
			this.show( a || this._list._items[0] );
		},

		/**
		 * @private
		 * @param {D.msg.Attach} a
		 * @param {T.IconListItem} icon
		 */
		_setAsProfile:function( a, icon ){
			D.loadingOverlay( icon.node );
			var m = new DR.msg.AttachAsProfilePic;
			m.aid = a.id;
			m.onError = function(){
				icon.remove();
			};
			m.onLoad = function(){
				icon.remove();
				if( m.re.ok ){
					alert( D.msg.l.get('Profile picture changed') );
				}
			};
			m.call();
		},

		/**
		 * @private
		 * @param {D.msg.Attach} a
		 * @param {T.IconListItem} icon
		 */
		_addGallery:function( a, icon ){
			D.loadingOverlay( icon.node );
			var urls = [];
			for( var k in this._list._items ){
				var attach = this._list._items[k].attach;
				if( D.msg.canAttachAddGallery(attach) ){
					urls.push( attach.downloadUrl );
				}
			}
			D.galleryUploadFromUrls(urls);
		}
	}
);

/**
 * @extends {mkE.Base}
 * @constructor
 */
D.msg.Attach.VoiceMessage = Class(
	/**
	 * @lends {D.msg.VoiceMessage#}
	 */
	{
		/**
		 * @param {DR.msg.struct.Attach} attach
		 * @param {Object} par
		 */
		__construct: function ( attach, par ) {
			this.id = attach.id;
			this.attach = attach;
			this.uid = par.uid;

			this.node = mkE({
				tag: 'div',
				className: 'MsgAttachVoice',
				attr: {
					'data-id': attach.id
				}
			});

			// if( D.DEV ) {
			// 	this.attach.downloadUrl = 'https://lauris.dra.lv/attachs/messages/down.php?i=' + this.attach.id + "&.ogg";
			// }

			if( this.attach.opt & D.msg.Attach.OPT_NOT_EXISTS ) {
				mkE({
					tag: 'div',
					text: D.msg.l.get('Šis pielikums vairs nav pieejams!'),
					className: 'errorIcon icon colorWarn'
				}).append(this.node);
				return;
			}

			mkE({
				tag: 'span',
				className: 'player',
				els: [
					this._audio = mkE({
						tag: 'audio',
						src: this.attach.downloadUrl,
						attr: {
							preload: 'none'
						},
						ontimeupdate: this._onTimeUpdate,
						onplay: this._onPlay,
						onpause: this._onPause
					}),
					this._playNode = mkE({
						tag: 'a',
						className: 'btn btn-play',
						onclick: this.resume,
						els: [
							T.svgIcon({
								icon: 'music-play'
							})
						]
					}),
					this._pauseNode = mkE({
						tag: 'a',
						className: 'btn btn-pause',
						onclick: this.resume,
						els: [
							T.svgIcon({
								icon: 'music-pause'
							})
						],
						style: {
							display: 'none'
						}
					}),
					{
						tag: 'span',
						className: 'timeline',
						els: [
							this._progressNode = mkE({
								tag: 'span',
								className: 'timeline-inner',
								style: {
									width: '0'
								}
							})
						]
					},
					this._timeNode = mkE({
						tag: 'span',
						className: 'time',
						text: this._durationText(attach.voiceMessageLength || 0)
					}),
					T.svgIcon('microphone')
				]
			}).append(this.node);
		},
		resume: function () {
			if( this._decode() ) {
				return;
			}
			if( this._audio.paused ) {
				this._audio.play();
			} else {
				this._audio.pause();
			}
		},
		_durationText: function (ct) {
			var minutes = String(Math.floor(ct / 60)), seconds = String(Math.round(ct % 60));
			return (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
		},
		_onTimeUpdate: function () {
			var duration = this._audio.duration || 0,
				ct = this._audio.currentTime || 0,
				progress = (ct / duration * 100) || 0;
			this._progressNode.style.width = progress + '%';
			this._timeNode.innerText = this._durationText(ct);
		},
		_onPlay: function () {
			this._pauseNode.style.display = '';
			this._playNode.style.display = 'none';
		},
		_onPause: function () {
			this._pauseNode.style.display = 'none';
			this._playNode.style.display = '';
		},
		_decode: function () {
			if( this._audio.src.substr(-4) !== '.ogg' ) {
				return false;
			}
			if( this._audio.canPlayType('audio/ogg\;codecs=opus') !== "" ) {
				return false;
			}
			if( typeof window.Worker === "undefined" ) {
				return false;
			}
			var xhr = new XMLHttpRequest();
			xhr.open("GET", this._audio.src, true);
			xhr.responseType = "arraybuffer";
			xhr.onload = this._decodeOnLoad;
			xhr.send();
			return true;
		},
		/**
		 * @param {ProgressEvent} ev
		 * @private
		 */
		_decodeOnLoad: function ( ev ) {
			var arrayBuffer = ev.target.response;
			var typedArray = new Uint8Array(arrayBuffer);
			var decoderWorker = new Worker('/messages/dist/decoderWorker.min.js');
			var wavWorker = new Worker('/messages/dist/waveWorker.min.js');
			decoderWorker.postMessage({
				command: 'init',
				decoderSampleRate: 16000,
				outputBufferSampleRate: 16000
			});
			wavWorker.postMessage({
				command: 'init',
				wavBitDepth: 16,
				wavSampleRate: 16000
			});
			decoderWorker.onmessage = function ( ev ) {
				if( ev.data === null ) {
					wavWorker.postMessage({command: 'done'});
				} else {
					wavWorker.postMessage({
						command: 'encode',
						buffers: ev.data
					}, ev.data.map(function ( typedArray ) {
						return typedArray.buffer;
					}));
				}
			};
			wavWorker.onmessage = this._decoderOnReady;
			decoderWorker.postMessage({command: 'decode', pages: typedArray}, [typedArray.buffer]);
		},
		/**
		 * @param {MessageEvent} ev
		 * @private
		 */
		_decoderOnReady: function ( ev ) {
			if( ev.data.message === "page" ) {
				this._audio.src = URL.createObjectURL(new Blob([ev.data.page], {type: "audio/wav"}));
				this.resume();
			}
		}
	},
	mkE.Base
);
// --- attach.js --- 
// +++ conv_list.js +++ 
/**
 * @constructor
 * @extends {mkE.Base}
 */
D.msg.ConvList = Class(
	/**
	 * @lends {D.msg.ConvList#}
	 */
	{
		__construct:function(par){
			par = par || {};
			this._itemsSorted = [];
			this.pg = par.pg || 1;
			this.uid = par.uid || D.ID;
			this.onBeforeApiCall = par.onBeforeApiCall || this.onBeforeApiCall;
			this.onConvOpen = par.onConvOpen || this.onConvOpen;
			this.trash = !!par.trash;
			this.node = mkE( {
				tag:'div',
				className:'Msg MsgConvList',
				els:[
					this._optNode = mkE( {
						tag:'div',
						className:'headOpt SIconHovered',
						els:[
						]
					} ),
					this._itemsNode = mkE( {
						tag:'div',
						els:[
							T.info( D.msg.l.get('Šeit nav nevienas vēstulītes.') )
						]
					} ),
					this._footerHolderNode = mkE( {
						tag:'div',
						className:'MsgConvFooterW',
						els:[
							this._footerNode = mkE( {
								tag:'div',
								className:'MsgConvFooter radius3top'
							} )
						]
					} )
				]
			} );
			//
			this._more = new D.msg.LoadMore( {
				caption:D.msg.l.get('Ielādēt vecākas'),
				onLoad:this._loadMore
			} );
			this._more.hide();
			D.insertBefore( this._more.node, this._footerHolderNode );
			if( this.trash ){
				T.info( D.msg.l.get('trash info') ).append( this._optNode );
				this._mBox = new DR.msg.Trash;
				this._clearTrashNode = mkE( {
					tag:'a',
					className:'SIcon trashSIcon color2',
					text:D.msg.l.get('Izmest dzēstās vēstules'),
					onclick:this._delAll
				} ).append( this._optNode );
			} else {
				this._mBox = new DR.msg.Inbox;
				/** @protected */
				this._sel = new D.msg.ConvList.SelectDel( {
					onSelect:D.closure( this, function(){
						addClassName( this.node, 'selectable' );
					} ),
					onCancel:D.closure( this, function(){
						removeClassName( this.node, 'selectable' );
					} ),
					onDelete:D.closure( this, function(){
						if( empty( this.getSelected() ) ){
							return;
						}
						D.confirmDelete( this._delSelected );
					} )
				} );
				this._sel.append( this._optNode );
			}
			this._mBox.pg = this.pg;
			this._pgFrom = this.pg;
			this._mBox.uid = this.uid;
			this._mBox.select = [
				new DR.msg.select.ConvList().all(),
				new DR.msg.select.Conv().all().membersUsersPreview(0),
				new DR.base.select.Image().icon(),
				new DR.msg.select.Mail().all().readers(false).membersCount(false).membersUsersPreview(false),
				new DR.users.select.User().title().id().image().name(),
				new DR.users.select.Image().icon(),
				new DR.users.select.UserDefault().online(),
				new DR.msg.select.Attach().name().ext()
			];
			this._mBox.onLoad = this._mBoxRe;
			this._mBox.onError = this._mBoxError;
			if( par.apiCall instanceof DR.ApiCall ){
				par.apiCall.addMethod( this._mBox );
			} else {
				this._mBox.call();
			}
			if( !this.uid || this.uid == D.ID ){
				D.onLoad( 'chat', this.bindChatEvent );
			}
		},
		
		/** @type {Object.<D.msg.ConvList.Item>} */
		_items:null,
		/** @type {Array.<D.msg.ConvList.Item>} */
		_itemsSorted:null,
		
		onConvOpen:D.doNothing,

		bindChatEvent:function(){
			D.chat.onMsg = this._onChatMsg;
			D.chat.onConvUnread = this._onChatConvUnread;
			D.chat.onConvRead = this._onChatConvRead;
			D.chat.onOnline = this._onChatOnline;
		},

		_onChatConvUnread:function(){
			if( this._pgFrom != 1 ){
				return;
			}
			if( !empty( this._itemsSorted ) && D.inScreen( this._itemsSorted[0].node ) ){
				this.setPg(1); // reload
			}
		},

		/**
		 * @param {DR.msg.struct.Mail} mail
		 * @param {DR.msg.struct.Conv} conv
		 * @param {Boolean} sound
		 * @private
		 */
		_onChatMsg:function( mail, conv, sound ){
			if( conv.uid != this.uid ){
				return;
			}
			if( this._pgFrom != 1 ){
				return;
			}
			if( !empty( this._itemsSorted ) && D.inScreen( this._itemsSorted[0].node ) ){
				this.setPg(1); // reload
			}
			if(sound){
				D.chat.ping( conv.unread == 1 ? 'win' : '' );
			}
			if( mail.sender != D.ID && !conv.muted && conv.unread ){
				if( conv.isGroup ){
					D.chat.docTitleAlert( D.chat.l.get( 'chat new message in conversation' ) + ' "' + conv.topic + '"' );
				} else {
					D.chat.docTitleAlert( mail.senderUser.title + ' ' + D.chat.l.get( 'chat send to you message' ) + '!' );
				}
			}
		},

		/**
		 * @param {DR.users.struct.User} user
		 * @param {D.chat.OnRead} par
		 */
		_onChatConvRead:function( user, par ){
			var fid = par.fid;
			for( var k in this._items ){
				if( this._items[k].inTrash || this._items[k].fid != fid ){
					continue;
				}
				this._items[k].setRecUnread(false);
			}
		},

		_onChatOnline:function( uid, online ){
			for( var k in this._items ){
				if( this._items[k].data.friend && this._items[k].data.friend.id == uid ){
					this._items[k].updateOnline(online);
				}
			}
		},
		
		/**
		 * @protected
		 * @type {DR.msg.Inbox|DR.msg.Trash}
		 */
		_mBox:null,
		
		/** @type {null|D.msg.Conv} */
		_openConv:null,
		
		_mBoxRe:function(){
			D.removeLoadingOverlay( this.node );
			if( this.pg == 1 && empty( this._mBox.re.items ) ){
				this._more.hide();
				clearNode( this._itemsNode );
				T.info( D.msg.l.get('Šeit nav nevienas vēstulītes.') ).append( this._itemsNode );
				if( this._clearTrashNode ){
					this._clearTrashNode.remove();
				}
				return;
			}
			if( !this._more.loading ){
				this.clear();
			}
			for( var k in this._mBox.re.items ){
				var item = new D.msg.ConvList.Item( this._mBox.re.items[k] );
				this.addItem(item);
			}
			if( this._pg ){
				this._pg.pgs = this._mBox.re.pgs;
				if( !this._more.loading ){
					this._pg.value( this._mBox.pg );
				}
			} else {
				this._pg = new T.Pg({
					pg:this._mBox.pg,
					pgs:this._mBox.re.pgs
				}).append(this._footerNode);
				this._pg.callback = this.setPg;
			}
			if( this.pg < this._mBox.re.pgs ){
				this._more.reset();
			} else {
				this._more.hide();
			}
			this.onScroll();
			if( this._sel ){
				this._sel.setConvCount( this._mBox.re.count );
			}
		},
		
		_mBoxError:function(){
			switch( this._mBox.error ){
				case 'down':
				case 'closed':
					clearNode( this.node );
					T.error( D.Lang.get('error_section') ).append( this.node );
					break;
			}
		},
		
		clear:function(){
			clearNode( this._itemsNode );
			this._items = {};
			this._itemsSorted = [];
		},
		
		/**
		 * @param {DR.ApiCall} ac
		 */
		onBeforeApiCall:function(ac){
		},
		
		setPg:function(pg){
			if( this._mBox.processing ){
				return false;
			}
			D.loadingOverlay( this.node, { delay:true } );
			this.pg = pg;
			this._pgFrom = this.pg;
			this._mBox.pg = pg;
			var ac = new DR.ApiCall;
			ac.addMethod( this._mBox );
			this.onBeforeApiCall(ac);
			ac.call();
			if( $(window).scrollTop() > 200 ){
				D.scrollIntoView(this.node);
			}
			if( this.pg == 1 ){
				if( new Get().v('pg') ){
					Section.setUrl('?' + new Get().remove('pg'));
				}
			} else {
				Section.setUrl( '?' + new Get().add( 'pg', this.pg ) );
			}
		},
		
		/**
		 * @param {D.msg.ConvList.Item} item
		 */
		addItem:function(item){
			item._list = this;
			this._items[ item.id ] = item;
			this._itemsSorted.push(item);
			item.append( this._itemsNode );
		},
		
		/**
		 * @param {D.msg.ConvList.Item} item
		 */
		removeItem:function(item){
			item.node.remove();
			delete this._items[ item.id ];
			var i = array_search( item, this._itemsSorted, true );
			if( i !== false ){
				this._itemsSorted.splice( i, 1 );
			}
		},

		/**
		 * @param {D.msg.ConvList.Item} item
		 */
		replaceItem:function(item){
			var old = this._items[ item.id ];
			if(!old){
				return false;
			}
			var i = array_search( old, this._itemsSorted, true );
			if( i === false ){ // wtf?
				return false;
			}
			item._list = this;
			item.node.replace( old.node );
			this._items[ item.id ] = item;
			this._itemsSorted[i] = item;
			return true;
		},

		/**
		 * @param {D.msg.ConvList.Item} item
		 */
		prependItem:function(item){
			item._list = this;
			if( this._itemsNode.firstChild ){
				D.insertBefore( item.node, this._itemsNode.firstChild );
			} else {
				item.node.append( this._itemsNode );
			}
			this._items[ item.id ] = item;
			this._itemsSorted.unshift(item);
		},
		
		/**
		 * @param {D.msg.ConvList.Item} item
		 */
		_itemOnclick:function(item){
			Section.navigate( './' + item.url );
			/*
			var index = array_search( item, this._itemsSorted, true );
			if( index !== false ){
				this._updatePgOffset(index);
			}
			Section.setUrl( './' + item.url );
			D.loadingOverlay( this.node, { delay:true } );
			var conv = new D.msg.Conv( {
				id:item.id,
				uid:this.uid,
				onBeforeApiCall:this.onBeforeApiCall
			} );
			conv.onInit = D.closure( this, function(){
				D.removeLoadingOverlay( this.node );
				conv.node.replace( this.node );
			} );
			this._openConv = conv;
			this._scrollTop = $(window).scrollTop();
			this.onConvOpen(item);
			//D.scrollIntoView( conv.node );
			item.setUnread(false);
			*/
		},
		
		back:function(){
			if( !this._openConv ){
				return false;
			}
			this.node.replace( this._openConv.node );
			this._openConv = null;
			Section.setUrl('./');
			$(window).scrollTop( this._scrollTop );
			return true;
		},
		
		onScroll:function(){
			if( this._openConv ){
				this._openConv.onScroll();
				return;
			}
			if( ( this.pg + 1 ) % 4 != 0 && D.inScreen( this._more.node ) && !this._mBox.processing ){
				this._more.load();
				//return;
			}
			if( D.inScreen( this._footerHolderNode ) ){
				removeClassName( this._footerHolderNode, 'fixed' );
			} else {
				addClassName( this._footerHolderNode, 'fixed' );
			}
		},
		
		_updatePgOffset:function(offset){
			this._pg.value( Math.floor( offset / D.msg.Conv.PG_SIZE ) + this._pgFrom );
		},
		
		_updatePg:function(up){
			if( !this._pg || !this._itemsSorted.length ){
				return;
			}
			var i;
			if(up){
				for( i = 0; i < this._itemsSorted.length; ++ i ) {
					if( D.inScreen( this._itemsSorted[i].node ) ){
						this._updatePgOffset(i);
						return;
					}
				}
				return;
			}
			for( i = this._itemsSorted.length - 1; i > 0; -- i ){
				if( D.inScreen( this._itemsSorted[i].node ) ){
					this._updatePgOffset(i);
					return;
				}
			}
		},
		
		onScrollUp:function(){
			if( this._openConv ){
				this._openConv.onScrollUp();
				return;
			}
			this._updatePg(true);
		},
		
		onScrollDown:function(){
			if( this._openConv ){
				this._openConv.onScrollDown();
				return;
			}
			this._updatePg(false);
		},
		
		onLeave:function(){
			if( this._openConv ){
				this._openConv.onLeave();
			}
			if( D.chat ){
				D.chat.unbindAll();
			}
		},
		
		_loadMore:function(){
			if( this._mBox.processing ){
				return;
			}
			this._mBox.pg = ++ this.pg;
			var ac = new DR.ApiCall;
			ac.addMethod( this._mBox );
			this.onBeforeApiCall(ac);
			ac.call();
		},
		
		count:function(){
			return count( this._items );
		},
		
		itemPg:function(item){
			var i = array_search( item, this._itemsSorted, true );
			if( i === false ){
				return 1;
			}
			return Math.floor( i / D.msg.BOX_PG_SIZE ) + 1;
		},
		
		_delAll:function(){
			new D.msg.Confirm( {
				title:D.msg.l.get('Izmest dzēstās vēstules'),
				//text:'Lai izmestu dzēstās vēstules, ieraksti vārdu "IZMEST"',
				html:D.msg.l.get('empty_trash_text').replace( '$kw', D.msg.l.get('empty_trash_confirm') ),
				buttonCaption:D.msg.l.get('Izmest'),
				confirmText:D.msg.l.get('empty_trash_confirm'),
				onConfirm:this._delAllConf
			} );
		},
		
		_delAllConf:function(){
			var m = new DR.msg.DelAll;
			m.uid = this.uid;
			m.trash = true;
			m.onLoad = function(){
				Section.navigate(); // reload
			};
			D.loadingOverlay( this.node );
			m.call();
		},
		
		/**
		 * @protected
		 */
		_onSelect:function(){
			this._sel.setSelCount( this.getSelected().length );
		},
		
		/**
		 * @returns {Array.<D.msg.ConvList.Item>}
		 */
		getSelected:function(){
			var re = [];
			for( var k in this._items ){
				if( this._items[k]._cbx.checked ){
					re.push( this._items[k] );
				}
			}
			return re;
		},
		
		_delSelected:function(){
			var ids = [];
			var sel = this.getSelected();
			for( var k in sel ){
				ids.push( sel[k].id );
			}
			D.loadingOverlay( this.node );
			var m = new DR.msg.ConvDelArray;
			m.uid = this.uid;
			m.cids = ids;
			m.onLoad = this._mConvDelArray;
			var ac = new DR.ApiCall;
			ac.addMethod(m);
			this.onBeforeApiCall(ac);
			ac.call();
		},
		
		_mConvDelArray:function(){
			this._sel.cancel();
			this._sel.setSelCount(0);
			this.setPg(1);
		},
		
		update:function(){
			if( this._mUpdate && this._mUpdate.processing ){
				return;
			}
			if( this.trash ){
				this._mUpdate = new DR.msg.Trash;
			} else {
				this._mUpdate = new DR.msg.Inbox;
			}
			this._mUpdate.pg = 1;
			this._mUpdate.uid = this.uid;
			this._mUpdate.select = this._mBox.select;
			this._mUpdate.onLoad = this._mUpdateRe;
			var ac = new DR.ApiCall;
			ac.addMethod( this._mUpdate );
			this.onBeforeApiCall(ac);
			ac.call();
		},

		_mUpdateRe:function(){
			for( var k in this._mUpdate.re.items ){
				var cd = this._mUpdate.re.items[k];
				if( this._items[ cd.id ] ){
					if( D.JSON.encode( this._items[ cd.id ]._conv ) == D.JSON.encode(cd) ){
						continue;
					}
					this.replaceItem( new D.msg.ConvList.Item(cd) );
					continue;
				}
				this.prependItem( new D.msg.ConvList.Item(cd) );
			}
		}

	},
	mkE.Base
);

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * @extends {mkE.Base}
 * @constructor
 */
D.msg.ConvList.SelectDel = Class(
	/**
	 * @lends {D.msg.ConvList.SelectDel#}
	 */
	{
		__construct:function(par){
			par = par || {};
			this.onSelect = par.onSelect || this.onSelect;
			this.onCancel = par.onCancel || this.onCancel;
			this.onDelete = par.onDelete || this.onDelete;
			this.node = mkE( {
				tag:'div',
				className:'MsgConvListSelectDel',
				els:[
					this._1Node = mkE( {
						tag:'div',
						els:[
							this._convCountNode = mkE( {
								tag:'span',
								className:'color2'
							} ),
							{
								tag:'div',
								className:'right',
								els:[
									{
										tag:'a',
										className:'icon editIcon',
										text:D.msg.l.get('Dzēst sarakstes'),
										onclick:this._select
									}
								]
							} // .right
						]
					} ) // 1
				]
			} );
			this._2Node = mkE( {
				tag:'div',
				els:[
					this._selCountNode = mkE( {
						tag:'span',
						className:'color2'
					} ),
					{
						tag:'div',
						className:'right',
						els:[
							this._delIconNode = mkE( {
								tag:'a',
								className:'SIcon trashSIcon',
								text:D.Lang.get('delete'),
								onclick:this._onDelete
							} ),
							{
								tag:'a',
								className:'icon closeIcon',
								text:D.Lang.get('cancel'),
								onclick:this.cancel
							}
						]
					}
				]
			} );
			this.setSelCount(0);
		},

		setConvCount:function(v){
			this.node.style.display = v ? '': 'none';
			clearNode( this._convCountNode );
			mkE.appendTypeElement( this._convCountNode, [
				{
					tag:'b',
					text:v
				},
				' ',
				D.msg.l.nget( v, 'sarakstes' )
			] );
		},

		setSelCount:function(v){
			clearNode( this._selCountNode );
			if(!v){
				this._delIconNode.style.opacity = '0.5';
				return;
			}
			this._delIconNode.style.opacity = '';
			mkE.appendTypeElement( this._selCountNode, [
				D.msg.l.nget( v, 'Atzīmētas' ),
				' ',
				{
					tag:'b',
					text:v
				},
				' ',
				D.msg.l.nget( v, 'sarakstes' )
			] );
		},

		onSelect:D.doNothing,

		_select:function(){
			this._1Node.remove();
			this._2Node.append( this.node );
			this.onSelect();
		},

		onCancel:D.doNothing,

		cancel:function(){
			this._2Node.remove();
			this._1Node.append( this.node );
			this.onCancel();
		},

		onDelete:D.doNothing,

		_onDelete:function(){
			this.onDelete();
		}
		
	},	
	mkE.Base
);

/**
 * @constructor
 */
D.msg.ConvList.Item = Class(
	{
		/**
		 * @param {DR.msg.struct.Conv} conv
		 * @constructor
		 */
		__construct:function(conv){
			this._conv = conv;
			this.id = conv.id;
			this.uid = conv.uid;
			this.fid = conv.fid;
			this.inTrash = conv.inTrash;
			//this.isGroup = conv.isGroup;
			//this.isLeft = conv.isLeft;
			this.url = D.msg.convUrl(conv);
			this.isUnread = conv.isUnread;
			this.caption = D.msg.convCaption(conv); // for search too
			this.data = conv;
			var k;
			this.node = mkE( {
				tag:'div',
				className:'MsgConvListItem SIconHover',
				els:[
					/** @protected */
					this._cbx = mkE( {
						tag:'input',
						className:'cbx',
						type:'checkbox',
						onclick:this._onSelect
					} ),
					this._imgNode = mkE( {
						tag:'a',
						className:'MsgConvListItemIcon',
						style:{
							backgroundColor:conv.isGroup ? conv.color : ''
						},
						onclick:this._onclick
					} ),
					this._optNode = mkE( {
						tag:'div',
						className:'options color2',
						onclick:D.stopPropagation
					} ),
					this._userNameNode = mkE( {
						tag:'a',
						className:'MsgConvListItemUser cut',
						text:this.caption,
						onclick:this._onclick,
						href:'./' + this.url
					} ),
					this._introNode = mkE( {
						tag:'div',
						className:'MsgConvListItemIntro cut',
						onclick:this._onclick
					} ), // div.intro
					this._badgesNode = mkE( {
						tag:'div',
						className:'badges'
					} )
				]
			} );
			if( D.DEV ){
				this.node.setAttribute( 'data-id', conv.id );
			}
			if( conv.isGroup ){
				addClassName( this.node, 'MsgConvGroup' );
				/*if( conv.membersCount > 2 ){
					mkE( {
						tag:'div',
						//className:'radius3',
						text:conv.membersCount
					} ).append( this._imgNode );
				}*/
			}
			if( conv.image ){
				D.bgImage( this._imgNode, conv.image.icon );
			} else if( conv.friend ){
				D.bgImage( this._imgNode, conv.friend.image.icon );
				if( conv.friend instanceof DR.users.struct.UserDefault ){
					this._userOnlineNode = mkE( {
						tag:'span'
					} ).append( this._imgNode );
					this.updateOnline();
				}
			}
			this.setUnread( conv.isUnread, conv.unread );
			if( conv.draft ){
				mkE( {
					tag:'span',
					className:'draft',
					text:D.msg.l.get('Melnraksts')
				} ).append( this._badgesNode );
			}
			if( conv.muted ){
				mkE( {
					tag:'span',
					className:'muted'
				} ).append( this._optNode );
			}
			if( conv.lastMail ){
				new T.Time( conv.lastMail.ts ).append( this._optNode );
				if( !conv.unread ){
				 if( D.ID == conv.lastMail.sender || conv.lastMail.sender == this.uid ){
					 mkE( {
						 tag:'span',
						 className:'reply'
					 } ).append( this._introNode );
				 }
				}
				if( conv.isGroup && conv.lastMail.sender != this.uid ){
					mkE( {
						tag:'span',
						els:[ conv.lastMail.senderUser.name, ': ' ]
					} ).append( this._introNode );
				} else if( ( conv.isGroup && D.ID == conv.lastMail.sender ) || ( ( conv.lastMail.opt & D.msg.Mail.OPT_SYSTEM ) && conv.lastMail.sender == this.uid ) ){
					mkE( {
						tag:'span',
						els:[ D.msg.l.get('You'), ': ' ]
					} ).append( this._introNode );
				}
				var textNode = mkE( {
					tag:'span',
					text:conv.lastMail.intro
				} ).append( this._introNode );
				if( empty( textNode.innerHTML ) ){
					textNode.innerHTML = '&nbsp;';
				}
				D.smileyReplace(textNode);
				if( conv.lastMail.editedEmpty ){
					mkE( {
						tag:'i',
						className:'color2',
						text:D.Lang.get('Lietotājs dzēsis šo saturu.')
					} ).append(textNode);
				}
				if( this.uid != conv.lastMail.sender && conv.lastMail.isSpam ){
					clearNode( this._introNode );
				}
			}
			if( conv.isRecUnread ){
				//addClassName( this.node, 'recUnread' );
				this.setRecUnread(true);
			}
			if( conv.isGroup && conv.isLeft ){
				addClassName( this._userNameNode, 'color2' );
			}
			this._drawOptions();
		},

		updateOnline:function(online){
			if( !this._userOnlineNode || !this.data.friend ){
				return;
			}
			if( isset(online) ){
				this.data.friend.online = online;
			}
			switch( this.data.friend.online || ( D.chat && D.chat.isOnline( this.data.friend.id ) ) ){
				case 'www':
					this._userOnlineNode.className = 'onlineStatus onlineWWWIcon';
					break;
				case 'mobile':
					this._userOnlineNode.className = 'onlineStatus onlineMobileIcon';
					break;
				default:
					this._userOnlineNode.className = '';
			}
		},
		
		/** @type {D.msg.ConvList} */
		_list:null,
		
		append:function(parent){
			this.node.append(parent);
			return this;
		},
		
		setUnread:function( unread, v ){
			if( this._unreadBadgeNode ){
				this._unreadBadgeNode.remove();
			}
			if(unread){
				addClassName( this.node, 'unread' );
			} else {
				removeClassName( this.node, 'unread' );
			}
			if(!v){
				return;
			}
			this._unreadBadgeNode = mkE( {
				tag:'span',
				className:'badge on',
				text:v
			} );
			if( this._introNode.firstChild ){
				D.insertBefore( this._userNameNode, this._introNode.firstChild );
			} else {
				this._unreadBadgeNode.append( this._introNode );
			}
		},
		
		setRecUnread:function(v){
			if(v){
				if( this._recUnreadBadgeNode ){
					return;
				}
				this._recUnreadBadgeNode = mkE( {
					tag:'span',
					className:'badge off recUnreadBadge',
					text:D.msg.l.get('Nav lasīts')
				} );
				//if( this._badgesNode.firstChild ){
				//	D.insertBefore( this._recUnreadBadgeNode, this._badgesNode.firstChild );
				//} else {
					this._recUnreadBadgeNode.append( this._badgesNode );
				//}
				return;
			}
			if( this._recUnreadBadgeNode ){
				this._recUnreadBadgeNode.remove();
				this._recUnreadBadgeNode = null;
			}
		},
		
		_onclick:function(){
			this._list._itemOnclick(this);
			return false;
		},
		
		_drawOptions:function(){
			mkE( {
				tag:'a',
				className:'SIcon optionsSIcon',
				onclick:this._optMore
			} ).append( this._optNode );
		},
		
		_optMore:function(){
			if( this._optionsDropDown ){
				this._optionsDropDown.toggle( this._optNode );
				return;
			}
			this._optionsDropDown = new T.Options();
			var opt;
			if( this.inTrash ){
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Atjaunot'),
					onclick:this._optRestore
				} );
				this._optionsDropDown.addItem(opt);
			} else if( !this.isUnread ){
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Atzīmēt kā nelasītu'),
					onclick:this._optMarkAsUnread
				} );
				this._optionsDropDown.addItem(opt);
			}
			this._optionsDropDown.addSep();
			opt = new T.Options.Item( {
				caption:D.msg.l.get('Dzēst saraksti'),
				onclick:this._optDel
			} );
			this._optionsDropDown.addItem(opt);
			this._optionsDropDown.append( this._optNode );
		},
		
		_optDel:function(){
			var confirm = new D.msg.ConvDelConfirm( this._conv );
			confirm.onBeforeApiCall = this._optDelOnBeforeApiCall;
			confirm.onDelete = this._onDelete;
		},

		_onDelete:function(){
			//this._list.removeItem(this);
			if( this.inTrash ){
				Section.navigate('./trash');
			} else {
				Section.navigate('./');
			}
		},

		/**
		 * @param {DR.ApiCall} ac
		 * @private
		 */
		_optDelOnBeforeApiCall:function(ac){
			D.loadingOverlay( this.node );
			this._list.onBeforeApiCall(ac);
			if( this._list.count() < 5 ){
				if( this._list.pg > 1 && this._list._pgFrom == this._list.pg && this._list.count() == 1 ){ // last item
					this._list._mBox.pg = --this._list.pg;
				} else {
					this._list._mBox.pg = this._list.itemPg(this);
					this._list._mBox._pgFrom = this._list._mBox.pg;
				}
				ac.addMethod( this._list._mBox );
			}
			this._list.onBeforeApiCall(ac);
			if( this._list._sel && !this.inTrash ){
				var mCounts = new DR.msg.GetCounts;
				mCounts.uid = this.uid;
				mCounts.select = [
					new DR.msg.select.Counts().inbox()
				];
				mCounts.onLoad = D.closure( this, function(){
					this._list._sel.setConvCount( mCounts.re.inbox );
				} );
				ac.addMethod(mCounts);
			}
		},
		
		_optRestore:function(){
			D.loadingOverlay( this.node );
			this._mRestore = new DR.msg.ConvRestore;
			this._mRestore.cid = this.id;
			this._mRestore.uid = this.uid;
			this._mRestore.onLoad = this._mRestoreRe;
			var ac = new DR.ApiCall;
			ac.addMethod( this._mRestore );
			if( this._list.pg > 1 && this._list.count() == 1 ){
				this._list._mBox.pg = -- this._list.pg;
			}
			ac.addMethod( this._list._mBox );
			this._list.onBeforeApiCall(ac);
			ac.call();
		},
		
		_mRestoreRe:function(){
		},
		
		_optMarkAsUnread:function(){
			D.loadingOverlay( this.node, { delay:true } );
			this._mUnread = new DR.msg.MarkAsUnread;
			this._mUnread.cid = this.id;
			this._mUnread.uid = this.uid;
			this._mUnread.onLoad = this._mUnreadRe;
			var ac = new DR.ApiCall;
			ac.addMethod( this._mUnread );
			this._list.onBeforeApiCall(ac);
			ac.call();
		},
		
		_mUnreadRe:function(){
			D.removeLoadingOverlay( this.node );
			addClassName( this.node, 'unread' );
			this.isUnread = true;
			delete this._optionsDropDown;//
		},
		
		_onSelect:function(){
			if( this._cbx.checked ){
				addClassName( this.node, 'selected' );
			} else {
				removeClassName( this.node, 'selected' );
			}
			this._list._onSelect();
		}

	}
);// --- conv_list.js --- 
// +++ conv.js +++ 
/**
 * @extends {D.msg.MailListBase}
 * @param par
 */
D.msg.Conv = Class(
	{
		fid:0,
		pg:1,
		_pgFrom:0,
		_pgTo:0,

		/** @type {Object.<D.msg.Mail>} */
		_items:{},
		/** @type {Array.<D.msg.Mail>} */
		_itemsSorted:[],
		/** @type {Array.<D.msg.Mail>} */
		_itemsUnread:[],
		/** @type {Array.<D.msg.Mail>} */
		_itemsAddOlder:[],
		/** @type {Object.<{user:DR.users.struct.User,timeout:Number}>} */
		/** @type {D.msg.Mail} */
		lastMail:null,
		_writingUsers:{},
		/** @type {DR.msg.struct.Conv} */
		_conv:null,

		__construct:function(par){
			this.id = par.id;
			this.pg = par.pg || 1;
			this.mid = par.mid || 0; // highlight
			this.uid = par.uid || null;
			this._updatePgRev = true;
			this.onBeforeApiCall = par.onBeforeApiCall || this.onBeforeApiCall;
			this.onInit = par.onInit || this.onInit;
			this.onLoad = par.onLoad || this.onLoad;
			/** @type {D.msg.LastConvs} */
			this.lastConvs = par.lastConvs || null;
			this.node = mkE( {
				tag:'div',
				className:'Msg MsgConv radius3top',
				els:[
					{
						tag:'div',
						className:'MsgConvHeaderW',
						els:[
							this._headerNode = mkE( {
								tag:'div',
								className:'MsgConvHeader'
							} )
						]
					},
					this._loadOlderButton = new D.msg.LoadMore( {
						caption:D.msg.l.get('Ielādēt vecākas'),
						onLoad:this._loadOlder
					} ),
					this._itemsNode = mkE( {
						tag:'div'
					} ),
					this._loadNewerButton = new D.msg.LoadMore( {
						caption:D.msg.l.get('Ielādēt jaunākas'),
						onLoad:this._loadNewer
					} ),
					this._writingNode = mkE( {
						tag:'div',
						className:'MsgWriting'
						// style:{
						// 	display:'none'
						// }
					} ),
					this._footerHolderNode = mkE( {
						tag:'div',
						className:'MsgConvFooterW',
						els:[
							this._footerNode = mkE( {
								tag:'div',
								className:'MsgConvFooter'
							} )
						]
					} )
				]
			} );
			// mails
			this._mConvMails = new DR.msg.ConvMails;
			this._mConvMails.uid = this.uid;
			this._mConvMails.cid = this.id;
			this._mConvMails.pg = this.pg;
			this._mConvMails.select = D.msg.MAIL_SELECT.concat( D.msg.OPEN_CONV_SELECT );
			this._mConvMails.onLoad = this._mConvMailsRe;
			this._mConvMails.onError = D.closure( this, function(){
				D.removeLoadingOverlay( this.node );
				if (this._mConvMails.error == 'conv not exists') {
					Section.navigate('./', {popState: true});
				}
			} );
			// members
			this._mMembers = new DR.msg.Members;
			this._mMembers.uid = this.uid;
			this._mMembers.cid = this.id;
			this._mMembers.count = D.msg.Conv.MEMBERS_PREVIEW_COUNT;
			this._mMembers.select = [
				new DR.msg.select.MembersRe().all(),
				new DR.users.select.User().id().title().image().url(),
				new DR.users.select.Image().small(),
				new DR.users.select.UserDefault().lastSeen().sex()
			];
			this._mMembers.onLoad = this._mMembersRe;
			if( par.apiCall ){
				par.apiCall.addMethod( this._mConvMails );
				par.apiCall.addMethod( this._mMembers );
			} else {
				var ac = new DR.ApiCall(ac);
				ac.addMethod( this._mConvMails );
				ac.addMethod( this._mMembers );
				this.onBeforeApiCall(ac);
				ac.call();
			}
		},

		append:function(parent){
			this.node.append(parent);
			return this;
		},

		clear:function(){
			this._items = {};
			this._itemsSorted = [];
			clearNode( this._itemsNode );
		},

		/**
		 * @param {DR.ApiCall} [apiCall]
		 */
		update:function(apiCall){
			/** @type {DR.ApiCall} */
			var ac = apiCall || new DR.ApiCall;
			this._getConv = new DR.msg.GetConv;
			this._getConv.uid = this.uid;
			this._getConv.cid = this.id;
			this._getConv.select = this._mConvMails.select;
			this._getConv.onLoad = this._getConvRe;
			ac.addMethod( this._getConv );
			ac.addMethod( this._mMembers );
			if( this.lastConvs ){
				this.lastConvs.update(ac);
			}
			if(!apiCall){
				ac.call( D.msg.CALL );
			}
		},

		_getConvRe:function(){
			this._conv = this._getConv.re.conv;
		},

		/**
		 * @public
		 * @param {DR._Method} method
		 */
		_call:function(method){
			var ac = new DR.ApiCall;
			ac.addMethod(method);
			this.onBeforeApiCall(ac);
			ac.call();
		},

		/**
		 * @param {boolean} [scrollMails]
		 */
		scrollToEnd:function(scrollMails){
			if( scrollMails && this._conv.isUnread ){
				var i = this._itemsSorted.length - ( this.unread || 1 );
				if( this._itemsSorted[i] ){
					D.scrollIntoView( this._itemsSorted[i].node );
					return;
				}
				if( this.unread > this._itemsSorted.length ){
					D.scrollIntoView( this._headerNode );
					return;
				}
			}
			D.scrollIntoViewBottom( this._footerHolderNode, 30 );
		},

		jumpToBottom:function(){
			var node = this._footerHolderNode;
			var bottom = 30;
			var pos = D.position(node);
			var top = pos.top - $(window).height() + bottom + node.offsetHeight;
			if( top < 0 ){
				top = 0;
			}
			$('html,body').scrollTop(top);
		},

		_init:function(){
			if( !this.isLeft ){
				var fp = new D.msg.Form.Par;
				fp.uid = this.uid;
				fp.fid = this.fid;
				if(!this.inTrash){
					fp.cid = this.id;
				}
				fp.draft = this.draft;
				fp.onResize = this._formOnResize;
				fp.onSend = this._onSend;
				fp.onBeforeApiCall = this.onBeforeApiCall;
				fp.sendSelect = this._mConvMails.select;
				fp.onExpand = this._formOnExpand;
				fp.onKeyUp = this._formOnKeyUp;
				fp.onDoEdit = this._onDoEdit;
				fp.onCancelEdit = this._onCancelEdit;
				fp.onEdit = this._onEdit;
				this._form = new D.msg.Form(fp);
				this._form.append( this._footerNode );
			}
			this._pg = new T.Pg( {
				pg:this.pg,
				pgs:this._mConvMails.re.pgs
			} ).append(this._footerNode);
			this._pg.callback = this.setPg;
			this.onInit();
			if( this.mid && this._items[ this.mid ] ){
				setTimeout( D.closure( this, function(){
					D.scrollIntoViewMiddle( this._items[this.mid].node );
					this._items[this.mid].setUnread(true);
				} ), 100 );
			} else {
				setTimeout( D.closure( this, function(){
					//this.scrollToEnd(true);
					if(this._form){
						this._form.focus();
						this.jumpToBottom();
					}
					this._formOnResize();
				} ), 200 );
			}
			D.onLoad( 'chat', this.bindChatEvent );
		},

		_formOnResize:function(){
			this._footerHolderNode.style.minHeight = this._footerNode.offsetHeight + 'px';
			this.onScroll();
		},

		_formOnExpand:function(){
			$(window).scrollTop( $(window).scrollTop() + 60 );
		},

		_formOnKeyUp:function(){
			if( D.chat ){
				D.chat.sendWritingConv( this.fid, this.uid );
			}
		},

		/**
		 * @param {DR.msg.struct.Mail} data
		 * @param {{emoToolTip:Boolean}} [par]
		 * @private
		 * @return {D.msg.Mail}
		 */
		_createMail:function( data, par ){
			par = par || {};
			var re = new D.msg.Mail( data, {
				uid:this.uid,
				emoButton:!this.inTrash && !this.isLeft,
				emoToolTip:par.emoToolTip
			} );
			if( !this.isLeft ){
				re.onDoEdit = D.closure( this, this.editMail, re );
			}
			return re;
		},

		/**
		 * @param {D.msg.Mail} mail
		 */
		addMail:function(mail){
			if( this._items[ mail.id ] ){
				return false;
			}
			mail.conv = this;
			mail.cid = this.id;
			this._items[ mail.id ] = mail;
			this._itemsSorted.push(mail);
			mail.node.append( this._itemsNode );
			this.lastMail = mail;
			this.writingSoundT = 0;
			return true;
		},

		/**
		 * @param {D.msg.Mail} mail
		 */
		preAddMail:function(mail){
			if( this._items[ mail.id ] ){
				return;
			}
			mail.conv = this;
			mail.cid = this.id;
			this._items[ mail.id ] = mail;
			this._itemsSorted.unshift(mail);
			if( this._itemsNode.firstChild ){
				D.insertBefore( mail.node, this._itemsNode.firstChild );
			} else {
				mail.node.append( this._itemsNode );
			}
		},

		/**
		 * @param {D.msg.Mail} m
		 */
		replaceMail:function(m){
			var oldMail = this._items[ m.id ];
			if(!oldMail){
				return false;
			}
			var i = array_search( oldMail, this._itemsSorted );
			if( i === false ){
				return false;
			}
			m.conv = this;
			this._itemsSorted[i] = m;
			this._items[ m.id ] = m;
			addClassName( m.node, oldMail.node.className );
			m.node.replace( oldMail.node );
		},

		removeMail:function(mail){
			var i = array_search( mail, this._itemsSorted );
			if( i !== false ){
				this._itemsSorted.splice( i, 1 )
			}
			delete this._items[ mail.id ];
			mail.node.remove();
			this.grouping();
		},

		grouping:function(){
			var u1 = true;
			var d1 = true;
			var className;
			/** @type {D.msg.Mail} */
			var prevMail;
			for( var k = 0; k < this._itemsSorted.length; ++ k ){
				var mail = this._itemsSorted[k];
				if( prevMail && prevMail.sender != mail.sender ){
					u1 = !u1;
				}
				if( prevMail && prevMail.date != mail.date ){
					d1 = !d1;
				}
				prevMail = mail;
				if( ( mail.data.opt & D.msg.Mail.OPT_SYSTEM ) == 0 ){
					className = u1 ? 'uid1' : 'uid2';
					if( !existsClassName( mail.node, className ) ){
						removeClassName( mail.node, u1 ? 'uid2' : 'uid1' );
						addClassName( mail.node, className );
					}
				}
				className = d1 ? 'date1' : 'date2';
				if( !existsClassName( mail.node, className ) ){
					removeClassName( mail.node, d1 ? 'date2' : 'date1' );
					addClassName( mail.node, className );
				}
			}
		},

		unreadUpdate:function(){
			if( this.pg > 1 || !this.unread ){
				this._loadOlderButton.badge(0);
				return;
			}
			var c = 0;
			for( var i = this._itemsSorted.length - 1; i >= 0; -- i ){
				if( this._itemsSorted[i].sender == this.uid ){
					continue;
				}
				if( ++ c > this.unread ){
					break;
				}
				this._itemsSorted[i].setUnread(true);
			}
			if( this.unread > this._itemsSorted.length ){
				this._loadOlderButton.badge( this.unread - this._itemsSorted.length );
			} else {
				this._loadOlderButton.badge(0);
			}
		},

		unreadReset:function(){
			this.unread = 0;
			for( var k in this._items ){
				this._items[k].setUnread(false);
			}
			this._loadOlderButton.badge(0);
		},

		_mConvMailsRe:function(){
			this.onLoad();
			this.clear();
			/** @type {DR.msg.struct.Conv} */
			var conv = this._mConvMails.re.conv;
			this._conv = conv;
			this.uid = conv.uid;
			this.unread = conv.unread;
			this.fid = conv.fid;
			this.inTrash = conv.inTrash;
			this.isGroup = conv.isGroup;
			this.isLeft = conv.isLeft;
			this.draft = conv.draft;
			this.caption = D.msg.convCaption(conv); // for search too;
			this.canAddMembers = conv.canAddMembers;
			this.canMute = conv.canMute;
			this.membersCount = conv.membersCount;
			if( conv.isGroup ){
				addClassName( this.node, 'MsgConvGroup' );
			}
			this._mConvMails.re.items = this._mConvMails.re.items.reverse();
			var c = 0;
			var startDate = '';
			for( var k in this._mConvMails.re.items ){
				var mail = this._createMail( this._mConvMails.re.items[k] );
				this.preAddMail(mail);
				if( !this.mid && this.pg == 1 && ++ c > Math.max( conv.unread, 5 ) ){
					var mailDate = new D.Date( mail.ts ).toSqlDate();
					startDate = startDate || mailDate;
					if( mailDate != startDate || $('#ct').height() > $(window).height() - $('#head').offset().top - 120 ){
						this._itemsAddOlder.push(mail);
					}
				}
			}
			for( var k in this._itemsAddOlder ){
				this.removeMail( this._itemsAddOlder[k] );
			}
			this.grouping();
			if( !this._initOk ){
				this._initOk = true;
				this._init();
			}
			this.unreadUpdate();
			D.removeLoadingOverlay( this.node );
			this._pgFrom = this.pg;
			this._pgTo = this.pg;
			if( this.pg >= this._mConvMails.re.pgs && empty( this._itemsAddOlder ) ){
				this._loadOlderButton.hide();
			} else {
				this._loadOlderButton.reset();
			}
			if( this.pg == 1 ){
				this._loadNewerButton.hide();
			} else {
				this._loadNewerButton.reset();
			}
		},

		_mMembersRe:function(){
			if( !this._mConvMails.re ){
				return;
			}
			clearNode( this._headerNode );
			var imageNode = mkE( {
				tag:'div',
				className:'MsgConvImage radius3',
				style:{
					backgroundColor:D.msg.CONV_COLOR[ Math.abs( this.fid ) % D.msg.CONV_COLOR.length ]
				}
			} ).append( this._headerNode );
			if( this.isGroup && !this.isLeft && !this.inTrash ){
				imageNode.onclick = this._changePic;
				imageNode.style.cursor = 'pointer';
			}
			var infoNode = mkE( {
				tag:'div',
				className:'MsgConvInfo'
			} ).append( this._headerNode );
			/** @type {DR.users.struct.User} */
			var friend;
			if( this.fid > 0 ){
				friend = this._mMembers.re.users[0];
				D.bgImage( imageNode, friend.image.small );
				mkE.appendTypeElement( infoNode, [
					{
						tag:'div',
						className:'color2',
						text:D.msg.l.get('Sarakste ar')
					},
					{
						tag:'div',
						className:'members cut',
						els:[
							{
								tag:'a',
								text:friend.title,
								href:friend.url
							}
						]
					}
				] );
			} else {
				var els = [];
				var memberCount = this._mMembers.re.count;
				if( memberCount == 2 ){
					friend = this._mMembers.re.users[0];
					els = [
						D.msg.l.get('Sarakste ar'), ' ',
						{
							tag:'a',
							text:friend.title,
							href:friend.url,
							className:'color2'
						}
					];
				} else {
					var users = [];
					for( var k in this._mMembers.re.users ) {
						var fr = this._mMembers.re.users[k];
						users.push( {
							tag:'a',
							text:fr.title,
							href:fr.url,
							className:'color2'
						} );
					}
					els.push(
						new T.AndMore( {
							limit:D.msg.Conv.MEMBERS_PREVIEW_COUNT,
							count:memberCount,
							els:users,
							moreOnclick:this._showMembers
						} )
					);
				}
				mkE.appendTypeElement( infoNode, [
					{
						tag:'div',
						className:'color2',
						els:els
					},
					{
						tag:'div',
						className:'members cut',
						text:this._conv.topic || ( memberCount > 2 ? D.msg.l.get('Grupas sarakste') : '' ),
						onclick:this._showMembers,
						style:{
							cursor:'pointer'
						}
					}
				] );
				if( this._conv.image ){
					D.bgImage( imageNode, this._conv.image.icon );
				} else if(friend){
					D.bgImage( imageNode, friend.image.small );
				}
			}
			this._headerButtonsNode = mkE( {
				tag:'div',
				className:'buttons',
				els:[
					this._muteIcon = new T.Form.Button( {
						color:'link',
						icon:( this._conv.muted ? 'blackUnmute' : 'blackMute' ),
						title:D.Lang.get( this._conv.muted ? 'Turn on notifications' : 'Turn off notifications' ),
						onclick:this._toggleMute
					} ),
					this._addMembersButton = new T.Form.Button( {
						color:'link',
						caption:D.msg.l.get('Add members'),
						icon:'blackAddMember',
						onclick:this._optAddMembers
					} ),
					this._optionsButton = new T.Form.Button( {
						color:'link',
						caption:D.msg.l.get('Opcijas'),
						icon:'blackSettings',
						className:'optionsButton',
						onclick:this._optionsShow
					} )
				]
			} ).append( this._headerNode );
			if( friend instanceof DR.users.struct.UserDefault && !this._conv.withAdmin ){
				mkE( {
					tag:'div',
					className:'lastSeen color2',
					els:[
						D.Lang.get( 'last_time_seen_' + friend.sex ), ' ',
						D.ddate2( friend.lastSeen )
					]
				} ).append( this._headerButtonsNode );
			}
			if( !this.canAddMembers ){
				this._addMembersButton.remove();
			}
			if( !this.canMute ){
				this._muteIcon.remove();
			}
		},

		_toggleMute:function(){
			this._conv.muted = !this._conv.muted;
			var mMute = new DR.msg.Mute;
			mMute.cid = this._conv.id;
			mMute.mute = this._conv.muted;
			mMute.call( D.msg.CALL );
			var button = new T.Form.Button( {
				color:'link',
				icon:( this._conv.muted ? 'blackUnmute' : 'blackMute' ),
				title:D.Lang.get( this._conv.muted ? 'Turn on notifications' : 'Turn off notifications' ),
				onclick:this._toggleMute
			} );
			button.replace( this._muteIcon.node );
			this._muteIcon = button;
		},

		onInit:D.doNothing,
		onLoad:D.doNothing,

		/**
		 * @param {DR.ApiCall} ac
		 */
		onBeforeApiCall:function(ac){
		},

		setPg:function(pg){
			if( this._mConvMails.processing ){
				D.log('processing');
				return false;
			}
			this._itemsAddOlder = []; // clear hidden
			this.pg = pg;
			this._mConvMails.pg = pg;
			D.loadingOverlay( this.node, { delay:true } );
			this._call( this._mConvMails );
			if( pg == 1 ){
				Section.setUrl( '?' + new Get().remove('pg') );
			} else {
				Section.setUrl( '?' + new Get().add( 'pg', pg ) );
			}
			if( this._pgTo - this._pgFrom > 2 ){
				this.node.scrollIntoView();
			}
			D.scrollIntoView( this.node );
			this._pg.value(pg);
		},

		_loadOlder:function(){
			if( !isset( this._pgTo ) ){
				return false;
			}
			if( !empty( this._itemsAddOlder ) ){
				var firstMail = this._itemsSorted[0];
				var top = firstMail ? D.position( firstMail.node ).top : 0;
				for( var k in this._itemsAddOlder ){
					this.preAddMail( this._itemsAddOlder[k] );
				}
				if(top){
					$(window).scrollTop( $(window).scrollTop() + D.position( firstMail.node ).top - top );
				}
				this._itemsAddOlder = [];
			}
			if( this._mConvMails && this.pg >= this._mConvMails.re.pgs ){
				this._loadOlderButton.hide();
				return;
			}
			var convMails = new DR.msg.ConvMails;
			convMails.cid = this.id;
			convMails.uid = this.uid;
			convMails.pg = ++ this._pgTo;
			convMails.select = this._mConvMails.select;
			convMails.onLoad = D.closure( this, this._loadOlderRe, convMails );
			convMails.onError = D.closure( this, function(){
				-- this._pgTo;
				this._loadOlderButton.reset();
			} );
			this._call(convMails);
		},

		/** @param {DR.msg.ConvMails} convMails */
		_loadOlderRe:function(convMails){
			var firstMail = this._itemsSorted[0];
			var top = firstMail ? D.position( firstMail.node ).top : 0;
			var scrollTop = $(window).scrollTop();
			convMails.re.items = convMails.re.items.reverse(); // insertBefore
			for( var k in convMails.re.items ){
				this.preAddMail( this._createMail( convMails.re.items[k] ) );
			}
			this.grouping();
			if( convMails.pg == convMails.re.pgs ){
				this._loadOlderButton.hide();
			} else {
				this._loadOlderButton.reset();
			}
			if(top){
				$(window).scrollTop( scrollTop + D.position( firstMail.node ).top - top );
			}
			this.onScroll();
			this.unreadUpdate();
		},

		_loadNewer:function(){
			if( !isset( this._pgFrom ) ){
				return false;
			}
			var convMails = new DR.msg.ConvMails;
			convMails.cid = this.id;
			convMails.uid = this.uid;
			convMails.pg = -- this._pgFrom;
			convMails.select = this._mConvMails.select;
			convMails.onLoad = D.closure( this, this._loadNewerRe, convMails );
			convMails.onError = D.closure( this, function(){
				++ this._pgFrom;
				this._loadNewerButton.reset();
			} );
			this._call(convMails);
		},

		/** @param {DR.msg.ConvMails} convMails */
		_loadNewerRe:function(convMails){
			for( var k in convMails.re.items ){
				this.addMail( this._createMail( convMails.re.items[k] ) );
			}
			this.grouping();
			if( convMails.pg == 1 ){
				this._loadNewerButton.hide();
			} else {
				this._loadNewerButton.reset();
			}
			this.onScroll();
		},

		onScroll:function(){
			if( this._itemsUnread[0] && D.inScreen( this._itemsUnread[0].node ) ){
				this._scrollToUnread();
			}
			if( D.inScreen( this._loadNewerButton.node ) && this._pgFrom > 1 ){
				this._loadNewerButton.load();
			}
			if( D.inScreenBottom( this._footerHolderNode ) ){
				removeClassName( this._footerHolderNode, 'fixed' );
			} else {
				this._footerHolderNode.style.minHeight = this._footerNode.offsetHeight + 'px';
				addClassName( this._footerHolderNode, 'fixed' );
			}
		},

		onScrollUp:function(){
			this._updatePg(true);
			if( ( this._pgTo - 1 ) % 4 == 0 ){
				return;
			}
			/*
			var lim = Math.max( $('#menuWrap').offset().top - 40, 0 );
			if( $(window).scrollTop() > lim ){
				return;
			}
			*/
			if( D.inScreen( this._loadOlderButton.node ) ){
				return;
			}
			this._loadOlderButton.load();
		},

		onScrollDown:function(){
			this._updatePg(false);
		},

		onLeave:function(){
			if( this._form ){
				this._form.draftSave( { sync:true } );
			}
			if( D.chat ){
				D.chat.unbindAll();
			}
		},

		_requireScrollToNewMsg:function(){
			var lastMail = this._itemsSorted[ this._itemsSorted.length - 1 ];
			return ( lastMail && D.inScreen( lastMail.node ) );
		},

		/**
		 * @param {DR.msg.struct.Mail} apiMail
		 * @param {DR.msg.struct.Conv} conv
		 * @private
		 */
		_onSend:function( apiMail, conv ){
			this.unreadReset();
			if( this._pgFrom == 1 ){
				this._addNewMail( this._createMail(apiMail) );
			}
			for( var k in this._items ){
				this._items[k].setUnread(false);
			}
		},

		_optionsShow:function(){
			if( this._optionsDropDown ){
				this._optionsDropDown.toggle( this._headerButtonsNode );
				return;
			}
			this._optionsDropDown = new T.Options;
			var opt;
			if( this.inTrash ){
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Atjaunot'),
					onclick:this._optRestore
				} );
				this._optionsDropDown.addItem(opt);
			} else {
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Atzīmēt kā nelasītu')
				} );
				opt.onclick = D.closure( this, this.optMarkAsUnread, opt );
				this._optionsDropDown.addItem(opt);
			}
			if( this.isGroup && !this.isLeft ){
				if( !this.inTrash ){
					opt = new T.Options.Item( {
						caption:D.Lang.get('Change picture'),
						onclick:this._changePic
					} );
					this._optionsDropDown.addItem(opt);
					opt = new T.Options.Item( {
						caption:D.msg.l.get('Change topic'),
						onclick:this._changeTopic
					} );
					this._optionsDropDown.addItem(opt);
				}
				this._optionsDropDown.addSep();
				opt = new T.Options.Item( {
					caption:D.msg.l.get('Dzēsties no sarakstes'),
					onclick:this._optLeave
				} );
				this._optionsDropDown.addItem(opt);
			}
			this._optionsDropDown.addSep();
			opt = new T.Options.Item( {
				caption:D.msg.l.get('Dzēst saraksti'),
				onclick:this._optDel
			} );
			this._optionsDropDown.addItem(opt);
			this._optionsDropDown.append( this._headerButtonsNode );
		},

		_optAddMembers:function(){
			var convMembers = new D.msg.ConvAddMembers( {
				fid:this.fid,
				uid:this.uid,
				onAdd:this._onAddMember,
				onError:function(){
					InfoBox.close();
				}
			} );
			InfoBox.els( [convMembers], {
				width:350,
				title:D.msg.l.get('Add members')
			} );
			convMembers.focus();
		},

		/** @param {DR.msg.struct.ConvAddMembersRe} re */
		_onAddMember:function(re){
			InfoBox.close();
			if( this.fid > 0 ){
				Section.navigate( '/messages/' + D.msg.convUrl( re.conv ) );
				return;
			}
			this._mMembers.call();
		},

		_optLeave:function(){
			D.loadingOverlay( this.node, { delay:true } );
			this._mConvLeave = new DR.msg.ConvLeave;
			this._mConvLeave.uid = this.uid;
			this._mConvLeave.cid = this.id;
			this._mConvLeave.onLoad = this._mConvLeaveRe;
			this._call( this._mConvLeave );
		},

		_mConvLeaveRe:function(){
			D.removeLoadingOverlay( this.node );
			delete this._optionsDropDown;
			this.isLeft = true;
			this._form.remove();
			this._form = null;
			this._addMembersButton.remove();
			this._muteIcon.remove();
			this._footerHolderNode.style.minHeight = '';
		},

		_optDel:function(){
			var confirm = new D.msg.ConvDelConfirm( this._conv );
			confirm.onBeforeApiCall = D.closure( this, function(ac){
				D.loadingOverlay( this.node );
				this.onBeforeApiCall(ac);
			} );
			confirm.onDelete = this.onDelete;
		},

		onDelete:function(){
			if( this.inTrash ){
				Section.navigate('./trash');
			} else {
				Section.navigate('./');
			}
		},

		/**
		 * @param {T.Options.Item} opt
		 */
		optMarkAsUnread:function(opt){
			if( this._mMarkAsUnread && this._mMarkAsUnread.processing ){
				return;
			}
			this._mMarkAsUnread = new DR.msg.MarkAsUnread;
			this._mMarkAsUnread.uid = this.uid;
			this._mMarkAsUnread.cid = this.id;
			this._call( this._mMarkAsUnread );
			if(opt){
				opt.remove();
			}
		},

		_optRestore:function(){
			if( this._mRestore && this._mRestore.processing ){
				return;
			}
			this._mRestore = new DR.msg.ConvRestore;
			this._mRestore.uid = this.uid;
			this._mRestore.cid = this.id;
			this._mRestore.select = [
				new DR.msg.select.ConvRestoreRe().all(),
				new DR.msg.select.Conv().id().friend().topic(),
				new DR.users.select.User().title()
			];
			this._mRestore.onLoad = this._mRestoreRe;
			this._mRestore.call();
			D.loadingOverlay( this.node );
		},

		_mRestoreRe:function(){
			Section.navigate( D.msg.convUrl( this._mRestore.re.conv ) );
		},

		newMails:function(v){
			if(!v){
				if( this._newMailsNode ){
					this._newMailsNode.remove();
					this._newMailsNode = null;
				}
				return;
			}
			var node = mkE( {
				tag:'div',
				className:'newMsgs',
				onclick:this._scrollToUnread,
				els:[
					{
						tag:'a',
						els:[
							D.msg.l.nget( v, 'new msg' )
						]
					}
				]
			} ); // newMsgs
			if( this._newMailsNode ){
				node.replace( this._newMailsNode );
			} else {
				D.insertBefore( node, this._footerNode.firstChild );
			}
			this._newMailsNode = node;
			this.onScroll();
		},

		_scrollToUnread:function(){
			if( D.chat && !D.chat.isActive() ){
				return;
			}
			if( this._pgFrom != 1 ){
				Section.navigate('?');
				return;
			}
			this.newMails(0);
			var lastUnread = this._itemsUnread[ this._itemsUnread.length - 1 ];
			for( var k in this._itemsUnread ){
				this._itemsUnread[k].setUnread(true);
			}
			this._itemsUnread = [];
			this.scrollToEnd();
			this._pg.value(1);
			D.chat && D.chat.readConv( this.fid, this.uid );
		},

		bindChatEvent:function(){
			D.chat.onMsg = this._onChatMsg;
			D.chat.onConvRead = this._onChatConvRead;
			D.chat.onWriting = this.writing;
			D.chat.onEdit = this._onChatEdit;
			D.chat.onOnline = this._onChatOnline;
			D.chat.onEmo = this._onChatEmo;
		},

		_onChatMsg:function( apiMail, conv ){
			if( this.lastConvs ){
				this.lastConvs.update();
			}
			if( this.inTrash ){
				return;
			}
			if( conv.id != this.id ){
				return;
			}
			if( this._pgFrom != 1 ){
				this.newMails( conv.unread );
				if( D.chat.doFirst( 'm', apiMail.id ) ){
					D.chat.ping( conv.unread == 1 ? 'win' : '' );
				}
				return;
			}
			this._addNewMail( this._createMail(apiMail) );
			this._readerRemove( apiMail.sender );
		},

		/**
		 * @param {DR.msg.struct.Mail} m
		 * @param {DR.msg.struct.Conv} conv
		 * @private
		 */
		_onChatEdit:function( m, conv ){
			if( this.lastConvs ){
				this.lastConvs.update();
			}
			var oldMail = this._items[ m.id ];
			if(!oldMail){
				return;
			}
			m.readersCount = oldMail.data.readersCount;
			m.readAll = oldMail.data.readAll;
			m.readersUsersPreview = oldMail.data.readersUsersPreview;
			var mail = this._createMail(m);
			this.replaceMail(mail);
			this._writingRemove( mail.sender );
		},

		/**
		 * @param {D.msg.Mail} mail
		 * @private
		 */
		_addNewMail:function(mail){
			if( !this.addMail(mail) ){
				return;
			}
			var sound = D.chat.doFirst( 'm', mail.id );
			var scroll = mail.sender == this.uid || this._requireScrollToNewMsg();
			this.grouping();
			this._writingRemove( mail.sender );
			if( mail.sender != D.ID && ( !scroll || !D.chat.isActive() ) ){
				this._itemsUnread.push(mail);
				this.newMails( this._itemsUnread.length );
				if(sound){
					D.chat.ping( this._itemsUnread.length == 1 ? 'win' : '' );
				}
				return;
			}
			mail.setUnread(true);
			D.chat.readConv( this.fid, this.uid );
			if(scroll){
				this.scrollToEnd();
				this._pg.value(1);
			}
			if(sound){
				D.chat.ping();
			}
			if( /*apiMail.sender != D.ID &&*/ mail.sound && D.chat.autoPlay && D.chat.doFirst( 'ms', mail.id ) ){
				this.stopAllSounds();
				mail.sound.play();
			}
		},


		_onChatOnline:function( uid, online ){
			for( var k in this._items ){
				if( this._items[k].sender == uid ){
					this._items[k].updateOnline(online);
				}
			}
		},

		_onChatEmo:function(par){
			if( this.id != par.cid ){
				return;
			}
			var mail = this._items[ par.mid ];
			if(mail){
				mail.onEmo(par);
				//this.scrollToEnd();
			}
		},

		/**
		 * @param {DR.users.struct.User} user
		 * @param {D.chat.OnRead} par
		 * @private
		 */
		_onChatConvRead:function( user, par ){
			if( this.lastConvs ){
				this.lastConvs.update();
			}
			if( this.id != par.cid ){
				return;
			}
			this._readerRemove( user.id );
			var m = this._items[ par.mid ];
			if(!m){
				return;
			}
			m.readerAdd(user);
			if( !par.unread ){
				m.readAll();
			}
		},

		_readerRemove:function(uid){
			for( var k in this._items ){
				this._items[k].readerRemove(uid);
			}
		},

		_showMembers:function(){
			if( this.inTrash ){
				var get = new Get({
					cid:this.id,
					uid:this.uid
				});
				InfoBox.open('/messages/rq/members.php?' + get, {width:720});
				return;
			}
			InfoBox.els( [
				new D.msg.ConvMembers( {
					uid:this.uid,
					fid:this.fid,
					onChange:this._membersOnChange
				} )
			], { width:350 } );
		},

		_membersOnChange:function(){
			this._mMembers.call();
		},

		showReaders:function(){
			this._showMembers();
		},

		_onDoEdit:function(){
			if( this.pg != 1 ){
				return;
			}
			for( var i = this._itemsSorted.length - 1; i >= 0; -- i ){
				var mail = this._itemsSorted[i];
				if( mail.ts < D.TIME - 300 ){ // 5min
					break;
				}
				if( mail.canEdit() ){
					this.editMail(mail);
					return;
				}
			}
		},

		_onCancelEdit:function(){
			this._editMail.editing(false);
		},

		/**
		 * @param {D.msg.Mail} mail
		 * @private
		 */
		editMail:function(mail){
			this._editMail = mail;
			this._editMail.editing(true);
			this._form.editMail( mail.data );
			this._form.focus();
		},

		/**
		 * @param {DR.msg.struct.Mail} mail
		 * @private
		 */
		_onEdit:function(mail){
			var oldMail = this._items[ mail.id ];
			mail.readersCount = oldMail.data.readersCount;
			mail.readAll = oldMail.data.readAll;
			mail.readersUsersPreview = oldMail.data.readersUsersPreview;
			var m = this._createMail(mail);
			this.replaceMail(m);
			m.editing(false);
		},

		writingSoundT:0,

		/**
		 * @param {DR.users.struct.User} user
		 * @param par
		 */
		writing:function( user, par ){
			if( this.id != par.cid ){
				return;
			}
			if( this._writingUsers[ user.id ] ){
				clearTimeout( this._writingUsers[ user.id ].timeout );
			}
			this._writingUsers[ user.id ] = {
				user:user,
				timeout:setTimeout( D.closure( this, this._writingRemove, user.id ), 4000 )
			};
			this._writingDraw();
			if( this._requireScrollToNewMsg() ){
				this.scrollToEnd();
			}
			if( D.chat && new Date().getTime() - this.writingSoundT > 10000 ){
				this.writingSoundT = new Date().getTime();
				D.chat.soundPlay('typing');
			}
		},

		_writingRemove:function(uid){
			if( !this._writingUsers[uid] ){
				return;
			}
			clearTimeout( this._writingUsers[uid].timeout );
			delete this._writingUsers[uid];
			this._writingDraw();
			if( D.chat ){
				D.chat.soundStop('typing');
			}
		},

		_writingDraw:function(){
			clearNode( this._writingNode );//.innerHTML = '&nbsp;';
			if( empty( this._writingUsers ) ){
				//this._writingNode.style.visible = 'hidden';
				return;
			}
			// this._writingNode.style.display = '';
			// this._writingNode.style.visible = '';
			var c = count( this._writingUsers );
			var els = [];
			for( var k in this._writingUsers ){
				var user = this._writingUsers[k].user;
				if( els.length ){
					els.push(', ');
				}
				els.push( {
					tag:'a',
					text:( c > 5 ? user.name : user.title ),
					href:'/user/' + user.id + '/'
				} );
				if( els.length > 10 ){
					break;
				}
			}
			els.push( ' ' + D.Lang.get('writing') );
			els.push( {
				tag:'div',
				className:'loading',
				els:[
					{ tag:'b' },
					{ tag:'i' },
					{ tag:'s' }
				]
			} );
			mkE.appendTypeElement( this._writingNode, els );
		},

		/**
		 * @param {DR.ApiCall} ac
		 */
		_changePicOnBeforeApiCall:function(ac){
			this.onBeforeApiCall(ac);
			this.update(ac);
			if( D.chat && D.chat.wins.main && D.chat.wins.main.open() && D.chat.wins.main.lastConvs ){
				D.chat.wins.main.lastConvs.update(ac);
			}
		},

		_changePic:function(){
			var upl = new D.msg.ConvImageUpload( {
				uid:this.uid,
				cid:this._conv.id,
				onBeforeApiCall:this._changePicOnBeforeApiCall,
				onChange:this._picOnChange
			} );
			InfoBox.els( upl, {
				width:520,
				title:D.Lang.get('Change picture')
			} );
		},

		_picOnChange:function(){
		},

		/**
		 * @param {DR.ApiCall} ac
		 */
		_changeTopicOnBeforeApiCall:function(ac){
			this.update(ac);
			if( D.chat && D.chat.wins.main && D.chat.wins.main.open() && D.chat.wins.main.lastConvs ){
				D.chat.wins.main.lastConvs.update(ac);
			}
		},

		_changeTopic:function(){
			var t = new D.msg.ConvTopic( {
				uid:this.uid,
				cid:this._conv.id,
				topic:this._conv.topic,
				onBeforeApiCall:this._changeTopicOnBeforeApiCall,
				onChange:function(){
					InfoBox.close();
				}
			} );
			InfoBox.els( t, {
				width:300,
				title:D.msg.l.get('Change topic')
			} );
		},

		stopAllSounds:function(){
			for( var k in this._items ){
				var mail = this._items[k];
				if( mail.sound ){
					mail.sound.stop();
				}
			}
		}

	},

	D.msg.MailListBase
);

D.msg.Conv.MAX_TOPIC_LENGTH = 70;
D.msg.Conv.PG_SIZE = 10;
D.msg.Conv.MEMBERS_PREVIEW_COUNT = 4;

// +++ conv add members +++
/**
 * @constructor
 * @extends {mkE.Base}
 */
D.msg.ConvAddMembers = Class(
	/**
	 * @lends {D.msg.ConvAddMembers#}
	 */
	{
		__construct:function(par){
			this.fid = par.fid;
			this.uid = par.uid || null;
			this.onAdd = par.onAdd || this.onAdd;
			this.onError = par.onError || this.onError;
			this.node = mkE( {
				tag:'div',
				className:'MsgConvAddMembers',
				els:[
					this._ac = new T.Form.AC( {
						contacts:true,
						groups:true,
						require:true
					} ),
					this._topicInput = new T.Form.Input( {
						require:true,
						caption:D.msg.l.get('Temats') + ':',
						maxLength:D.msg.Conv.MAX_TOPIC_LENGTH
					} ),
					{ tag:'br' },
					{ tag:'br' },
					{ tag:'br' },
					{ tag:'br' },
					{ tag:'br' },
					new T.Form.Footer( {
						els:[
							new T.Form.Button( {
								caption:D.msg.l.get( this.fid > 0 ? 'Izveidot grupas saraksti' : 'Add members' ),
								onclick:this._add
							} )
						]
					} )
				]
			} );
			if( this.fid < 0 ){
				this._topicInput.hide();
			} else {
				this._ac.disabledValues[ this.fid ] = true;
			}
		},

		focus:function(){
			this._ac.focus();
		},

		_add:function(){
			var err = empty( this._ac.value() );
			if( this._ac.error(err) ){
				return;
			}
			if( this.fid > 0 ){
				err = empty( this._topicInput.value() );
				if( this._topicInput.error(err) ){
					return;
				}
			}
			D.loadingOverlay( this.node );
			if( this._mConvAddMember ){
				return;
			}
			this._mConvAddMember = new DR.msg.ConvAddMembers;
			this._mConvAddMember.uid = this.uid;
			this._mConvAddMember.fid = this.fid;
			this._mConvAddMember.topic = this._topicInput.value();
			this._mConvAddMember.rec = this._ac.value();
			this._mConvAddMember.onLoad = this._onAdd;
			this._mConvAddMember.onError = this._onError;
			this._mConvAddMember.select = [
				new DR.msg.select.ConvAddMembersRe().all()
			].concat( D.msg.OPEN_CONV_SELECT );
			this._mConvAddMember.call();
		},

		onAdd:D.doNothing,

		_onAdd:function(){
			this.onAdd( this._mConvAddMember.re );
		},

		onError:D.doNothing,

		_onError:function(){
			this.onError();
		}
	},
	mkE.Base
);

// +++ Conv members +++
/**
 * @extends {mkE.Base}
 * @constructor
 */
D.msg.ConvMembers = Class(
	/**
	 * @lends {D.msg.ConvMembers#}
	 */
	{
		__construct:function(par){
			par = par || {};
			this.uid = par.uid || null;
			this.fid = par.fid || null;
			this.cid = par.cid || null;
			this.onChange = par.onChange || this.onChange;
			this.node = mkE( {
				tag:'div',
				className:'MsgConvMembers',
				style:{
					minHeight:'50px'
				}
			} );
			D.loadingOverlay( this.node );
			this._mMembersStatus = new DR.msg.MembersStatus;
			this._mMembersStatus.uid = this.uid;
			this._mMembersStatus.fid = this.fid;
			this._mMembersStatus.cid = this.cid;
			this._mMembersStatus.pg = 1;
			this._mMembersStatus.select = [
				new DR.users.select.User().id().title().image().url(),
				new DR.users.select.Image().icon()
			];
			this._mMembersStatus.onLoad = this._mMembersStatusRe;
			this._mMembersStatus.call();
		},

		_mMembersStatusRe:function(){
			D.removeLoadingOverlay( this.node );
			clearNode( this.node );
			for( var k in this._mMembersStatus.re.members ){
				var item = new D.msg.ConvMembers.Item( this, this._mMembersStatus.re.members[k] );
				item.append( this.node );
				item.onRemove = this._onMemberRemove;
			}
			if( this._mMembersStatus.re.pgs > 1 ){
				var pg = new T.Pg( {
					pg:this._mMembersStatus.pg,
					pgs:this._mMembersStatus.re.pgs
				} ).append( this.node );
				pg.callback = D.closure( this, this.setPg );
			}
		},

		_onMemberRemove:function(){
			this.setPg();
			this.onChange();
		},

		/**
		 * @param {number} [pg]
		 * @returns {boolean}
		 */
		setPg:function(pg){
			if( this._mMembersStatus.processing ){
				return false;
			}
			D.loadingOverlay( this.node );
			if(pg){
				this._mMembersStatus.pg = pg;
			}
			this._mMembersStatus.call();
		},
		
		onChange:function(){
		}

	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 * @constructor
 */
D.msg.ConvMembers.Item = Class(
	/**
	 * @lends {D.msg.ConvMembers.Item}
	 */
	{
		/**
		 * @constructor
		 * @param {D.msg.ConvMembers} cm
		 * @param {DR.msg.struct.MembersStatusItem} item
		 */
		__construct:function( cm, item){
			this._cm = cm;
			this.id = item.user.id;
			this.node = mkE( {
				tag:'div',
				className:'item',
				els:[
					this._imgNode = mkE( {
						tag:'a',
						className:'image radius3',
						href:item.user.url
					} ),
					this._nameNode = mkE( {
						tag:'div',
						els:[
							{
								tag:'a',
								className:'user',
								text:item.user.title,
								href:item.user.url
							}
						]
					} )
				]
			} );
			if( item.isOwner ){
				var badgeNode = {
					tag:'span',
					className:'badge off',
					text:D.msg.l.get('Conv admin')
				};
				mkE.appendTypeElement( this._nameNode, [ ' ', badgeNode ] );
			}
			D.bgImage( this._imgNode, item.user.image.icon );
			if( item.read ){
				mkE( {
					tag:'div',
					className:'read color2',
					els:[
						D.msg.l.get('Izlasīja'),
						( item.readTS ? [ ' ', D.ddate2( item.readTS ) ] : [] )
					]
				} ).append( this.node );
			}
			if( item.canRemove ){
				mkE( {
					tag:'a',
					className:'icon closeIcon',
					prop:{
						onclick:this._removeUser,
						title:D.msg.l.get('Remove member')
					}
				} ).append( this.node );
			}
		},

		_removeUser:function(){
			D.confirmDelete( this._removeUser_, {
				title:D.msg.l.get('Remove member'),
				text:D.msg.l.get('Remove member confirm')
			} );
		},

		_removeUser_:function(){
			D.loadingOverlay( this.node );
			this._mConvRemoveMember = new DR.msg.ConvRemoveMember;
			this._mConvRemoveMember.uid = this._cm.uid;
			this._mConvRemoveMember.fid = this._cm.fid;
			this._mConvRemoveMember.cid = this._cm.cid;
			this._mConvRemoveMember.m = this.id;
			this._mConvRemoveMember.onLoad = this._mConvRemoveMemberRe;
			this._mConvRemoveMember.call();
		},

		onRemove:D.doNothing,

		_mConvRemoveMemberRe:function(){
			this.onRemove();
		}
	},

	mkE.Base
);

/**
 * @class
 */
D.msg.ConvDelConfirm = Class(
	/** @lends {D.msg.ConvLeave#} */
	{
		/** @type {T.Form.CheckBox|null} */
		_cbxLeave:null,
		/** @type {T.Form.CheckBox|null} */
		_cbxDeleteFav:null,

		/**
		 * @param {DR.msg.struct.Conv} conv
		 * @private
		 */
		__construct:function(conv){
			this._conv = conv;
			this._mFavCount = new DR.msg.ConvFavCount;
			this._mFavCount.uid = conv.uid;
			this._mFavCount.cid = conv.id;
			this._mFavCount.onLoad = this._mFavCountRe;
			this._mFavCount.call();
		},

		_mFavCountRe:function(){
			if( this._conv.isGroup && !this._conv.isLeft ){
				this._cbxLeave = new T.Form.CheckBox( {
					caption:D.msg.l.get('Dzēsties no sarakstes'),
					checked:true
				} );
			}
			if( this._mFavCount.re && this._mFavCount.re.count ){
				this._cbxDeleteFav = new T.Form.CheckBox( {
					caption:D.msg.l.nget( this._mFavCount.re.count, 'Delete favorites' ),
					checked:false
				} );
			}
			D.messageBox(
				{
					title:D.Lang.get( 'confirm delete', 'xGlobal' ),
					els:[
						this._cbxLeave,
						this._cbxDeleteFav
					],
					width:300
				},
				this._onclick
			);
		},

		/**
		 * @param {bool} v
		 * @private
		 */
		_onclick:function(v){
			if(!v){
				return;
			}
			var ac = new DR.ApiCall;
			if( this._cbxLeave && this._cbxLeave.value() ){
				var mLeave = new DR.msg.ConvLeave;
				mLeave.uid = this._conv.uid;
				mLeave.cid = this._conv.id;
				ac.addMethod(mLeave);
			}
			this._mConvDel = new DR.msg.ConvDel;
			this._mConvDel.cid = this._conv.id;
			this._mConvDel.uid = this._conv.uid;
			if( this._cbxDeleteFav ){
				this._mConvDel.leaveFav = !this._cbxDeleteFav.value();
			}
			ac.addMethod( this._mConvDel );
			ac.onLoad = this._onLoad;
			this.onBeforeApiCall && this.onBeforeApiCall(ac);
			ac.call();
		},

		_onLoad:function(){
			this.onDelete && this.onDelete( {
				remove:!this._mConvDel.leaveFav
			} );
		},

		/** @type {Function} */
		onDelete:null,
		/** @type {Function} */
		onBeforeApiCall:null
	}
);
// --- conv.js --- 
// +++ conv_image.js +++ 
D.msg.ConvImageUpload = Class(
	{

		/** @type {DR.msg.struct.Conv} */
		_conv:null,
		onChange:D.doNothing,
		

		__construct:function(par){
			this.cid = par.cid;
			this.uid = par.uid || D.ID;
			this.onBeforeApiCall = par.onBeforeApiCall || D.doNothing;
			this.onChange = par.onChange || D.doNothing;
			this.node = mkE( {
				tag:'div',
				className:'MsgConvImageUpload'
			} );
			this._draw();
		},

		/**
		 * @param {{apiCall:DR.ApiCall}} [par]
		 * @private
		 */
		_draw:function(par){
			par = par || {};
			clearNode( this.node );
			var els = [
				this._imageNode = mkE( {
					tag:'div',
					className:'image'
				} ),
				this._rightNode = mkE( {
					tag:'div',
					className:'right',
					els:[
						this._errorNode = mkE( {
							tag:'div'
						} ),
						this._uploadNode = mkE( {
							tag:'div'
						} )
					]
				} )
			];
			mkE.appendTypeElement( this.node, els );
			this._getConv = new DR.msg.GetConv;
			this._getConv.select = [
				new DR.msg.select.Conv().image().fid().color(),
				new DR.base.select.Image().gm()
			];
			this._getConv.cid = this.cid;
			this._getConv.onLoad = this._getConvRe;
			if( par.apiCall ){
				par.apiCall.addMethod( this._getConv );
			} else {
				this._getConv.call();
			}
			D.loadingOverlay( this.node );
			D.onLoad( 'Upload', this._onUploadInit );
		},

		_onUploadInit:function(){
			this._upload = new D.Upload( {
				url:D.UPL + 'pic/upload.php',
				color:'submit',
				data:{
					id:'tmp',
					type:184
				},
				onSelect:this._onSelect,
				onUpload:this._onUpload
			} ).append( this._uploadNode );
		},

		_onSelect:function(){
			clearNode( this._errorNode );
		},

		_onUpload:function(par){
			if( par.errorNr ){
				T.error( D.Lang.get( 'pic upload error' + par.errorNr ) ).append( this._errorNode );
				return;
			}
			if( par.error ){
				T.error( par.error ).append( this._errorNode );
				return;
			}
			this._mSetConvImage = new DR.msg.SetConvImage;
			this._mSetConvImage.uid = this.uid;
			this._mSetConvImage.cid = this.cid;
			this._mSetConvImage.tmpId = par.id;
			this._mSetConvImage.onLoad = this._mSetConvImageRe;
			var ac = new DR.ApiCall;
			ac.addMethod( this._mSetConvImage );
			this._draw( { apiCall:ac } );
			this.onBeforeApiCall(ac);
			ac.call();
		},

		_getConvRe:function(){
			D.removeLoadingOverlay( this.node );
			this._conv = this._getConv.re.conv;
			this._imageNode.style.backgroundColor = this._conv.color;
			if( !this._conv.image ){
				return;
			}
			D.bgImage( this._imageNode, this._conv.image.gm );
			this._imageNode.style.backgroundSize = 'cover';
			new T.IconList( {
				items:[
					new T.IconListItem(	new T.IconListItemPar()
						.setIcon('delete')
						.setCaption( D.Lang.get('Delete picture') )
						.setOnclick( this._delete )
					)
				]
			} ).append( this._rightNode );
		},
		
		_onChange:function(){
			this.onChange();
		},
		
		_delete:function(){
			D.loadingOverlay( this.node );
			this._mSetConvImage = new DR.msg.SetConvImage;
			this._mSetConvImage.cid = this.cid;
			this._mSetConvImage.tmpId = 0;
			this._mSetConvImage.onLoad = this._mSetConvImageRe;
			var ac = new DR.ApiCall;
			ac.addMethod( this._mSetConvImage );
			this._draw( { apiCall:ac } );
			this.onBeforeApiCall(ac);
			ac.call();
		},

		_mSetConvImageRe:function(){
			this._onChange();
		}

	},
	mkE.Base
);
// --- conv_image.js --- 
// +++ conv_topic.js +++ 
/** @extends mkE.Base */
D.msg.ConvTopic = Class(
	{

		__construct:function(par){
			this.onChange = par.onChange || D.doNothing;
			this.uid = par.uid;
			this.cid = par.cid;
			this.onBeforeApiCall = par.onBeforeApiCall || D.doNothing;
			this.node = mkE( {
				tag:'div',
				els:[
					this._topicInput = new T.Form.Input( {
						caption:D.msg.l.get('Topic') + ':',
						value:par.topic,
						maxLength:70
					} ),
					new T.Form.Footer( {
						els:[
							new T.Form.Button( {
								caption:D.Lang.get('Save'),
								onclick:this._save
							} )
						]
					} )
				]
			} );
		},

		_save:function(){
			this._mSetTopic = new DR.msg.SetConvTopic;
			this._mSetTopic.uid = this.uid;
			this._mSetTopic.cid = this.cid;
			this._mSetTopic.topic = this._topicInput.value();
			this._mSetTopic.onLoad = this._mSetTopicRe;
			var ac = new DR.ApiCall;
			ac.addMethod( this._mSetTopic );
			this.onBeforeApiCall(ac);
			ac.call();
			D.loadingOverlay( this.node );
		},

		_mSetTopicRe:function(){
			D.removeLoadingOverlay( this.node );
			this._topicInput.error( !this._mSetTopic.re.ok );
			if( this._mSetTopic.re.ok ){
				this.onChange();
			}
		}
	},
	mkE.Base
);// --- conv_topic.js --- 
// +++ form.js +++ 
/**
 * @constructor
 */
D.msg.Form = Class(
	/**
	 * @lends {D.msg.Form#}
	 */
	{

		onExpand:D.doNothing,
		onChange:D.doNothing,
		onKeyUp:D.doNothing,
		onResize:D.doNothing,

		/** @type {Function} */
		onDoEdit:null,
		onCancelEdit:D.doNothing,
		onEdit:D.doNothing,

		/**
		 * @param {D.msg.Form.Par} par
		 * @constructor
		 */
		__construct:function(par){
			D.msg.Form._inst = this;
			if(D.DEV){
				//D.log(this);
			}
			par = par || {};
			this.uid = par.uid || null;
			this.fid = par.fid || 0;
			this.cid = par.cid || 0;
			this.draft = par.draft || 0;
			this.edit = par.edit || 0;
			this.sendSelect = par.sendSelect || null;
			this.onResize = par.onResize || this.onResize;
			this.onSend = par.onSend || this.onSend;
			this.onBeforeApiCall = par.onBeforeApiCall || this.onBeforeApiCall;
			this.onChange = par.onChange || this.onChange;
			this.onExpand = par.onExpand || this.onExpand;
			this.onKeyUp = par.onKeyUp || this.onKeyUp;
			this.onDoEdit = par.onDoEdit || this.onDoEdit;
			this.onCancelEdit = par.onCancelEdit || this.onCancelEdit;
			this.onEdit = par.onEdit || this.onEdit;
			this.node = mkE({
				tag:'div',
				className:'MsgForm radius3bottom SIconHovered',
				els:[
					this._recNode = mkE({
						tag:'div',
						className:'rec',
						els:[
							this._recAC = new T.Form.AC({
								caption:D.msg.l.get('Recipients') + ':',
								contacts:true,
								groups:true,
								onChange:this._recOnChange,
								tabIndex:++D.msg.Form._tabIndex,
								method: par.acMethod,
								data: par.acData
							}),
							this._sendIndividual = new T.Form.CheckBox({
								caption:D.msg.l.get('Send each individual'),
								className:'indiv',
								tabIndex:++D.msg.Form._tabIndex
							}),
							this._topicMakeNode = mkE({
								tag:'a',
								text:D.msg.l.get('Izveidot tematu'),
								onclick:this._showTopicInput
							}),
							this._topicInput = new T.Form.Input({
								className:'topicInput',
								caption:D.msg.l.get('Temats') + ':',
								tabIndex:++D.msg.Form._tabIndex
							})
						]
					}),
					{
						tag:'div',
						className:'border radius3',
						els:[
							this._topNode = mkE({
								tag:'div',
								className:'top',
								els:[
									this._taNode = new D.SayEditor( {
										tabIndex:++D.msg.Form._tabIndex,
										onFocus:this._onFocus,
										onBlur:this._onBlur,
										onkeydown:this._onKeyDown,
										onkeyup:this._onKeyUp,
										onCtrlEnter: this._onCtrlEnter,
										value:par.text,
										onChange: this._onChange,
										//disableMention: !D.DEV,
										mentionListUp:true,
										noLinkReplace: true
									} )
								]
							}),
							{
								tag:'div',
								className:'bottom',
								prop:{
									onclick:this._placeHolderClick
								},
								els:[
									this._delIconNode = mkE({
										tag:'a',
										className:'SIcon trashSIcon color2',
										text:D.msg.l.get('Dzēst'),
										onclick:this.draftDel
									}),
									this._lenNode = mkE({
										tag:'div',
										className:'len'
									}),
									this._bottomRightNode = mkE( {
										tag:'div',
										className:'right',
										els:[
											this._infoNode = mkE({
												tag:'span',
												className:'info inactive'
											}),
											this._iconUploadNode = mkE({
												tag:'span',
												className:'SVGIcon attach',
												els:[
													T.svgIcon({
														icon: 'box-attachment',
														size: 26
													})
												]
											}),
											this._addGifNode = mkE( {
												tag:'span',
												className:'SVGIcon',
												els:[
													T.svgIcon({
														icon: 'box-gif',
														size: 26
													})
												],
												onclick:this._addGif
											} ),
											this._addSoundNode = mkE( {
												tag:'span',
												className:'SVGIcon',
												els:[
													T.svgIcon({
														icon: 'box-sound',
														size: 26
													})
												],
												onclick:this._addSound,
											} ),
											this._insertSmileyNode = mkE( {
												tag:'span',
												className:'SVGIcon',
												els:[
													T.svgIcon({
														icon: 'box-emoji',
														size: 26
													})
												],
												onclick:this._insertSmiley
											} ),
											this._cancelEditButton = new T.Form.Button( {
												caption:D.Lang.get('cancel'),
												color:'link',
												onclick:this._cancelEdit
											} ),
											this._sendButton = new T.Form.Button({
												caption:D.msg.l.get('Nosūtīt'),
												onclick:this.send,
												tabIndex:++D.msg.Form._tabIndex
											})
										]
									} ) // right
								]
							}, // .bottom
							this._phNode = mkE({
								tag:'div',
								className:'placeHolder color2',
								text:D.msg.l.get('Raksti vēstuli...'),
								prop:{
									onclick:this._placeHolderClick
								}
							})
						]
					} // div.border
				]
			}); // div.MsgForm
			this._cancelEditButton.hide();
			if(this.fid){
				this._focusText = true;
				this._recNode.style.display = 'none';
			}
			this._topicInput.hide();
			this._sendIndividual.hide();
			//this._delButton.hide();
			this._delIconNode.style.display = 'none';
			if(par.expand){
				this.expand(true);
			}
			this._initUpload();
			if(this.draft){
				this._focusText = true;
				this._draftLoad();
			}
			if(par.topic){
				this._topicInput.value(par.topic);
				this._showTopicInput();
			}
			if(!empty(par.recipient)){
				this._focusText = true;
				this._mUsersGet = new DR.users.Get;
				this._mUsersGet.uids = ( par.recipient instanceof Array ? par.recipient : [par.recipient] );
				this._mUsersGet.select = [
					new DR.users.select.User().id().title()
				];
				this._mUsersGet.onLoad = this._mUsersGetRe;
				this._mUsersGet.call();
			}
			if(par.text){
				this._onFocus();
			}
			if( !T.Sounds.available() ){
				this._addSoundNode.remove();
			}
			if( D.msg.VoiceRecorder.isSupported() ) {
				this._addVoiceMessage = new D.msg.VoiceRecorder(
					new D.msg.VoiceRecorder.Par()
						.setOnOpenRecorder(this._onVoiceRecorderOpen)
						.setOnCloseRecorder(this._onVoiceRecorderClose)
						.setOnUploadComplete(this._onVoiceRecorderUploadComplete)
				);
				D.insertAfter(this._addVoiceMessage.node, this._infoNode);
			}
		}, // __construct:function(par){

		onBeforeApiCall:function(ac){
		},

		append:function(parent){
			this.node.append(parent);
			return this;
		},

		remove:function(){
			this.node.remove();
			return this;
		},

		_mUsersGetRe:function(){
			for( var k in this._mUsersGet.re.users ){
				var user = this._mUsersGet.re.users[k];
				this._recAC._triggerOnchange = false;
				this._recAC.addValue( {
					caption:user.title,
					value:user.id
				} );
				this._recAC._triggerOnchange = true;
			}
		},

		isEmpty:function(){
			if( !empty( this._recAC.value() ) ){
				return false;
			}
			if( !empty( this._topicInput.value() ) ){
				return false;
			}
			if( !empty( this._taNode.value() ) ){
				return false;
			}
			if( !empty( this._upload.ids() ) ){
				return false;
			}
			return true;
		},

		_onChange:function(){
			this.onChange();
			if( this.draft && this.isEmpty() ){
				this.draftDel();
			}
			if (this._prevContentHeight && this._taNode._content.offsetHeight != this._prevContentHeight) {
				this.onResize();
			}
			this._prevContentHeight = this._taNode._content.offsetHeight;
		},

		_recOnChange:function(){
			var rec = this._recAC.value();
			var showTopic = rec.length > 1;
			if(!showTopic){
				for( var i = 0; i < rec.length; ++ i ){
					if( rec[i][0] == 'g' ){
						showTopic = true;
						break;
					}
				}
			}
			if(showTopic){
				this._sendIndividual.show();
				this._showTopicInput();
			} else {
				this._sendIndividual.hide();
				if( !this._topicInput.value() ){
					this._hideTopicInput();
				}
			}
			this._onChange();
		},

		_showTopicInput:function(){
			this._topicMakeNode.remove();
			this._topicInput.show();
			this._topicInput.focus();
		},

		_hideTopicInput:function(){
			D.insertBefore( this._topicMakeNode, this._topicInput.node );
			this._topicInput.hide()
		},

		expand:function(v){
			if(isset(v)){
				if(v){
					addClassName( this.node, 'expand' );
					// T.textareaAutoHeight( this._taNode );
				} else {
					removeClassName( this.node, 'expand' );
				}
				return v;
			}
			return existsClassName( this.node, 'expand' );
		},

		_placeHolderClick:function(){
			if( !this.expand() ){
				this.expand(true);
				this.onExpand();
			}
			this._taNode.focus();
		},

		sending:function(){
			return this._mSend && this._mSend.processing;
		},

		draftSave:function(par){
			if( this.edit ){
				return;
			}
			par = par || {};
			if( !this._changed ){
				return;
			}
			clearTimeout( this._saveTO );
			delete this._saveTO;
			if( this._mSend && this._mSend.processing ){
				return;
			}
			if( this._mDraftSave && this._mDraftSave.processing ){
				this._requireSave = true;
				return;
			}
			this._mDraftSave = new DR.msg.DraftSave;
			this._mDraftSave.uid = this.uid;
			this._mDraftSave.fid = this.fid;
			this._mDraftSave.text = this._taNode.value();
			this._mDraftSave.attach = this._upload.ids();
			this._mDraftSave.mid = this.draft;
			this._mDraftSave.topic = this._topicInput.value();
			this._mDraftSave.rec = this._recAC.value();
			this._mDraftSave.isHTML = true;
			this._mDraftSave.onLoad = this._mDraftSaveRe ;
			if( !this.draft && empty( this._mDraftSave.text ) && empty( this._mDraftSave.attach ) ){
				return;
			}
			if( par.sync ){
				var ac = new DR.ApiCall;
				ac.async = false;
				ac.addMethod( this._mDraftSave );
				ac.call();
				return;
			}
			this._mDraftSave.call();
		},

		_mDraftSaveRe:function(){
			this.draft = this._mDraftSave.re.mid;
			if( D.DEV ){
				D.log( 'Draft save:', this.draft );
			}
			this._updateDraftTime( D.TIME );
			//this._delButton.show();
			this._delIconNode.style.display = '';
			if( this._requireSend ){
				this._requireSend = false;
				this._requireSave = false;
				this._mDraftSave.processing = false;
				this.send();
				return;
			}
			if( this._requireSave ){
				this._requireSave = false;
				this._saveTO = setTimeout( this.draftSave, 1000 );
			}
		},

		draftDel:function(){
			var draft = this.draft;
			this.clear();
			if( !draft ){
				return;
			}
			this._mDraftDel = new DR.msg.MailDel;
			this._mDraftDel.uid = this.uid;
			this._mDraftDel.mid = draft;
			this._mDraftDel.call();
		},

		send:function(){
			if( this._upload.uploading() ){
				/*
				D.blink( {
					node:this._upload.node,
					type:'className',
					className:'wait'
				} );
				*/
				alert( D.msg.l.get('upload_in_progress') );
				return;
			}
			if( this._taNode.value().length > D.msg.Mail.MAX_TEXT_LENGTH ){
				D.blink( {
					node:this._taNode._content
				} );
				return;
			}
			if( this.edit ){
				this._edit();
				return;
			}
			clearTimeout( this._saveTO );
			delete this._saveTO;
			if( this._mDraftSave && this._mDraftSave.processing ){
				this._requireSend = true;
				return;
			}
			if( this._mSend && this._mSend.processing ){
				return;
			}
			var rec = this._recAC.value();
			this._mSend = new DR.msg.Send;
			this._mSend.uid = this.uid;
			if( this.draft ){
				this._mSend.draft = this.draft;
			}
			if(this.cid){
				this._mSend.cid = this.cid;
			} else {
				this._mSend.fid = this.fid;
			}
			this._mSend.text = this._taNode.value();
			this._mSend.attach = this._upload.ids();
			this._mSend.topic = this._topicInput.value();
			this._mSend.rec = this._recAC.value();
			this._mSend.individual = this._sendIndividual.value();
			this._mSend.isHTML = true;
			if( this.giphy ){
				this._mSend.giphyId = this.giphy.id;
			}
			if( this.sound ){
				this._mSend.sound = this.sound.id;
			}
			if( !this.fid && empty( this._mSend.rec ) ){
				this._recAC.error(true);
				return;
			}
			this._recAC.error(false);
			if( empty( this._mSend.text ) && empty( this._mSend.attach ) && !this.giphy && !this.sound ){
				D.blink( {
					node:this._taNode._content
				} );
				return;
			}
			this._mSend.select = [
				new DR.msg.select.Mail().all(),
				new DR.msg.select.Attach().all(),
				new DR.msg.select.Conv().all().membersUsersPreview(0),
				new DR.users.select.User().id().title()
			];
			if( this.sendSelect ){
				this._mSend.select = this._mSend.select.concat( this.sendSelect );
			}
			this._mSend.onLoad = this._mSendRe;
			this._mSend.onError = this._mSendReError;
			D.loadingOverlay( this.node );
			var ac = new DR.ApiCall;
			ac.addMethod( this._mSend );
			this.onBeforeApiCall(ac);
			ac.call();
		},

		// _onDoEdit:function(){
		// 	this.onDoEdit();
		// },

		// _onCancelEdit:function(){
		// 	this.onCancelEdit();
		// },

		/**
		 * @param {DR.msg.struct.Mail} mail
		 */
		editMail:function(mail){
			this.edit = mail.id;
			this.setMail(mail);
			this._cancelEditButton.show();
			this._sendButton.caption( D.Lang.get('edit') );
			this._taNode.setCursorAtEnd();
		},

		_edit:function(){
			if( this._mEdit && this._mEdit.processing ){
				return;
			}
			D.loadingOverlay( this.node );
			this._mEdit = new DR.msg.Edit;
			this._mEdit.uid = this.uid;
			this._mEdit.mid = this.edit;
			this._mEdit.text = this._taNode.value();
			this._mEdit.attach = this._upload.ids();
			this._mEdit.isHTML = true;
			this._mEdit.onLoad = this._mEditRe;
			this._mEdit.onError = this._mEditError;
			this._mEdit.select = [
				new DR.msg.select.Mail().all(),
				new DR.msg.select.Attach().all(),
				new DR.msg.select.Conv().all().membersUsersPreview(0),
				new DR.users.select.User().id().title()
			];
			if( this.sendSelect ){
				this._mEdit.select = this._mEdit.select.concat( this.sendSelect );
			}
			var ac = new DR.ApiCall;
			ac.addMethod( this._mEdit );
			this.onBeforeApiCall(ac);
			ac.call();
		},

		_mEditRe:function(){
			this.clear();
			this.onEdit( this._mEdit.re.mail );
		},

		_mEditError:function(){
			this.clear();
			this.onCancelEdit();
		},

		_cancelEdit:function(){
			this.clear();
			this.onCancelEdit();
		},

		/**
		 * @param {DR.msg.struct.Mail} mail
		 * @param {DR.msg.struct.Conv} conv
		 */
		onSend:function( mail, conv ){
			D.log( mail, conv );
		},

		_mSendRe:function(){
			this.onSend( this._mSend.re.mail, this._mSend.re.conv );
			if( this._mSend.sticker ){ // just send sticker
				return;
			}
			this.clear();
		},

		_mSendReError:function(){
			D.removeLoadingOverlay( this.node );
			var err = this._mSend.error;
			switch(err){
				case 'empty':
					D.blink( {
						node:this._taNode._content
					} );
					break;
				default:
					this.setError( D.msg.l.get( 'error_' + err ) );
					break;
			}
		},

		_onFocus:function(){
			this._phNode.style.display = 'none';
			//this._gifTour();
			this._soundsTour();
		},

		_onBlur:function(){
			if( !this._taNode.value() ){
				this._phNode.style.display = '';
			}
		},

		_onCtrlEnter: function() {
			this.send();
		},

		_onKeyDown:function(e){
			e = D.event(e);
			if( D.checkCtrlEnter(e) ){
				this.send();
				return false;
			}
			switch( e.keyCode ){
				case 13:
					if( this.edit && !e.shiftKey ){
						this.send();
						return false;
					}
					break;
				case 27: // esc
					if( this.edit ){
						this.clear();
						this.onCancelEdit();
						return false;
					}
					break;
				case 38: // up
					if( !this.edit && !this.draft && this.onDoEdit && empty( this._taNode.value() ) && empty( this._upload ) ){
						clearTimeout( this._saveTO );
						this.onDoEdit();
						return false;
					}
					break;
				case 83: // s
					if( !e.altKey && e.ctrlKey ){ // Ctrl+S
						this.draftSave();
						return false;
					}
					break;
			}
			this._changed = true;
			if( !this._saveTO && !this.edit ){
				this._saveTO = setTimeout( this.draftSave, 15000 );
			}
			this._onChange();
		},

		_onKeyUp:function(){
			if( this._taNode.value().length > ( D.msg.Mail.MAX_TEXT_LENGTH * 0.8 ) ){
				var remains = D.msg.Mail.MAX_TEXT_LENGTH - this._taNode.value().length;
				this._lenNode.className = 'len ' + ( remains > 0 ? 'color2' : 'color1' );
				clearNode( this._lenNode );
				mkE.appendTypeElement( this._lenNode, [
					D.Lang.get('Remaining characters'), ': ', remains
				] );
				this._lenNode.style.display = '';
			} else {
				this._lenNode.style.display = 'none';
			}
			this.onKeyUp();
		},

		_onResize:function(){
			this.onResize();
		},

		clear:function(){
			D.removeLoadingOverlay( this.node );
			this._changed = false;
			this.draft = 0;
			this.edit = false;
			clearTimeout( this._saveTO );
			this._taNode.value('');
			this._recAC.clear();
			this._topicInput.value('');
			this._topicInput.hide();
			this._upload.clear();
			this._onResize();
			//this._delButton.hide();
			this._delIconNode.style.display = 'none';
			//this._saveButton.hide();
			clearNode( this._infoNode );
			this._sendIndividual.value(false);
			this._sendIndividual.hide();
			this._lenNode.style.display = 'none';
			D.insertBefore( this._topicMakeNode, this._topicInput.node );
			this._cancelEditButton.hide();
			this._sendButton.caption( D.msg.l.get('Nosūtīt') );
			if( this.giphy ){
				this.giphy.remove();
				this.giphy = null;
			}
			if( this.sound ){
				this.sound.remove();
				this.sound = null;
			}
		},

		_initUpload:function(){
			this._upload = new D.msg.FormUpload( {
				uid:this.uid,
				onResize:this._onResize,
				onChange:this._uploadOnChange,
				dropNode:this.node,
				buttonNode:this._iconUploadNode
			} );
			this._upload.append( this._topNode );
		},

		_uploadOnChange:function(){
			this._changed = true;
			this.expand(true);
			if( !this._saveTO ){
				this._saveTO = setTimeout( this.draftSave, 10000 );
			}
			this._onChange();
		},

		setText: function( text ) {
			var txt = text.replace(/(?:\r\n|\r|\n)/g, '<br />');
			this._taNode.value(D.smileyReplace( txt ));
		},

		/**
		  * @param {DR.msg.struct.Mail} mail
		 * @param {Object} [par]
		 */
		setMail:function( mail, par ){
			par = par || {};
			this._taNode.value( D.smileyReplace( nl2br( mail.text ) ) );
			this._taNode.userReplace( mail.users );
			var k;
			for( k in mail.attach ){
				/** @type {DR.msg.struct.Attach} */
				var attach = mail.attach[k];
				var uItem = new D.msg.FormUpload.Item( {
					id:attach.id,
					size:attach.size,
					name:attach.name + '.' + attach.ext,
					thumb:attach.image ? attach.image.gm : null
				} );
				this._upload.addItem(uItem);
			}
			if( mail instanceof DR.msg.struct.DraftMail ){
				this.draft = mail.id;
				this._updateDraftTime( mail.ts );
				this.focus();
				if( mail.fid < 0 ){
					this.fid = mail.fid;
					this._recNode.style.display = 'none';
				} else if( mail.topic ){
					this._topicInput.value( mail.topic );
					this._showTopicInput();
				}
				if( !this.fid ){
					this._recAC._triggerOnchange = false;
					for( k in mail.groupsObj ) {
						this._recAC.addValue( {
							caption:mail.groupsObj[k].caption + ' (' + mail.groupsObj[k].count + ')',
							value:'gr' + mail.groupsObj[k].id
						} );
					}
					for( k in mail.membersUsers ){
						this._recAC.addValue( {
							caption:mail.membersUsers[k].title,
							value:mail.membersUsers[k].id
						} );
					}
					this._recAC._triggerOnchange = true;
				} // !fid
			} else if( par.forward ){
				var forwarded = [
					'',
					'---------- ' + D.msg.l.get('Pārsūtītā vēstule') + ' ----------',
					'No: ' + mail.senderUser.title,
					'Kad: ' + new D.Date( mail.ts ).toSql(),
					'',
					''
				];
				this._taNode.value( forwarded.join("\n") + this._taNode.value() );
			}
			if( mail.giphy ){
				this._onGifChoose( new T.Giphy.Item( mail.giphy ) );
			}
			if( mail.sound ){
				this._onSoundChoose( new T.Sounds.Item( mail.sound ) );
			}
			$( this._taNode ).trigger('paste');
			if( this._taNode.value() ){
				this._onFocus();
			}
			this.expand(true);
		},

		_updateDraftTime:function(ts){
			clearNode( this._infoNode );
			mkE.appendTypeElement( this._infoNode, [
				D.msg.l.get('Melnraksts saglabāts'), ': ',
				new T.Time(ts)
			] );
		},

		_draftLoad:function(){
			D.loadingOverlay( this.node );
			this._mDraftGet = new DR.msg.DraftGet;
			this._mDraftGet.uid = this.uid;
			this._mDraftGet.mid = this.draft;
			this._mDraftGet.select = [
				new DR.msg.select.DraftGetRe().all(),
				new DR.msg.select.DraftMail().all()
			].concat( D.msg.MAIL_SELECT );
			this._mDraftGet.onLoad = this._mDraftGetRe;
			this._mDraftGet.onError = D.closure( this, function(){
				D.removeLoadingOverlay( this.node );
			} );
			this._mDraftGet.call();
		},

		_mDraftGetRe:function(){
			D.removeLoadingOverlay( this.node );
			D.log( this._mDraftGet.re );
			this.setMail( this._mDraftGet.re.mail );
			//this._delButton.show();
			this._delIconNode.style.display = '';
		},

		focus:function(){
			if( this._focusText ){
				//this._taNode.focus();
				this._placeHolderClick();
				return;
			}
			this._recAC.focus();
		},

		_insertSmiley:function(e){
			D.stopPropagation(e);
			this._placeHolderClick();
			//T.insertSmiley( null, this._taNode, D.closure(this._taNode, this._taNode.insertHTML) );
			D.insertSmiley( {
				onclick:this._insertSmileyClick,
				parent:this._insertSmileyNode,
				arrow:{
					top:false,
					left:false
				}
			} );
		},

		_insertSmileyClick:function(v){
			D.smallPopUp.close();
			this._taNode.insertHTML(v);
			this.focus();
		},

		_addGif:function(e){
			D.stopPropagation(e);
			this._placeHolderClick();
			T.Giphy.insert( this._onGifChoose, {
				parent:this._addGifNode,
				arrow:{
					top:false,
					left:false
				}
			} );
		},

		_scrollWinToEnd:function(){
			if( !InfoBox.opened ){
				this.node.scrollIntoView();
			}
		},

		/**
		 * @param {T.Giphy.Item} item
		 */
		_onGifChoose:function(item){
			if( this.giphy ){
				this.giphy.remove();
			}
			this.giphy = new D.msg.Form.Giphy(item);
			this.giphy.onRemove = this._onGifRemove;
			if( this._upload.node.firstChild ){
				D.insertBefore( this.giphy.node, this._upload.node.firstChild );
			} else {
				this.giphy.node.append( this._upload.node );
			}
			this._scrollWinToEnd();
		},

		_onGifRemove:function(){
			this.giphy = null;
		},

		_addSound:function(e){
			D.stopPropagation(e);
			this._placeHolderClick();
			T.Sounds.insert( this._onSoundChoose, {
				parent:this._addSoundNode,
				arrow:{
					top:false,
					left:false
				}
			} );
		},

		/**
		 * @param {T.Sounds.Item} item
		 */
		_onSoundChoose:function(item){
			if( this.sound ){
				this.sound.remove();
			}
			this.sound = new D.msg.Form.Sound(item);
			this.sound.onRemove = this._onGifRemove;
			if( this._upload.node.firstChild ){
				D.insertBefore( this.sound.node, this._upload.node.firstChild );
			} else {
				this.sound.node.append( this._upload.node );
			}
			this._scrollWinToEnd();
		},

		setError:function(text){
			if( this._errorNode ){
				this._errorNode.remove();
			}
			this._errorNode = T.error(text);
			D.insertBefore( this._errorNode, this._recNode );
			var errorNode = this._errorNode;
			setTimeout( function(){
				$(errorNode).fadeOut();
			}, 4000 );
		},

		// #expire 2017-02-02
		_gifTour:function(){
			if( !D.LV || D.TIME > 1485986400 || this._gifTour.show ){
				return;
			}
			this._gifTour.show = true;
			if( D.Cookie.read('gif_tour') ){
				return;
			}
			D.Cookie.create( 'gif_tour', '1', 8, '/' );
			var sp = new D.smallPopUp;
			sp.open(
				null,
				{
					//color:'White',
					title:'Jaunums!',
					parent:this._addGifNode
				}
			);
			sp.arrowPosition( false, false );
			var node = mkE( {
				tag:'div',
				style:{
					padding:'12px',
					fontSize:'13px',
					fontWeight:'bold'
				},
				els:[
					'Jautrākai sarakstei!',
					{ tag:'br' },
					'Izvēlies un sūti kustīgus attēlus :)'
				]
			} ).append( sp.content );
			D.smileyReplace(node);
		},
		
		_soundsTour:function(){
			T.Sounds.tour( this._addSoundNode );
		},
		// #expire

		_onVoiceRecorderOpen: function () {
			this._sendButton.hide();
			this._iconUploadNode.style.display = 'none';
			this._addGifNode.style.display = 'none';
			this._addSoundNode.style.display = 'none';
			this._insertSmileyNode.style.display = 'none';
		},

		_onVoiceRecorderClose: function () {
			this._sendButton.show();
			this._iconUploadNode.style.display = '';
			this._addGifNode.style.display = '';
			this._addSoundNode.style.display = '';
			this._insertSmileyNode.style.display = '';
		},

		_onVoiceRecorderUploadComplete: function ( id ) {
			var mSend = new DR.msg.Send;
			if( this.fid ){
				mSend.fid = this.fid;
			} else if( this.cid ){
				mSend.cid = this.cid;
			}
			mSend.text = '';
			mSend.attach = [id];
			mSend.call();
		}
	}
);

D.msg.Form._tabIndex = 0;

D.msg.Form.Giphy = Class(
	{
		/**
		 * @param {T.Giphy.Item} item
		 */
		__construct:function(item){
			this.id = item.id;
			this.onRemove = D.doNothing;
			this.node = mkE( {
				tag:'span',
				className:'item gif',
				els:[
					{
						tag:'div',
						className:'giphy'
					},
					{
						tag:'a',
						className:'itemIcon itemDelIcon',
						onclick:this._remove
					}
				]
			} );
			D.bgImage( this.node, item.data.gif );
		},

		_remove:function(){
			this.node.remove();
			this.onRemove();
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.msg.Form.Sound = Class(
	{
		/**
		 * @param {T.Sounds.Item} item
		 * @private
		 */
		__construct:function(item){
			this.id = item.id;
			this.onRemove = D.doNothing;
			this.node = mkE( {
				tag:'span',
				className:'item sound',
				title:htmlspecialchars( item.data.title ),
				els:[
					{
						tag:'a',
						className:'itemIcon itemDelIcon',
						onclick:this._remove
					}
				]
			} );
			D.bgImage( this.node, item.data.icon );
		},

		_remove:function(){
			this.node.remove();
			this.onRemove();
		}
	},
	mkE.Base
);

/**
 * @constructor
 */
D.msg.Form.Par = Class(
	/**
	 * @lends {D.msg.Form.Par#}
	 */
	{
		uid:0,
		fid:0,
		cid:0,
		draft:0,
		edit:0,
		expand:false,
		text:'',
		topic:'',
		/** @type {Array.<DR._Select>|null} */
		sendSelect:null,
		/* @type {Function|null} */
		onResize:null,
		/* @type {Function|null} */
		onSend:null,
		/* @type {Function|null} */
		onBeforeApiCall:null,
		/* @type {Function|null} */
		onChange:null,
		/* @type {Function|null} */
		onExpand:null,
		/* @type {Function|null} */
		onKeyUp:null,
		/** @type {Function} */
		onDoEdit:null,
		/** @type {Function} */
		onCancelEdit:null,
		/** @type {Function} */
		onEdit:null,
		/** @type {Number|Array.<Number>} */
		recipient:0,
		/** @type {string} */
		acMethod: null,
		/** @type {object} */
		acData: null
	}
);

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++ Upload +++
/**
 * @constructor
 */
D.msg.FormUpload = Class(
	/**
	 * @lends {D.msg.FormUpload#}
	 */
	{
			/** @type {Object.<D.msg.FormUpload.Item>} */
			_items:{},

		__construct:function(par){
			this.uid = par.uid;
			this.onChange = par.onChange || this.onChange;
			this.dropNode = par.dropNode || null;
			this.buttoNode = par.buttonNode || null;
			this.onResize = par.onResize || this.onResize;
			this.node = mkE( {
				tag:'div',
				className:'MsgUpload'
			} );
			D.onLoad( 'Upload', this._initUploadRe );
		},

		_initUploadRe:function(){
			var p = new D.UploaderPar;
			p.DS = D.DS || '';
			p.thumbWidth = 100;
			p.thumbHeight = 100;
			p.onSelect = this._onSelect;
			p.onThumb = this._onThumb;
			p.log = false;
			p.onGetUploadData = this._onGetUploadData;
			p.onUploadCompleteData = this._onUploadData;
			p.onUploadProgress = this._onUploadProgress;
			p.dropNode = this.dropNode;
			/** @type {D.NativeUploader} */
			this._uploader = new Uploader( D.closureObject( this, p ) );
			this._uploader.append( this.buttoNode );
		},

		uploading:function(){
			if( !this._uploader ){
				return false;
			}
			return this._uploader.uploading;
		},

		onResize:D.doNothing,

		append:function(parent){
			this.node.append(parent);
			return this;
		},

		size:0,

		onChange:D.doNothing,

		/**
		 * @param {D.msg.FormUpload.Item} item
		 */
		addItem:function(item){
			item.onDel = D.closure( this, this.removeItem, item );
			this._items[ item._id ] = item;
			this.size += item.size;
			this._h = this.node.offsetHeight;
			item.node.append( this.node );
			if( this._h != this.node.offsetHeight ){
				this.onResize();
			}
		},

		/**
		 * @param {D.msg.FormUpload.Item} item
		 */
		removeItem:function(item){
			if( !this._items[ item._id ] ){
				return;
			}
			delete this._items[ item._id ];
			this.size -= item.size;
			this._h = this.node.offsetHeight;
			item.node.remove();
			if( this._h != this.node.offsetHeight ){
				this.onResize();
			}
			this.onChange();
		},

		_onSelect:function(par){
			if( par.size > D.msg.FormUpload.MAX_SIZE * 1048576 ){
				D.log( 'limit', par.size, D.msg.FormUpload.MAX_SIZE * 1048576 );
				var k = 'Viena faila atļautais izmērs ir %SIZE%MB. "%FILE%" izmērs pārsniedz atļauto limitu!';
				alert( D.msg.l.get(k).replace( '%SIZE%', D.msg.FormUpload.MAX_SIZE ).replace( '%FILE%', par.name ) );
				return false;
			}
			/*
			if( this.size + par.size > D.msg.FormUpload.MAX_TOTAL_SIZE * 1048576 ){
				alert( D.msg.l.get('mail_max_attachs_size').replace( '%SIZE%', D.msg.FormUpload.MAX_TOTAL_SIZE ) );
				return false;
			}*/
			var item = new D.msg.FormUpload.Item;
			addClassName( item.node, 'uploading' );
			item.setUploadData(par);
			this.addItem(item);
			this.onChange();
		},

		_onThumb:function(par){
			if( this._items[ par.id ] ){
				this._items[ par.id ]._onThumb(par);
			}
		},

		_onGetUploadData:function(par){
			return {
				url:D.ATTACH_UPL + 'messages/upload.php',
				data:{
					uid:this.uid
				}
			};
		},

		_onUploadData:function(par){
			if( !this._items[ par.id ] ){
				return;
			}
			var item = this._items[ par.id ];
			removeClassName( item.node, 'uploading' );
			item._onUploadData(par);
			item.setProgress(100);
			this.onChange();
		},

		_onUploadProgress:function(par){
			if( !this._items[ par.id ] ){
				return;
			}
			this._items[ par.id ].setProgress( par.percent );
		},

		clear:function(){
			this.size = 0;
			clearNode( this.node );
			var resize = !empty( this._items );
			this._items = {};
			if(resize){
				//this.onResize();
			}
		},

		ids:function(){
			var re = [];
			for( var k in this._items ){
				var id = this._items[k].id;
				if(id){
					re.push(id)
				}
			}
			return re;
		},
		
		empty:function(){
			return empty( this._items );
		}
	}
);


D.msg.FormUpload.MAX_SIZE  = 25; // 25MB
D.msg.FormUpload.MAX_TOTAL_SIZE = 50; // 50MB

/**
 * @constructor
 */
D.msg.FormUpload.Item = Class(
	/**
	 * @lends {D.msg.FormUpload.Item#}
	 */
	{
		name:'',
		
		/**
		 * @param {object} [par]
		 * @constructor
		 */
		__construct:function(par){
			par = par || {};
			this.id = par.id || 0; // attach id
			this._id = par.id || 0; // uploader internal id
			this.size = par.size || 0;
			this.name = par.name || '';
			this.node = mkE( {
				tag:'span',
				className:'item',
				els:[
					this._imageNode = mkE( {
						tag:'div',
						className:'image'
					} ),
					this._progressWNode = mkE( {
						tag:'div',
						className:'uplProgress radius10',
						els:[
							this._progressNode = mkE( {
								tag:'div'
							} )
						]
					} ),
					this._delIconNode = mkE( {
						tag:'a',
						className:'itemIcon itemDelIcon',
						onclick:this._del
					} ),
					this._fnNode = mkE( {
						tag:'div',
						className:'fn cut',
						text:this.name || ''
					} )
				]
			} );
			if( this.id ){
				this.setProgress(100);
			}
			if( par.thumb ){
				D.bgImage( this._imageNode, par.thumb );
			} else if( par.name ){
				D.bgImage( this.node, D.extIcon( this.name ) );
			}
		},
			
		setUploadData:function(par){
			this._id = par.id;
			this.size = par.size;
			this.name = par.name;
			setNodeText( this._fnNode, this.name );
			D.bgImage( this.node, D.extIcon( this.name ) );
		},
		
		_onThumb:function(item){
			D.bgImage( this._imageNode, item.url );
		},
		
		_onUploadData:function(item){
			var upload = new DR.msg.struct.AttachUploadRe( D.JSON.decode( item.data ) );
			if( upload.error ){
				this.setError( upload.error );
				return;
			}
			this.id = upload.attach.id;
			if( upload.attach.image ){
				D.bgImage( this._imageNode, upload.attach.image.gm );
			}
			this.setProgress(100);
		},
		
		onDel:D.doNothing,
		
		_del:function(){
			if( this.id ){
				// del on server
			}
			this.onDel();
		},
		
		setProgress:function(v){
			this._progressNode.style.width = v + '%';
			if( v == 100 ){
				this._progressWNode.style.display = 'none';
			}
		},
		
		setError:function(error){
			this._progressWNode.style.display = 'none';
			mkE( {
				tag:'div',
				className:'error',
				text:error
			} ).append( this.node );
		}

	}
);
// --- form.js --- 
// +++ search.js +++ 
/**
 * @constructor
 */
D.msg.Search = Class(
	/**
	 * @lends {D.msg.Search#}
	 */
	{
		__construct:function(par){
			par = par || {};
			this.uid = par.uid || null;
			this.hiddenValue = [];
			this.replaceNode = par.replaceNode || this.replaceNode;
			/** @type {Array.<D.msg.Search.Item>} */
			this._items = {};
			/** @type {Array.<D.msg.Search.Item>} */
			this._itemsSorted = [];
			/** @type {Array.<D.msg.Search.Sugg>} */
			this._suggItems = [];
			this._suggIndex = -1;
			this.node = mkE( {
				tag:'div',
				className:'MsgSearch',
				els:[
					{
						tag:'div',
						className:'inputW',
						onclick:this.focus,
						els:[
							this._itemsNode = mkE( {
								tag:'span',
								className:'sel'
							} ),
							{
								tag:'span',
								els:[
									this._phNode = mkE( {
										tag:'div',
										className:'ph color2',
										text:D.msg.l.get('Meklēt...')
									} ),
									this._inputNode = mkE( {
										tag:'input',
										prop:{
											onkeydown:this._onKeyDown,
											onfocus:this._onInputFocus,
											onblur:this._onInputBlur,
											maxLength:50
										}
									} )
								]
							}
						]
					},
					{
						tag:'div',
						className:'but SIcon searchSIcon',
						onclick:this._searchOnclick
					},
					this._suggNode = mkE( {
						tag:'div',
						className:'sugg'
					} )
				]
			} );
			this._resultNode = mkE( {
				tag:'div',
				className:'MsgSearchResult'
			} );
			this._suggNode.style.display = 'none';
		},
		
		/** @type {Node|null} */
		replaceNode:null,
		
		append:function(parent){
			this.node.append(parent);
			return this;
		},
		
		focus:function(){
			this._inputNode.focus();
		},
		
		showResult:function(){
			if( $( this._resultNode ).closest('body')[0] ){
				return;
			}
			this._resultNode.replace( this.replaceNode );
		},
		
		
		restore:function(){
			if( !$( this._resultNode ).closest('body')[0] ){
				return;
			}
			this.replaceNode.replace( this._resultNode );
		},
		
		isVisible:function(){
			return this._resultNode.offsetHeight > 0;
		},
		
		
		/**
		 * @param {D.msg.Search.Item} item
		 */
		addItem:function(item){
			if( this._items[ item.value ] ){
				return;
			}
			this._items[ item.value ] = item;
			this._itemsSorted.push(item);
			item.append( this._itemsNode );
			item.ondel = D.closure( this, this._itemOnDel, item );
		},
		
		removeItem:function(v){
			if( !this._items[v] ){
				return;
			}
			this._items[v].remove();
			var i = array_search( this._items[v], this._itemsSorted, true );
			if( i === false ){ // wtf
				return;
			}
			this._itemsSorted.splice( i, 1 );
			delete this._items[v];
			this._search();
		},
		
		/**
		 * @param {D.msg.Search.Item} item
		 * @private
		 */
		_itemOnDel:function(item){
			this.removeItem( item.value );
		},
		
		value:function(){
			var re = [];
			for( var k = 0; k < this._itemsSorted.length; ++ k ){
				re.push( this._itemsSorted[k].value );
			}
			return re;
		},

		/**
		 * @type {null|Array}
		 */
		emptyValue:null,
		
		isEmpty:function(){
			if( !this.emptyValue ){
				return empty( this.value() );
			}
			var v = this.value();
			if(!v.length){
				return true;
			}
			if( v.length != this.emptyValue.length ){
				return false;
			}
			for( var i = 0; i != v.length; ++ i ){
				if( v[i] != this.emptyValue[i] ){
					return false;
				}
			}
			return true;
		},
		
		clear:function(){
			var v = this.value();
			for( var k in v ){
				if( this.emptyValue && array_search( v[k], this.emptyValue ) !== false ){
					continue;
				}
				this.removeItem( v[k] );
			}
			this._inputNode.value = '';
		},
		
		_onKeyDown:function(e){
			e = D.event(e);
			this._suggOnEmpty = true;
			switch( e.keyCode ){
				case 8: // backspace
					if( this._onBackspace() ){
						return;
					}
					break;
				case 10: // enter
				case 13:
					this._onEnter();
					return;
				case 27: // esc
					this._onEsc();
					break;
				case 38: // up
					this._suggUp();
					return false;
				case 40: // down
				this._suggDown();
					if( !empty( this._suggItems ) ){
						return false;
					}
			}
			clearTimeout( this._searchTO );
			//if( empty( this._inputNode.value ) ){
			//	return;
			//}
			this._searchTO = setTimeout( this._search, 200 );
		},
		
		_onEsc:function(){
			if( this._inputNode.value ){
				this._inputNode.value = '';
				return;
			}
			this.clear();
			this._inputNode.blur();
		},
		
		_onInputFocus:function(){
			this._focused = true;
			clearTimeout( this._blurTO );
			this._suggNode.style.display = '';
			if( !this._focusSearch ){
				this._focusSearch = true;
				this._search();
			}
			this._phNode.style.display = 'none';
		},
		
		_onInputBlur:function(){
			this._blurTO = setTimeout( this._onBlur, 300 );
		},
		
		_onBlur:function(){
			this._focused = false;
			this._suggNode.style.display = 'none';
			if( this.isEmpty() && empty( this._inputNode.value ) ){
				this.restore();
				this._phNode.style.display = '';
			}
		},
		
		_onEnter:function(){
			this._suggOnEmpty = false;
			if( this._suggIndex != -1 ){
				this._suggItems[ this._suggIndex ].onclick();
				return;
			}
			if( empty( this._inputNode.value ) ){
				return;
			}
			var item = new D.msg.Search.Item( {
				caption:this._inputNode.value,
				value:this._inputNode.value + '*'
			} );
			this.addItem(item);
			this._inputNode.value = '';
			this._search();
		},
		
		_onBackspace:function(){
			if( this._inputNode.value ){
				return false;
			}
			if( empty( this._itemsSorted ) ){
				return false;
			}
			var last = this._itemsSorted[ this._itemsSorted.length - 1 ];
			this.removeItem( last.value );
			return true;
		},
		
		_searchOnclick:function(){
			if( this.isEmpty() ){
				D.blink( {
					node:this._phNode,
					type:'color',
					color1:'',
					color2:'#f60'
				} );
				//setTimeout( D.closure( this, this.focus ), 200 );
				return;
			}
			this._search();
		},
		
		_search:function(){
			if( this.isEmpty() ){
				if( !this.emptyValue && empty( this.hiddenValue ) && !this._inputNode.value.length ){
					return;
				}
				if( this._inputNode.value.length == 1 ){
					return;
				}
			}
			if( this._mSearch ){
				this._mSearch.onLoad = D.doNothing;
			}
			this._mSearch = new DR.msg.Search;
			this._mSearch.uid = this.uid;
			this._mSearch.pg = 1;
			this._mSearch.onLoad = this._searchRe;
			this._mSearch.query = this.hiddenValue.concat( this.value() ).concat( this._inputNode.value + '*' ).join(',');
			D.log( 'Search: ', this._mSearch.query );
			this._mSearch.select = [
				new DR.msg.select.SearchRe().all(),
				new DR.msg.select.SearchSugg().all()
			].concat( D.msg.MAIL_SELECT );
			this._mSearch.onError = D.closure( this, function(){
				D.removeLoadingOverlay( this._resultNode );
			} );
			this._mSearch.call();
			D.loadingOverlay( this._resultNode, { delay:true } );
			this._newSearch = true;
			if( this.isEmpty() ){
				//Section.replaceUrl( '?' + new Get( Url.get() ).remove('search') );
			} else {
				var v = {};
				for( var k = 0; k < this._itemsSorted.length; ++ k ){
					v[ this._itemsSorted[k].value ] = this._itemsSorted[k].caption;
				}
				v[ this._inputNode.value + '*' ] = this._inputNode.value + '*';
				//Section.replaceUrl( '?' + new Get( Url.get() ).add( 'search', D.JSON.encode(v) ) );
			}
		},
		
		_suggClear:function(){
			this._suggItems = [];
			this._suggIndex = -1;
			clearNode( this._suggNode );
		},
		
		/**
		 * @param {D.msg.Search.Sugg} sugg
		 * @private
		 */
		_suggOnclick:function(sugg){
			this._suggClear();
			this._inputNode.value = '';
			var item = new D.msg.Search.Item( {
				caption:sugg.caption,
				value:sugg.value
			} );
			this.addItem(item);
			this._suggOnEmpty = false;
			this._search();
			this.focus();
		},
		
		_suggUp:function(){
			if( this._suggSeleted ){
					this._suggSeleted.select(false);
				}
			if( empty( this._suggItems ) ){
				this._suggIndex = -1;
				return;
			}
			-- this._suggIndex;
			if( this._suggIndex == -2 ){
				this._suggIndex = this._suggItems.length - 1;
			}
			if( !this._suggItems[ this._suggIndex ] ){
				this._suggIndex = -1;
				return;
			}
			this._suggItems[ this._suggIndex ].select(true);
			this._suggSeleted = this._suggItems[ this._suggIndex ];
		},
		
		_suggDown:function(){
			if( this._suggSeleted ){
				this._suggSeleted.select(false);
			}
			if( empty( this._suggItems ) ){
				this._suggIndex = -1;
				return;
			}
			++ this._suggIndex;
			if( !this._suggItems[ this._suggIndex ] ){
				this._suggIndex = -1;
				return;
			}
			this._suggItems[ this._suggIndex ].select(true);
			this._suggSeleted = this._suggItems[ this._suggIndex ];
		},
		
		/**
		 * @param {D.msg.Search.Sugg} sugg
		 * @param {number} index
		 * @private
		 */
		_suggHover:function( sugg, index ){
			if( this._suggSeleted ){
				this._suggSeleted.select(false);
			}
			this._suggSeleted = sugg;
			sugg.select(true);
			this._suggIndex = index;
		},
		
		_searchRe:function(){
			D.removeLoadingOverlay( this._resultNode );
			D.log( this._mSearch.re );
			if( !this.isEmpty() || !empty( this._inputNode.value ) ){
				this.showResult();
				if( this._newSearch /*|| ( this._mailList && this._mSearch.pg == this._mailList._pgFrom )*/ ){
					if( this._mailList ){
						this._mailList.remove();
					}
					this._mailList = new D.msg.MailList( {
						emptyText:D.msg.l.get('Pēc meklētā atslēgvārda nekas netika atrasts.')
					} );
					this._mailList.append( this._resultNode );
					this._mailList.showPager = false;
				}
				var par = new D.msg.Mail.Par;
				par.fullTime = true;
				par.optOpenConv = true;
				par.uid = this.uid;
				for( k in this._mSearch.re.mails ){
					var mail = new D.msg.Mail( this._mSearch.re.mails[k], par );
					mail.uid = this.uid;
					this._mailList.addMail(mail);
				}
				this._mailList.onLoadMore = this._onLoadMore;
				this._mailList.onSetPg = this._onSetPg;
				this._mailList.setPgs( this._mSearch.pg, this._mSearch.pg + ( this._mSearch.re.isMore ? 1: 0 ) );
			}
			if( !this._newSearch ){
				return;
			}
			this._newSearch = false;
			this._suggClear();
			if( !this._suggOnEmpty && !this.isEmpty() && empty( this._inputNode.value ) ){
				return;
			}
			//this._suggNode.style.display = empty( this._mSearch.re.sugg ) ? 'none': '';
			var k, r, sugg;
			var counts = [
				this._mSearch.re.sugg.length,
				this._mSearch.re.users.length
			];
			var countsSum = 0;
			for( k in counts ){
				countsSum += counts[k];
			}
			var i;
			i = 0;
			for( k in this._mSearch.re.users ){
				/** @type {DR.users.struct.User} */
				r = this._mSearch.re.users[k];
				sugg = new D.msg.Search.Sugg( {
					caption:r.title,
					value:'uid' + r.id,
					icon:r.image.icon
				} );
				sugg.onmouseover = D.closure( this, this._suggHover, sugg, this._suggItems.length );
				sugg.onclick = D.closure( this, this._suggOnclick, sugg );
				sugg.append( this._suggNode );
				this._suggItems.push(sugg);
				if( ++ i >= Math.round( counts[1] / countsSum * 10 ) ){
					break;
				}
			}
			i = 0;
			for( k in this._mSearch.re.sugg ){
				/** @type {DR.msg.struct.SearchSugg} */
				r = this._mSearch.re.sugg[k];
				var icon = 'search';
				switch( r.type ){
					case 'date':
						icon = 'calendarGray';
						break;
					case 'tag':
						icon = 'tagGray';
						break;
				}
				sugg = new D.msg.Search.Sugg( {
					caption:r.caption,
					value:r.value,
					icon:icon
				} );
				sugg.onmouseover = D.closure( this, this._suggHover, sugg, this._suggItems.length );
				sugg.onclick = D.closure( this, this._suggOnclick, sugg );
				sugg.append( this._suggNode );
				this._suggItems.push(sugg);
				if( ++ i >=  Math.round( counts[0] / countsSum * 10 ) ){
					break;
				}
			}
		},
		
		_onLoadMore:function(){
			++ this._mSearch.pg;
			this._mSearch.call();
		},
		
		_onSetPg:function(pg){
			this._mSearch.pg = pg;
			this._mSearch.call();
			D.scrollIntoView( this.node );
			D.loadingOverlay( this._resultNode, { delay:true } );
		},
		
		onScroll:function(){
			if( this._mailList ){
				this._mailList.onScroll();
			}
		},
		
		setPlaceholder:function(v){
			setNodeText( this._phNode, v );
		},
		
		restorePlaceholder:function(){
			this.setPlaceholder( D.msg.l.get('Meklēt...') );
		}
	}
);

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/**
 * @constructor
 * @extends {mkE.Base}
 */
D.msg.Search.Item = Class(
	/**
	 * @lends {D.msg.Search.Item#}
	 */
	{

		ondel:D.doNothing,

		__construct:function(par){
			this.value = par.value;
			this.caption = par.caption;
			this.node = mkE( {
				tag:'span',
				className:'MsgSearchItem radius3',
				els:[
					{
						tag:'div',
						className:'cut caption',
						text:par.caption
					},
					{
						tag:'a',
						className:'x icon closeIcon',
						onclick:this._del
					}
				]
			} );
		},

		_del:function(){
			this.ondel();
		}
	},
	mkE.Base
);

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/**
 * @constructor
 * @extends {mkE.Base}
 */
D.msg.Search.Sugg = Class(
	/**
	 * @lends {D.msg.Search.Sugg#}
	 */
	{
		__construct:function(par){
			this.caption = par.caption;
			this.value = par.value;
			this.node = mkE( {
				tag:'div',
				className:'Sugg cut',
				text:par.caption,
				onmouseover:this._over,
				onclick:this._onclick
			} );
			if( par.icon ){
				if( par.icon.indexOf('/') == -1 ){
					addClassName( this.node, par.icon + 'Icon' );
				} else {
					mkE( {
						tag:'img',
						src:par.icon
					} ).append( this.node );
				}
			}
		},

		onmouseover:D.doNothing,

		_over:function(){
			this.onmouseover();
		},

		onclick:D.doNothing,

		_onclick:function(){
			this.onclick();
		},

		select:function(v){
			if(v){
				addClassName( this.node, 'selected' );
			} else {
				removeClassName( this.node, 'selected' );
			}
		}
	},
	mkE.Base
);
// --- search.js --- 
// +++ last_convs.js +++ 
/**
 * @extends {mkE.Base}
 */
D.msg.LastConvs = Class(
	{
		__construct:function(par){
			this.cid = par.cid || 0;
			this.uid = par.uid || 0;
			var ac = par.apiCall || new DR.ApiCall;
			this.node = mkE( {
				tag:'div',
				className:'MsgLastConvs'
			} );
			this.update( par.apiCall );
		},

		_mRe:function(){
			clearNode( this.node );
			for( var k = 0; k < this._m.re.items.length; ++ k ){
				var conv = this._m.re.items[k];
				if(!conv){ // wtf, null
					continue;
				}
				var item = new D.msg.LastConvs.Item(conv);
				item.append( this.node );
				item.badge( conv.unread, true /*!this.badgeDelay*/ );
				if( this.cid == item.id ){
					addClassName( item.node, 'active' );
				}
			}
			this.badgeDelay = true;
		},

		/**
		 * @param {DR.ApiCall} [apiCall]
		 */
		update:function(apiCall){
			if( this._m && this._m.processing ){
				return;
			}
			this._m = new DR.msg.LastConvs;
			if( this.uid ){
				this._m.uid = this.uid;
			}
			this._m.onLoad = this._mRe;
			this._m.select = [
				new DR.msg.select.Conv().all().membersUsersPreview(0),
				new DR.base.select.Image().icon(),
				new DR.msg.select.Mail().intro(),
				new DR.msg.select.Attach().name().ext(),
				new DR.users.select.User().title().image(),
				new DR.users.select.Image().icon()
			];
			if(apiCall){
					apiCall.addMethod( this._m );
			} else {
				this._m.call( { chat:true } );
			}
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.msg.LastConvs.Item = Class(
	{
		/**
		 * @param {DR.msg.struct.Conv} conv
		 */
		__construct:function(conv){
			this.conv = conv;
			this.id = conv.id;
			this.node = mkE( {
				tag:'div',
				className:'item',
				onclick:this._onclick,
				els:[
					this._imgNode = mkE( {
						tag:'div',
						className:'image picBorder',
						style:{
							backgroundColor:conv.color
						}
					} ),
					{
						tag:'div',
						className:'title cut',
						text:conv.topic || ( conv.friend ? conv.friend.title : '' ) || D.Lang.get('Group conversation')
					},
					this._textNode = mkE( {
						tag:'div',
						className:'msg cut color2',
						text:( conv.lastMail ? conv.lastMail.intro : '' )
					} )
				]
			} );
			if( conv.image ){
				D.bgImage( this._imgNode, conv.image.icon );
			} else if( conv.friend ){
				D.bgImage( this._imgNode, conv.friend.image.icon );
			}
		},

		badge:function(v, noDelay ){
			if( !v || noDelay ){
				this._badge(v);
				return;
			}
			clearTimeout( this._bageTO );
			this._bageTO = setTimeout( D.closure( this, this._badge, v ), 500 );
		},

		_badge:function(v){
			if(v){
				if( !this._badgeNode ){
					this._badgeNode = mkE( {
						tag:'span',
						className:'badge on'
					} ).append( this.node );
				} else {
					this._badgeNode.append( this.node );
				}
				setNodeText( this._badgeNode, v );
				return;
			}
			if( this._badgeNode ){
				this._badgeNode.remove();
			}
		},

		_onclick:function(){
			Section.navigate( '/messages/' + D.msg.convUrl( this.conv ) );
			var m = new DR.msg.Stats;
			m.kw = DR.msg.Stats.KW_MSG_LAST_CONV;
			m.call();
		}
	},
	mkE.Base
);// --- last_convs.js --- 
// +++ last_convs_user.js +++ 
/**
 * @extends {mkE.Base}
 */
D.msg.LastConvUser = Class(
	{
		/**
		 * @param {DR.msg.struct.ConvsWithUserRe} re
		 */
		__construct:function(re){
			this.node = mkE( {
				tag:'div',
				className:'ConvsWithUser'
			} );
			if( empty( re.items ) /*|| ( !re.items[1] && re.items[0].fid > 0 )*/ ){
				return;
			}
			T.sep().append( this.node );
			mkE( {
				tag:'h3',
				text:D.Lang.get('Your last conversations')
			} ).append( this.node );
			for( var i = 0; i < re.items.length; ++ i ){
				new D.msg.LastConvUser.Item( re.items[i] ).append( this.node );
			}
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.msg.LastConvUser.Item = Class(
	{
		/**
		 * @param {DR.msg.struct.Conv} conv
		 */
		__construct:function(conv){
			this.conv = conv;
			this.url = '/messages/' + D.msg.convUrl( this.conv );
			this.node = mkE( {
				tag:'div',
				className:'item',
				prop:{
					onclick:this._onclick
				},
				els:[
					this._imgNode = mkE( {
						tag:'div',
						className:'image picBorder',
						style:{
							backgroundColor:conv.color
						}
					} ),
					{
						tag:'div',
						className:'title cut',
						text:conv.topic || ( conv.friend ? conv.friend.title : '' ) || D.Lang.get('Group conversation')
					},
					{
						tag:'div',
						className:'msg cut color2',
						innerHTML:( conv.lastMail && !conv.lastMail.isSpam ? conv.lastMail.text : '' )
					},
					{
						tag:'div',
						className:'date color2',
						text:( conv.lastMail ? D.ddate2( conv.lastMail.ts ) : '' )
					}
				]
			} );
			if( conv.image ){
				D.bgImage( this._imgNode, conv.image.icon );
			} else if( conv.friend ){
				D.bgImage( this._imgNode, conv.friend.image.icon );
			}
		},

		_onclick:function(){
			Section.navigate( this.url );
			var m = new DR.msg.Stats;
			m.kw = DR.msg.Stats.KW_LAST_CONV_USER;
			m.call();

		}
	},
	mkE.Base
);
// --- last_convs_user.js --- 
// +++ msg_emo.js +++ 
/**
 * @extends {mkE.Base}
 */
D.msg.MsgEmo = Class(
	{
		/**
		 * @param {{mid:number,uid:number}} par
		 */
		__construct:function(par){
			this.mid = par.mid;
			this.uid = par.uid;
			this.node = mkE( {
				tag:'div',
				className:'MsgEmo'
			} );
		},

		/**
		 * @param {Array.<DR.msg.struct.Emo>} emotions
		 */
		set:function(emotions){
			clearNode( this.node );
			for( var i = 0; i < emotions.length; ++ i ){
				var item = new D.msg.MsgEmo.Item( emotions[i] );
				item.mid = this.mid;
				item.uid = this.uid;
				item.onclick = D.closure( this, this._itemOnclick, item );
				item.append( this.node );
			}
		},

		/**
		 * @param {D.msg.MsgEmo.Item} item
		 * @private
		 */
		_itemOnclick:function(item){
			if( this._m && this._m.processing ){
				return;
			}
			if( item.data.my ){
				this._m = new DR.msg.EmoRemove;
			} else {
				this._m = new DR.msg.EmoAdd;
			}
			this._m.uid = this.uid;
			this._m.mid = this.mid;
			this._m.emo = item.data.emo;
			this._m.onLoad = this._mRe;
			this._m.call();
			item.loading();
		},

		_mRe:function(){
			this.set( this._m.re.emotions );
		}

	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.msg.MsgEmo.Item = Class(
	{

		uid:0,
		mid:0,

		/**
		 * @param {DR.msg.struct.Emo} emo
		 */
		__construct:function(emo){
			this.data = emo;
			this.onclick = D.doNothing;
			this.node = mkE( {
				tag:'div',
				className:'item',
				onclick:this._onclick,
				onmouseover:this._onmouseover,
				onmouseout:this._onmouseout,
				els:[
					this._emoNode = mkE( {
						tag:'span',
						className:'emo',
						text:emo.emo
					} ),
					{
						tag:'span',
						className:'count',
						text:emo.count
					}
				]
			} );
			D.smileyReplace( this._emoNode );
			if( emo.my ){
				addClassName( this.node, 'my' );
			}
		},

		_onclick:function(){
			this.onclick();
		},

		loading:function(){
			D.loadingOverlay( this._emoNode, { delay:true } );
		},

		_onmouseover:function(){
			if( this.data.count == 1 && this.data.my ){
				return;
			}
			if( !this._sp ){
				this._sp = new D.smallPopUp;
				this._emoUsers = new D.msg.MsgEmo.Users( {
					mid:this.mid,
					uid:this.uid,
					emo:this.data.emo
				} );
			}
			var p = {
				color:'White',
				hideTitle:true,
				width:150
			};
			var chatNode = $( this.node ).parents('.chatMsg')[0];
			var left = true;
			if(chatNode){
				// var pos = D.position( this.node );
				// p.x = pos.left + ( this.node.offsetWidth / 2 );
				// p.y = pos.top + this.node.offsetHeight;
				var pos = D.position( this.node, chatNode );
				left = pos.x < 150;
			} else {
			}
			p.parent = this.node;
			this._sp.html( '', p );
			this._emoUsers.node.append( this._sp.content );
			clearTimeout( this._hideTO );
			if(!left){
				this._sp.node.style.left = 'auto';
				this._sp.node.style.right = ( this.node.offsetWidth / 2 ) - 20 + 'px';
			}
			this._sp.arrowPosition( left, false );
			if(chatNode){
			}
			// if(chatNode){
			// 	this._sp.node.onmouseover = this._spMouseover;
			// 	this._sp.node.onmouseout = this._onmouseout;
			// }
		},

		_onmouseout:function(){
			clearTimeout( this._hideTO );
			this._hideTO = setTimeout( this._spHide, 200 );
		},

		_spMouseover:function(){
			clearTimeout( this._hideTO );
		},

		_spHide:function(){
			if( this._sp ){
				this._sp.close();
			}
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.msg.MsgEmo.Add = Class(
	{
		__construct:function(par){
			this.mid = par.mid;
			this.uid = par.uid;
			this.noParent = par.noParent || false;
			// this.node = mkE( {
			// 	tag:'div',
			// 	className:'MsgEmoAdd',
			// 	els:[
					this.node = mkE( {
						tag:'a',
						className:'MsgEmoAdd SIcon smileySIcon',
						onclick:this._onclick
					} );
			// 	]
			// } );
		},

		_onclick:function(){
			var up = ( D.position( this.node ).top - $(window).scrollTop() > ( $(window).height() / 2 ) );
			var p = {
				onclick:this._add,
				title:D.Lang.get('Rate message with smiley')
			};
			if( !this.noParent ){
				p.parent = this.node;
				p.arrow = {
					top:!up,
					left:false
				};
			}
			var is = D.insertSmiley(p);
			if( !this.noParent ){
				is.sp.node.style[ up ? 'bottom' : 'top' ] = '30px';
			}
		},
		
		_add:function(emo){
			D.smallPopUp.close();
			this._mEmoAdd = new DR.msg.EmoAdd;
			this._mEmoAdd.uid = this.uid;
			this._mEmoAdd.mid = this.mid;
			this._mEmoAdd.emo = emo;
			this._mEmoAdd.call();
		}
	},
	mkE.Base
);

/**
 * @extends {mkE.Base}
 */
D.msg.MsgEmo.Users = Class(
	{
		__construct:function(par){
			this._mEmoUsers = new DR.msg.EmoUsers;
			this._mEmoUsers.uid = par.uid;
			this._mEmoUsers.mid = par.mid;
			this._mEmoUsers.emo = par.emo;
			this._mEmoUsers.select = [
				new DR.users.select.User().id().title().url()
			];
			this._mEmoUsers.onLoad = this._onLoad;
			this._mEmoUsers.call();
			this.node = mkE( {
				tag:'div',
				className:'MsgEmoUsers'
			} );
			D.loadingOverlay( this.node );
		},

		_onLoad:function(){
			D.removeLoadingOverlay( this.node );
			for( var k in this._mEmoUsers.re.users ){
				var user = this._mEmoUsers.re.users[k];
				mkE( {
					tag:'a',
					className:'cut',
					text:user.title,
					href:user.url
				} ).append( this.node );
			}
		}
	},
	mkE.Base
);// --- msg_emo.js --- 
// +++ dist/recorder.min.js +++ 
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Recorder=t():e.Recorder=t()}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";(function(t){function o(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var n=t.AudioContext||t.webkitAudioContext,i=function e(){var t=this,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!e.isRecordingSupported())throw new Error("Recording is not supported in this browser");this.state="inactive",this.config=Object.assign({bufferLength:4096,encoderApplication:2049,encoderFrameSize:20,encoderPath:"encoderWorker.min.js",encoderSampleRate:48e3,maxFramesPerPage:40,mediaTrackConstraints:!0,monitorGain:0,numberOfChannels:1,recordingGain:1,resampleQuality:3,streamPages:!1,wavBitDepth:16,sourceNode:{context:null}},o),this.encodedSamplePosition=0,this.initAudioContext(),this.initialize=this.initWorklet().then((function(){return t.initEncoder()}))};i.isRecordingSupported=function(){var e=t.navigator&&t.navigator.mediaDevices&&t.navigator.mediaDevices.getUserMedia;return n&&e&&t.WebAssembly},i.version="8.0.5",i.prototype.clearStream=function(){this.stream&&(this.stream.getTracks?this.stream.getTracks().forEach((function(e){return e.stop()})):this.stream.stop())},i.prototype.close=function(){return this.monitorGainNode.disconnect(),this.recordingGainNode.disconnect(),this.sourceNode&&this.sourceNode.disconnect(),this.clearStream(),this.encoder&&(this.encoderNode.disconnect(),this.encoder.postMessage({command:"close"})),this.config.sourceNode.context?Promise.resolve():this.audioContext.close()},i.prototype.encodeBuffers=function(e){if("recording"===this.state){for(var t=[],o=0;o<e.numberOfChannels;o++)t[o]=e.getChannelData(o);this.encoder.postMessage({command:"encode",buffers:t})}},i.prototype.initAudioContext=function(){this.audioContext=this.config.sourceNode.context?this.config.sourceNode.context:new n,this.monitorGainNode=this.audioContext.createGain(),this.setMonitorGain(this.config.monitorGain),this.recordingGainNode=this.audioContext.createGain(),this.setRecordingGain(this.config.recordingGain)},i.prototype.initEncoder=function(){var e=this;this.audioContext.audioWorklet?(this.encoderNode=new AudioWorkletNode(this.audioContext,"encoder-worklet",{numberOfOutputs:0}),this.encoder=this.encoderNode.port):(console.log("audioWorklet support not detected. Falling back to scriptProcessor"),this.encodeBuffers=function(){return delete e.encodeBuffers},this.encoderNode=this.audioContext.createScriptProcessor(this.config.bufferLength,this.config.numberOfChannels,this.config.numberOfChannels),this.encoderNode.onaudioprocess=function(t){var o=t.inputBuffer;return e.encodeBuffers(o)},this.encoderNode.connect(this.audioContext.destination),this.encoder=new t.Worker(this.config.encoderPath))},i.prototype.initSourceNode=function(){var e=this;return this.config.sourceNode.context?(this.sourceNode=this.config.sourceNode,Promise.resolve()):t.navigator.mediaDevices.getUserMedia({audio:this.config.mediaTrackConstraints}).then((function(t){e.stream=t,e.sourceNode=e.audioContext.createMediaStreamSource(t)}))},i.prototype.initWorker=function(){var e=this,t=(this.config.streamPages?this.streamPage:this.storePage).bind(this);return this.recordedPages=[],this.totalLength=0,new Promise((function(n){e.encoder.addEventListener("message",(function o(i){var r=i.data;switch(r.message){case"ready":n();break;case"page":e.encodedSamplePosition=r.samplePosition,t(r.page);break;case"done":e.encoder.removeEventListener("message",o),e.finish()}})),e.encoder.start&&e.encoder.start();var i=e.config,r=(i.sourceNode,o(i,["sourceNode"]));e.encoder.postMessage(Object.assign({command:"init",originalSampleRate:e.audioContext.sampleRate,wavSampleRate:e.audioContext.sampleRate},r))}))},i.prototype.initWorklet=function(){return this.audioContext.audioWorklet?this.audioContext.audioWorklet.addModule(this.config.encoderPath):Promise.resolve()},i.prototype.pause=function(e){var t=this;if("recording"===this.state)return this.state="paused",this.recordingGainNode.disconnect(),e&&this.config.streamPages?new Promise((function(e){t.encoder.addEventListener("message",(function o(n){"flushed"===n.data.message&&(t.encoder.removeEventListener("message",o),t.onpause(),e())})),t.encoder.start&&t.encoder.start(),t.encoder.postMessage({command:"flush"})})):(this.onpause(),Promise.resolve())},i.prototype.resume=function(){"paused"===this.state&&(this.state="recording",this.recordingGainNode.connect(this.encoderNode),this.onresume())},i.prototype.setRecordingGain=function(e){this.config.recordingGain=e,this.recordingGainNode&&this.audioContext&&this.recordingGainNode.gain.setTargetAtTime(e,this.audioContext.currentTime,.01)},i.prototype.setMonitorGain=function(e){this.config.monitorGain=e,this.monitorGainNode&&this.audioContext&&this.monitorGainNode.gain.setTargetAtTime(e,this.audioContext.currentTime,.01)},i.prototype.start=function(){var e=this;return"inactive"===this.state?(this.state="loading",this.encodedSamplePosition=0,this.audioContext.resume().then((function(){return e.initialize})).then((function(){return Promise.all([e.initSourceNode(),e.initWorker()])})).then((function(){e.state="recording",e.encoder.postMessage({command:"getHeaderPages"}),e.sourceNode.connect(e.monitorGainNode),e.sourceNode.connect(e.recordingGainNode),e.monitorGainNode.connect(e.audioContext.destination),e.recordingGainNode.connect(e.encoderNode),e.onstart()})).catch((function(t){throw e.state="inactive",t}))):Promise.resolve()},i.prototype.stop=function(){var e=this;return"paused"===this.state||"recording"===this.state?(this.state="inactive",this.recordingGainNode.connect(this.encoderNode),this.monitorGainNode.disconnect(),this.clearStream(),new Promise((function(t){e.encoder.addEventListener("message",(function o(n){"done"===n.data.message&&(e.encoder.removeEventListener("message",o),t())})),e.encoder.start&&e.encoder.start(),e.encoder.postMessage({command:"done"})}))):Promise.resolve()},i.prototype.storePage=function(e){this.recordedPages.push(e),this.totalLength+=e.length},i.prototype.streamPage=function(e){this.ondataavailable(e)},i.prototype.finish=function(){if(!this.config.streamPages){var e=new Uint8Array(this.totalLength);this.recordedPages.reduce((function(t,o){return e.set(o,t),t+o.length}),0),this.ondataavailable(e)}this.onstop()},i.prototype.ondataavailable=function(){},i.prototype.onpause=function(){},i.prototype.onresume=function(){},i.prototype.onstart=function(){},i.prototype.onstop=function(){},e.exports=i}).call(this,o(1))},function(e,t){var o;o=function(){return this}();try{o=o||new Function("return this")()}catch(e){"object"==typeof window&&(o=window)}e.exports=o}])}));// --- dist/recorder.min.js --- 
// +++ voice_recorder.js +++ 
/**
 * @class
 * @param {D.msg.VoiceRecorder.Par} par
 * @extends mkE.Base
 */
D.msg.VoiceRecorder = Class(
	/**
	 * @lends {D.msg.VoiceRecorder#}
	 */
	{
		/**
		 * Max voice message length in seconds
		 * @type {int}
		 */
		MAX_LENGTH: 1800,

		/** @type {D.msg.VoiceRecorder.Par} */
		par: null,

		/** @type {Blob[]|null} */
		_chunks: null,

		/** @type {int} */
		_time: 0,

		/** @type {Recorder|null} */
		_mediaRecorder: null,

		/** @type {int} */
		id: 0,

		/** @param {D.msg.VoiceRecorder.Par} par */
		__construct: function ( par ) {
			this.par = par;
			this.node = mkE({
				tag: 'span',
				className: 'SVGIcon msgVoiceRecorder',
				els: [
					this._closeNode = mkE({
						tag: 'span',
						className: 'SVGIcon button-cancel',
						onclick: this.close,
						style: {
							display: 'none'
						},
						els: [
							T.svgIcon({
								icon: 'box-cancel',
								size: 26
							})
						]
					}),
					this._timeLineNode = mkE({
						tag: 'span',
						className: 'timeline',
						style: {
							display: 'none'
						}
					}),
					{
						tag: 'span',
						className: 'SVGIcon button-record',
						els: [
							T.svgIcon({
								icon: 'box-voice',
								size: 26
							}),
							T.svgIcon({
								icon: 'box-stop',
								size: 26
							})
						],
						onclick: this.resume
					},
					this._sendBtn = new T.Form.Button({
						caption: D.msg.l.get('Nosūtīt'),
						onclick: this.send,
						visible: false
					})
				]
			});
		},

		send: function () {
			if( this._mediaRecorder && this._mediaRecorder.state === 'recording' ) {
				this._mediaRecorder.onstop = this._onStopRecordingUpload;
				this._mediaRecorder.stop();
			} else {
				this._upload();
			}
		},

		close: function () {
			if( this._mediaRecorder && this._mediaRecorder.state !== 'inactive' ) {
				this._mediaRecorder.onstop = this._onStopRecordingClose;
				this._mediaRecorder.stop();
			} else {
				this._chunks = null;
				this._closeNode.style.display = 'none';
				this._timeLineNode.style.display = 'none';
				this._sendBtn.hide();
				removeClassName(this.node, 'active');
				if( typeof this.par.onCloseRecorder === "function" ) {
					this.par.onCloseRecorder();
				}
			}
		},

		resume: function () {
			if( this._xhr && this._xhr.readyState !== 4 ) {
				return;
			}
			var state = this._mediaRecorder ? this._mediaRecorder.state : null;
			if( state === 'recording' ) {
				this._mediaRecorder.stop();
			} else if( state === 'paused' ) {
				this._mediaRecorder.resume();
			} else {
				this._setText('Sagatavo mikrofonu...');
				try {
					this._startRecording();
				} catch( e ) {
					this._onError(e);
				}
			}
			this._closeNode.style.display = '';
			this._timeLineNode.style.display = '';
			this._sendBtn.show();
			addClassName(this.node, 'active');
			if( typeof this.par.onOpenRecorder === "function" ) {
				this.par.onOpenRecorder();
			}
		},

		_setText: function ( text ) {
			setNodeText(this._timeLineNode, text);
		},

		_startRecording: function () {
			this.id = 0;
			this._chunks = [];
			this._time = 0;

			this._mediaRecorder = new Recorder({
				encoderPath: '/messages/dist/encoderWorker.min.js',
				numberOfChannels: 1,
				encoderApplication: 2048,
				encoderSampleRate: 16000
			});
			this._mediaRecorder.onstart = this._onMediaRecorderStart;
			this._mediaRecorder.ondataavailable = this._onMediaRecorderDataAvailable;
			this._mediaRecorder.onstop = this._onMediaRecorderStop;
			this._mediaRecorder.onerror = this._onMediaRecorderError;
			this._mediaRecorder.onwarning = this._onMediaRecorderWarning;
			this._mediaRecorder.start();
		},

		_onError: function ( e ) {
			var error = 'Ierakstīšanas kļūda';
			if( e.name ) {
				if( e.name === 'NotFoundError' ) {
					error = 'Nav atrasts mikrofons';
				}
			}
			this._setText(error);
			D.log(e);
		},

		_onTime: function () {
			if( this._mediaRecorder && this._mediaRecorder.state === 'recording' ) {
				var minutes = String(Math.floor(this._time / 60)),
					seconds = String(Math.round(this._time % 60)),
					time = (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
				if( this._time >= this.MAX_LENGTH ) {
					time += '/30:00';
					this._mediaRecorder.stop();
				} else {
					this._time++;
					setTimeout(this._onTime, 1000);
				}
				this._setText(time);
			}
		},

		_onMediaRecorderStart: function ( e ) {
			addClassName(this.node, 'recording');
			this._onTime();
		},

		_onMediaRecorderDataAvailable: function ( e ) {
			this._chunks.push(e);
		},

		_onMediaRecorderError: function ( e ) {
			D.log("MediaRecorder onerror", e);
			this._chunks = null;
			this._setText('Kļūda ierakstot');
		},

		_onMediaRecorderWarning: function ( e ) {
			D.log("MediaRecorder onwarning", e);
		},

		_onMediaRecorderStop: function ( e ) {
			this._mediaRecorder.close();
			removeClassName(this.node, 'recording');
			if( this._chunks && this._chunks.length ) {
				clearNode(this._timeLineNode);
				var blob = new Blob(this._chunks, {type: 'audio/ogg'});
				new D.msg.VoiceRecorder.Player(URL.createObjectURL(blob)).append(this._timeLineNode);
			}
		},

		_onStopRecordingUpload: function ( ev ) {
			this._onMediaRecorderStop(ev);
			this._upload();
		},

		_onStopRecordingClose: function ( e ) {
			this._onMediaRecorderStop(e);
			this.close();
		},

		_upload: function () {
			if( this._chunks === null || !this._chunks.length ) {
				D.log('Tried uploading empty');
				return;
			}
			if( this._xhr && this._xhr.readyState !== 4 ) {
				return;
			}
			this._xhr = new XMLHttpRequest();
			if( D.DEV ) {
				this._xhr.open("POST", 'https://lauris.dra.lv/attachs/messages/upload.php');
			} else {
				this._xhr.open("POST", D.ATTACH_UPL + 'messages/upload.php');
			}
			this._xhr.onload = this._onUploadComplete;
			this._xhr.onerror = this._onUploadError;

			var formData = new FormData();
			var blob = new Blob(this._chunks, {
				type: 'audio/ogg'
			});
			if( blob.size < 1 ) {
				D.log('Tried uploading broken blob');
				return;
			}
			formData.append("Filedata", new File([blob], 'vm.ogg'));
			formData.append("uid", this.uid);
			formData.append("voice_message", "1");
			formData.append("voice_message_length", Math.round(this._mediaRecorder.encodedSamplePosition / 48000));
			this._setText('Saglabā...');
			this._xhr.send(formData);
		},

		_onUploadComplete: function ( e ) {
			var data = JSON.parse(e.target.response);
			if( data.attach ) {
				this._chunks = null;
				this.id = data.attach.id;
				if( this.par.onUploadComplete ) {
					this.par.onUploadComplete(this.id);
				}
				this.close();
			} else {
				this._onUploadError(e);
			}
		},

		_onUploadError: function ( e ) {
			clearNode(this._timeLineNode);
			mkE({
				tag: 'span',
				els: [
					'Neizdevās saglabāt, ',
					{tag: 'a', onclick: this.send, text: 'atkārtot?'}
				]
			}).append(this._timeLineNode);
		}

	},
	mkE.Base
);

/**
 * @class
 */
D.msg.VoiceRecorder.Par = Class(
	/**
	 * @lends {D.msg.VoiceRecorder.Par#}
	 */
	{
		/** @type {Function} */
		onOpenRecorder: null,

		/** @type {Function} */
		onCloseRecorder: null,

		/** @type {Function} */
		onUploadComplete: null,

		/**
		 * @param {Function} v
		 * @return {D.msg.VoiceRecorder.Par}
		 */
		setOnUploadComplete: function ( v ) {
			this.onUploadComplete = v;
			return this;
		},

		/**
		 * @param {Function} v
		 * @return {D.msg.VoiceRecorder.Par}
		 */
		setOnCloseRecorder: function ( v ) {
			this.onCloseRecorder = v;
			return this;
		},

		/**
		 * @param {Function} v
		 * @return {D.msg.VoiceRecorder.Par}
		 */
		setOnOpenRecorder: function ( v ) {
			this.onOpenRecorder = v;
			return this;
		}
	}
);

/**
 * @extends {mkE.Base}
 * @constructor
 */
D.msg.VoiceRecorder.Player = Class(
	/**
	 * @lends {D.msg.VoiceMessage#}
	 */
	{
		/**
		 * @param {string} uri
		 */
		__construct: function ( uri ) {
			this.node = mkE({
				tag: 'span',
				className: 'player',
				els: [
					this._audio = mkE({
						tag: 'audio',
						src: uri,
						ontimeupdate: this._onTimeUpdate,
						onplay: this._onPlay,
						onpause: this._onPause
					}),
					this._playNode = mkE({
						tag: 'a',
						className: 'btn btn-play',
						onclick: this.resume,
						els: [
							T.svgIcon({
								icon: 'music-play'
							})
						]
					}),
					this._pauseNode = mkE({
						tag: 'a',
						className: 'btn btn-pause',
						onclick: this.resume,
						els: [
							T.svgIcon({
								icon: 'music-pause'
							})
						],
						style: {
							display: 'none'
						}
					}),
					{
						tag: 'span',
						className: 'timeline',
						els: [
							this._progressNode = mkE({
								tag: 'span',
								className: 'timeline-inner',
								style: {
									width: '0'
								}
							})
						]
					},
					this._timeNode = mkE({
						tag: 'span',
						className: 'time',
						text: '00:00'
					})
				]
			});
		},
		resume: function () {
			if( this._decode() ) {
				return;
			}
			if( this._audio.paused ) {
				this._audio.play();
			} else {
				this._audio.pause();
			}
		},
		_onTimeUpdate: function () {
			var duration = this._audio.duration || 0,
				ct = this._audio.currentTime || 0,
				progress = (ct / duration * 100) || 0,
				minutes = String(Math.floor(ct / 60)),
				seconds = String(Math.round(ct % 60));
			this._progressNode.style.width = progress + '%';
			this._timeNode.innerText = (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
		},
		_onPlay: function () {
			this._pauseNode.style.display = '';
			this._playNode.style.display = 'none';
		},
		_onPause: function () {
			this._pauseNode.style.display = 'none';
			this._playNode.style.display = '';
		},
		_decode: function () {
			if( this._audio.src.substr(-4) !== '.ogg' ) {
				return false;
			}
			if( this._audio.canPlayType('audio/ogg\;codecs=opus') !== "" ) {
				return false;
			}
			if( typeof window.Worker === "undefined" ) {
				return false;
			}
			var xhr = new XMLHttpRequest();
			xhr.open("GET", this._audio.src, true);
			xhr.responseType = "arraybuffer";
			xhr.onload = this._decodeOnLoad;
			xhr.send();
			return true;
		},
		/**
		 * @param {ProgressEvent} ev
		 * @private
		 */
		_decodeOnLoad: function ( ev ) {
			var arrayBuffer = ev.target.response;
			var typedArray = new Uint8Array(arrayBuffer);
			var decoderWorker = new Worker('/messages/dist/decoderWorker.min.js');
			var wavWorker = new Worker('/messages/dist/waveWorker.min.js');
			decoderWorker.postMessage({
				command: 'init',
				decoderSampleRate: 16000,
				outputBufferSampleRate: 16000
			});
			wavWorker.postMessage({
				command: 'init',
				wavBitDepth: 16,
				wavSampleRate: 16000
			});
			decoderWorker.onmessage = function ( ev ) {
				if( ev.data === null ) {
					wavWorker.postMessage({command: 'done'});
				} else {
					wavWorker.postMessage({
						command: 'encode',
						buffers: ev.data
					}, ev.data.map(function ( typedArray ) {
						return typedArray.buffer;
					}));
				}
			};
			wavWorker.onmessage = this._decoderOnReady;
			decoderWorker.postMessage({command: 'decode', pages: typedArray}, [typedArray.buffer]);
		},
		/**
		 * @param {MessageEvent} ev
		 * @private
		 */
		_decoderOnReady: function ( ev ) {
			if( ev.data.message === "page" ) {
				this._audio.src = URL.createObjectURL(new Blob([ev.data.page], {type: "audio/wav"}));
				this.resume();
			}
		}
	},
	mkE.Base
);

/**
 * @returns {boolean}
 */
D.msg.VoiceRecorder.isSupported = function () {
	if( !D.DEV && !in_array(D.ID, [28, 324, 178429, 215856, 4982814, 29285, 156441, 108181, 1000744, 757698, 4696192, 2500892, 36869, 309642, 11334, 525919, 5570397, 5524872, 61334, 5076571]) ) {
		return false;
	}
	if( !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia ) {
		return false
	}
	if( !Recorder.isRecordingSupported() ) {
		return false;
	}
	return true;
};// --- voice_recorder.js --- 
D.loaded();
