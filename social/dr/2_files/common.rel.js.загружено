
// +++ json.js +++
if( window.JSON && !(navigator && navigator.platform && navigator.platform == 'PlayStation 3') ){
	window.JSON.encode = function(v){
		return JSON.stringify(v);
	};
	window.JSON.decode = function(s){
		// parse nelietojam, jo dažus JSON nevar atserializēt
		try{
			return !( /[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test( s.replace(/"(\\.|[^"\\])*"/g, '')) ) && eval( '(' + s + ')' );
		}
		catch(e){
			return false;
		}
	};
	window._DJSON = window.JSON;
} else {
	var JSON = window._DJSON = {

		decode:function(s){
			try{
				return !( /[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test( s.replace(/"(\\.|[^"\\])*"/g, '')) ) && eval( '(' + s + ')' );
			}
			catch(e){
				return false;
			}
		},

		parse:function(s){
			return this.decode(s);
		},

		encode:function(v){
			return this[ typeof v ](v);
		},

		stringify:function(v){
			return this.encode(v);
		},

		// + types +
		'boolean':function(x){
			return String(x);
		},

		'null':function(x){
			return "null";
		},

		'undefined':function(x){
			return "null";
		},

		number:function(x){
			return isFinite(x) ? String(x) : 'null';
		},

		string: function (x) {
			if (/["\\\x00-\x1f]/.test(x)) {
				var $JSON = this;
				x = x.replace(/([\x00-\x1f\\"])/g, function(a, b) {
					var c = $JSON.m[b];
					if (c) {
						return c;
					}
					c = b.charCodeAt();
					return '\\u00' +
						Math.floor(c / 16).toString(16) +
						(c % 16).toString(16);
				});
			}
			return '"' + x + '"';
		},

		array: function (x) {
			var a = ['['], b, i, l = x.length, v;
			for (i = 0; i < l; i += 1) {
				v = x[i];
				if( this[typeof v] ){
					v = this[typeof v]( v );
					if (typeof v == 'string') {
						if (b) {
							a[a.length] = ',';
						}
						a[a.length] = v;
						b = true;
					}
				}
			}
			a[a.length] = ']';
			return a.join('');
		},

		object: function (x) {
			if (x) {
				if (x instanceof Array) {
					return this.array(x);
				}
				var a = ['{'], b, i, v;
				for (i in x) {
					v = x[i];
					if( this[typeof v] ) {
						v = this[typeof v](v);
						if (typeof v == 'string') {
							if (b) {
								a[a.length] = ',';
							}
							a.push( this.string(i), ':', v );
							b = true;
						}
					}
				}
				a[ a.length ] = '}';
				return a.join('');
			}
			return 'null';
		},
		// - types -

		m:{  // A character conversion map
			'\b': '\\b', '\t': '\\t',  '\n': '\\n', '\f': '\\f',
			'\r': '\\r', '"' : '\\"',  '\\': '\\\\'
		} // m
	};
}
// --- json.js ---

// +++ d.js +++
$( function(){
	var TIME = D.TIME;
	var NOW = new Date().getTime();
	setInterval( function(){
		D.TIME = TIME + Math.round( ( new Date().getTime() - NOW ) / 1000 );
	}, 1000 );
} );

var D = {

	versions:{},

	USER_TYPE_DEFAULT:0,
	USER_TYPE_MUSIC:1,
	USER_TYPE_BIZ:4,
	USER_TYPE_API:6,
	USER_TYPE_GROUPS:7,
	USER_TYPE_UNREG:8,
	USER_TYPE_EVENT:9,
	USER_TYPE_KINO:10,
	USER_TYPE_SAYHL:12,

	PERM_NONE:0,
	PERM_FR:2047, // tikai draugiem
	PERM_OTHER:2048, // citi reģisrēti, bet ne draugi
	PERM_UNREG:4096, // nereģisrētiem
	PERM_ALL:8191, // visiem
	PERM_REG:4095, // tikai reģisrētiem lietotājiem (draugi un citi reģistrēti) PERM_FR | PERM_OTHER

	ID:0,
	LV:true,
	EN:false,
	RU:false,

	PIC_EXT:[ 'jpg', 'jpeg', 'gif', 'png', 'jfif', 'bmp', 'tif', 'tiff' ],
	VIDEO_EXT:[ 'avi', 'mpg', 'mpeg', 'wmv', 'mov', 'divx', 'mp4', '3gp', '3g2', 'asf', 'asx', 'flv', 'mkv', 'qt', 'rm', 'swf', 'vob', 'm4v', 'ogg', 'ogv', 'webm' ],

	mySkinUrl:'',

	setConst:function(consts){
		var check = [ 'JS', 'CSS' ];
		for( var k in check ){
			var r = check[k];
			if( isset( this[r] ) && this[r] != consts[r] ){
				D.reload();
			}
		}
		O2O( this, consts );
	},

	eurRate : 0.702804,

	smileysV:6,

	smileys: {
		':))': 'happy.gif',
		':(': 'sad.gif',
		'8)': 'cool.gif',
		';)': 'blink3.gif',
		';(': 'cry3.gif',
		':@': 'angry.gif',
		'(dance)': 'dance.gif',
		'(finger)': 'finger.gif',
		'(yawn)': 'gaper.gif',
		':*': 'kiss.gif',
		'(sick)': 'sick.gif',
		':P': 'thongue.gif',
		':O': 'scream.gif',
		'(ninja)': 'punch.gif',
		'(d)': 'drink.gif',
		'(sex)': 'sex.gif',
		'(whistle)': 'wistle.gif',
		':)': 'smile.gif',
		'(fani)': 'fani.gif',
		'(pee)': 'pee.gif',
		'(puke)': 'puke.gif',
		'(smoke)': 'smoke.gif',
		'(ci)': 'smoke.gif',
		'(rock)': 'rock.gif',
		'(car)': 'car.gif',
		'(gun)': 'gun.gif',
		'(fool)': 'fool.gif',
		'(mulkis)': 'mulkis.gif',
		'(hello)': 'hello3.gif',
		'(lick)': 'lick.gif',
		'(roll)': 'roll.gif',
		'(flower)': 'flower.gif',
		'(electricity)': 'electricity.gif',
		'(electro)': 'electricity.gif',
		'(cash)': 'cash.gif',
		'(pray)': 'pray.gif',
		'(run)': 'run.gif',
		'(music)': 'music.gif',
		'(split)': 'split.gif',
		'(love)': 'love.gif',
		'(dunno)': 'dunno.gif',
		'(nope)': 'nope.gif',
		'(shake)': 'nope.gif',
		'(blush)': 'blush.gif',
		'(devil)': 'devil.gif',
		'(giggle)': 'giggle.gif',
		'(ninja2)': 'ninja.gif',
		'(bat)': 'bat.gif',
		'(ghost)': 'ghost.gif',
		'(halloween)': 'halloween.gif',
		'(pumpkin)': 'pumpkin.gif',
		'(zombie)': 'zombie.gif',
		'(bell)': 'bell.gif',
		'(xmas)': 'xmas.gif',
		'(tree)': 'tree.gif',
		'(snowy)': 'snowy.gif',
		'(snowman)': 'snowman.gif',
		'(kiss2)': 'kiss2.gif',
		'(saw)': 'saw.gif',
		'(jerk)': 'jerk.gif',
		'(iloveyou)': 'iloveyou.gif',
		'(heart)': 'heart.gif',
		'(liigo)': 'liigo.gif',
		'(beer)': 'beer.gif',
		'(grill)': 'shashlik.gif',
		'(valdis)': 'valdis.gif',
		'(panda)': 'panda.gif',
		'(sun)': 'sun.gif',
		'(shock)': 'shock.gif',
		'(kachok)': 'kachok.gif',
		'(zatlers)': 'valdis.gif',
		'(tiger)': 'tiger.gif',
		'(hug)': 'hug.gif',
		'(hot)': 'hot.gif',
		'(flag:lv)': 'flag_lv.gif',
		'(flag:lt)': 'flag_lt.gif',
		'(flag:ee)': 'flag_ee.gif',
		'(flag:hu)': 'flag_hu.gif',
		'(flag:de)': 'flag_de.gif',
		'(flag:eu)': 'flag_eu.gif',
		'(flag:ru)': 'flag_ru.gif',
		'(flag:ua)': 'flag_ua.gif',
		':D': 'lough.gif',
		'(hare)': 'hare.gif',
		'(gift)': 'gift.gif',
		':S': 'worried.gif',
		'(test)': 'test.gif',
		'(pool)': 'pool.gif',
		'(fan_flag)': 'fan_flag.gif',
		'(fan_stick)': 'fan_stick.gif',
		'(thumbs_up)': 'thumbs_up.gif',
		'(clap)':'clap.gif',
		'(facepalm)':'facepalm.gif',
		'(eh)':'facepalm.gif',
		'(hifive)':'highfive.gif',
		'(highfive)':'highfive.gif',
		'(dod5)':'highfive.gif',
		'(mm)':'mm.gif',
		'(y)':'thumb.gif',
		'(bball)' : 'bball.gif'
	},
	smileysToEmoji: {
		':))': '1f643',
		':(': '1f641',
		'8)': '1f60e',
		';)': '1f609',
		';(': '1f62d',
		':@': '1f621',
		'(dance)': '1f483',
		'(finger)': '1f595',
		'(yawn)': '1f634',
		':*': '1f618',
		'(sick)': '1f912',
		':P': '1f61b',
		':O': '1f62e',
		'(ninja)': '270a',
		'(d)': '1f378',
		'(sex)': '1f498',
		'(whistle)': '1f617',
		':)': '1f642',
		'(fani)': '1f64c',
		'(pee)': '1f6bd',
		'(puke)': '1f62b',
		'(smoke)': '1f6ac',
		'(ci)': '1f6ac',
		'(rock)': '270c',
		'(car)': '1f697',
		'(gun)': '1f52b',
		'(fool)': '1f636',
		'(mulkis)': '1f636',
		'(hello)': '1f64b',
		'(lick)': '1f60b',
		'(roll)': '1f534',
		'(flower)': '1f339',
		'(electricity)': '1f632',
		'(electro)': '1f635',
		'(cash)': '1f911',
		'(pray)': '1f607',
		'(run)': '1f3c3',
		'(music)': '1f3b6',
		'(split)': '1f465',
		'(love)': '2764',
		'(dunno)': '1f610',
		'(nope)': '1f611',
		'(shake)': '1f615',
		'(blush)': '263a',
		'(devil)': '1f608',
		'(giggle)': '1f606',
		'(ninja2)': '1f464',
		'(bat)': '1f608',
		'(ghost)': '1f47b',
		'(halloween)': '1f383',
		'(pumpkin)': '1f383',
		'(zombie)': '1f632',
		'(bell)': '1f514',
		'(xmas)': '1f385',
		'(tree)': '1f332',
		'(snowy)': '2603',
		'(snowman)': '26c4',
		'(kiss2)': '1f48f',
		// '(saw)': 'saw.gif',
		// '(jerk)': 'jerk.gif',
		'(iloveyou)': '1f60d',
		'(heart)': '1f495',
		'(liigo)': '1f37b',
		'(beer)': '1f37a',
		'(grill)': '1f362',
		'(valdis)': '1f474',
		'(panda)': '1f43c',
		'(sun)': '1f31e',
		'(shock)': '1f631',
		'(kachok)': '1f4aa',
		'(zatlers)': '1f474',
		'(tiger)': '1f42f',
		'(hug)': '1f46b',
		'(hot)': '1f613',
		'(flag:lv)': '1f1f1-1f1fb',
		'(flag:lt)': '1f1f1-1f1f9',
		'(flag:ee)': '1f1ea-1f1ea',
		'(flag:hu)': '1f1ed-1f1fa',
		'(flag:de)': '1f1e9-1f1ea',
		'(flag:eu)': '1f1ea-1f1fa',
		'(flag:ru)': '1f1f7-1f1fa',
		'(flag:ua)': '1f1fa-1f1e6',
		':D': '1f600',
		'(hare)': '1f430',
		'(gift)': '1f381',
		':S': '1f616',
		'(test)': '1f600',
		'(pool)': '1f3ca',
		'(fan_flag)': '1f1f1-1f1fb',
		'(fan_stick)': '1f3d2',
		'(thumbs_up)': '1f44d',
		'(clap)':'1f44f',
		'(facepalm)':'1f614',
		'(eh)':'1f615',
		'(hifive)':'270b',
		'(highfive)':'270b',
		'(dod5)':'270b',
		'(mm)':'1f60f',
		'(y)':'1f44d',
		'(bball)' : '1f3c0'
	},
	smileysPublic: [
		':)',':))',':(',':D','8)','(car)',';)',';(',':@','(dance)','(d)','(gun)',':*','(sick)',':P',':O','(ninja)','(fool)','(yawn)','(whistle)','(hello)','(lick)','(roll)','(flower)','(electricity)','(cash)','(pray)','(run)','(music)','(split)','(love)','(blush)','(dunno)','(nope)','(puke)','(fani)','(bat)','(pumpkin)','(zombie)','(bell)','(xmas)','(tree)','(snowman)','(kiss2)','(iloveyou)','(heart)','(liigo)','(grill)','(beer)','(devil)','(giggle)','(ninja2)','(flag:lt)','(flag:lv)','(flag:ee)','(flag:hu)','(flag:de)','(flag:eu)','(flag:ua)','(panda)','(sun)','(shock)','(kachok)','(valdis)','(tiger)','(hug)','(hot)','(hare)','(gift)',':S','(pool)','(fan_flag)','(fan_stick)','(thumbs_up)','(rock)',
		'(clap)','(eh)','(highfive)','(mm)','(y)','(bball)'
	],
	smileysTab: [
		':)',':))',':(',':D','8)','(car)',';)',';(',':@','(dance)','(d)',':*','(sick)',':P',':O','(ninja)','(fool)','(yawn)','(whistle)',
		'(gun)','(hello)','(lick)','(roll)','(flower)','(electricity)','(cash)','(pray)','(run)','(music)','(split)','(love)','(blush)',
		'(dunno)','(nope)','(puke)','(fani)','(bat)','(pumpkin)','(zombie)','(tree)','(bell)','(xmas)','(snowman)','(kiss2)','(iloveyou)',
		'(heart)','(liigo)','(grill)','(beer)','(devil)','(giggle)','(ninja2)','(flag:lt)','(flag:lv)','(flag:ee)','(flag:hu)','(flag:de)',
		'(flag:eu)','(flag:ua)','(panda)','(sun)','(shock)','(kachok)','(valdis)','(tiger)','(hug)','(hot)','(hare)','(gift)',':S','(pool)',
		'(fan_flag)','(fan_stick)','(thumbs_up)','(rock)','(clap)','(eh)','(highfive)','(mm)','(y)','(bball)'
	],

	mouseX:0,
	mouseY:0,
	mouseTime:( new Date() ).getTime(),
	initMouse:function(){
		if( D.initMouse.ok ){
			return;
		}
		if( document.body ){
			$( document ).mousemove( function( e ){
				D.mouseX = e.clientX;
				D.mouseY = e.clientY;
				D.mouseTime = ( new Date() ).getTime();
			} );
			D.initMouse.ok = true;
		}
		setTimeout( D.initMouse, 100 );
	},

	ajaxPostData:function( el ){
		var data = {};
		var arrayKeys = {};
		var reg = new RegExp( /\[\]/ );
		$( 'input, textarea, select', el ).each( function(){
			var name =  this.getAttribute('name');
			if( reg.test(name) ){
				if( typeof arrayKeys[name] == 'undefined' ){
					arrayKeys[name] = 0;
				} else {
					++ arrayKeys[name];
				}
				name = name.replace( reg, '[' + String( arrayKeys[name] ) + ']' );
			}
			if( this.type == 'checkbox' || this.type == 'radio'){
				if( this.checked ){
					data[name] = this.value;
				}
				return;
			}
			data[name] = this.value;
		} );
		return data;
	},

	ajaxPost:function( el, url, id, par ){
		if( ! par ){
			par = {};
		}
		/*if( typeof par.overlay == 'undefined' ){
			par.overlay = true;
		}*/
		var data = this.ajaxPostData( el );
		if( typeof id == 'object' ){
			var node = id;
		} else {
			var node = document.getElementById( id );
		}
		if( par.overlay ){
			var position = getStyle( node, 'position' );
			if( position == 'static' ){
				node.style.position = 'relative';
			}
			var overlay = mkE( {
				tag:'div',
				className:'rqOverlay',
				style:{
					height:node.offsetHeight + 'px',
					width:node.offsetWidth + 'px'
				}
			} ).append( node );
			if( D.browser.name != 'Explorer' ){
				$( overlay ).animate( {opacity:0.9}, 6000 );
			}
		} else {
            if( ! par.withoutLoading ){
			    node.innerHTML = '<div class="rqLoading"></div>';
            }
		}
		var success = function( html ){
			if( par.replace ){
				if( ! node.parentNode ){
					return;
				}
				var newNode = mkE( {
					tag:node.parentNode.tagName,
					prop:{
						innerHTML:html
					}
				} );
				var nodeChilds = newNode.childNodes;
				var nodeChildsArr = [];
				for( var i = 0; i < nodeChilds.length; i ++ ){
					nodeChildsArr.push( nodeChilds[ i ] );
				}
				for( var k in nodeChildsArr ){
					D.insertBefore( nodeChildsArr[ k ], node );
				}
				removeNode( node );
			} else {
				node.innerHTML = html;
			}
			evalScriptHTML( html );
			if( par.callback ){
				par.callback( {form:el, node:node}, par );
			}
		};
		$.ajax( {
			url:url,
			type:'POST',
			data:data,
			success:success,
			error:function( xhr ){
				if( xhr.status == 403 ){
					D.reload();
				}
			}
		} );
		if( D.DEV ){
			D.console.info( data );
		}
		if( D.insertSmiley ){
			D.insertSmiley.close();
		}
		return false;
	},

	getChildByTagName:function( node, tagName ){
		var re = [];
		for( var k in node.childNodes ){
			if( node.childNodes[ k ].tagName && node.childNodes[ k ].tagName.toLowerCase() == tagName.toLowerCase() ){
				re.push( node.childNodes[ k ] );
			}
		}
		return re;
	},

	sendMail:function(fid, topic, text, callback) {
		D.onLoad( 'msg', function(){
			D.msg.newMail( {
				fid:fid,
				topic:topic,
				text:text,
				onSend:function(){
					if(callback){
						callback(true);
					}
				},
				onClose:function(){
					if(callback){
						callback(false);
					}
				}
			} );
		} );
		return false;
	},

	confirmDelete:function( text, par ){
		par = par || {};
		par.text = par.text || ( D.Lang.exists( 'confirm delete', 'xGlobal' ) ? D.Lang.get( 'confirm delete', 'xGlobal' ) : 'Are you sure?' );
		if( ( typeof text == 'object' && !empty( text.href ) ) || typeof text == 'function' ){
			/*if( InfoBox.opened ){
				var c = confirm( par.text );
				if(c){
					text();
				}
				return;
			}*/
			D.messageBox(
				{
					title: par.title || par.text,
					text: ( par.title ? par.text : '' ),
					width: par.width || 300
				},
				function(v){
					if(v){
						if( typeof text == 'function' ){
							text();
							return;
						}
						document.location.href = text.href;
					}
				}
			);
			return false;
		}
		return confirm( text || xGlobal[ 'confirm delete' ] || 'Are you sure?' );
	},
	confirmJoin:function( text, linkbox, nonce ){
		text = text || xGlobal[ 'confirm join' ] || 'Are you sure?';
		return D.messageBox({title:text,type:'YESNO'}, function(val) {
			if(val) {
				el = document.getElementById('followForm');
				if(el) {
					linkbox.href = linkbox.href + '?' + nonce;
					el.submit();
				}
			}
			//
		});
	},
	policeReport:function(id, type, url, width) {
		type = type || 0;
		url = url || document.location.href;
		InfoBox.iframe('/inc/police.php?uid=' + id + '&type=' + type + '&url=' + encodeURIComponent(url), {width: width || 780});
		return false;
	},

	messageBox : function(par, callback){
		if( typeof par.text != 'undefined' ){
			par.text = String( par.text );
		}
		callback = callback || function(){};
		par = par || {};
		if(!par.buttons){
			switch(par.type){
				case 'YESNO':
					par.buttons = [{value:true, caption:xGlobal['yes']},{value:false,caption:xGlobal['no']}];
					break;
				case 'OK':
					par.buttons = [{value:true, caption:xGlobal['ok']}];
					break;
				case 'OKCANCEL':
				default:
					par.buttons = [{value:true, caption:xGlobal['ok']},{value:false,caption:xGlobal['cancel']}];
			}
		}
		var buttons, text;
		var el = mkE({
			tag:'div',
			className:'messageBox',
			els:[
				text = mkE({
					tag:'div',
					className:'messageBoxText',
					text:par.text,
					els:par.els || []
				}),
				buttons = mkE({
					tag:'div',
					className: 'buttonsCont'
				})
			]
		});
		if( empty( par.text ) && empty( par.html ) && empty( par.els ) ){
			text.remove();
			removeClassName( buttons, 'formButtons' );
		}
		if( par.html ){
			text.innerHTML = par.html;
		}
		var m;
		for (var i in par.buttons){
			var item = par.buttons[i];
			var onclick = function(){
				m.onClose = function(){};
				if(callback){
					rsp = callback( arguments.callee._drValue );
				}
				if( empty(par.stack) ){
					m.close();
				}
			};
			onclick._drValue = item.value;
			T.submitButton({
				caption:item.caption,
				color:item.color || (i==0?'submit' : 'link'),
				onclick:item.onclick || onclick
			}).append(buttons);
		}
		m = new D.Modal( {
			title: par.title,
			width:par.width || 450,
			overlayClose:false,
			onClose:function(){
				callback(false);
			}
		} );
		m.html();
		el.append( m.content );
		$( 'a, button', buttons ).first().focus();
		return false;
	},

	idPath:function( id ){
		id = String( id );
		if( id.length < 6 ){
			for( var i = 6 - id.length; i > 0; i -- ){
				id = '0' + id;
			}
		}
		return id.substr( id.length - 6, 3 ) + '/' + id.substr( id.length - 3, 3 ) + '/';
	},

	imgUrl:function( $type, $id, $v, $size, ext ){
		ext = ext || '.jpg';
		var $folder;
		switch( $type ){
			case 'tmp':
				return D.idPicDomain( $id ) + 'tmp/' + String( $id ).substr(0,2) + '/' + D.getImgPrefix( $size ) + $id + ext;
			case 'smsgifts':
				return D.idPicDomain( $id ) + 'smsgifts/' + ( $v ? 'v' + $v + '/' : '' ) + D.getImgPrefix( $size ) + $id + ext;
			default:
				$folder = $type;
		}
		var $re = D.idPicDomain( $id ) + $folder;
		$re += '/' + D.idPath( $id ) + ( $v ? 'v' + $v + '/' : '' ) + D.getImgPrefix( $size ) + $id + ext;
		return $re;
	},

	getImgPrefix:function( $size ){
		var $prefix = $size;
		switch( $size ){
			case 'icon':
				$prefix = 'i_';
				break;
			case 'small':
				$prefix = 'sm_';
				break;
			case 'middle':
				$prefix = 'm_';
				break;
			case 'gm':
				$prefix = 'ngm_';
				break;
			case 'large':
				$prefix = 'l_';
				break;
		}
		return $prefix;
	},

	idPicDomain:function( $id ){
		var s = new String( $id );
		return '//i' + s.substr( s.length - 1, 1 ) + '.ifrype.com/';
	},

	idVideoDomain: function( id ) {
		var s = new String( id );
		return '//vp' + s.substr( s.length - 1, 1 ) + '.ifrype.com/';
	},

	videoUrl: function( folder, id, v, format ) {
		format = format || 'mp4';
		var href = D.idPath( id ) + (v ? 'v' + v + '/' : '') + id + '.' + format;
		return D.idVideoDomain( id ) + folder + '/' + href;
	},

	reload:function(noParent){
		var doc;
		if( window.parent && window.parent !== window && noParent !== true ){
			doc = window.parent.document;
		} else {
			doc = document;
		}
		doc.location.reload();//href = doc.location.href.split('#')[0];
		return false;
	},

	newWindow:function( urlOrLink, name, par ){
		if( ! par ){
			par = {};
		}
		if( typeof par.directories == 'undefined' ){
			par.directories = true;
		}
		if( typeof par.location == 'undefined' ){
			par.location = true;
		}
		if( typeof par.resizable == 'undefined' ){
			par.resizable = true;
		}
		if( typeof par.toolbar == 'undefined' ){
			par.toolbar = true;
		}
		if( typeof par.scrollbars == 'undefined' ){
			par.scrollbars = true;
		}
		if( typeof par.status == 'undefined' ){
			par.status = true;
		}
		var url = urlOrLink;
		if( typeof urlOrLink == 'object' && urlOrLink.href ){
			url = urlOrLink.href;
			name = urlOrLink.target;
		}
		var windowOpenPar = [];
		for( var k in par ){
			if( typeof par[k] == 'boolean' ){
				windowOpenPar.push( k + '=' + ( par[k] ? '1' : '0' ) );
				continue;
			}
			windowOpenPar.push( k + '=' + par[k] );
		}

		return window.open( url, name, windowOpenPar.join( ',' ) );
	},

	changeProfilePic:function( get, reload ){
		return InfoBox.open( '/account/pic.php?' + ( get ? get : '' ), {width:500, onClose:( reload ? D.reload : function(){} )} );
	},

	stopPropagation:function( e ){
		e = e || window.event;
		if ( !e ) {
			return e;
		}
		if( e.stopPropagation ){
			e.stopPropagation();
		}
		e.cancelBubble = true;
		return e;
	},

	position:function( el, parent ){
		var re = {
			left:findPosX( el, parent ),
			top:findPosY( el, parent )
		};
		re.x = re.left + $( document ).scrollLeft();
		re.y = re.top + $( document ).scrollTop();
		return re;
	},

	inScreen:function(node){
		if( !node || !node.offsetHeight ){
			return false;
		}
		var $elem = $(node);
	    var $window = $(window);
	    var docViewTop = $window.scrollTop();
	    var docViewBottom = docViewTop + $window.height();
	    var elemTop = $elem.offset().top;
	    var elemBottom = elemTop + $elem.height();
	    return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
	},

	inScreenBottom:function(node){
		if( !node.offsetHeight ){
			return false;
		}
		var $elem = $(node);
		var $window = $(window);
		var docViewTop = $window.scrollTop();
		var docViewBottom = docViewTop + $window.height();
		var elemTop = $elem.offset().top;
		var elemBottom = elemTop + $elem.height();
		return (elemBottom <= docViewBottom);
	},

	/**
	 * @param {Event} e
	 * @return {Event}
	 */
	event:function(e){
		e = e || window.event;
		if(!e){
			return e;
		}
		if( typeof e.layerX == 'undefined' ){
			e.layerX = e.offsetX;
			e.layerY = e.offsetY;
		}
		if( typeof e.target == 'undefined' ){
			e.target = e.srcElement;
		}
		return e;
	},

	/**
	 * @param {Event} e
	 * @return {Boolean}
	 */
	checkCtrlEnter:function(e){
		e = this.event(e);
		return this.checkEnter( e ) && ( e.ctrlKey || e.metaKey );
	},

	checkEnter:function( e ){
		return e.keyCode == 13 || e.keyCode == 10;
	},

	addPicsGallery:function( par ){
		if( empty( par.urls ) ){
			return false;
		}
		if( ! par.urls.length ){
			par.urls = [ par.urls ];
		}
		var href = '/gallery/ext/add.php?albumTitle=' + encodeURIComponent( par.title || '' );
		for( var k in par.urls ){
			href += '&u[]=' + encodeURIComponent( par.urls[ k ] );
		}
		InfoBox.iframe( href, {width:640, height:400} );
		return false;
	},

	galleryUploadFromUrls:function(urls){
		var form = mkE( {
			tag:'form',
			method:'post',
			action:'/gallery/?tab=3',
			els:[
				{
					tag:'input',
					prop:{
						type:'hidden',
						name:D.nonce.name,
						value:D.nonce.value
					}
				}
			]
		} );
		for( var k in urls ){
			var url = urls[k];
			// TODO object thumbs
			//if( typeof(urls[k]) == 'string' ){
				mkE( {
					tag:'input',
					type:'hidden',
					name:'urls[]',
					value:( url.substr(0,2) == '//' ? 'http:' + url : url )
				} ).append(form);
			//}
		}
		form.append( document.body ); //?
		form.submit();
	},

	loadingOverlay:function( node, par ){
		par = par || {};
		if( typeof node == 'string' ){
			node = document.getElementById( node );
		}
		if( ! node ){
			D.console.error( 'D.loadOverlay( node ) - not element' );
			return false;
		}
		if( node._drOverlay ){
			node._drOverlay.remove();
		}
		if( getStyle( node, 'position' ) == 'static' ){
			node.style.position = 'relative';
		}
		var overlay = node._drOverlay = mkE( {
			tag:'div',
			className:'rqOverlay',
			style:{
				//height:node.offsetHeight + 'px',
				//width:node.offsetWidth + 'px'
				height:'auto',
				width:'auto',
				bottom:'0px',
				right:'0px'
			}
		} ).append(node);
		if( par.delay ){
			addClassName( overlay, 'delay' );
		}
		setTimeout( function(){
			addClassName( overlay, 'fadeIn' );
		}, 1 );
		if( par.loadingText ){
			setTimeout( D.closure(this, function(){
				if( node._drOverlay ){
					mkE( {
						tag:'div',
						className:'rqLoadingText',
						text:par.loadingText
					} ).append(overlay);
				}
			} ), 2000);
		}
		if( par.backgroundPosition ){
			overlay.style.backgroundPosition = par.backgroundPosition;
		} else if( overlay.offsetHeight > 400 ){
			overlay.style.backgroundAttachmentX = 'fixed';
		}
		setTimeout( function(){
			var q = $(overlay);
			if( !q.closest('body')[0] ){
				return;
			}
			q.animate({opacity:0.9}, 6000);
		}, 2000 );
		return overlay;
	},

	overlay:function( node, par ){
		par = par || {};
		if( typeof node == 'string' ){
			node = document.getElementById( node );
		}
		if( !node ){
			D.console.error( 'D.overlay( node ) - not element' );
			return false;
		}
		if( node._drOverlaySimple ){
			node._drOverlaySimple.remove();
		}

		var style = getStyle( node, 'position' ) == 'static';
		if( style == 'static' || style == ''){
			node.style.position = 'relative';
		}
		var overlay = node._drOverlaySimple = mkE( {
			tag:'div',
			className:'rqsOverlay',
			style:{
				height:'auto',
				width:'auto',
				bottom:'0px',
				right:'0px'
			}
		} ).append(node);

		return overlay;
	},

	removeLoadingOverlay:function( node ){
		if( typeof node == 'string' ){
			node = document.getElementById( node );
		}
		if( ! node ){
			D.console.error( 'D.removeLoadOverlay( node ) - not element' );
			return false;
		}
		if( node._drOverlay ){
			node._drOverlay.remove();
			return true;
		}
		return false;
	},

	removeOverlay:function( node ){
		if( typeof node == 'string' ){
			node = document.getElementById( node );
		}
		if( ! node ){
			D.console.error( 'D.removeOverlay( node ) - not element' );
			return false;
		}
		if( node._drOverlaySimple ){
			node._drOverlaySimple.remove();
			return true;
		}
		return false;
	},

	reloadCSS:function( name ){
		var links = document.getElementsByTagName( 'link' );
		var t = ( new Date() ).getTime();
		for( var i = 0; i < links.length; i ++ ){
			if( links.item( i ).type == 'text/css' ){
				if( ! name || links.item( i ).href.indexOf( name ) != -1 ){
					links.item( i ).href = links.item( i ).href.split( '?' )[ 0 ] + '?' + t;
				}
			}
		}
	},

	// ja padod tekstu, tad tikai specialcharotu
	smileyReplace:function(textOrNode){
		if( !this._smileyList ){
			this._smileyList = array_keys( D.smileys );
			for( var k = 0, l = this._smileyList.length; k < l; k++ ){
				var v = this._smileyList[k];
				if( v.toUpperCase() != v ){
					D.smileys[ v.toUpperCase() ] = D.smileys[v];
				}
				if( v.toLowerCase() != v ){
					D.smileys[ v.toLowerCase() ] = D.smileys[v];
				}
			}
			this._smileyList = array_keys( D.smileys );
			this._smileyList.sort( function( a, b ){
				if( a.length == b.length ){
					return 0;
				}
				if( a.length < b.length ){
					return 1;
				}
				return -1;
			} );
			/*this._smileyEmojiList = array_keys( D.smileysToEmoji );
			for( var k in this._smileyEmojiList ){
				var v = this._smileyEmojiList[k];
				if( v.toUpperCase() != v ){
					D.smileysToEmoji[ v.toUpperCase() ] = D.smileysToEmoji[v];
				}
				if( v.toLowerCase() != v ){
					D.smileysToEmoji[ v.toLowerCase() ] = D.smileysToEmoji[v];
				}
			}
			this._smileyEmojiList = array_keys( D.smileysToEmoji );*/
		}
		var node = textOrNode;
		if( typeof textOrNode != 'object' || textOrNode.nodeType != 1 ){
			node = document.createElement('div');
			node.innerHTML = String(textOrNode);
		}
		this._smileyReplace(node);
		if (isset(node.textContent)) {
			var text  = node.textContent.replace(/\s/g, "");
			if (!text.length) {
				addClassName(node, 'only-emoji');
			}
		}
		return node.innerHTML;
	},

	getStickerImageUrl:function(stickerId, size){
		if(!isset(size)){
			size = 'nm_';
		}
		return D.imgUrl('stickers', stickerId, false, size, '.png');
	},

	_smileyReplace:function(node){
		D.Emoji.parse(node);
		var changed = false;
		var childs = [];
		for( var i = 0; i < node.childNodes.length; ++ i ){
			var child = node.childNodes[i];
			if( child.nodeType == 1 ){
				this._smileyReplace(child);
				childs.push(child);
				continue;
			}
			if( child.nodeType != 3 ){
				childs.push(child);
				continue;
			}
			var a = [child];
			for( var sk = 0, l = this._smileyList.length; sk < l; sk++ ){
				var k = this._smileyList[sk];
				var _a = [];
				for( var j = 0; j < a.length; ++ j ){
					var achild = a[j];
					if( achild.nodeType != 3 ){
						_a.push(achild);
						continue;
					}
					//var re = new RegExp( k.replace( /\(/g, '\\(' ).replace( /\)/g, '\\)').replace( /\*/g, '\\*' ), 'gi' );
					var ta = achild.nodeValue.split(k);
					if( ta.length == 1 ){
						_a.push(achild);
						continue;
					}
					changed = true;
					for( var n = 0; n < ta.length; ++ n ){
						if(n){
							var img = new Image();
							img.setAttribute('draggable', 'false');
							img.className = "smiley";
							img.alt = k;
				            img.src = D.PIMG + 'i/smilies/v' + D.smileysV + '/' + D.smileys[k];
							_a.push(img);
						}
						if( ta[n].length ){
							_a.push( document.createTextNode( ta[n] ) );
						}
					}
				}
				a = _a;
			}
			for( var j = 0; j < a.length; ++ j ){
				childs.push( a[j] );
			}
		}
		if(!changed){
			return;
		}
		clearNode(node);
		for( var k = 0; k < childs.length; ++ k ){
			node.appendChild( childs[k] );
		}
	},

	_smileyToEmojiReplace: function(node) {
		D.Emoji.parse(node);
		// D._smileyReplace(node);
		return false;
	},

	_linksReplaceExp:/((?:(http|https):\/\/(?:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,64}(?:\:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,25})?\@)?)?((?:(?:[a-zA-Z0-9][a-zA-Z0-9\-]{0,64}\.)+(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|company|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnrwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eouw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]))|(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9])))(?:\:\d{1,5})?)(\/(?:(?:[a-zA-Zā-ž0-9\;\/\?\:\@\&\=\#\~\-\.\+\!\*\'\[\]\(\)\,\_\{\}])|(?:\%[a-fA-F0-9]{2}))*)?(?:\/|-|\b|$)/gi,

	linksReplace:function( textOrNode, par ){
		par = par || {};
		var node = textOrNode;
		if( typeof textOrNode != 'object' || textOrNode.nodeType != 1 ){
			node = document.createElement('div');
			node.innerHTML = String(textOrNode);
		}
		D.replaceWithNode( node, this._linksReplaceExp, D.closure( this, this._linksReplaceCB, par ) );
		return node.innerHTML;
	},

	_linksReplaceCB:function( par, match ){
		var url = match[0];
		if( !match[2] ){
			if( match[0].substr( 0, 4 ) != 'www.' ){
				return match[0];
			}
			url = 'http://' + match[0];
		}
		return this._linksReplaceA( par, url );
	},

	_linksReplaceHttp:function( match ){
		var url = match[0];
		if( !match[2] ){
			if( match[0].substr( 0, 4 ) != 'www.' ){
				return match[0];
			}
			url = 'http://' + match[0];
		}
		return url;
	},

	_linksReplaceA:function( par, url ){
		var link = mkE( {
			tag:'a',
			href:url,
			prop:{
				title:url
			}
		} );
		var text = '';
		if( link.hostname.substr( 0, 3 ) != 'www' ){
			text += link.protocol + '//';
		}
		text += link.hostname;
		if( link.pathname[0] != '/' ){
			text += '/'
		}
		try {
			if( par.noShorten ) {
				text += decodeURIComponent(link.pathname);
			} else {
				text += D.shorten(decodeURIComponent(link.pathname) || '', 15, '...');
			}
		} catch(e) {
			if( par.noShorten ) {
				text += decodeURIComponent(encodeURIComponent(link.pathname));
			} else {
				text += D.shorten(decodeURIComponent(encodeURIComponent(link.pathname)) || '', 15, '...');
			}
		}
		link.appendChild( mkE( {
			text:text
		} ) );
		if( link.host != document.location.host || link.href.indexOf('/say/click.php') != -1 || (link.href.indexOf('/stats/click.php') != -1 && this._externalStatsLink(link.href) ) ){
			link.className = 'externalUrl';
			link.target = '_blank';
			link.setAttribute('rel', 'noopener noreferrer');
			link.onclick = D.closure( link, function( href, e ){
				if( par.stopPropagation ){
					D.stopPropagation(e);
				}
				return T.checkLink( this, href );
			}, link.href );
			if( !par.click && link.href.indexOf('/say/click.php') == -1 ){
				link.href = '/say/click.php?' + ( new Get({}).add( 'url', link.href ) );
			}
		}
		if( par.click ){
			link.href = par.click( link.href, link );
		}
		return link;
	},

	_externalStatsLink: function(href){
		var get = new Get(href);
		if( (href.indexOf('/stats/click.php') != -1 || href.indexOf('/say/click.php') != -1) && get.v('url') ){
			return this._externalStatsLink(get.v('url'));
		}
		var a = document.createElement('a');
		a.href = href;
		return a.host != document.location.host;
	},

	emojiReplace:function(node) {
		// D.Emoji.parse(node);
		// var text  = node.textContent.replace(/\s/g, "");
		// if (!text.length) {
		// 	addClassName(node, 'only-emoji');
		// }
		D.replaceWithNode( node, /\uD83D[\uDE00-\uDE4F]/g, function(m) {
			if( !D.emojiReplace._init ){
				var ss1 = document.createElement('style');
				var def = "@font-face { \
					font-family: 'DejaVuSans'; \
					src: url('/css/fonts/DejaVuSans.eot?') format('eot'),\
						url('/css/fonts/DejaVuSans.woff') format('woff'),\
						url('/css/fonts/DejaVuSans.ttf')  format('truetype'),\
						url('/css/fonts/DejaVuSans.svg#DejaVuSans') format('svg');\
					}";

				ss1.setAttribute("type", "text/css");
				var hh1 = getHeadElement();
				hh1.appendChild(ss1);
				if (ss1.styleSheet) {   // IE
					ss1.styleSheet.cssText = def;
				} else {                // the world
					var tt1 = document.createTextNode(def);
					ss1.appendChild(tt1);
				}
				D.emojiReplace._init = true;
			}
			return mkE( {
				tag:'span',
				text:m[0],
				className : 'emoji'
			} );
		} );
	},

	flashMovie:function( name ){
		if( window.document[name] ){
			return window.document[name];
		}
		if( navigator.appName.indexOf("Microsoft Internet") == -1 ){
			if( document.embeds && document.embeds[name] ){
				return document.embeds[name];
			}
		}
		return document.getElementById(name);
	},

	flash:function( name, k ){
		var re = this.flashMovie(name);
		if( !k ){
			return re;
		}
		try{
			if( arguments.length ){
				var arg = [];
				for( var i = 2; i < arguments.length; i ++ ){
					arg.push( arguments[ i ] );
				}
				return re[ k ].apply( re, arg );
			} else {
				return re[ k ]();
			}
		} catch( e ){
			D.console.error( e.name + ': ' + e.message + '@' + e.fileName + ' ' + e.lineNumber );
			return null;
		}
	},

	iframePerm:function(ref){
		if( ref.indexOf( 'http://www.google.com/' ) == 0 ){
			return true;
		}
		if( ref.indexOf( 'draugiem.lv/' ) == 0 ){
			return true;
		}
		if( ref.indexOf( 'http://www.google.lv/' ) == 0 ){
			return true;
		}
		var uids = {
				'1327277':true,
				'1331456':true,
				'1334385':true,
				'3833932':true
		};
		if( uids[ D.ID ] ){
			return true;
		}
		if( window.parent ){
			try{
				window.parent.location.toString();
			} catch(e){
				return false;
			}
		}
		return true;
	},

	iframePermLog:function(ref){
		var rpc = new RPC('/rq/app.php');
		rpc.send(
			'iframePerm',
			{
				ref:ref
			},
			function(){
			}
		);
	},
	shorten : function( str, n, symbol ){
		symbol = symbol || '&hellip;';
        str = str || '';
		var toLong = str.length > n;
		var s_;
		s_ = toLong ? str.substr(0, n-1) : str;

		var cut = s_.indexOf(' ', n);
    	if (cut != -1) {
			s_ = s_.substr(0, s_.lastIndexOf(' '));
		}
		return toLong ? s_ + symbol : s_;
	},
	ucfirst:function( name ){
		if( empty(name) ){
			return name;
		}
		var re = name.substr( 0, 1 ).toUpperCase();
		if( name.length > 1 ){
			re += name.substr( 1, name.length - 1 );
		}
		return re;
	},

	/**
	 * @param {string} src
	 * @param {Function} [callback]
	 * @param {Object} [par]
	 */
	addCSS:function(src, callback, par){
		callback = callback || false;
		par = par || {};
		par.context = par.context || document;
		var head = getHeadElement(par.context);
		var path = function(){
			if( ( src[0] == '/' && src[1] == '/' ) || src[4] == ':' || src[5] == ':' ){
				return src;
			}
			if( src[0] == '/' ){
				if( D.ENV != 'WWW' ){
					return src + '?' + D.CSS;
				}
				src = src.substr(1);
			}
			if( D.DEV && D.ENV != 'WWW' ){
				return D.PIMG + 'v' + D.CSS + '/' + src;
			}
			var ver = D.versions[ src.split('/')[0] ] || D.CSS;
			return D.PIMG + 'v' + ver + '/' + src;
		};
		var s = path();
		var links = head.getElementsByTagName('link');
		for( var i = 0; i < links.length; ++ i ){
			var link = links[i];
			if( link.type == 'text/css' && link.href.indexOf(s) == 0 ){
				if ( callback && typeof(callback) === 'function' ) {
					callback();
				}
				return;
			}
		}
		var prop = {};
		if( typeof(callback) === 'function' ){
			var ready = false;
			prop.onload = prop.onreadystatechange = function() {
				if ( !ready && ( !this.readyState ||
					this.readyState === 'loaded' || this.readyState === 'complete' ) ) {
					ready = true;
					callback();
					this.onload = null;
					this.onreadystatechange  = null;
				}
			};
		}
		mkE( {
			tag:'link',
			attr:{
				type:'text/css',
				rel:'stylesheet',
				href:s
			},
			prop: prop
		} ).append(head);
	},

	/**
	 * @param {string} src
	 * @param {Function} [callback]
	 * @param {Object} [par]
	 * @returns {boolean}
	 */
	addJS:function(src, callback, par){
		callback = callback || false;
		par = par || {};
		par.context = par.context || document;
		par.async = ( isset(par.async) ? par.async : true );
		var head = getHeadElement(par.context);
		var differentOrigin = false;
		var path = function(){
			if( ( src[0] == '/' && src[1] == '/' ) || src[4] == ':' || src[5] == ':' ){
				return src;
			}
			if( src[0] == '/' ){
				if( D.ENV != 'WWW' ){
					return src + '?' + D.JS;
				}
				src = src.substr(1);
			}
			differentOrigin = !D.DEV;
			if( D.DEV && D.ENV != 'WWW' ){
				return D.PIMG + 'v' + D.JS + '/' + src;
			}
			var ver = D.versions[ src.split('/')[0] ] || D.JS;
			return D.PIMG + 'v' + ver + '/' + src;
		};
		var s = path();
		var scripts = head.getElementsByTagName('script');
		for( var i = 0; i < scripts.length; ++ i ){
			if( !scripts[i].src ){
				continue;
			}
			var ix = scripts[i].src.indexOf(s);
			if( ix == -1 ){
				continue;
			}
			if( scripts[i].src.length == ix + s.length ){
				if( callback && typeof(callback) === 'function' ) {
					callback();
				}
				return false;
			}
		}
		var prop = {};
		if ( typeof(callback) === 'function' ) {
			var ready = false;
			prop.onload = prop.onreadystatechange = function() {
				if ( !ready && ( !this.readyState ||
					this.readyState === 'loaded' || this.readyState === 'complete' ) ) {
					ready = true;
					callback();
					this.onload = null;
					this.onreadystatechange  = null;
				}
			};
		}
		var attr = {
			type: 'text/javascript',
			charset:'utf-8',
			src: s,
			async: par.async
		};
		if( differentOrigin ){
			attr.crossorigin = 'anonymous';
		}
		mkE( {
			tag: 'script',
			attr: attr,
			prop: prop
		} ).append(head);

		return true;
	},

	/**
	 * @param {string} module
	 * @returns {boolean}
	 */
	addLang:function(module){
		return D.addJS( 'lang/' + D.LANG + '/' + module + '.js' );
	},

	ddate:function(t,par){
		par = par || {};
		var showTime = typeof(par.time) != 'undefined' ? par.time : true;

		var d = new Date( t * 1000 );
		var now = new Date( D.TIME * 1000 );
		var yestrday = new Date( ( D.TIME - 86400 ) * 1000 );
		var re;
		if( !par.fullDate && d.getDate() == now.getDate() && d.getMonth() == now.getMonth() && d.getYear() == now.getYear() ){
			re = D.Lang.get('today');
		} else if( !par.fullDate && d.getDate() == yestrday.getDate() && d.getMonth() == yestrday.getMonth() && d.getYear() == yestrday.getYear() ){
			re = D.Lang.get('yesterday');
		} else {
			var mk = 'm' + String( d.getMonth() + 1 );
			if( D.LANG == 'ru' || D.LANG == 'en' ){
				re = D.Lang.get(mk).substr( 0, 3 ) + ' ' + d.getDate();
			} else {
				re = d.getDate() + '. ' + D.Lang.get(mk).substr( 0, 3 );
			}
			if( d.getYear() != now.getYear() ){
				re += ' ' + String( typeof(d.getFullYear) == 'function' ? d.getFullYear() : d.getYear() + 1900 );
			}

		}
		if (showTime) {
			var h = String( d.getHours() );
			var m = String( d.getMinutes() );
			var time = ( h.length == 1 ? '0' + h : h ) + ':' + ( m.length == 1 ? '0' + m : m );
			if( par.onlyTime ){
				return time;
			}
			re += ' ' + time;
		}
		return re;
	},

	ddate2:function(t){
		var $dt = D.TIME - t;
		if( $dt < 10 ){
			return D.Lang.get( 'tikko', 'xGlobal' );
		} else if( $dt < 60 ){
			return D.Lang.get( 'x_sec_ago', 'xGlobal' ).replace( '%s', $dt );
		} else if( $dt < 3570 ){
			return D.Lang.get( 'x_min_ago', 'xGlobal' ).replace('%s', Math.round( $dt / 60 ) );
		}
		return this.ddate(t);
	},

	closureObject:function( $this, obj ){
		var re = {};
		for( var k in obj ){
			var v = obj[k];
			if( typeof v == 'function' ){
				re[k] = D.closure( $this, v );
				continue;
			}
			re[k] = v;
		}
		return re;
	},

	/**
	 * @param {Node} node
	 * @param {Node} [scrollParent]
	 * @param {Number} [offset]
	 */
	scrollIntoView:function(node, scrollParent, offset){
		var top;
		if( !isset(offset) ){
			offset = 70;
		}
		if( scrollParent ){
			top = D.position( node, scrollParent ).top - offset;
			$( scrollParent ).animate( {
				scrollTop:top
			} );
		}else if( InfoBox.opened ){
			// timeout - scroll animācija
			setTimeout( function(){
				if( !InfoBox.opened ){
					return;
				}
				var top = D.position( node, InfoBox.node ).top - offset;
				$( InfoBox.node ).animate( {
					scrollTop:top
				} );
			}, 300 );
			return;
		}
		top = D.position(node).top - offset;
		$('html, body').animate( {
			scrollTop:top
		} );
	},

	/**
	 * @param {Node} node
	 */
	scrollIntoViewMiddle:function(node){
		var sh = $(window).height();
		if( node.offsetHeight > sh ){
			return D.scrollIntoView(node);
		}
		var pos = D.position(node);
		var top = pos.top - ( sh - node.offsetHeight ) / 2;
		if( top < 0 ){
			return;
		}
		$('html,body').animate( {
			scrollTop:top
		} );
	},

	/**
	 * @param {Node} node
	 * @param {number} bottom
	 */
	scrollIntoViewBottom:function( node, bottom ){
		var pos = D.position(node);
		var top = pos.top - $(window).height() + bottom + node.offsetHeight;
		if( top < 0 ){
			top = 0;
		}
		$('html,body').animate( {
			scrollTop:top
		} );
	},

	pb:function( name, par ){
		D.onLoad( 'services', function(){
			D.services.pb( name, par );
		} );
		return false;
	},

	rootDomain:function(url){
		var a = url;
		try{
			if( url.nodeType != Node.ELEMENT_NODE ){
				a = mkE( {
					tag:'a',
					href:url
				} );
			}
			if( a.host.match( /^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$/ ) ){
				return a.host;
			}
			var parts = a.host.split('.');
			if( !parts[1] ){
				return a.host
			}
			parts.splice( 0, parts.length - 2 );
			return parts.join('.');
		}	catch(e){
			D.console.error(e);
		}
		return '';
	},

	escapeRegExp: function(str){
		var find = [
			'-',
			'[',
			']',
			'/',
			'{',
			'}',
			'(',
			')',
			'*',
			'+',
			'?',
			'.',
			'\\',
			'^',
			'$',
			'|'
		];
		str = str.replace(RegExp('[' + find.join('\\') + ']', 'g'), "\\$&");
		return str;
	},

	RegExp: function(str, flags){
		str = D.escapeRegExp(str);
		return new RegExp(str, flags);
	},

	/**
	 * @param {Node} node
	 * @param {RegExp} pattern
	 * @param {function} callback
	 * @param {Object} [par]
	 */
	replaceWithNode:function( node, pattern, callback, par ){
		par = par || {};
		if( !pattern.global ){
			D.console.error( pattern, ' require global RegExp' );
			return;
		}
		if( node.nodeType == Node.ELEMENT_NODE ){
			var childs = [];
			for( var i = 0; i < node.childNodes.length; ++ i ){
				childs.push( node.childNodes[i] );
			}
			for( var i = 0; i < childs.length; ++ i ){
				if( childs[i].nodeType == Node.ELEMENT_NODE && par.ignoreLinks && childs[i].tagName == 'A' ){
					continue;
				}
				this.replaceWithNode( childs[i], pattern, callback, par );
			}
			return;
		}
		if( node.nodeType != Node.TEXT_NODE ){
			return;
		}

		var match = false;
		var text = node.nodeValue;
		pattern.lastIndex = 0;
		var ta = [];
		var start = 0;
		var m;
		while( ( m = pattern.exec(text) ) !== null ){
			var sub = text.substr( start, pattern.lastIndex - start - m[0].length );
			ta.push(sub);
			start = pattern.lastIndex;
			ta.push( callback(m) );
			match = true;
		}
		var sub = text.substr( start, text.length - start );
		ta.push(sub);
		if(!match){
			return;
		}
		for( var i = 0; i < ta.length; ++ i ){
			var v = ta[i];
			if(!v){
				continue;
			}
			this._replaceInsertBefore(v, node);
		}
		removeNode(node);
	},

	_replaceInsertBefore: function(el, before){
		if( typeof el == 'string' ){
			var textNode = document.createTextNode(el);
			D.insertBefore(textNode, before);
			return;
		}
		if( is_array(el) ){
			for( var i = 0, l = el.length; i < l; i++ ){
				var v = el[i];
				if( !v ){
					continue;
				}
				this._replaceInsertBefore(v, before);
			}
			return;
		}
		D.insertBefore(el, before);
	},

	replaceCommentsWithNode:function( node, callback ){
		for( var k in node.childNodes ){
			var child = node.childNodes[k];
			if( child.nodeType == Node.ELEMENT_NODE ){
				this.replaceCommentsWithNode(child, callback);
				continue;
			}
			if( child.nodeType != Node.COMMENT_NODE || !child.data ){
				continue;
			}
			var newNode = callback( child.data );
			if(!newNode){
				continue;
			}
			D.insertBefore( newNode, child );
			removeNode(child);
		}
	},

	/**
	 * @param {Node} node
	 * @param {string} src
	 */
	bgImage:function( node, src ){
		node.style.backgroundImage = src ? "url('" + src + "')" : '';
	},

	defaults:function( obj1, obj2 ){
		if( typeof obj1 != 'object' ){
			return;
		}
		if( typeof obj2 != 'object' ){
			return;
		}
		for( var k in obj2 ){
			var v = obj2[k];
			if( v && v.constructor == Object ){
				if( !obj1[k] ){
					obj1[k] = {};
				}
				D.defaults( obj1[k], v );
				continue;
			}
			if( isset( obj1[k] ) ){
				continue;
			}
			obj1[k] = v;
		}
	},

	doNothing:function(){
	},

	checkDoNothing:function(fn){
		if( !fn || fn == D.doNothing || fn.toString().match(/\{[ \n\r\t]*\}$/im) ){
			return true;
		}
		return false;
	},

	preventBodyScroll : function(scrollableNode){
		$(scrollableNode).on('DOMMouseScroll mousewheel', function(ev) {
			var $this = $(this),
				scrollTop = this.scrollTop,
				scrollHeight = this.scrollHeight,
				height = $this.height(),
				delta = ev.originalEvent.wheelDelta || ev.deltaY,
				up = delta > 0;
			var prevent = function() {
				ev.stopPropagation();
				ev.preventDefault();
				ev.returnValue = false;
				return false;
			};
			if (!up && -delta > scrollHeight - height - scrollTop) {
				$this.scrollTop(scrollHeight);
				return prevent();
			} else if (up && delta > scrollTop) {
				$this.scrollTop(0);
				return prevent();
			}
		});
	},

	translitTable:{"\u0100":"A","\u010c":"C","\u0112":"E","\u0122":"G","\u012a":"I","\u0136":"K","\u013b":"L","\u0145":"N","\u0160":"S","\u016a":"U","\u017d":"Z","\u0101":"a","\u010d":"c","\u0113":"e","\u0123":"g","\u012b":"i","\u0137":"k","\u013c":"l","\u0146":"n","\u0161":"s","\u016b":"u","\u017e":"z","\u0104":"A","\u0118":"E","\u0116":"E","\u012e":"I","\u0172":"U","\u0105":"a","\u0119":"e","\u0117":"e","\u012f":"i","\u0173":"u","\u00c1":"A","\u00c9":"E","\u00d6":"O","\u0150":"O","\u00dc":"U","\u0170":"U","\u00d3":"O","\u00da":"U","\u00cd":"I","\u00e1":"a","\u00e9":"e","\u00f6":"o","\u0151":"o","\u00fc":"u","\u0171":"u","\u00f3":"o","\u00fa":"u","\u00ed":"i","\u0430":"a","\u0431":"b","\u0432":"v","\u0433":"g","\u0434":"d","\u0435":"e","\u0451":"jo","\u0436":"zh","\u0437":"z","\u0438":"i","\u0439":"j","\u043a":"k","\u043b":"l","\u043c":"m","\u043d":"n","\u043e":"o","\u043f":"p","\u0440":"r","\u0441":"s","\u0442":"t","\u0443":"u","\u0444":"f","\u0445":"h","\u0446":"c","\u0447":"ch","\u0448":"sh","\u0449":"sch","\u044a":"j","\u044c":"","\u044b":"i","\u044d":"e","\u044e":"ju","\u044f":"ja","\u0410":"A","\u0411":"B","\u0412":"V","\u0413":"G","\u0414":"D","\u0415":"E","\u0401":"Jo","\u0416":"Zh","\u0417":"Z","\u0418":"I","\u0419":"J","\u041a":"K","\u041b":"L","\u041c":"M","\u041d":"N","\u041e":"O","\u041f":"P","\u0420":"R","\u0421":"S","\u0422":"T","\u0423":"U","\u0424":"F","\u0425":"H","\u0426":"C","\u0427":"Ch","\u0428":"Sh","\u0429":"Sch","\u042a":"J","\u042c":"","\u042b":"I","\u042d":"E","\u042e":"Ju","\u042f":"Ja","\u201e":"\"","\u201d":"\"","\u00e5":"a","\u00e0":"a","\u00e2":"a","\u00e3":"a","\u00e4":"a","\u0111":"dj","\u0107":"c","\u00e6":"a","\u00e7":"c","\u00e8":"e","\u00ea":"e","\u00eb":"e","\u00ec":"i","\u00ee":"i","\u00ef":"i","\u00f0":"o","\u00f1":"n","\u00f2":"o","\u00f4":"o","\u00f5":"o","\u00f8":"o","\u00f9":"u","\u00fb":"u","\u00fd":"y","\u00fe":"b","\u00ff":"y","\u0154":"R","\u0155":"r","\u00c5":"A","\u00c0":"A","\u00c2":"A","\u00c4":"A","\u0110":"Dj","\u0106":"C","\u00c6":"A","\u00c7":"C","\u00c8":"E","\u00ca":"E","\u00cb":"E","\u00cc":"I","\u00ce":"I","\u00cf":"I","\u00d1":"N","\u00d2":"O","\u00d4":"O","\u00d5":"O","\u00d8":"O","\u00d9":"U","\u00db":"U","\u00dd":"Y","\u00df":"Ss"},

	translit:function(text){
		var c, re = '';
		for( var i = 0; i < text.length; i ++ ){
			c = text.substr( i, 1 );
			if( this.translitTable[c] ){
				re += this.translitTable[c]
			} else if( c.charCodeAt(0) < 127 ){
				re += c;
			}
		}
		return re;
	},

	extIcon:function(ext){
		ext = ext.toLowerCase();
		var a = ext.split('.');
		if(a[1]){
			ext = a[ a.length - 1 ];
		}
		var fn = 'unknown.png';
		switch(ext){
			case 'doc':
			case 'docx':
			case 'txt':
			case 'rtf':
				fn = 'text.png';
				break;
			case 'csv':
			case 'xls':
			case 'xlsx':
				fn = 'xls.png';
				break;
			case 'ppt':
			case 'pptx':
				fn = 'ppt.png';
				break;
			case 'exe':
			case 'bat':
			case 'sh':
			case 'com':
			case 'php':
			case 'js':
				fn = 'app.png';
				break;
			case 'pdf':
				fn = 'pdf.png';
				break;
			case 'avi':
			case 'mov':
			case 'mp4':
			case 'mpeg':
			case 'wmv':
				fn = 'video.png';
				break;
			case 'wav':
			case 'mp3':
			case 'ogg':
			case 'wma':
				fn = 'audio.png';
				break;
			case 'jpg':
			case 'png':
			case 'gif':
			case 'psd':
			case 'bmp':
			case 'htm':
			case 'html':
			case 'tif':
				fn = 'image.png';
				break;
			case 'rar':
			case 'zip':
			case 'gzip':
			case '7z':
				fn = 'archive.png';
				break;
		}
		return D.PIMG + 'i/ext/' + fn;
	},

	fileSize:function(size){
		if( size < 1024 ){
			return String(size) + ' B';
		}
		if( size < 1048576 ){
			return String( Math.round( size / 1024 * 10 ) / 10 )  + ' KB';
		}
		return String( Math.round( size / 1048576 * 10 ) / 10 ) + ' MB';
	},

	bounceStats:function(){
		$('#menu td a').each( function(){
			if( this._bounceStats ){
				return;
			}
			this._bounceStats = true;
			this.onmouseup = function(){
				var rel = this.getAttribute('rel');
				if(!rel){
					return;
				}
				D.store.set( 'fromBadge', {
					t:D.TIME,
					rel:rel,
					badge:( $(this).find('.badge.on').length != 0 )
				} );
			};
		} );
		var data = D.store.get('fromBadge');
		D.store.remove('fromBadge');
		if( !data || D.TIME - data.t > 10 ){
			return;
		}
		new RPC('/stats/app.php').send( 'menuBadgeClick', data );
		if( data.badge ){
			D.Cookie.set( 'fromBadge', [ D.TIME, data.rel ].join(','), D.TIME + 10, '/' );
			$('#container').click( function(){
				D.Cookie.erase('fromBadge');
			} );
		}
	}
};

D.JSON = window._DJSON;

D.initMouse();

var rq = D.rq = function( url, element_id, par ){
	if( typeof par != 'object' ){
		par = {};
	}
	if( typeof par.hash == 'undefined' ){
		par.hash = true;
	}
	if( typeof element_id == 'object' ){
		var node = element_id;
	} else {
		var node = document.getElementById( element_id );
	}
	var position, overlay;
	if( node ){
		if( par.overlay ){
			var loadingPar = par.loadingText ? { loadingText: par.loadingText } : {};
			if( typeof par.overlay == 'string' && $( par.overlay, node )[0] ){ // ja nepieciešams overlay citam elementam
				D.loadingOverlay( $( par.overlay, node )[0], loadingPar );
			} else {
				D.loadingOverlay( node, loadingPar );
			}
		} else {
			if( ! par.withoutLoading ){
				node.innerHTML = '<div class="rqLoading"></div>';
			}
		}
		if( par.scrollIntoView ){
			D.scrollIntoView(node);
		}
	}
	var _tmpNode = mkE( {
		tag:'div',
		style:{
			display:'none'
		}
	} ).append( document.body );
	var inBody = $(node).parents('body').length > 0;
	var success = function(html){
		if( ! node ){
			D.console.error( 'rq - no element' );
			return false;
		}
		if( position ){
			node.style.position = position;
		}
		//html = styleFromHTML(html);
		if( par.replace ){
			if( ! node.parentNode ){
				return;
			}
			var newNode = mkE( {
				tag:node.parentNode.tagName,
				prop:{
					innerHTML:html
				}
			} );
			var nodeChilds = newNode.childNodes;
			var nodeChildsArr = [];
			for( var i = 0; i < nodeChilds.length; i ++ ){
				nodeChildsArr.push( nodeChilds[ i ] );
			}
			for( var k in nodeChildsArr ){
				D.insertBefore( nodeChildsArr[ k ], node );
			}
			removeNode(node);
		} else if(par.append){
			$(node).append(html);
		} else {
			if(inBody){
				node.innerHTML = html;
			} else {
				_tmpNode.innerHTML = html;
			}
		}
		var get = new Get(url);
		if( par.hash && !empty(get._) /*&& D.browser.name == 'Firefox'*/ ){
			D.setUrlHash( ( empty( par.hashDir ) ? '' : par.hashDir ) + '?' + get.str(), {
				type:'rq',
				url:url,
				el:element_id,
				par:par
			} );
		}
		if(!par.append){
			evalScriptHTML(html);
			if( !par.replace && !inBody ){
				clearNode(node);
				while( _tmpNode.firstChild ){
					node.appendChild( _tmpNode.firstChild );
				}
			}
		}
		_tmpNode.remove();
		if( par.onload ){
			par.onload(html);
		}
		if( Draugiem.Inspekt ){
			Draugiem.Inspekt.init();
		}
	};
	var get2 = new Get(url);
	if( par.nonce ){
		get2.addNonce();
	}
	var ajaxPar = {
		url:get2.toUrl(),
		success:success,
		error:function( xhr ){
			if( xhr.status == 403 ){
				var get = new Get();
				//var get2 = new Get(url);
				for( var k in get._ ){
					get2.add( k, get._[k] );
				}
				document.location.href = '?' + get2.str();
				return;
			}
		}
	};
	if ( window.CPM_ADS_SAY_HIGHLIGHT ) {
		ajaxPar.xhrFields = {
			withCredentials: true
		};
	}
	$.ajax( ajaxPar );
	if( D.insertSmiley.opened ){
		D.insertSmiley.close();
	}
	return false;
}; // rq

var Draugiem={
	version:'0.1'
};

/**
 * @type {Function}
 * @param {Object|Node}
 */
D.blink = Draugiem.blink = function( par ){
	if( par.nodeType ){
		par = {
			node:par
		};
	}
	par.type = par.type || 'background';
	par.color1 = par.color1 || '';
	par.color2 = par.color2 || '#ff6600';
	par.sk = par.sk || 2;
  if( par.node.fx_blink ){
	    return;
  }
  var sk = 0;
  par.node.style.background = par.color1;
  par.node.fx_blink = true;
  function blink_(){
    setTimeout( function(){
      switch( par.type ){
	      case 'background':
	        par.node.style.background = par.color2;
	        break;
	      case 'border':
	        par.node.style.borderColor = par.color2;
	        break;
	      case 'color':
	        par.node.style.color = par.color2;
	        break;
	      case 'className':
	        addClassName( par.node, par.className || 'blink' );
	        break;
      }
      setTimeout( function(){
        sk ++;
        switch( par.type ){
		      case 'background':
		        par.node.style.background = par.color1;
		        break;
		      case 'border':
		        par.node.style.borderColor = par.color1;
		        break;
		      case 'color':
		        par.node.style.color = par.color1;
		        break;
		      case 'className':
		        removeClassName( par.node, par.className || 'blink' );
		        break;
	      }
        if( sk < par.sk ){
	        blink_();
        } else{
	          par.node.fx_blink = false;
        }
      }, 100 );
    }, 80 );
  }
  blink_();
}; // function blink


Draugiem.sayExtPost = function( title, url, titlePrefix, text, closeFunction, par ) {
	par = par || {};
	var href = '/say/ext/add.php?title=' + encodeURIComponent(title) +
		'&link=' + encodeURIComponent(url) +
		( titlePrefix ? '&titlePrefix=' + encodeURIComponent(titlePrefix) : '' ) +
		( text ? '&text=' + encodeURIComponent(text) : '' ) +
		( par['picUrl'] ? '&picUrl=' + encodeURIComponent(par['picUrl']) : '' );
	InfoBox.iframe(href, {width: 420, withoutPadding: true, onClose: closeFunction ? closeFunction : ''});
	return false;
};

function evalScripts( par ){
	var bSaf = (navigator.userAgent.indexOf('Safari') != -1);
	var bOpera = (navigator.userAgent.indexOf('Opera') != -1);
	var bMoz = (navigator.appName == 'Netscape');
	var node = par.node;
	/* IE wants it uppercase */
	var st = node.getElementsByTagName('SCRIPT');
	var strExec;
	for( var i = 0; i < st.length; i++ ){
		if ( bSaf ){
			strExec = st[ i ].innerHTML;
			st[ i ].innerHTML = "";
		} else if( bOpera ){
			strExec = st[i].text;
			st[ i ].text = "";
		} else if( bMoz ){
			strExec = st[ i ].textContent;
			st[ i ].textContent = "";
		} else {
			strExec = st[ i ].text;
			st[ i ].text = "";
		}
		try {
			var x = document.createElement( "script" );
			x.type = "text/javascript";
			/* In IE we must use .text! */
			if ( bSaf || bOpera || bMoz )
				x.innerHTML = strExec;
			else x.text = strExec;
			document.getElementsByTagName( "head" )[0].appendChild(x);
		} catch(e) {
			D.console.error( e );
		}
	}
}

function evalScriptHTML( html, $this ){
	var np, p = 0;
	while( ( np = html.indexOf( '<script', p ) ) != -1 ){
		p = html.indexOf( '>', np );
//		html.substr( np, p - np ).replace( /src="([^"]*)/ig, function(){
//			D.addJS( arguments[1] );
//		} );
		np = html.indexOf( '</script>', p );
		if( np == -1 ){
			continue;
		}
		try{
			var text = html.substr( p + 1, np - p -1 );
			if($this){
				var fn = new Function(text);
				fn.call( $this || window );
			} else {
				eval.call( window, text );
			}
		} catch(e){
			D.console.error(e);
			//D.log(text);
		}
	}
}

function styleFromHTML(html){
	var np, p = 0;
	while( ( np = html.indexOf( '<style', p ) ) != -1 ){
		p = html.indexOf( '>', np );
		np = html.indexOf( '</style>', p );
		if( np == -1 ){
			continue;
		}
		try{
			var n = mkE( {
				tag:'style',
				attr:{
					type:'text/css'
				}
			} );
			var style = html.substr( p + 1, np - p -1 );
			if( n.styleSheet ){
				n.styleSheet.cssText = style;
			} else {
				n.appendChild( document.createTextNode(style) );
			}
			var head = getHeadElement();
			n.append( head )
		} catch(e){
			D.console.error(e);
		}
	}
	return html.replace( /<style[^>]*>[^<]*<\/style>/gi, '' );
}

function getStyle(el, prop){
  if( document.defaultView && document.defaultView.getComputedStyle ){
    return document.defaultView.getComputedStyle( el, null )[ prop ];
  } else if ( el.currentStyle ){
    return el.currentStyle[ prop] ;
  } else {
    return el.style[ prop ];
  }
}

D.checkExternal = function( el, exturl ){
	D.checkExternal.rpc = new RPC( '/rq/app.php' );
	var node = document.getElementById( 'Forms_exturl' );
	var url = el.value.replace( /[^A-Za-z0-9\._-]/g, '' ).toLowerCase();
	el.value = url;
	$(node).removeClass('formItemError');
	$(node).removeClass('formItemSuccess');
	if( D.checkExternal.timeout ){
		clearTimeout( D.checkExternal.timeout );
	}
	if( empty(url) ){
		return false;
	}
	var minlen = $(el).attr('minlen');
	D.checkExternal.timeout = setTimeout( function(){
		D.checkExternal.rpc.send(
			'checkExternalUrl',
			{
				url:url,
				exturl:exturl,
				minlen:minlen
			},
			function( re ){
				if (re.error && re.error === 'too short') {
					$('#notAvailableMinLength').show();
					$('#notAvailable, #isAvailable').hide();
				} else if (re.exists) {
					$('#isAvailable, #notAvailableMinLength').hide();
					$('#notAvailable').show();
				}else{
					$('#isAvailable').show();
					$('#notAvailable, #notAvailableMinLength').hide();
				}
				//console.info(node);
			}
		);
	}, 500 );
};


Draugiem.getACFriends = function( v, par ){
	var multiAc = this;
	if( multiAc.param ){ // jaunais AC
		par = multiAc.param;
	}
	if( ! Draugiem.getACFriends.rpc ){
		Draugiem.getACFriends.rpc = new RPC( '/rq/app.php' );
	}
	var time = Draugiem.getACFriends.onGetListTime = new Date().getTime();
	Draugiem.getACFriends.rpc.send(
		multiAc.method || par.method || Draugiem.getACFriends.method,
		{
			v:v,
			groups:par.groups || false,
			gr:par.gr || false,
			sex:par.sex || false,
			data:par.data || false,
			age:par.age || false,
			filter:par.filter || false,
			l:par.l || false,
			extra:par.extra || {}
		},
		function( re ){
			if( Draugiem.getACFriends.onGetListTime > time ){
				return;
			}
			var list = [];
			for( var k in re.gr ){
				list.push( {
					caption:re.gr[ k ].n,
					value:'gr' + re.gr[ k ].i,
					online:true,
					group:true
				} );
			}
			for( var k in re.fr ){
				list.push( {
					caption:re.fr[ k ].n,
					value:re.fr[ k ].i,
					online:re.fr[ k ].o,
					disabled:re.fr[ k ].d || false,
					title:re.fr[ k ].title || false,
					icon:re.fr[ k ].icon || false,
					iconClass:re.fr[ k ].iconClass || false,
					isFriend:re.fr[ k ].isFriend || false
				} );
			}
			multiAc.setList( list );
		}
	);
};
Draugiem.getACFriends.method = 'searchFriends';

D.numberFormat = function( v, round ){
	if( round ){
		v = Math.round( v * Math.pow( 10, round ) ) / Math.pow( 10, round );
		var vs = String( v );
		var vsSplited = vs.split( '.' );
		var re = vsSplited[ 0 ] + '.';
		if( ! vsSplited[ 1 ] ){
			vsSplited[ 1 ] = '';
		}
		re += vsSplited[ 1 ].substr( 0, 2 );
		for( var i = vsSplited[ 1 ].substr( 0, 2 ).length; i < round; i ++ ){
			re += '0';
		}
		v = re;
	} else {
		v = Math.round( v );
	}
	return v;
};

Number.prototype.format = function( round ){
	return D.numberFormat( this, round );
};

D.votePic = function(id, nonce) {
	rq('/rate/rq/ajax_vote.php?pid=' + id + '&' + nonce,'ratePid' + id,{withoutLoading:true,hash:false});
	return false;
};

/**
 * @param par
 * @returns {{sp:D.smallPopUp,node:Node,append:function}}
 */
D.insertSmiley = function(par) {
	if( !par.allowPropagation ){
		D.stopPropagation();
	}
	if (!par) {
		par = {};
	}
	D.insertSmiley.closeOnClick = par.closeOnClick || false;
	if( D.insertSmiley._sp ){
		if( !D.insertSmiley._sp.opened || D.insertSmiley._parent != par.parent ){
			delete D.insertSmiley._sp;
		} else {
			D.insertSmiley.close();
			return false;
		}
	}
	par.width = par.width || 303;
	par.cols = par.cols || 8;
	par.onclick = par.onclick || function(){};
	var tbody, re, inp;
	D.insertSmiley._parent = par.parent || par.opener || null;
	var sp = this.sp = D.insertSmiley._sp = new D.smallPopUp();
	sp.open(
		false,
		{
			title: par.title || D.Lang.get( 'Insert smiley', 'xGlobal' ),
			width: par.width,
			color: 'White',
			bodyClose:true,
			parent:par.parent
		}
	);
	var emojiTable = this._insertSmileyTable(par);//.append( sp.content );
	for (var j in emojiTable) {
		emojiTable[j].append(sp.content);
	}
	re = {
		sp:sp,
		node:D.insertSmiley.node,
		append:function( el ){
		}
	};
	sp.move();
	if( par.arrow ){
		sp.arrowPosition( par.arrow.left, par.arrow.top );
	}
	return re;
};

D._insertSmileyTable = function(par) {
	D.insertSmiley._par = par;
	var content, footer;
	var re = [
		D.insertSmiley._wrap = mkE({
			tag: 'div',
			className: 'emoji_wrap',
			style: {
				height: (par.height || 270 ) + 'px',
				overflow: 'auto'
			},
			els: [
				D.insertSmiley._content = content = mkE({
					tag: 'div',
					className: 'emoji_content',
					style: {
						width: (34 * par.cols) + 'px'
					}
				})
			]
		}),
		footer = mkE({
			tag: 'div',
			className: 'emoji_footer'
		})
	];
	D.emojiTabs = [];
	for (var i in twemoji.config.tabs) {
		var tab = twemoji.config.tabs[i];
		var tb = mkE({
			tag: 'div',
			className: 'emoji_tab_item',
			els: [
				{
					tag: 'div',
					className: tab.className
				}
			],
			prop: {
				title: D.Lang.get(tab.title)
			},
			onclick: D.closure(this, function(id) {
				D.insertSmiley.showTab(id);
			}, tab.id)
		}).append(footer);
		D.emojiTabs[tab.id] = tb;
	}
	D.insertSmiley.showTab();
	return re;
};

D.insertSmiley.showTab = function(tab) {
	if (this.tab && D.emojiTabs[this.tab]) {
		removeClassName(D.emojiTabs[this.tab], 'active');
	}
	this.tab = tab;
	if (!this.tab) {
		this.tab = 10;
	}
	if (D.emojiTabs[this.tab]) {
		addClassName(D.emojiTabs[this.tab], 'active');
	}
	clearNode(D.insertSmiley._content);
	D.insertSmiley._wrap.scrollTop = 0;
	var i, smiley;
	if (this.tab == 1) {
		twemoji.config.tabItems[1] = twemoji.getRecentlyUsed();
	}
	if (this.tab == 10) {
		for( var k in D.smileysTab ){
			smiley = D.smileysTab[ k ];
			var nd = mkE( {
				tag:'div',
				className:'emoji_item smiley_item',
				prop: {
					_dr: smiley,
					// _drVal: smiley,
					_drPar: D.insertSmiley._par,
					_drSrc: D.PIMG + 'i/smilies/v' + D.smileysV + '/' + D.smileys[ smiley ],
					onclick: D.insertSmiley.onclick
				},
				els:[
					mkE( {
						tag:'img',
						className:'smiley',
						prop:{
							src:D.PIMG + 'i/smilies/v' + D.smileysV + '/' + D.smileys[ smiley ],
							alt:smiley
						}
					} )
				]
			} ).append( D.insertSmiley._content );
			if (twemoji.config.doubleSmiley[smiley]) {
				addClassName(nd, 'wide');
			}
		}
		return;
	}
	if (twemoji.config.tabItems[this.tab]) {
		for (var j in twemoji.config.tabItems[this.tab]) {
			var emoji = twemoji.config.tabItems[this.tab][j];
			if (twemoji.config.emoji[emoji]) {
				var emojiNode = mkE({
					tag: 'div',
					className: 'emoji_item',
					text: twemoji.config.emoji[emoji][0],
					prop: {
						_dr: twemoji.config.emoji[emoji][0],
						_drVal: emoji,
						_drSrc: D.Emoji.base + D.Emoji.size + '/' + emoji + D.Emoji.ext,
						_drPar: D.insertSmiley._par,
						onclick: D.insertSmiley.onclick
					}
				}).append(D.insertSmiley._content);
				twemoji.parse(emojiNode);
			}
		}
		mkE({
			tag: 'div',
			className: 'clear',
			id: 'emoji_tab_sep_' + this.tab
		}).append(D.insertSmiley._content);
	}
	if (!this._init) {
		this._init = true;
		setTimeout(D.closure(this, function() {
			var preload = mkE({
				tag: 'div',
				style: {
					display: 'none'
				}
			}).append(D.insertSmiley._content);
			var text = '';
			for (var i in twemoji.config.tabItems) {
				if (i == this.tab || i == 1) {
					continue;
				}
				var count = 0;
				for (var y in twemoji.config.tabItems[i]) {
					var preEmoji = twemoji.config.tabItems[i][y];
					if (twemoji.config.emoji[preEmoji]) {
						count++;
							text += twemoji.config.emoji[preEmoji][0];
						var img = new Image();
						img.src = D.Emoji.base + D.Emoji.size + '/' + preEmoji + D.Emoji.ext;
						preload.appendChild(img);
					}
					if (count >= 64) {
						break;
					}
				}
			}
		}), 50);
	}
};

D.insertSmiley.onclick = function(){
	if (D.insertSmiley.closeOnClick) {
		D.insertSmiley.close();
	}
	if (this._drVal) {
		twemoji.addRecentlyUsed( this._drVal );
	}
	var src = this._drSrc;
	if( this.firstElementChild && this.firstElementChild.src ) {
		src = this.firstElementChild.src;
	}
	this._drPar.onclick( this._dr, src );
};

D.insertSmiley.close = function() {
	if( !D.insertSmiley._sp ){
		return false;
	}
	D.insertSmiley._sp.close();
	delete D.insertSmiley._sp;
	return true;
};

/**
 * @param {D.ConfirmPar|object} par
 */
D.Confirm = function( par ){
	par = par || {};
	var onAccept = function(){
		if( par.onAccept ){
			par.onAccept();
			return;
		}
		D.Confirm.close();
	};
	var onDecline = function(){
		if( par.onDecline ){
			par.onDecline();
			return;
		}
		D.Confirm.close();
	};
	D.Confirm.bgNode = mkE({
		tag: 'div',
		className: 'confirmBoxBg'
	});
	D.Confirm.node = mkE({
		tag: 'div',
		className: 'confirmBox radius3',
		els: [
			{
				tag: 'a',
				className: 'close radius3',
				prop: {
					onclick: function(){
						D.Confirm.close();
					}
				}
			},
			{
				tag: 'h2',
				text: par.text || ''
			},
			{
				tag: 'div',
				className: 'controls',
				els: [
					{
						tag: 'a',
						text: par.acceptText || D.Lang.get('ok'),
						className: 'accept radius3',
						prop: {
							onclick: function(){
								onAccept();
							}
						}
					},
					{
						tag: 'a',
						text: par.declineText || D.Lang.get('Cancel'),
						className: 'decline radius3',
						prop: {
							onclick: function(){
								onDecline();
							}
						}
					},
					T.clear()
				]
			}
		]
	});
	D.Confirm.bgNode.append(document.body);
	D.Confirm.node.append(document.body);
	D.Confirm.node.style.marginTop = D.Confirm.node.offsetHeight / -2 + 'px';
	if( D.GalleryFS && D.GalleryFS.opened ){
		D.Confirm.bgNode.style.zIndex = InfoBox.zIndex;
		D.Confirm.node.style.zIndex = InfoBox.zIndex;
	}
};
D.Confirm.close = function(){
	if( !D.Confirm.node ){
		return false;
	}
	D.Confirm.node.remove();
	delete D.Confirm.node;
	D.Confirm.bgNode.remove();
	delete D.Confirm.bgNode;
	return true;
};
D.Confirm.success = function(text, hide){
	text = text || '';
	hide = hide || 3000;
	var close = function(){
		if( D.Confirm.closeSuccess ){
			clearTimeout(D.Confirm.closeSuccess);
		}
		if( !D.Confirm.successNode ) {
			return;
		}
		D.Confirm.successNode.style.opacity = 0;
		setTimeout(function(){
			D.Confirm.successNode.remove();
			delete D.Confirm.successNode;
		}, 250);
	};
	if( D.Confirm.successNode ){
		D.Confirm.successNode.remove();
		clearTimeout(D.Confirm.closeSuccess);
	}
	D.Confirm.successNode = mkE({
		tag: 'div',
		className: 'confirmBoxSuccess radius3',
		els: [
			{
				tag: 'a',
				className: 'close radius3',
				prop: {
					onclick: function(){
						close();
					}
				}
			},
			{
				tag: 'h2',
				text: text
			}
		],
		style: {
			zIndex: Math.max(1002, InfoBox ? InfoBox.zIndex + 1 : 0)
		}
	});
	D.Confirm.successNode.append(document.body);
	D.Confirm.successNode.style.marginTop = D.Confirm.successNode.offsetHeight / -2 + 'px';
	D.Confirm.closeSuccess = setTimeout(close, hide);
};

D.ConfirmPar = function(){};
D.ConfirmPar.prototype.text = '';
D.ConfirmPar.prototype.acceptText = '';
D.ConfirmPar.prototype.declineText = '';
D.ConfirmPar.prototype.onAccept = null;
D.ConfirmPar.prototype.onDecline = null;

D.doLogout = function(uid) {
	if ( typeof D.DesktopNotify !== 'undefined' ) {
		D.DesktopNotify.unsubscribe(false);
	}

	window.location.href = '/logout.php?id=' + uid;
};

D.focusSmallLogin = function( par ) {
	par = par || {};
	var tourText = D.Lang.get('small_login_form_text');
	if ( par.text ) {
		tourText = par.text;
	}
	var withoutOverlay = par.withoutOverlay ? par.withoutOverlay : false;
	setTimeout(function() {
		T.tour.crop($('table', '#smallLoginForm'), {
			onclickClose: true,
			withoutBG: true,
			tourText: tourText,
			withoutOverlay: withoutOverlay
		});
		var emailField = document.getElementById('email');
		if ( emailField ) {
			document.getElementById('email').focus();
		}
	}, 10);
};
// --- d.js ---

// +++ loader.js +++
D.libs = {

	Gallery: function(){
		var re = {
			js:'gallery/js/gallery.rel.js',
			css:'gallery/gallery.css',
			lang:'xGallery'
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'gallery/js/_gallery.js.php' ];
		} else {
			re.js = [ 'gallery/js/gallery.rel.js' ];
		}
		return re;
	},

	GalleryFS:{
		css:[
			'gallery/gallery_fs.css',
			'gallery/gallery_stats.css'
		],
		js:[
			'gallery/js/gallery_fs.js'
		],
		lib:[
			'Gallery',
			'Comments',
			'ClipboardJS'
		],
		lang:'xGal',
		api:[
			'gallery',
			'gallery.stats',
			'places',
			'miniads'
		]
	},

	Comments:{
		js:'js/comments.js',
		css:'css/com.css',
		api:[
			'comments',
			'gallery'
		]
	},

	msg:function(){
		var re = {
			js:'messages/_messages.js.php',
			css:'messages/messages.css',
			lang:'xMsg'
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'messages/_messages.js.php' ];
		} else {
			re.js = [ 'messages/messages.rel.js' ];
		}
		return re;
	},

	chat:function(){
		return this.msg();
	},

	multiAC:{
		js:'js/multi_ac.js',
		css:'css/multi_ac.css'
	},

	Upload:{
		js:'js/uploader/uploader.js',
		css:'js/uploader/uploader.css'
	},

	SelectArea:{
		js:'js/selectarea.js',
		css:'css/selectarea.css'
	},

	FriendList:{
		js:'js/friendlist.js',
		css:'css/friendlist.css'
	},

	GalleryApi:{
		js:'gallery/js/gallery_api.js',
		css:'gallery/gallery.css',
		lang:'xGal'
	},

	GalleryUpl: function() {
		var re = {
			js:'gallery/js/gallery_upl.rel.js',
			css:[
				'gallery/gallery.css',
				'gallery/gallery_upl.css'
			],
			lang:'xGal'
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'gallery/js/_gallery_upl.js.php' ];
		} else {
			re.js = [ 'gallery/js/gallery_upl.rel.js' ];
		}
		return re;
	},


	Drag:'js/drag.js',

	Textarea:{
		js:'js/textarea.js',
		css:'css/textarea.css'
	},

	GetSwfVer:'js/AC_OETags.js',

	Gifts:function(){
		var re = {
			js:'gifts/js/_gifts.js.php',
			css:'gifts/gifts.css',
			lang:'xSmsGifts',
			api: [
				'gifts'
			]
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'gifts/js/_gifts.js.php' ];
		} else {
			re.js = [ 'gifts/js/gifts.rel.js' ];
		}
		return re;
	},

	services:{
		js:'services/services.js',
		css:'services/services.css',
		lang:'xServices2'
	},

	CKEDITOR:'js/ckeditor/ckeditor.js',

	TEditor:function(){
		var re = {
			js: 'js/teditor/teditor.rel.js',
			css: 'css/teditor.css',
			lib: 'CKEDITOR',
			lang: 'xPosts'
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'js/teditor/_teditor.js.php' ];
		} else {
			re.js = [ 'js/teditor/teditor.rel.js' ];
		}
		return re;
	},

	Raphael:'js/raphael/raphael-min.js',

	DPoll:'ads/dpolls/dpolls.js',

	Skins: function() {
		var re = {
			js: 'skins/js/skins.rel.js'
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'skins/js/_skins.js.php' ];
		} else {
			re.js = [ 'skins/js/skins.rel.js' ];
		}
		return re;
	},

	DatePicker:{
		js:'js/datepicker.js',
		css:'css/datepicker.css'
	},

	Inviter:{
		js:'js/inviter.js',
		css:'css/inviter.css'
	},

	Kino:{
		js:'kino/assets/kino.js',
		css:'kino/assets/kino.css',
		lang:'xKino'
	},

	Biz:{
		js:'lapas/js/business.js',
		lang:'xBiz'
	},

	Stickers:{
		js:'stikeri/res/stickers.js',
		css:'stikeri/res/stickers.css',
		lang:'xStickers'
	},

	AprilGifts:{
		js:'temp/gifts/gifts.js',
		css:'temp/gifts/gifts.css'
	},

	JubileeGifts:{
		js:'gifts/js/jubilee.js',
		css:'gifts/jubilee.css'
	},

	FabricJS:'js/fabricjs-1.5/fabric.min.js',

	Farbtastic:{
		js:'js/farbtastic/farbtastic.js',
		css:'js/farbtastic/farbtastic.css'
	},

	Cropper:{
		js:'ads/mini/js/cropper.js',
		css:'ads/mini/assets/cropper.css'
	},

	ClipboardJS:'js/clipboard/clipboard.min.js',

	Charts:function(){
		var re = {
			js:'js/charts/_charts.js.php'
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'js/charts/_charts.js.php' ];
		} else {
			re.js = [ 'js/charts/charts.rel.js' ];
		}
		return re;
	},

	DApi: {
		js: 'api/api.js'
	},

	blogs:function(){
		var re = {
			css:'blogs/blogs.css',
			lang:'xBlogs',
			api:[
				'blogs',
				'gallery',
				'comments'
			],
			lib:'ClipboardJS'
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'blogs/js/_blogs.js.php' ];
		} else {
			re.js = [ 'blogs/js/blogs.rel.js' ];
		}
		return re;
	},
	
	groups:function(){
		var re = {
			js: 'groups/_groups.js.php',
			css: 'groups/css/groups.css',
			lang: 'xGroupsNew',
			api:['say', 'location']
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'groups/_groups.js.php' ];
		} else {
			re.js = [ 'groups/groups.rel.js' ];
		}
		return re;
	},

	events:function(){
		var re = {
			css: [
				'events/events.css',
				'messages/messages.css',
				'/events/css/editor.css'
			],
			lang: [
				'xPortal',
				'xPasakumi',
				'xMsg',
				'xBiz',
				'xGal'
			],
			api:[
				'event',
				'gallery',
				'location',
				'places',
				'msg',
				'kino'
			],
			js: [
				'messages/messages.js',
				'events/js/editor.js'
			]
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js.push('events/js/_events.js.php');
		} else {
			re.js.push('events/js/events.rel.js');
		}
		return re;
	},

	PYMKBlock:function(){
		return {
			js: 'js/pymk_block.js',
			css: 'css/pymk_block.css'
		};
	},

	InvitationsMain:function(){
		return {
			js: 'js/invitations_main.js',
			css: 'css/invitations_main.css',
			api: [
				'invitations',
				'friends'
			],
			lang: 'xInvite'
		};
	},

	CalendarMain:function(){
		return {
			js: 'js/calendar_main.js',
			css: 'css/calendar_main.css',
			api: [
				'calendar',
				'today.posts'
			],
			lang: 'xCalendar'
		};
	},

	ProfileCover:function(){
		return {
			js: 'js/profile_cover.js',
			api: [
				'gallery'
			],
			lib: [
				'Upload'
			],
			lang: 'xBiz'
		}
	},

	ProfileNews:function(){
		return {
			js: 'js/profile_news.js',
			css: 'css/profile_news.css',
			api: 'news'
		};
	},

	AdsTargeting: {
		js: 'js/rkl/targeting.js',
		css: [
			'css/rkl_targeting.css',
			'say/highlight/highlight.css'
		],
		api: 'rkl.targeting',
		lang: [
			'xSayHighlight',
			'xMiniAds'
		]
	},

	ProfileActivities:function(){
		return {
			js: 'js/profile_activities.js',
			css: 'css/profile_activities.css',
			lang: 'xEventServer',
			api: 'profile.activities'
		};
	},

	MusicPlayer:function () {
		return {
			js: 'music/js/html5player.js',
			css: 'music/css/html5player.css',
			api: 'music'
		};
	},

	ProfilePic:function () {
		return {
			js: [
				'/js/profile_pic.js'
			],
			css: [
				'/css/profile_pic.css'
			],
			api: [
				'pic'
			]
		};
	},

	GoogleCharts: function (  ) {
		return {
			js: [
				'/js/google_charts.js'
			]
		};
	},

	EventsEditor: function (  ) {
		return {
			js: [
				'/events/js/editor.js'
			],
			css: [
				'/events/css/editor.css'
			],
			lang: ['xPasakumi'],
			api: [
				'event',
				'places',
				'gallery',
				'kino',
				'location'
			]
		};
	},

	PicEditor:function () {
		return {
			js: [
				'/js/pic_editor.js'
			],
			css: [
				'/css/pic_editor.css'
			],
			api: [
				'pic'
			]
		};
	},

	lottie:'js/lottie/lottie.min.js',

	kitties: function(){
		var re = {
			js: 'kitties/_kitties.js.php',
			css: 'kitties/kitties.css',
			lang: 'xKitties',
			lib: [
				'lottie'
			]
		};
		if( D.DEV || D.DEV_NAME == 'tests' ){
			re.js = [ 'kitties/_kitties.js.php' ];
		} else {
			re.js = [ 'kitties/kitties.rel.js' ];
		}
		return re;
	},

	zinas: function () {
		var re = {
			css: [
				'zinas/zinas.css'
			],
			lang: [
				'xPortal', 'xZinas'
			],
			api: [
				'zinas', 'comments', 'like', 'location'
			],
			js: []
		};
		if( D.DEV || D.DEV_NAME == 'tests' ) {
			re.js.push('zinas/js/_zinas.js.php');
		} else {
			re.js.push('zinas/js/zinas.rel.js');
		}
		return re;
	},

	leaflet: function () {
		var re = {
			css: [
				'/js/leaflet/leaflet.css'
			],
			js: []
		};
		if( D.DEV || D.DEV_NAME === 'tests' ) {
			re.js.push('js/leaflet/_leaflet.js.php');
		} else {
			re.js.push('js/leaflet/leaflet.rel.js');
		}
		return re;
	},

	radio: function () {
		var re = {
			css: [
				'radio/radio.css'
			],
			lang: [
				'xRadio'
			],
			api: [
				'radio', 'like'
			],
			js: []
		};
		if( D.DEV || D.DEV_NAME == 'tests' ) {
			re.js.push('radio/js/_radio.js.php');
		} else {
			re.js.push('radio/js/radio.rel.js');
		}
		return re;
	}
};

D._onLoadNorm = function(name){
	if( !this.libs[name] ){
		return null;
	}
	var v = this.libs[name];
	var re = {
		lib:[],
		js:[],
		css:[],
		lang:[],
		api:[]
	};
	if( v instanceof Function ){
		v = v.call( this.libs );
	}
	if( typeof v == 'string' ){
		re.js = [v];
		return re;
	}
	if( !v instanceof Object ){
		return re;
	}
	var kws = [ 'js', 'css', 'lang', 'api', 'lib' ];
	for( var k in kws ){
		var kw = kws[k];
		if( typeof v[kw] == 'string' ){
			re[kw] = [ v[kw] ];
		} else if( v[kw] instanceof Array ){
			re[kw] = v[kw];
		}
	}
	return re;
};

D._onLoadCheck = function(name){
	var v = this._onLoadNorm(name);
	if(v){
		//D.log( 'load lib:', name, v );
		var k;
		for( k in v.css ){
			D.addCSS( v.css[k] );
			//D.log( 'add CSS', v.css[k] );
		}
		for( k in v.js ){
			D.addJS( v.js[k], function(){
				setTimeout( function(){ D.loaded(); }, 1 );
			} );
			//D.log( 'add JS:', v.js[k] );
		}
		for( k in v.lang ){
			D.addLang( v.lang[k] );
			//D.log( 'add Lang:', v.lang[k] );
		}
		return;
	}
	if( name.substr( 0, 3 ) == 'DR.' ){
		var parts = name.toLowerCase().split('.');
		parts.shift();
		var url = 'api/' + parts.join('/') + '.js';
		D.addJS(url);
		//D.log( 'load API:', url );
	}
	if( name.match(/^x[A-Z][A-Za-z0-9]*$/) ){
		D.addLang(name);
		//D.log( 'load lang:', name );
	}
};

/**
 * @param {String} name
 * @private
 */
D._onLoadIs = function(name){
	if( name.indexOf('.') > 0 ){
		try{
			return !!eval(name);
		} catch(e){
		}
		return false;
	}
	return !!( D[name] || window[name] );
};

D._onLoadItem = function(item){
	for( var name in item.libs ){
		if( item.libs[name] == 2 ){
			continue;
		}
		if( this._onLoadIs(name) ){
			item.libs[name] = 2;
			continue;
		}
		if( item.libs[name] == 1 ){ // in progress
			//D.log( 'in progress', name );
			return false;
		}
		item.libs[name] = 1;
		//D.log( 'check', name );
		this._onLoadCheck(name);
		return false;
	}
	try{
		item.cb();
	} catch(e){
		D.console.error(e);
	}
	return true;
};

D._onLoadWaiting = [];

D._onLoadAddLib = function( name, item ){
	var v = this._onLoadNorm(name);
	if(!v){
		D.console.warn( 'Unknown lib', name );
		return;
	}
	var j;
	for( j in v.lib ){
		D._onLoadAddLib( v.lib[j], item );
	}
	for( j in v.lang ){
		item.libs[ v.lang[j] ] = 0;
	}
	for( j in v.api ){
		item.libs[ 'DR.' + v.api[j] ] = 0;
	}
	item.libs[name] = 0;
};

D.onLoad = function( lib, cb ){
	var item = {
		libs:{},
		cb:cb
	};
	if( !( lib instanceof Array ) ){
		 lib = [lib];
	}
	for( var k in lib ){
		var name = lib[k];
		if( this.libs[name] ){
			D._onLoadAddLib( name, item );
		} else {
			item.libs[name] = 0;
		}
	}
	if( this._onLoadItem(item) ){
		return true;
	}
	this._onLoadWaiting.push(item);
	return false;
};

D.loaded = function(n){
	if(n){
		//D.log( 'loaded:', n );
	}
	var rm = [];
	var k, l;
	for( k = 0, l = this._onLoadWaiting.length; k < l; k++ ){
		if( this._onLoadItem( this._onLoadWaiting[k] ) ){
			rm.push(k);
		}
	}
	rm.reverse();
	for( k in rm ){
		this._onLoadWaiting.splice( rm[k], 1 );
	}
};

// --- loader.js ---

// +++ helpers.js +++
window.D = window.D || {};

/**
 * @param {Object} $this
 * @param {Function} fn
 * @param {...*} [var1]
 * @returns {Function}
 */
D.closure = function( $this, fn, var1 ){
	if( typeof fn != 'function' ){
		throw new Error('Closure fn not function');
	}
	var args = [];
	for( var i = 2; i < arguments.length; ++ i ){
		args.push( arguments[i] );
	}
	return function(){
		$this = $this || this;
		var a = [];
		for( var i = 0; i < arguments.length; ++ i ){
			a.push( arguments[i] );
		}
		return fn.apply( $this, args.concat(a) );
	};
};

/**
 * @param {Object} obj1
 * @param {*} obj2
 * @function
 */
function O2O( obj1, obj2 ){
  if( typeof obj1 == 'undefined' ){
	  return;
  }
  if( typeof obj2 == 'undefined' ){
	  return;
  }
  for( var key in obj2 ){
    var v = obj2[key];
		if( typeof v == 'undefined' ){
			D.console.error( obj2, key );
		}
    if( v && v.constructor == Object ){
      if( !obj1[key] ){
	      obj1[key] = {};
      }
      O2O( obj1[key], v );
    } else {
      try{
				obj1[key] = v;
      } catch(e){
	      D.console.error(e);
      }
    }
  }
}

function nl2br( text ){
	text = text || '';
	return text.replace( /(\r\n|\n\r|\n)/g, '<br />' );
}

function htmlspecialchars( p_string ){
	p_string = String( p_string );
	p_string = p_string.replace(/&/g, '&amp;');
	p_string = p_string.replace(/</g, '&lt;');
	p_string = p_string.replace(/>/g, '&gt;');
	p_string = p_string.replace(/"/g, '&quot;');
//	p_string = p_string.replace(/'/g, '&#039;');
	return p_string;
}

function str_pad ( input, pad_length, pad_string, pad_type ) {
	var half = '',
	pad_to_go;

	var str_pad_repeater = function (s, len) {
		var collect = '', i;

		while (collect.length < len) {
			collect += s;
		}
		collect = collect.substr(0, len);

		return collect;
	};

	input += '';
	pad_string = pad_string !== undefined ? pad_string : ' ';

	if (pad_type !== 'STR_PAD_LEFT' && pad_type !== 'STR_PAD_RIGHT' && pad_type !== 'STR_PAD_BOTH') {
		pad_type = 'STR_PAD_RIGHT';
	}

	if ((pad_to_go = pad_length - input.length) > 0) {
		if (pad_type === 'STR_PAD_LEFT') {
			input = str_pad_repeater(pad_string, pad_to_go) + input;
		} else if (pad_type === 'STR_PAD_RIGHT') {
			input = input + str_pad_repeater(pad_string, pad_to_go);
		} else if (pad_type === 'STR_PAD_BOTH') {
			half = str_pad_repeater(pad_string, Math.ceil(pad_to_go / 2));
			input = half + input + half;
			input = input.substr(0, pad_length);
		}
	}

	return input;
}

function htmlspecialchars_decode( string, entityDecode ){
	if(!string){
		string = '';
	}
	if(entityDecode){
		if( !htmlspecialchars_decode._ta ){
			htmlspecialchars_decode._ta = document.createElement('textarea');
		}
		try{
			var ta = htmlspecialchars_decode._ta;
			ta.innerHTML = string;
			return ta.value;
		} catch(e){
		}
	}
	string = String(string);
	string = string.replace( /&lt;/g, '<' ).replace( /&gt;/g, '>' ).replace(/&nbsp;/g, ' ').replace( /&quot;/g, '"' );
	/*
	if( quote_style == 'ENT_QUOTES' ){
		string = string.replace( /&quot;/g, '"' ).replace( /&#039;/g, '\'' );
	}else if( quote_style != 'ENT_NOQUOTES' ){
		string = string;
	}*/
	return string.replace( /&amp;/g, '&' );
}

function empty( v ){
	if( v === null ) return true;
	switch( typeof v ){
		case 'object':
			if( typeof v.empty == 'function' ){
				return v.empty();
			}
			for( var k in v ) return false;
			break;
		case 'boolean':
		case 'number':
			return !v;
		case 'string':
			return ( v === '' || v === '0' );
		case  'function':
			return false;
	}
	return true;
}

function trim( str ) {
	str = "" + str;
	if ( String.prototype.trim ) {
		return str.trim();
	}

	return str.replace(/^\s+|\s+$/g, '');
}

/**
 * @param {*} v
 * @returns {boolean}
 */
function isset(v){
	if( arguments.length > 1 ){
		for( var i = 0; i < arguments.length; ++ i ){
			if( !isset( arguments[i] ) ){
				return false;
			}
		}
		return true;
	}
	if( v === null ){
		return false;
	}
	if( typeof v == 'undefined' ){
		return false;
	}
	return true;
}

function count( v ){
	if( typeof v != 'object' ){
		return 1;
	}
	if( v instanceof Array ){
		return v.length;
	}
	if( typeof v.length == 'function' ){
		return v.length();
	}
	var l = 0;
	for( var k in v ) l ++;
	return l;
}

function reset( v ){
	for( var k in v ){
		return v[ k ];
	}
	return null;
}

function last( v ){
	if( v instanceof Array ){
		if( !v.length ){
			return null;
		}
		return v[ v.length - 1 ];
	}
	var last = null;
	for( var k in v ){
		last = v[k];
	}
	return last;
}

function number_format( number, decimals, decPoint, thousandsSep ) {
    return number.toFixed( decimals ).replace( /./g, function(c, i, a) {
        return i && c !== decPoint && !((a.length - i) % 3) ? thousandsSep + c : c;
    } );
}

function strip_tags(html){
	var tmp = document.createElement("div");
	tmp.innerHTML = html;
	return tmp.textContent || tmp.innerText || '';
}

function array_search( need, haystack, strict ){
	var i;
	if( haystack instanceof Array && typeof haystack.indexOf == 'function' && ! strict ){
		i = haystack.indexOf( need );
		if( i != -1 ){
			return i;
		}
	} else if( typeof haystack == 'object' || typeof haystack == 'function' ){
		for( var i in haystack ){
			if( array_search ? haystack[ i ] === need : haystack[ i ] == need ){
				return i;
			}
		}
	}
	return false;
}

function array_keys( array ){
	var re = [];
	for( var k in array ){
		re.push( k );
	}
	return re;
}

function is_array( $v ){
	return $v instanceof Array;
}

function insertAtCursor( myField, myValue ){
	// IE
	if( document.selection ){
		myField.focus();
		sel = document.selection.createRange();
		sel.text = myValue;
	}
	// Mozilla / Netscape support
	else if( typeof myField.selectionStart != 'undefined' ){
		var startPos = myField.selectionStart;
		var endPos = myField.selectionEnd;
		myField.value = myField.value.substring(0, startPos)
			+ myValue
			+ myField.value.substring(endPos, myField.value.length);
		myField.selectionStart = startPos + myValue.length;
		myField.selectionEnd = startPos + myValue.length;
	}	else {
		myField.value += myValue;
	}
	myField.focus();
}

function popUp( URL, w, h, scrollbars, resize ) {
	var day = new Date();
	var id = day.getTime();
	D.newWindow( URL, id, {
		toolbar:0,
		scrollbars:scrollbars ? 1 : 0,
		location:0,
		menubar:0,
		resizable:resize ? 1 : 0,
		width:w,
		height:h,
		left:(screen.width)?(screen.width-w)/2:100,
		top:(screen.height)?(screen.height-h)/2:100
	} );
	return false;
}

/**
 * @param {RegExp} pattern
 * @param {String} subject
 * @param {Array} [matches]
 * @returns {Array|number}
 */
function preg_match_all( pattern, subject, matches ){
	var re = matches || [];
	if( !pattern.global ){
		D.console.error( pattern, 'Not global' );
		if(matches){
			return 0;
		}
		return re;
	}
	pattern.lastIndex = 0;
	var r;
	while( r = pattern.exec(subject) ){
		re.push(r);
	}
	if(matches){
		return re.length;
	}
	return re;
}

D.console = {
	info:function(){
		if( typeof console == 'object' && typeof console.info == 'function' ){
			try{
				console.info.apply( console, arguments );
			} catch(e){
			}
		}
	},
	error:function(err){
		if( typeof console == 'object' && typeof console.error == 'function' ){
			console.error.apply( console, arguments );
		}
		if( err instanceof Error && window.onerror ){
			window.onerror( err.name + ': ' + err.message, err, err.fileName || '', err.lineNumber || 0, 0, err );
		}
	},
	warn:function(){
		if( typeof console == 'object' && typeof console.warn == 'function' ){
			console.warn.apply( console, arguments );
		}
	},
	debug:function(){
		if( typeof console == 'object' && typeof console.debug == 'function' ){
			console.debug.apply( console, arguments );
		}
	},
	log:function(){
		if( typeof console == 'object' && typeof console.log == 'function' ){
			console.log.apply( console, arguments );
		}
	}
};

D.log = function(){
	D.console.info.apply( D.console, arguments );
};
/**
 * random int veertiiba (min, max ieskaitot)
 * @param min
 * @param max
 * @returns {integer}
 */
function getRandomInt(min, max) {
	return Math.floor( Math.random() * ( max - min + 1 ) ) + min;
}
function shuffle(array) {
	var currentIndex = array.length, temporaryValue, randomIndex;

	while (0 !== currentIndex) {
		randomIndex = Math.floor(Math.random() * currentIndex);
		currentIndex -= 1;
		temporaryValue = array[currentIndex];
		array[currentIndex] = array[randomIndex];
		array[randomIndex] = temporaryValue;
	}

	return array;
}

/**
 * @param {*} needle
 * @param {Array.<*>} haystack
 * @returns {boolean}
 */
function in_array(needle, haystack){
	var l = haystack.length;
	for( var i = 0; i < l; i++ ){
		if( haystack[i] === needle ){
			return true;
		}
	}
	return false;
}

/**
 * @param {string} string
 * @returns {string}
 */
function ucfirst(string){
	return string.charAt(0).toUpperCase() + string.slice(1);
}

function scaleToContainer(maxW, maxH, currW, currH){
	var ratio = 0;

	if(currW > maxW){
		ratio = maxW / currW;
		currH = currH * ratio;
		currW = currW * ratio;
	}

	if(currH > maxH){
		ratio = maxH / currH;
		currW = currW * ratio;
		currH = currH * ratio;
	}

	return {
		w: currW,
		h: currH
	};
}

function permissionsText(permissions){
	switch( permissions ){
		case D.PERM_ALL:
			return D.Lang.get('Perm all');
		case D.PERM_REG:
			return D.Lang.get('Perm reg');
		case D.PERM_FR:
			return D.Lang.get('Perm friends');
		case D.PERM_NONE:
			return D.Lang.get('Perm none');
		default:
			return D.Lang.get('Perm groups');
	}
}

/**
 * @param {integer} count
 * @param {string} single
 * @param {string} multiple
 * @returns {string}
 */
function nget(count, single, multiple) {
	if (count % 10 == 1 && count % 100 != 11) {
		return single;
	}
	return multiple;
}

D.requestionAnimationFrame = function (callback) {
	return (window.requestAnimationFrame ||
		window.webkitRequestAnimationFrame ||
		window.mozRequestAnimationFrame ||
		window.oRequestAnimationFrame ||
		window.msRequestAnimationFrame ||
		function ( callback ) {
			return window.setTimeout(callback, 1000 / 60);
		})(callback);
};
D.cancelAnimationFrame = function (handle) {
	return (window.cancelAnimationFrame ||
		window.webkitCancelAnimationFrame ||
		window.mozCancelAnimationFrame ||
		window.oCancelAnimationFrame ||
		window.msCancelAnimationFrame ||
		window.clearTimeout)(handle);
};

// +++++ Class +++++
if (!Object.create) {
	Object.create = function(proto, props) {
		if( typeof props != "undefined" ){
			throw "The multiple-argument version of Object.create is not provided by this browser and cannot be shimmed.";
		}
		function Ctor() { }
		Ctor.prototype = proto;
		return new Ctor();
	};
}
/**
 * @param {Object|Function} __o__
 * @param {Function} [__ext__]
 **/
function Class( __o__, __ext__ ){
	var __ofn__;
	if( __o__ instanceof Function ){
		__ofn__ = __o__;
		__o__ = __o__();
	}
	var __re__ = function(){
		// clone
		var __clone;
		if( arguments.length == 0 ){
			__clone = function(){
				return new __re__;
			};
		} else {
			var __args__ = arguments;
			__clone = function(){
				var a = [];
				for( var i = 0; i < __args__.length; ++ i ){
					a.push( '__args__[' + String(i) + ']' );
				}
				return eval('new __re__(' + a.join(', ') + ')');
			};
		}
		if( !( this instanceof __re__ ) ){
			return __clone();
		}
		if( Class._inProgress ){
			return;
		}
		if( !__re__.__context ){
			this.__parent_constructors__ = [];
		} else if( __o__.__construct ){
			__re__.__context.__parent_constructors__.unshift( __o__.__construct );
		}
		var __context__ = __re__.__context || this;
		var __k__, __l__, __prop__;
		var PARENT;
		if( __re__.__priv__ ){
			eval( __re__.__priv__ );
		}
		if(__ext__){
			__ext__.__context = __context__;
			try{
				PARENT = new __ext__;
			} catch(e){
				__ext__.__context = null;
				throw(e);
			}
			__ext__.__context = null;
			if( !__ext__.__CLASS_DEF__ ){ // extend prototype
				for( __k__ in PARENT ){
					if( PARENT[__k__] instanceof Function ){
						if( PARENT[__k__].bind ){
							PARENT[__k__] = PARENT[__k__].bind(__context__);
						} else {
							PARENT[__k__] = D.closure( __context__, PARENT[__k__] );
						}
					}
				}
			}
			for( __k__  in PARENT ){
				__context__[__k__] = this[__k__] = PARENT[__k__];
			}
		}
		__context__.__clone = __clone;
		for( __k__ in __o__ ){
			__prop__ = __o__[__k__];
			if( __prop__ instanceof Function ){
				var __prop_fn__;
				if( __re__.__priv_var__ || __prop__.__use_parent__){
					__prop_fn__ = eval('(function(' + __prop__.__args + '){' + __prop__.__str + '})');
				} else {
					__prop_fn__ = __prop__;
				}
				if( __prop_fn__.bind ){
					__prop_fn__ = __prop_fn__.bind(__context__);
				} else {
					__prop_fn__ = D.closure( __context__, __prop_fn__ );
				}
				__prop_fn__.toString = Class._toString(__prop__); // debug info
				__prop_fn__.__args = __prop__.__args;
				__context__[__k__] = this[__k__] = __prop_fn__;
			} else {
				__context__[__k__] = this[__k__] = Class._clone(__prop__);
			}
		}
		if( PARENT && !__ext__.__CLASS_DEF__ ){
			if( PARENT.__construct instanceof Function ){
				if( !isset( PARENT.__construct.__args ) ){
					PARENT.__construct.__args = Class._getFnArgs( PARENT.__construct );
				}
				if( !PARENT.__construct.__args ){
					PARENT.__construct();
				}
			}
		}
		if( !__re__.__context  ){
			var __construct;
			for( __k__ = 0, __l__ = this.__parent_constructors__.length; __k__ < __l__; __k__++ ){
				__construct = this.__parent_constructors__[__k__];
				if( !__construct.__args ){
					__construct.call(this);
				}
			}
			if( __o__.__construct || ( __construct && __construct.__args /*last*/ ) ){
				this.__construct.apply( null, arguments );
			}
			delete this.__parent_constructors__;
		}
		// if( __o__.__construct && (  !__re__.__context|| !__o__.__construct.__args /* def constructor */ ) ){
		// 	this.__construct.apply( null, arguments );
		// }
	}; // var __re__ = function(){
	if(__ofn__){
		var str = Class._getFnString(__ofn__);
		var s = str.indexOf('return');
		__re__.__priv__ = str.substr( 0, s );
		__re__.__priv_var__ = Boolean( __re__.__priv__.match( /var (?!PARENT)/ ) || __re__.__priv__.match( /function/ ) );
	}
	__re__.__CLASS_DEF__ = true;
	if(__ext__){
		__re__.prototype = Object.create( __ext__.prototype );
	}
	__re__.__NAME = __o__.__NAME;
	delete __o__.__NAME;
	//__re__.prototype.__NAME = __o__.__NAME;
	for( var k in __o__ ){
		var prop = __o__[k];
		if( prop instanceof Function ){
			prop.__str = Class._getFnString(prop);
			prop.__use_parent__ = ( prop.__str.indexOf('PARENT') != -1 );
			__re__.__use_parent__ = __re__.__use_parent__ || prop.__use_parent__  || false;
			prop.__args = Class._getFnArgs(prop);
		}
	}
	// debug info
	if( __re__.__NAME ){
		__re__.toString = function(){
			return 'Class ' + __re__.__NAME;
		};
		try{
			eval( __re__.__NAME + ' = __re__;' );
		} catch(e){
			window.console && window.console.error( __re__, '__NAME',  e );
		}
	} else if( __o__.__construct ){
		__re__.toString = Class._toString( __o__.__construct );
	} else if( __ext__ ){
		__re__.toString = __ext__.toString;
	} else {
		__re__.toString = function(){
			return '[empty Class constructor]';
		};
	}
	return __re__;
}

Class._Base = function(){
};

Class._toString = function(fn){
	return function(){
		return fn.toString();
	};
};

Class._getFnString = function(fn){
	var str = fn.toString();
	var s = str.indexOf('{');
	if( s == -1 ){
		return '';
	}
	var e = str.lastIndexOf('}');
	if( e == -1 ){
		return '';
	}
	return str.substr( s + 1, e - s - 1 );
};

Class._getFnArgs = function(fn){
	var str = fn.toString();
	var s = str.indexOf('(');
	if( s == -1 ){
		return '';
	}
	var e = str.indexOf(')');
	if( e == -1 ){
		return '';
	}
	var args = str.substr( s + 1, e - s - 1 ).split(',');
	for( var k in args ){
		args[k] = trim( args[k] );
	}
	return args.join(', ');
};

Class._clone = function(v){
	if( v instanceof Object ){
		var k, re;
		if( v instanceof Array ){
			re = [];
			for( k in v ){
				re.push( Class._clone( v[k] ) );
			}
			return re;
		}
		if( v.__clone ){
			return v.__clone();
		}
		if( v.constructor == Object ){
			re = {};
			for( k in v ){
				re[k] = Class._clone( v[k] );
			}
			return re;
		}
	}
	return v;
};

/**
 * @deprecated
 * @param {Function} fn
 * @returns {Object}
 */
Class.define = function(fn){
	Class._inProgress = true;
	var re = fn();
	Class._inProgress = false;
	var str = Class._getFnString(fn);
	var s = str.indexOf('return');
	re.__priv__ = str.substr( 0, s );
	re.__priv_var__ = Boolean( re.__priv__.match( /var (?!PARENT)/ ) || re.__priv__.match( /function/ ) );
	return re;
};
// ---- Class ---
var _dr_count_ = count;
var _dr_empty_ = empty;
var _dr_isset_ = isset;

function fixOverride(){
	var k;
	try{
		for( k in [] ){
			delete Array.prototype[k];
		}
		for( k in {} ){
			delete Object.prototype[k];
		}
		if( !( count instanceof Function ) ){
			count = _dr_count_;
		}
		if( !( empty instanceof Function ) ){
			empty = _dr_empty_;
		}
		if( !( isset instanceof Function ) ){
			isset = _dr_isset_;
		}
	} catch(e){}
}
fixOverride();
$(fixOverride);
setInterval( fixOverride, 100 );

function testOverride(){
	var k;
	for( k in [] ){
		throw new Error( 'array iteration k ' + k );
	}
	for( k in {} ){
		throw new Error( 'object iteration k ' + k );
	}
	if( !( count instanceof Function ) ){
		throw new Error( 'count() override to ' + typeof(count) );
	}
	if( !( empty instanceof Function ) ){
		throw new Error( 'empty() override to ' + typeof(empty) );
	}
	if( !( isset instanceof Function ) ){
		throw new Error( 'isset() override to ' + typeof(isset) );
	}
	setTimeout( testOverride, 1000 );
}
//setTimeout( testOverride, 1000 );

// --- helpers.js ---

// +++ rpc.js +++
function RPC( url, par ){
	par = par || {};
	this.url = url;
	this.async = true;
	this.withCredentials = false;
	if( typeof par.async != 'undefined' ){
		this.async = par.async;
	}
	if( typeof par.withCredentials != 'undefined' ){
		this.withCredentials = par.withCredentials;
	}
}

RPC.prototype.toString = function(){
	return 'RPC "' + this.url + '"';
};

RPC.prototype.send = function( method, data, re_fn, o ){
	var $rpc = this;
	var success = function( re_text ){
		if( re_fn ){
			var re_data = D.JSON.decode( re_text );
			if( $rpc.debug ){
				D.console.info( method, data, re_data );
			}
			try{
				if( typeof re_data == 'object' && typeof re_data.ok != 'undefined' ){
					re_fn.call( o || $rpc, re_data.ok, o || false );
					if( ! empty( re_data.ob ) ){
						D.console.warn( re_data.ob );
					}
				} else {
					D.console.error( re_text );
				}
			}
			catch( e ){
				D.console.error( e );
			}
		}
	};
	var url = this.url;
	if( D.nonce ){
		if( url.indexOf('?') == -1 ){
			url += '?' + D.nonce.name + '=' + D.nonce.value;
		} else {
			url += '&' + D.nonce.name + '=' + D.nonce.value;
		}
	}
	if( document.location.href.indexOf('XDEBUG_PROFILE') != -1 ){
		if( url.indexOf('?') == -1 ){
			url += '?XDEBUG_PROFILE=1';
		} else {
			url += '&XDEBUG_PROFILE=1';
		}
	}
	$.ajax( {
		url:url,
		type:'POST',
		data:D.JSON.encode( {method:method, data:data} ),
		contentType:false,
		success:success,
		async:this.async,
		xhrFields: {
			withCredentials: this.withCredentials
		},
		error:function( xhr ){
			if( xhr.status == 403 ){
				D.reload();
			}
		}
	} );
};

// --- rpc.js ---

// +++ apicall.js +++
window.DR = window.DR || {};

var __P = 'prototype';
var __C = 'constructor';
var __CL = '__CLASS';


DR._Base = function Base(){
};

DR._Base.is = function(v){
	return v !== null && typeof v != 'undefined';
};

DR._Base.hsd = function(string){
	string = String(string);
	return string.replace( /&lt;/g, '<' ).replace( /&gt;/g, '>' ).replace(/&nbsp;/g, ' ').replace( /&quot;/g, '"' ).replace( /&amp;/g, '&' );
};

DR._Base.uniqueValues = function(a){
	var o = {};
	var k;
	for( k in a ){
		o[ a[k] ] = true;
	}
	var re = [];
	for( k in o ){
		re.push(k);
	}
	return re;
};

DR._Base._types = {};
DR._Base._ = {};
DR._Base.select = {};

DR._Base.cast = function(par){
	if(!par){
		return null;
	}
	if( this._types[ par._t ] ){
		return new this._types[ par._t ](par);
	}
	if( window.console ) console.warn( 'Undefined type ' + par._t + '; Check your API SDK version!!!' );
	return null;
};

DR._Select = function Select(){
};

DR._Select.prototype._getName = function(){
	return this.constructor[__CL];
};

DR._Select.prototype._getFields = function(){
	var re = [];
	for( var k in this._fields ){
		if( this._fields[k] ){
			re.push(k);
		}
	}
	return re;
};

DR._Select.prototype.all = function(v){
	for( var k in this ){
		if( k != 'all' && k[0] != '_' && this[k] instanceof Function ){
			this[k](v);
		}
	}
	return this;
};

DR._Select.prototype.__noSuchMethod__ = function(id){
	if( window.console ){ console.warn( 'undefined select field:' + id, this ); }
	return this;
};

DR._Method = function Method(){
};

/**
* @param {Array.<DR._Select>} [select]
* @returns {Array}
*/
DR._Method.prototype.toApi = function(select){
	var sel = {};
	var k, r;
	if(select){
		for( k in select ){
			r = select[k];
			if( !( r instanceof DR._Select ) ){
				D.console.warn( 'select not instanceof DR._Select', r );
				continue;
			}
			sel[ r._getName() ] = r._getFields();
		}
	}
	for( k in this.select ){
		r = this.select[k];
		if( !( r instanceof DR._Select ) ){
			D.console.warn( 'select not instanceof DR._Select', r );
			continue;
		}
		var name = r._getName();
		if( sel[name] ){
			sel[name] = DR._Base.uniqueValues( sel[name].concat( r._getFields() ) );
		} else {
			sel[name] = r._getFields();
		}
	}
	var data = {};
	for( k in this ){
		if(
			k == 'select' ||
			k == 'error' ||
			k == 're' ||
			k == 'processing' ||
			k == 'onLoad' ||
			k == 'onError'
		){ // reserved kw
			continue;
		}
		data[k] = this[k];
	}
	return [ this.constructor[__CL], data,  sel ];
};

DR._Method.prototype.error = null;
/** @type {Array.<DR._Select>} */
DR._Method.prototype.select = null;
/** @type {Function} */
DR._Method.prototype.onLoad = null;
/** @type {Function} */
DR._Method.prototype.onError = null;
DR._Method.prototype.processing = false;

DR._Method.prototype._re = function(par){
	this.re = DR._Base.cast(par);
};

/**
 * @typedef {{chat:Boolean}} DApiCall
 */

/**
 * @param {DApiCall} [par]
 */
DR._Method.prototype.call = function(par){
	new DR.ApiCall( {
		methods:[this]
	} ).call(par);
};

// ++++ API CALL +++

DR.ApiCallPar = function(){
};

DR.ApiCallPar.prototype = {
	/** @type {Array.<DR._Method>} */
	methods:[],
	/** @type {Array.<DR._Select>} */
	select:[],
	/** @type function */
	onLoad:null,
	/** @type function */
	onClosed:null,
	context:null
};

DR.ApiCall = function ApiCall(par){
	par = par || {};
	/** @type {Array.<DR._Method>} */
	this.methods = par.methods || [];
	/** @type {Array.<DR._Select>} */
	this.select = par.select || [];
	this.onLoad = par.onLoad || this.onLoad;
	this.onClosed = par.onClose || this.onClosed;
	this.context = par.context || null;
	this._deferred = 0;
	this._waitingOnDeferred = false;
};

DR.ApiCall.prototype.addMethod = function( method ){
	if( !( method instanceof DR._Method ) ){
		D.console.warn( 'method type', method );
		return;
	}
	this.methods.push(method);
};

/**
 * Set to make .call wait for an async function to complete
 * stop waiting by calling .deferResolve
 */
DR.ApiCall.prototype.defer = function(){
	++this._deferred;
};

DR.ApiCall.prototype.deferResolve = function(){
	--this._deferred;
	if( !this._deferred && this._waitingOnDeferred ) {
		this._waitingOnDeferred = false;
		this.call();
	}
};

DR.ApiCall.prototype.onLoad = function(){};
DR.ApiCall.prototype.onBeforeLoad = function(){};
DR.ApiCall.prototype.onClosed = function(){};

/**
 * @param {DApiCall} [par]
 */
DR.ApiCall.prototype.call = function(par){
	if( this._deferred > 0 ) {
		this._waitingOnDeferred = true;
		return;
	}
	fixOverride();
	par = par || { chat:( D.DEV_NAME == '_z' ) };
	var rq = [];
	var methodNames = [];
	for( var k = 0; k < this.methods.length; k++ ){
		if( !( this.methods[k] instanceof DR._Method ) ){
			D.console.warn( 'method not instanceof DR._Method', this.methods[k] );
			continue;
		}
		this.methods[k].processing = true;
		var a = this.methods[k].toApi( this.select );
		rq.push(a);
		methodNames.push( a[0] );
	}
	var g = [ 'm=' + methodNames.join(',') ];
	if( D.nonce ){
		g.push( Get.nonce() );
	}
	if( location.href.indexOf('XDEBUG_PROFILE=1') != -1 ){
		g.push( 'XDEBUG_PROFILE=1' );
	}
	if( par.chat && D.chat && D.chat._socket.connected ){
		D.chat._socket.send(
			D.chat.CMD_API,
			{
				DEV:D.DEV,
				DEV_NAME:D.DEV_NAME,
				data:D.JSON.stringify( rq, null, ( D.DEV ? "\t" : '' ) ),
				HTTPS:( location.protocol == 'https:' )
			},
			D.closure( this, function(re){
				//D.log(re);
				if( re.error ){
					D.log( re.error );
					return;
				}
				this._call( re.data );
			} )
		);
		return;
	}
	var ajaxPar = {
		url:'/api/rpc.php?' + g.join("&"),
		type:'POST',
		data:D.JSON.stringify( rq, null, ( D.DEV ? "\t" : '' ) ),
		success:this._call,
		error:function(){
			this._error('rq');
		},
		context:this,
		statusCode:{
			302:function(){ // auto login, require reload
				D.reload();
			}
			//403:function(){
			//	D.reload();
			//}
		},
		beforeSend:function(jqXHR){ // disable AJAX
			jqXHR.setRequestHeader( 'X-Requested-With', 'api' );
		},
		contentType:false,
		dataType:'text',
		async:this.async
	};
	if ( window.CPM_ADS_SAY_HIGHLIGHT ) {
		ajaxPar.url = '//' + window.CPM_ADS_SAY_HIGHLIGHT_WWW_DOMAIN + '/api/rpc.php?' + g.join("&");
		ajaxPar.xhrFields = {
			withCredentials: true
		};
	}
	$.ajax( ajaxPar );
};

DR.ApiCall.prototype._call = function(resp){
	try{
		var re = D.JSON.parse(resp);
	} catch(e){
		D.console.error( 'JSON.parse', strip_tags(resp) );
		return;
	}
	var errObject =  re[ re.length - 1 ];
	if(errObject){
		if( errObject.ob ){
			D.console.info(strip_tags(errObject.ob));
		}
		if( errObject.error ){
			D.console.info( errObject.error );
			this._error( errObject.error );
			return;
		}
	}
	this.onBeforeLoad.call( this.context || this );
	var authError = false;
	var closedError = false;
	for( var i = 0; i < re.length - 1; ++ i ){
		var r = re[i];
		var m = this.methods[i];
		var err = r[1];
		if(err){
			if( err == 'auth' ){
				authError = true;
			}
			if( err == 'closed' || err == 'down' ){
				closedError = true;
			}
			D.console.warn( err, m );
			m.error = err;
			if( m.onError instanceof Function ){
				m.onError();
			}
			continue;
		}
		m._re( r[0] );
		if( m.onLoad instanceof Function ){
			m.onLoad();
		}
	}
	if(authError){
		D.reload();
		return;
	}
	if(closedError){
		this.onClosed.call( this.context || this );
	} else {
		this.onLoad.call( this.context || this );
	}
	for( var k = 0; k < this.methods.length; k++ ){
		this.methods[k].processing = false;
	}
	this.methods = [];
};

DR.ApiCall.prototype._error = function(error){
	for( var k = 0; k < this.methods.length; k++ ){
		var m = this.methods[k];
		m.error = error;
		m.processing = false;
		if( m.onError instanceof Function ){
			m.onError();
		}
	}
	this.methods = [];
	this.onLoad.call( this.context || this );
};


DR.ApiCall.prototype.async = true;

// --- apicall.js ---

// +++ date.js +++
/**
 * @param {Number} [ts] TS vai gads
 * @param {Number} [m] 1 - 12
 * @param {Number} [d]
 * @constructor
 */
D.Date = function( ts, m, d ){
	if( isset( m, d ) ){
		this._date = new Date( ts, m - 1, d );
		return;
	}
	this._date = new Date();
	if(ts){
		this.setTime(ts);
	} else if( D.TIME ){
		this.setTime( D.TIME );
	}
};

D.Date.prototype.valueOf = function(){
	return this.getTime();
};

D.Date.prototype.getTime = function(){
	if( !this._date.getTime() ){
		return 0;
	}
	return Math.round( this._date.getTime() / 1000 );
};

D.Date.prototype.setTime = function(v){
	this._date.setTime( v * 1000 );
	return this;
};

D.Date.prototype.getYear = function(){
	return this._date.getFullYear();
};

D.Date.prototype.setYear = function(v){
	this._date.setFullYear(v);
	return this;
};

D.Date.prototype.getMonth = function(){
	return this._date.getMonth() + 1;
};

D.Date.prototype.setMonth = function(v){
	this._date.setMonth( v - 1 );
	// fix, ja iepriekshejaa meenesii nav bijis taads datums
	if( this.getMonth() != v ){
		this._date.setDate(1);
		this._date.setMonth( v - 1 );
	}
	return this;
};

D.Date.prototype.getDate = function(){
	return this._date.getDate();
};

D.Date.prototype.setDate = function(v){
	this._date.setDate(v);
	return this;
};

D.Date.prototype.getHours = function(){
	return this._date.getHours()
};

D.Date.prototype.setHours = function(v){
	this._date.setHours(v);
	return this;
};

D.Date.prototype.getMinutes = function(){
	return this._date.getMinutes()
};

D.Date.prototype.setMinutes = function(v){
	this._date.setMinutes(v);
	return this;
};

D.Date.prototype.getSeconds = function(){
	return this._date.getSeconds()
};

D.Date.prototype.setSeconds = function(v){
	this._date.setSeconds(v);
	return this;
};

D.Date.prototype._zeroFill = function(v){
	if( v < 10 ){
		return '0' + String(v);
	}
	return String(v);
};

D.Date.prototype.format = function(format){
	return format
		.replace( 'Y', this.getYear() )
		.replace( 'y', String( this.getYear() ).substr(-2) )
		.replace( 'm', this._zeroFill( this.getMonth() ) )
		.replace( 'n', this.getMonth() )
		.replace( 'd', this._zeroFill( this.getDate() ) )
		.replace( 'j', this.getDate() )
		.replace( 'H', this._zeroFill( this.getHours() ) )
		.replace( 'G', this.getHours() )
		.replace( 'h', this._zeroFill( this.getHours() % 12 || 12 ) )
		.replace( 'g', this.getHours() % 12 || 12 )
		.replace( 'i', this._zeroFill( this.getMinutes() ) )
		.replace( 's', this._zeroFill( this.getSeconds() ) )
		// textual
		.replace('k', this.getDayNameKad())
		.replace('l', this.getDayNameLong())
		.replace('D', this.getDayName())
		.replace('F', this.getMonthName()) // Pilns mēneša nosaukums
		.replace('M', this.getMonthNameShort()) // Īsais mēneša nosaukums
		.replace('L', this.getMonthNameLok());
};

D.Date.prototype.getDayNear = function(){
	var today = new D.Date(), ymd = this.format('Ymd');
	if( this.format('Ymd') === today.format('Ymd') ) {
		return ucfirst(D.Lang.get('today'));
	} else if( ymd === today.setDate(today.getDate()+2).format('Ymd') ) {
		return ucfirst(D.Lang.get('Parīt'));
	} else if( ymd === today.setDate(today.getDate()-1).format('Ymd') ) {
		return ucfirst(D.Lang.get('tomorrow'));
	} else if( ymd === today.setDate(today.getDate()-2).format('Ymd') ) {
		return ucfirst(D.Lang.get('yesterday'));
	}
	return false;
};

D.Date.prototype._readDigits = function( text, max ){
	var num = '';
	var i;
	for( i = 0; i < text.length; ++ i ){
		var char = text[i];
		var code = char.charCodeAt(0);
		if( code < 48 || code > 57 ){
			if(num){
				break;
			} else { // kamēr atrod ciparu
//				D.log( 'skip', char );
				continue;
			}
		}
		num += char;
		if( num.length == max ){
			break;
		}
	}
	text = text.substr( i + 1 );
//	D.log( {
//		text:text,
//		num:Number(num)
//	} );
	return {
		text:text,
		num:Number(num),
		numText:num
	};
};

D.Date.prototype.resetTime = function(){
	this.setHours(0).setMinutes(0).setSeconds(0);
	return this;
};

D.Date.prototype.fromFormat = function( format, v ){
	v = String(v);
	this.resetTime();
	var y, m, d;
	for( var i = 0; i < format.length; ++ i ){
		switch( format[i] ){
			case 'Y':
				var r = this._readDigits( v, 4 );
				v = r.text;
				//this.setYear( r.num );
				y = r.num;
				break;
			case 'y':
				var r = this._readDigits( v, 2 );
				v = r.text;
				if( r.num > 50 ){
					//this.setYear( 1900 + r.num );
					y = 1900 + r.num;
				} else {
					//this.setYear( 2000 + r.num );
					y = 2000 + r.num;
				}
				break;
			case 'm':
				var r = this._readDigits( v, 2 );
				v = r.text;
				//this.setMonth( r.num || 1 );
				m = r.num || 1;
				break;
			case 'd':
				var r = this._readDigits( v, 2 );
				v = r.text;
				//this.setDate( r.num || 1 );
				d = r.num || 1;
				break;
			case 'H':
				var r = this._readDigits( v, 2 );
				v = r.text;
				this.setHours( r.num || 0 );
				break;
			case 'i':
				var r = this._readDigits( v, 2 );
				v = r.text;
				this.setMinutes( r.num || 0 );
				break;
			case 's':
				var r = this._readDigits( v, 2 );
				v = r.text;
				this.setSeconds( r.num || 0 );
				break;
		}
	}
	// svarīga secība
	if(y){
		this.setYear(y);
	}
	if(m){
		this.setMonth(m);
	}
	if(d){
		this.setDate(d);
	}
	return this;
};

D.Date.prototype.setYMD = function( y, m, d ){
	this._date = new Date( y, m - 1, d );
	return this;
};

D.Date.prototype.toSql = function(){
	return this.format('Y-m-d H:i:s');
};

D.Date.prototype.toSqlDate = function(){
	return this.format('Y-m-d');
};

D.Date.prototype.toSqlTime = function(){
	return this.format('H:i:s');
};

D.Date.prototype.fromSqlDate = function(v){
	var a = v.split('-');
	this.setYMD( a[0], a[1], a[2] );
	return this;
};

D.Date.prototype.fromSqlTime = function(v){
	var a = v.split(':');
	this.setHours( a[0] || 0 ).setMinutes( a[1] || 0 ).setSeconds( a[2] || 0 );
	return this;
};

D.Date.prototype.fromSql = function(v){
	var a = v.split(' ');
	this.fromSqlDate( a[0] ).fromSqlTime( a[1] || '' );
	return this;
};

D.Date.prototype.getDayName = function(){
	return D.Lang.get( 'd' + String( this.dayOfWeek() ) + '_sh' );
};
D.Date.prototype.getMonthName = function(){
	return D.Lang.get( 'm' + String( this._date.getMonth() + 1 ) );
};
D.Date.prototype.getMonthNameShort = function(){
	return D.Lang.get('m' + String(this._date.getMonth() + 1)).substr(0, 3);
};
D.Date.prototype.before = function(){
	return D.ddate2( this.getTime() );
};
D.Date.prototype.getDayNameLong = function(){
	return D.Lang.get('d' + String(this.dayOfWeek()));
};
D.Date.prototype.getDayNameKad = function(){
	return D.Lang.get('dk' + String(this.dayOfWeek()));
};
D.Date.prototype.getMonthNameLok = function(){
	return D.Lang.get('m' + String(this._date.getMonth() + 1) + '_lok');
};

D.Date.prototype.toString = function(par){
	return D.ddate( this.getTime(), par );
};

/**
 * 1 - P, 2 - O, ... 7 - Sv
 */
D.Date.prototype.dayOfWeek = function(){
	var d = this._date.getDay();
	if(!d){
		return 7;
	}
	return d;
};

// --- date.js ---

// +++ sorted_map.js +++
/**
 * @constructor
 * @template T
 */
D.SortedMap = function(){
	this._map = {};
	this._list = [];
};

/**
 * @param {string|Number} k
 * @param {T} v
 * @returns {D.SortedMap.<T>}
 */
D.SortedMap.prototype.set = function( k, v ){
	k = String(k);
	if( typeof this._map[k] == 'undefined' ){
		this._list.push(k);
	}
	this._map[k] = v;
	return this;
};

/**
 * @param {String|Number} k
 * @returns {T|null}
 */
D.SortedMap.prototype.get = function(k){
	var re = this._map[k];
	return isset(re) ? re : null;
};

/**
 * @param {String|Number} k
 * @returns {D.SortedMap.<T>}
 */
D.SortedMap.prototype.del = function(k){
	k = String(k);
	if( !this._map[k] ){
		return this;
	}
	delete this._map[k];
	var i = array_search( k, this._list, true );
	this._list.splice( i, 1 );
	return this;
};

/**
 * @returns {D.SortedMap.<T>}
 */
D.SortedMap.prototype.clear = function(){
	this._map = {};
	this._list = [];
	return this;
};

/**
 * @returns {Number}
 */
D.SortedMap.prototype.length = function(){
	return this._list.length;
};

/**
 * @callback D.SortedMapEachCB
 * @param {String,T}
 * @template T
 */

/**
 * @param {D.SortedMapEachCB.<T>|Function} fn
 * @param {object} [$this]
 */
D.SortedMap.prototype.each = function( fn, $this ){
	for( var i = 0; i <  this._list.length; ++ i ){
		var k = this._list[i];
		if( this._map[k] && typeof this._map[k] == 'object' ){
			if( fn.call( ( $this || this._map[k] ), k, this._map[k] ) === false ){
				return false;
			}
		} else {
			if( fn.call( ( $this || this ), k, this._map[k] ) === false ){
				return false;
			}
		}
	}
};

/**
 * @returns {Array.<String>}
 */
D.SortedMap.prototype.keys = function(){
	return [].concat( this._list );
};

/**
 * @returns {Boolean}
 */
D.SortedMap.prototype.empty = function(){
	return !Boolean( this._list.length );
};

/**
 * @returns {Object.<String,T>}
 */
D.SortedMap.prototype.toObject = function(){
	var re = {};
	O2O( re, this._map );
	return re;
};

/**
 * @returns {Array.<T>}
 */
D.SortedMap.prototype.toArray = function(){
	var re = [];
	this.each( function( k, v ){
		re.push(v);
	} );
	return re;
};

/**
 * @param {T} v
 * @returns {Number}
 */
D.SortedMap.prototype.indexOf = function(v){
	var re = array_search( v, this._map );
	if( re === false ){
		return -1;
	}
	return re;
};

/**
 * @returns {T|null}
 */
D.SortedMap.prototype.first = function(){
	if( !this._list.length ){
		return null;
	}
	return this._map[ this._list[0] ];
};

/**
 * @returns {T|null}
 */
D.SortedMap.prototype.shift = function(){
	if( !this._list.length ){
		return null;
	}
	var re =  this.get( this._list[0] );
	this.del( this._list[0] );
	return re;
};

D.SortedMap.prototype.popFirst = function(){
	if( !this._list.length ){
		return;
	}
	this.del( this._list[0] );
};

/**
 * @returns {T|null}
 */
D.SortedMap.prototype.last = function(){
	if( !this._list.length ){
		return null;
	}
	return this._map[ this._list[ this._list.length - 1 ] ];
};

D.SortedMap.prototype.popLast = function(){
	if( !this._list.length ){
		return;
	}
	this.del( this._list[ this._list.length - 1 ] );
};

D.SortedMap.prototype.at = function(index){
	return this.get(this._list[index]);
};

// --- sorted_map.js ---

// +++ dom.js +++
/**
 * @typedef {{tag:string,text:[string],els:Array.<mkEl>,prop:object,attr:object}} mkEPar
 */
window.D = window.D || {};
/**
 * @param {mkEPar|Object|String} par
 * @returns {Node|null}
 */
function mkE(par){
	if( !par.tag && typeof par.text != 'string' ){
		if( typeof par == 'string' ){
			return document.createTextNode(par);
		}
		return null;
	}
	if( par.tag ){
		par.prop = par.prop || {};
		par.attr = par.attr || {};
		// set properties
		switch( par.tag ){
			case 'a':
				if( !par.href && !par.prop.href ){
					par.href = 'javascript:';
				} else {
					var target = par.target || par.attr.target;
					var href = par.href || par.prop.href;
					if( !par.attr.rel && target == '_blank' && D.rootDomain(href) != D.rootDomain(document.location.host) ){
						par.attr.rel = ( par.attr.rel ? par.attr.rel + ' ' : '' ) + 'noreferrer noopener';
					}
				}
				break;
			case 'input':
				if( par.type && par.type == 'checkbox' && ( par.checked || par.prop.checked ) ){
					par.defaultChecked = true;
				}
				break;
		}
		var _tag = par.tag;
		if( mkE._isOldIE ){
			if( par.prop.name || par.tag == 'input' ){
				par.tag = '<' + par.tag +
					( par.name || par.prop.name ? ' name="' + ( par.name || par.prop.name ) + '"' : '' ) +
					( par.checked || par.prop.checked ? ' checked="checked"' : '' ) +
					( par.type || par.prop.type ? ' type="' + ( par.type || par.prop.type ) + '"' : '' ) +
				' />';
			}
		}
		var elm;
		try{
			elm = document.createElement( par.tag );
		}	catch(e){
			if( _tag != par.tag ){
				elm = document.createElement(_tag);
			}
		}
		if( par.attr ){
			for( var key in par.attr ){
				elm.setAttribute( key, par.attr[key] );
			}
		}
		if( par.text_ ){
			elm.appendChild( document.createTextNode( par.text_ ) );
		}
		// append childs
		if( par.els && typeof par.els == 'object' ){
			var r, ii;
			var els = par.els;
			if( !( els instanceof Array ) ){
				els = [];
				for( ii in par.els ){
					if( par.els.hasOwnProperty(ii) ){
						els.push( par.els[ii] );
					}
				}
			}
			for( ii = 0; ii < els.length; ++ ii ){
				r = els[ii];
				if( r instanceof Function ){
					r = r();
				}
				switch( typeof r ){
					case 'number':
						elm.appendChild( document.createTextNode( String(r) ) );
						continue;
					case 'string':
						elm.appendChild( document.createTextNode(r) );
						continue;
					case 'object':
						if(!r){ // null
							continue;
						}
						if( !( r.append instanceof Function ) && !r.nodeType && ( r.tag || r.text ) ){
							r = mkE(r);
							break;
						}
						if( r instanceof Array ){
							for( var i = 0; i < r.length; ++ i ){
								mkE.appendTypeElement( elm, r[i] );
							}
							continue;
						}
						break;
					case 'boolean': // skipjam false childus
						continue;
					case 'undefined':
						if( D.console ){
							D.console.error( 'Undefined child', par );
						}
						continue;
				}
				if( r.append && elm.append != r.append ){
					r.append(elm);
				} else {
					elm.appendChild(r);
				}
			}
		}
		if( par.els && typeof par.els == 'string' ){
			par.innerHTML = par.els;
		}
		O2O( elm, par.prop );
		if( typeof par.text != 'undefined' ){
			elm.appendChild( document.createTextNode( par.text ) );
		}
		elm.append = mkE.append;
		elm.appendTo = mkE.appendTo;
		elm.prepend = mkE.prepend;
		elm.remove = elm.remove || mkE.remove;
		if( D.animate ){
			elm.animate = D.animate;
		}
		elm.replace = mkE.replace;
	} else {
		elm = document.createTextNode( par.text );
	}
	for( var k in par ){
		var v = par[k];
		switch(k){
			case 'tag':
			case 'text':
			case 'els':
			case 'prop':
			case 'attr':
			case 'text_':
			case 'append':
			case 'remove':
			case 'replace':
				break;
			case 'className':
				elm.className = mkE._classNameString(v);
				break;
			case 'style':
				if(window.Style && (v instanceof Style)){
					v.node = elm;
					O2O(elm.style, v.toObject());
					break;
				}
			default:
				if( k in elm ){
					if( v && v.constructor == Object ){
						O2O( elm[k], par[k] );
					} else {
						try{
							elm[k] = par[k];
						} catch(e){
							if( window.D && D.console ) D.console.error(e);
						}
					}
				} else if( window.D && D.DEV ){
					D.console.warn( 'mkE par[' + k + '] ?', par );
				}
		}
	}
	// IE 11 fix
	if( par.tag == 'input' && ( par.type || par.prop.type ) && isset( par.value || par.prop.value ) ){
		elm.value = par.value || par.prop.value;
	}
	return elm;
}

try{
	mkE._isOldIE = Boolean( navigator.appVersion.match( /MSIE [78]/ ) );
} catch(e){
}

mkE.append = function( node ){
	if( typeof node == 'string' ){
		node = document.getElementById( node );
	}
	node.appendChild( this );
	/*if( this.onAppend ){
		this.onAppend();
	}*/
	return this;
};

mkE.prepend = function( node ){
	if( typeof node == 'string' ){
		node = document.getElementById( node );
	}
	if( node.firstChild ){
		D.insertBefore( this, node.firstChild );
		return this;
	}
	node.appendChild( this );
	return this;
};
mkE.remove = function(){
	removeNode( this );
	return this;
};
mkE.clear = function(){
	clearNode( this );
	return this;
};
mkE._classNameString = function (v){
	if(v instanceof Array){
		var parts = [];
		for(var k in v){
			parts.push(String(v[k]));
		}
		return parts.join(' ');
	}
	return String(v);
};
/**
 * @typedef {Node|mkEPar|number|string|object|Function} mkEl
 */


/**
 * @param {Node} elm
 * @param {mkEl|Array.<mkEl>} r
 */
mkE.appendTypeElement = function( elm, r ){
	if( r instanceof Function ){
		r = r();
	}
	switch( typeof r ){
		case 'number':
			elm.appendChild( document.createTextNode( String(r) ) );
			return;
		case 'string':
			elm.appendChild( document.createTextNode(r) );
			return;
		case 'object':
			if(!r){ // null
				return;
			}
			if( !r.nodeType && ( r.tag || r.text ) ){
				r = mkE(r);
				break;
			}
			if( r instanceof Array ){
				for( var i = 0; i < r.length; ++ i ){
					mkE.appendTypeElement( elm, r[i] );
				}
				return;
			}
			break;
		case 'boolean': // skipjam false childus
			return;
		case 'undefined':
			D.console.error( 'Undefined child', par );
			return;
	}
	if( r.append ){
		r.append(elm);
	} else {
		elm.appendChild(r);
	}
};

mkE.appendTo = function( parent, jquery ){
	if( typeof jquery == 'undefined' ){
		jquery = true;
	}
	if( typeof parent == 'string' ){
		if( jquery ){
			parent = $( parent )[0];
		} else {
			parent = document.getElementById( parent );
		}
	}
	if( parent instanceof Array ){
		parent = reset( parent );
	}
	parent.appendChild( this );
	return this;
};

mkE.replace = function( node ){
	if( typeof node == 'string' ){
		node = document.getElementById( node );
	}
	if( ! node.parentNode ){
		return this;
	}
	D.insertBefore( this, node );
	removeNode( node );
	return this;
};

mkE.Base = function(){
};

mkE.Base.prototype = {

	append:function(parent){
		if( typeof node == 'string' ){
			node = document.getElementById( node );
		}
		this.node.append(parent);
		return this;
	},

	remove:function(){
		this.node.remove();
		return this;
	},

	replace:function(node){
		if( typeof node == 'string' ){
			node = document.getElementById( node );
		}
		D.insertBefore( this.node, node );
		removeNode(node);
		return this;
	},

	prepend:function(node){
		if( typeof node == 'string' ){
			node = document.getElementById( node );
		}
		if( node.firstChild ){
			D.insertBefore( this.node, node.firstChild );
			return this;
		}
		node.appendChild( this.node );
		return this;
	}

};

function removeNode( node ){
	if( node.parentNode && node.parentNode.tagName ){
		return node.parentNode.removeChild( node );
	} else {
		return false;
	}
}

function clearNode( node ){
	var n;
	while( n = node.firstChild ){
		if( n.remove ){
			n.remove();
			continue;
		}
		removeNode(n);
	}
	return node;
}

/**
 * @param {Node} node
 * @param className
 * @returns {Node}
 */
function addClassName( node, className ){
	className = String(className);
	if( node.classList ){
		var cl = className.split(/\s/);
		for( var k = 0, l = cl.length; k < l; k++ ){
			if( !cl[k] ){
				continue;
			}
			node.classList.add(cl[k]);
		}
		return node;
	}
	var cn = node.className.split(' ');
	var is = false;
	var i;
	for( i = 0; i < cn.length; i ++ ){
		if( cn[ i ] == className ){
			is = true;
		}
	}
	if(!is){
		cn.push( className );
	}
	node.className = cn.join( ' ' );
	return node;
}

/**
 * @param {Node} node
 * @param className
 * @returns {Node}
 */
function removeClassName( node, className ){
	className = String(className);
	if( node.classList ){
		var cl = className.split(/\s/);
		for( var k = 0, l = cl.length; k < l; k++ ){
			if( !cl[k] ){
				continue;
			}
			node.classList.remove(cl[k]);
		}
		return node;
	}
	var cn = node.className.split(' ');
	var cnr = [];
	var found = false;
	for( var i = 0; i < cn.length; i ++ ){
		if( cn[ i ] === className ){
			found = true;
		} else {
			cnr.push( cn[ i ] );
		}
	}
	if(found){
		node.className = cnr.join( ' ' );
	}
	return node;
}

/**
 * @param {Node} node
 * @param {string} className
 * @returns {bool}
 */
function existsClassName( node, className ){
	if( node.classList ){
		return node.classList.contains(className);
	}
	var cn = node.className.split( ' ' );
	for ( var i = 0; i < cn.length; i ++ ) {
		if ( cn[ i ] == className ) {
			return true;
		}
	}
	return false;
}

function toggleClassName( node, className ) {
	if (existsClassName( node, className )) {
		return removeClassName( node, className );
	}
	return addClassName( node, className );
}

function getNodeText( node ) {
	if (typeof node.textContent == 'string') {
		return node.textContent;
	} else if (typeof node.innerText == 'string') {
		return node.innerText;
	} else {
		return node.innerHTML;
	}
}

function nextElementSibling( node ) {
	if ( node.nextElementSibling ) {
		return node.nextElementSibling;
	}

	do {
		node = node.nextSibling;
	} while ( node && node.nodeType != Node.ELEMENT_NODE );

	return node;
}

function setNodeText( node, text ) {
	if (typeof node.textContent == 'string') {
		node.textContent = text;
	} else if (typeof node.innerText == 'string') {
		node.innerText = text;
	} else {
		while (node.firstChild) {
			node.removeChild(node.firstChild);
		}
		node.appendChild( node.createTextNode(text) );
	}
}

function findPosX( obj, parent ){
	if(!obj){
		return 0;
	}
	var curleft = 0;
	if( !parent && obj.getBoundingClientRect ) {
		curleft = Math.round(obj.getBoundingClientRect().left);
	} else if( obj.offsetParent ){
		while ( obj.offsetParent ){
			curleft += obj.offsetLeft;
			if( obj.offsetParent === parent ){
				break;
			}
			obj = obj.offsetParent;
		}
	} else if( obj.x ){
		curleft += obj.x;
	}
	return curleft;
}

function findPosY( obj, parent ){
	if(!obj){
		return 0;
	}
	var curtop = 0;
	if ( obj.offsetParent ) {
		while( obj.offsetParent ){
			curtop += obj.offsetTop;
			if( obj.offsetParent === parent ){
				break;
			}
			obj = obj.offsetParent;
		}
	} else if ( obj.y ){
		curtop += obj.y;
	}
	return curtop;
}

/**
 * @param {HTMLDocument} [context=document]
 * @returns {HTMLElement}
 */
function getHeadElement( context ) {
	context = context || document;
	return context.head || context.getElementsByTagName('head')[0];
}

/**
 * @param el newNode
 * @param before referenceNode
 */
D.insertBefore = function( el, before ){
	if( !before ){
		if( D.DEV ){
			D.console.error('no before node');
		}
		return;
	}
	before.parentNode.insertBefore( el, before );
};

D.insertAfter = function( el, node ){
	if( node.nextSibling ){
		D.insertBefore( el, node.nextSibling );
	} else {
		node.parentNode.appendChild( el );
	}
};

if( typeof Node == 'undefined' ){
	(function(){
		var k = 'No' + 'de'; // for IDE
		window[k] = function(){};
		window[k].ELEMENT_NODE = 1;
		window[k].TEXT_NODE = 3;
		window[k].COMMENT_NODE = 8;
	})();
}

// --- dom.js ---

// +++ get.js +++
var Get = function( url ){
	this.__ = '';
	switch( typeof url ){
		case 'object':
			this._ = {};
			O2O( this._, url );
			return;
		case 'undefined':
			url = document.location.pathname;
			if( document.location.search ){
				url += document.location.search;
			}
			if( document.location.hash ){
				url += document.location.hash;
			}
			break;
	}
  this._ = {};
  if( url ){
    var a = url.split('#')[0].split( '?' );
    this.__ = a[0];
    a.shift();
	var urlParams = a.join('?');
    if( urlParams ){
      a = urlParams.split( '&' );
      var b;
      for( var i = 0; i < a.length; i ++ ){
        b = a[ i ].split( '=' );
        this._[ this.decodeURIComponent( b[0] ).replace( /\+/g, ' ' ) ] = ( b[1] ? this.decodeURIComponent( b[1] ).replace( /\+/g, ' ' ) : '' );
      }
    }
  }
};
Get.prototype = {

	toStr:function(){
		return this.toStrItem( '', '', this._ );
	},

	toStrItem:function( prefix, k, v ){
		prefix = ( prefix ? prefix + '[' + encodeURIComponent( k ) + ']' : encodeURIComponent( k ) );
		if( typeof v == 'object' ){
			var re = [];
			for( var k2 in v ) re.push( this.toStrItem( prefix, k2, v[ k2 ] ) );
			return re.join( '&' );
		} else {
			return prefix + ( v !== '' ? '=' + encodeURIComponent( v ) : '' );
		}
	},

	str:function(){
		return this.toStr();
	},

	toString:function(){
		return this.toStr();
	},

	toUrl:function(){
		var str = this.toStr();
		if(!str){
			return this.__;
		}
	  return this.__ + '?' + str;
	},

	add:function( k, v ){
	  this._[ k ] = ( v ? v : '' );
	  return this;
	},

	remove:function( k ){
	  delete this._[ k ];
	  return this;
	},

	v:function( k ){
		return ( typeof this._[k] == 'undefined' ? null : this._[k] );
	},

	addNonce:function(){
		this.add( D.nonce.name, D.nonce.value );
		return this;
	},

  removeNonce:function(){
      this.remove( D.nonce.name );
      return this;
  },

  redirect: function() {
      document.location.href = this.toUrl();
  },

  filterDefaults:function(def){
    for( var k in def ){
      if( isset( this._[k] ) && this._[k] == def[k] ){
        delete this._[k];
      }
    }
    return this;
  },

  decodeURIComponent:function(str){
  	try{
  		return decodeURIComponent(str);
    }catch(e){}
    try{
    	return decodeURIComponent(unescape(str));
    }catch(e){}
    return str;
  }

};

Get.nonce = function(){
	return D.nonce.name + '=' + D.nonce.value;
};

// --- get.js ---

// +++ browser.js +++
var BrowserDetect = {
	init: function () {
		this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
		this.version = this.searchVersion(navigator.userAgent)
			|| this.searchVersion(navigator.appVersion)
			|| "an unknown version";
		this.OS = this.searchString(this.dataOS) || "an unknown OS";
		D.browser = {
			name:this.browser,
			version:this.version,
			mobile:( /Android|webOS|iPhone|NOKIA|iPad|iPod|BlackBerry|IEMobile|MeeGo|Opera Mini/i.test( navigator.userAgent ) ),
			OS:this.OS
		};
		if( D.browser.mobile ){
			$(function(){
				addClassName( document.body, 'mobile' );
			});
		}
	},
	searchString: function (data) {
		for (var i=0;i<data.length;i++)	{
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) {
				if( dataString.match && data[i].reg && dataString.match( data[i].reg ) ){
					return data[i].identity;
				}
				if( dataString.indexOf(data[i].subString) != -1 ){
					return data[i].identity;
				}
			}
			else if (dataProp)
				return data[i].identity;
		}
	},
	searchVersion: function (dataString) {
		if(!dataString){
			return;
		}
		var ie;
		if( dataString.match && ( ie = dataString.match(/Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/) ) ){
			return parseInt( ie[1] );
		}
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return;
		return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
	},
	dataBrowser: [
		{
			string: navigator.userAgent,
			subString: "Edge",
			identity: "Edge"
		},
		{
			string: navigator.userAgent,
			subString: "Chrome",
			identity: "Chrome"
		},
		{
			string: navigator.userAgent,
			subString: "OmniWeb",
			versionSearch: "OmniWeb/",
			identity: "OmniWeb"
		},
		{
			string: navigator.vendor,
			subString: "Apple",
			identity: "Safari",
			versionSearch: "Version"
		},
		{
			prop: window.opera,
			identity: "Opera"
		},
		{
			string: navigator.vendor,
			subString: "iCab",
			identity: "iCab"
		},
		{
			string: navigator.vendor,
			subString: "KDE",
			identity: "Konqueror"
		},
		{
			string: navigator.userAgent,
			subString: "Firefox",
			identity: "Firefox"
		},
		{
			string: navigator.vendor,
			subString: "Camino",
			identity: "Camino"
		},
		{		// for newer Netscapes (6+)
			string: navigator.userAgent,
			subString: "Netscape",
			identity: "Netscape"
		},
		{
			string: navigator.userAgent,
			subString: "MSIE",
			identity: "Explorer",
			versionSearch: "MSIE",
			reg:/Trident/
		},
		{
			string: navigator.userAgent,
			subString: "Gecko",
			identity: "Mozilla",
			versionSearch: "rv"
		},
		{ 		// for older Netscapes (4-)
			string: navigator.userAgent,
			subString: "Mozilla",
			identity: "Netscape",
			versionSearch: "Mozilla"
		}
	],
	dataOS : [
		{
			string: navigator.platform,
			subString: "Win",
			identity: "Windows"
		},
		{
			string: navigator.platform,
			subString: "Mac",
			identity: "Mac"
		},
		{
			string: navigator.userAgent,
			subString: "iPhone",
			identity: "iPhone/iPod"
		},
		{
			string: navigator.platform,
			subString: "Linux",
			identity: "Linux"
		}
	]

};
BrowserDetect.init();

// --- browser.js ---

// +++ store.js +++
D.crypt = function( str, key ){
	str = String( str );
	key = String( key );
	var re = '';
	for( var i = 0; i < str.length; i ++ ){
		var code = str.charCodeAt( i ) + key.charCodeAt( ( i * str.length + i ) % key.length );
		re += String.fromCharCode( code );
	}
	return re;
};

D.uncrypt = function( str, key ){
	str = String( str );
	key = String( key );
	var re = '';
	for( var i = 0; i < str.length; i ++ ){
		var code = str.charCodeAt( i ) - key.charCodeAt( ( i * str.length + i ) % key.length );
		re += String.fromCharCode( code );
	}
	return re;
};

D.store = {

	V:( new Date() ).getMonth(), // paceļam versiju, ja gribam iztīrī visiem lietotājiem stori

	log:false,

	_cache:false,

	_useStorage:function(){
		if( this._useStorage.re ){
			return true;
		}
		try{
			if( window.localStorage ){
				localStorage.setItem( 'test', 1 );
				this._useStorage.re = Boolean( localStorage.getItem('test') );
				return this._useStorage.re;
			}
		} catch(e){
		}
		return false;
	},

	init:function(){
		if( this._init ){
			return;
		}
		this._init = true;
		//var s = new Date().getTime();
		this._cache = D.JSON.decode( this._read() );
		if(this._cache){
			if(typeof(this._cache) != 'object' || this._cache.uid != D.ID || this._cache.V != this.V || !this._cache.d){
				this._write('');
				this._cache = false;
			}
		}
		if(!this._cache){
			this._cache = { uid:D.ID, d:{}, V:this.V };
		}
	},

	_readStr:function(){
		try{
			if( this._useStorage() ){
				var k = '_store_' + D.crypt( D.ID, D.ID );
				if( window.name && window.name[0] == "\t" ){
					localStorage.setItem( k, window.name );
					window.name = '';
				}
				return localStorage.getItem(k) || '';
			}
		}catch(e){
			return '';
		}
		return window.name;
	},

	https:function(){
		window.name = this._readStr();
		this._write('');
	},

	_read:function(){
		return D.uncrypt( this._readStr().substr(1), this.key() );
	},

	_write:function(str){
		str = "\t" + D.crypt( str, this.key() );
		if( this._useStorage() ){
			try{
				if( localStorage.length > 20 ){
					localStorage.clear();
				}
			} catch(e){
			}
			var k = '_store_' + D.crypt( D.ID, D.ID );
			if(str){
				try{
					localStorage.setItem( k, str );
					return;
				} catch(e){
				}
				try{
					localStorage.clear();
					localStorage.setItem( k, str );
				} catch(e){
				}
				return;
			}
			try{
				localStorage.removeItem(k);
			} catch(e){
			}
			return;
		}
		window.name = str;
	},

	key:function(){
		/*var re = Draugiem.Cookie.read( 'storeKey' );
		if( ! re ){
			re = '';
			var len = Math.round( ( Math.random() * 20 ) + 20 );
			for( var i = 0; i < len; i ++ ){
				re += Math.round( Math.random() * 15 ).toString( 16 );
			}
			Draugiem.Cookie.create( 'storeKey', re, 7, '/' );
		}
		return re;
		*/
		return String( D.ID ) + ( navigator ? navigator.userAgent : '' ) + '1';
	},

	get:function( key, prefix ){
		this.init();
		var data = this._cache;
		var re;
		if( prefix ){
			if( !data.d || typeof data.d[prefix] == 'undefined' || typeof data.d[prefix][key] == 'undefined' ){
				return null;
			}
			re = data.d[prefix][key];
		} else {
			if( typeof data.d[key] == 'undefined' ){
				return null;
			}
			re = data.d[key];
		}
		return D.JSON.decode( D.JSON.encode(re) ); // klonejam datus, lai izvairītos sačakarēt kešu
	},

	set:function( key, value, prefix ){
		this.init();
		value = D.JSON.decode( D.JSON.encode(value) ); // pie reizes nočekojam vai vispār ir encodējams
		if( prefix ){
			this._cache.d[ prefix ] = this._cache.d[ prefix ] || {};
			if( value === null ){
				delete this._cache.d[ prefix ][ key ];
			} else {
				this._cache.d[ prefix ][ key ] = value;
			}
		} else {
			if( value === null ){
				delete this._cache.d[ key ];
			} else {
				this._cache.d[ key ] = value;
			}
		}
		this._write( D.JSON.encode( this._cache ) );
	},

	remove:function( key, prefix ){
		this.init();
		this.set( key, null, prefix );
	},

	clear:function( prefix ){
		if( prefix ){
			this.remove( prefix );
			return true;
		}
		this._write('');
		this._cache = { uid:D.ID, d:{} };
		return true;
	}
};

// --- store.js ---

// +++ cookie.js +++
D.Cookie = Draugiem.Cookie = {
	version: '0.1',
	create: function(name,value,days,path){
		if(  ! path ){
			path = '/';
		}
		if (days) {
			var date = new Date();
			date.setTime(date.getTime()+(days*24*60*60*1000));
			var expires = "; expires="+date.toGMTString();
		}
		else var expires = "";
		document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=" + path;
	},

	set:function( name, value, to, path ){
		if(  ! path ){
			path = '/';
		}
		var date = new Date();
		date.setTime( to * 1000 );
		var expires = "; expires="+date.toGMTString();
		document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=" + path;
	},

	read: function(name){
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for(var i=0;i < ca.length;i++) {
			var c = ca[i];
			while( c.charAt(0)==' ' ){
					c = c.substring(1,c.length);
			}
			if( c.indexOf(nameEQ) == 0 ){
				return decodeURIComponent( c.substring( nameEQ.length, c.length ).replace( /\+/g, ' ' ) );
			}
		}
		return null;
	},
	erase: function( name, path ){
		this.create( name, "", -1, path );
	}
};

// --- cookie.js ---

// +++ lang.js +++
D.Lang = function( module ){
	this.module = module;
};

D.Lang.prototype.get = function( string ){
	return D.Lang.get( string, this.module );
};

D.Lang.get = function( string, module ){
	module = module || 'xGlobal';
	D.Lang.log.use(string, module, true);
	return window[ module ] && window[ module ][ string ] ? window[ module ][ string ] : string ;
};

D.Lang.prototype.nget = function( n, string, module ){
	module = module || 'xGlobal';
	return D.Lang.nget( n, string, this.module );
};

D.Lang.nget = function( $n, string, module ){
	module = module || 'xGlobal';
	var $plural = D.Lang.plural($n);
	var k = string + ( $plural ? '_' + $plural : '' );
	return ( window[ module ] && window[ module ][ k ] || ( D.DEV ? k : '' ) ).replace( '%s', $n );
};
D.Lang.ngetText = function( $n, strings ){
	var $plural = D.Lang.plural($n);
	var string = strings[$plural - 1] || '';
	return string.replace( '%s', $n );
};
D.Lang.plural = function( $n ){
	$n = Math.abs($n);
	var $plural;
	switch( D.LANG ){
		case 'lv':
			/*
			 * _1 vienskaitlis
			 * _2 daudzskaitlis
			 * */
			$plural=($n%10==1&&$n%100!=11?'1':'2');
			break;
		case 'ru':
			/*
			 * _1 vienskaitlis
			 * _2 daudzskaitlis
			 * _3 2-4 specgadījums
			 *  */
			$plural=$n%10==1&&$n%100!=11?'1': ($n%10>=2 && $n%10<=4 && ($n%100<10 || $n%100>=20) ? '3' : '2');
			break;
		case 'en':
		case 'de':
			/*
			 * _1 - vienskaitlis
			 * _2 - daudzskaitlis
			 * */
			$plural= String( ( $n != 1 ? 1 : 0 ) + 1 );
			break;
		case 'hu':
			/*
			 * _1 - vienskaitlis
			 * */
			$plural = '1';
			break;
		case 'lt':
			$plural=	($n%10==1 && $n%100!=11 ? '1' : ($n%10>=2 && ($n%100<10 || $n%100>=20) ? '2' : '3'));
			break;
		default:
			$plural = '1';
			break;
	}
	return $plural
};

D.Lang.exists = function( string, module ){
	module = module || 'xGlobal';
	return window[ module ] && !empty( window[ module ][ string ] ) ? true : false;
};

D.Lang.prototype.exists = function( string, module ){
	module = module || 'xGlobal';
	return D.Lang.exists( string, this.module );
};

D.Lang.log = {
	used : {},
	use : function(string, module, requestedWithJs){
		requestedWithJs = requestedWithJs || false;
		if(!D.ADMIN || D.Lang.exists(string, module)){
			return;
		}
		var used = D.Lang.log.used;

		used[module] = used[module] || {};
		var shouldRender = !used[module].hasOwnProperty(string);
		used[module][string] = used[module][string] || {js : false};
		if(requestedWithJs){
			used[module][string].js = true;
		}
		if(shouldRender){
			D.Lang.log.render();
		}
	},

	node : null,
	render : function(){
		if(!D.Lang.log.node || !D.Lang.log.node.parentNode){
			D.Lang.log.node = mkE({
				tag : 'div',
				className : 'langUsageLog'
			}).append(document.body);
		}
		clearNode(D.Lang.log.node);

		for(var i in D.Lang.log.used){
			var
				m = D.Lang.log.used[i],
				items = [],
				missing = 0
				;
			for(var j in m){
				var jsNeeded = m[j].js;
				missing += 1;
				items.push(mkE({
					tag : 'a',
					className : 'missing',
					text : j + (jsNeeded ? '   [JS]' : ''),
					href : new Get(D.INSP + 'tools/lang/stringmanager.php')
						.add('lang', D.LANG)
						.add('key', j)
						.add('module', i)
						.add('addNew', 1)
						.add('js', jsNeeded ? '1' : '0')
						.toUrl() + '#frmEditorstring_original',
					attr : {
						target : '_blank'
					},
					prop : {
						onclick : function(){
							this.style.textDecoration = 'line-through';
							InfoBox.iframe(this.href, {
								width : 600,
								height : 700
							});
							return false;
						}
					}
				}));
			}

			var subItems = mkE({
				tag : 'div',
				className : 'items',
				els : items,
				prop : {
					style : {
						display : 'none'
					}
				}
			});

			mkE({
				tag : 'div',
				className : 'module',
				els : [
					{
						tag : 'a',
						text : i + " (" + missing + ")",
						prop : {
							onclick : D.closure(this, function(node){
								$(node).toggle();
							}, subItems)
						}
					},
					subItems

				]
			}).append(D.Lang.log.node);
		}
	}
};

// --- lang.js ---

// +++ tooltip.js +++
D.ToolTip = function(){
	if( D.ToolTip.loaded ){
		return;
	}
	D.ToolTip.loaded = true;
	D.ToolTip.node = mkE( {
		tag:'div',
		id:'ToolTip',
		className:'radius3',
		prop:{
			style:{
				display:'none'
			}
		}
	} ).append( document.body );
	$( document.body ).mousemove( function( e ){
		D.ToolTip.onmousemove( e );
	} );
	$( document.body ).mouseout( function( e ){
		D.ToolTip.onmousemout( e );
	} );
	$( document.body ).mousedown( function(){
		D.ToolTip.hide();
	} );
	//$( document.body ).mousedown( D.ToolTip.hide );
};

D.ToolTip.onmousemove = function( e ){
	var node = e.target;
	if( empty( node.getAttribute( 'title' ) ) && ! node._drTitle ){
		node = node.parentNode;
	}
	if( !node || ! node.getAttribute ){
		return;
	}
	if( ! ( empty( node.getAttribute( 'title' ) ) && ! node._drTitle ) ){
		var n = document.body;
		D.ToolTip.node.style.left = '0px';
		D.ToolTip.node.style.right = '';
		if( D.mouseX + 5 + D.ToolTip.node.offsetWidth > n.offsetWidth ){
			D.ToolTip.node.style.left = '';
			D.ToolTip.node.style.right = n.offsetWidth - D.mouseX + 10 + 'px';
		} else {
			D.ToolTip.node.style.left = D.mouseX + 10 + 'px';
		}
		if( D.mouseY + 5 + D.ToolTip.node.offsetHeight > n.offsetHeight ){
			D.ToolTip.node.style.bottom = n.offsetHeight - D.mouseY - 5 + 'px';
			D.ToolTip.node.style.top = '';
		} else {
			D.ToolTip.node.style.top = D.mouseY + 5 + 'px';
			D.ToolTip.node.style.bottom = '';
		}
	}
	var title = node.getAttribute( 'title' );
	if( empty(title) || typeof title != 'string' ){
		return;
	}
	D.ToolTip.node.innerHTML = title;
	node._drTitle = title;
	node.setAttribute( 'title', '' );
	D.ToolTip.show();
};

D.ToolTip.onmousemout = function( e ){
	var node = e.target;
	if( ! node._drTitle ){
		node = node.parentNode;
	}
	if ( !node ) {
		return;
	}
	if( empty( node._drTitle ) ){
		return;
	}
	node.setAttribute( 'title', node._drTitle );
	D.ToolTip.hide()
};

D.ToolTip.show = function(){
	/*D.FX( D.ToolTip.node ).fadeIn( 100 );
	clearTimeout( D.ToolTip.hideTimeout );
	D.ToolTip.hideTimeout = setTimeout( D.ToolTip.hide, 3000 );*/
	D.ToolTip.node.style.display = '';
};

D.ToolTip.hide = function(){
	D.ToolTip.node.style.display = 'none';
	//D.FX( D.ToolTip.node ).fadeOut( 50 );
};

$( document ).ready( function(){
	D.ToolTip();
} );

// --- tooltip.js ---

// +++ url.js +++
D.setUrlHash = function( url /*, par*/ ){
	if( window.Section && history.replaceState ){
		if( url[0] == '#' ){
			url = url.substr(1);
		}
		if( !url || url == '...' || url == '_' || url == '#' ){
			history.replaceState( null, '', Section._hrefOrig );
			return;
		}
		url = Url.normalize(url);
		if( Section._href == url ){
			D.log( 'setUrlHash repeat', url );
			return;
		}
		try{
			history.pushState( null, '', url );
		}catch(e){}
		Section._href = Url.get();
		return;
	}
	if( empty(url) || document.location.href.split('#')[0].indexOf(url) == -1 ){
		/*if( D.DEV && window.history.pushState ){
			if( !url[0] || url[0] == '/' || url[0] == '?' || url == '...' ){
				if( url == '...' ){
					url = D.setUrlHash._current;
				}
				try{
					if(par){
						par = D.setUrlHash.obj(par);
					}
					window.history.pushState( par || {}, '', url );
				} catch(e){
				}
				return;
			}
		}*/
		++ D.checkHash.skip;
		document.location.hash = url;
	}
};

D.removeUrlHash = function() {
	var scrollV;
	var scrollH;
	var location = window.location;

	if ( window.history.pushState ) {
		window.history.pushState('', document.title, location.pathname + location.search);
	} else {
		// Prevent scrolling by storing the page's current scroll offset
		scrollV = document.body.scrollTop;
		scrollH = document.body.scrollLeft;

		location.hash = "";

		// Restore the scroll offset, should be flicker free
		document.body.scrollTop = scrollV;
		document.body.scrollLeft = scrollH;
	}
};

D.setUrlHash.obj = function(par){
	switch( typeof par ){
		case 'string':
		case 'number':
		case 'boolean':
		case 'null':
			return par;
		case 'object':
			var re = {};
			for( var k in par ){
				var _r = D.setUrlHash.obj( par[k] );
				if( typeof _r == 'undefined' ){
					continue;
				}
				re[k] = _r;
			}
			return re;
	}
};
/*
D.setUrlHash.init = function(){
	if( D.setUrlHash._init ){
		return;
	}
	if( !D.DEV ){
		return;
	}
	D.setUrlHash._init = true;
	window.onpopstate = function(e){
		if( D.DEV ){
			D.log( e.state );
		}
		if( empty( e.state ) ){
			D.reload();
			return;
		}
		switch( e.state.type ){
			case 'rq':
				rq( e.state.url, e.state.el, e.state.par );
				break;
			case 'infobox':
				InfoBox.open( e.state.url, e.state.par );
				break;
		}
	};
};

if( D.browser.name == 'Chrome' || D.browser.name == 'Safari' ){
	window.onpopstate = function(){
		D.setUrlHash.init();
	};
} else {
	D.setUrlHash.init();
}*/

D.setUrlHash._current = document.location.href.split('#')[0];

D.checkHash = function(){
	var hash = document.location.hash;
	if( D.checkHash.skip ){
		--D.checkHash.skip;
		return;
	}
	if( ( hash.substr(1, 1) == '/' || hash.substr(1, 1) == '?' ) && ( document.location.href.split('#')[0] + '|' ).indexOf( hash.substr(1) + '|' ) == -1 ){
		document.location.replace( hash.substr(1) );
		return;
	}
	// ja ir reāls anchors, tad navigē uz to pēc lapas ielādes
	if(hash.length > 1){
		$(function(){
			document.location.hash = hash;
		});
		return;
	}

	if(D.checkHash.hasChanged && hash.length == 0){
		// Pārlādējam atrašanās vietu, jo ir pazudis hash, bet kontents nav mainījies!
		D.reload();
	}
};


D.checkHash.skip = 0;
D.checkHash.hasChanged = false;
D.checkHash();
if( 'onhashchange' in window ){
	if( window.addEventListener ){
		window.addEventListener( 'hashchange', D.checkHash, false );
	} else {
		window.attachEvent( 'onhashchange', D.checkHash );
	}
}

// --- url.js ---

// +++ modal.js +++
D.Modal = function(par){
	par = par || {};
	this.width = par.width || 600;
	this.height = par.height || 'auto'; // tikai iframe, ja var gadīties, ka ver vaļā citu domēnu
	this.iframeHeightId = par.iframeHeightId || 'outermost';
	this.stickTop = ( typeof par.stickTop == 'undefined' ? true : par.stickTop );
	this.stickToTop = par.stickToTop || false; // pielipina pie augšas
	this.overlayClose = ( typeof par.overlayClose == 'undefined' ? true : par.overlayClose );
	this.withoutOverlay = par.withoutOverlay || false;
	this.withoutTitle = par.withoutTitle || false;
	this.loadingText = par.loadingText || '';
	this.onload = par.onload || function(){};
	//this.height = par.height || 'auto';
	this.onClose = par.onClose || function(){};
	this._onBeforeClose = par.onBeforeClose || function(){};
	this.title = par.title || '';
	this.zIndex = ++InfoBox.zIndex;
	this.parent = par.parent || document.body;
	this.href = par.href || ''; //  InfoBox.img
	var overlays = document.getElementsByClassName('InfoBoxOverlay');
	this.stack = par.stack || false;
	if( this.stack ) {
		if( !D.Modal.stacks.length() ) {
			D.Modal.closeLast();
		}
		D.Modal.stacks.set(D.Modal.stacks.length(), this);
	} else if( D.Modal.stacks.length() > 0 ) {
		this.stack = true;
		D.Modal.stacks.set(D.Modal.stacks.length(), this);
	}
	if( this.stack && overlays.length > 0 ) {
		this.overlay = overlays[0];
		this.overlay.style.zIndex = this.zIndex;
	} else {
		this.overlay = mkE( {
			tag:'div',
			className:'InfoBoxOverlay',
			style:{
				zIndex:this.zIndex
			}
		} );
	}
	if( par.backgroundColor ){
		this.overlay.style.backgroundColor = par.backgroundColor;
	}
	this.node = mkE( {
		tag:'div',
		className:'InfoBox',
		prop:{
			onclick:D.closure( this, this._overlayOnclick )
		},
		style:{
			zIndex:this.zIndex
		},
		els:[
			this.borderNode = mkE( {
				tag:'span',
				className:'radius3 InfoBoxBorder',
				onclick: D.closure(this, function(){
					this.insideClick = true;
				}),
				els:[
					this.titleNode = mkE( {
						tag:'div',
						className:'InfoBoxTitle',
						els:[
							{
								tag:'span',
								className:'cut',
								els:[
									this.titleTextNode = mkE( {
										text:''
									} )
								]
							},
							this.closeButtonNode = mkE( {
								tag:'a',
								className:'InfoBoxClose',
								onclick:D.closure( this, this.close ),
								els: [
									T.svgIcon({
										icon: 'close-12'
									})
								]
							} )
						]
					} ),
					this.contentWrapNode = mkE( {
						tag:'div',
						className:'InfoBoxContentWrap',
						els:[
							this.content = mkE( {
								tag:'div',
								className:'radius3 InfoBoxContent'
							} )
						]
					} ) // contentWrapNode
				]
			} ) // borderNode
		]
	} );
	if( this.parent !== document.body ){
		this.overlay.style.zIndex = '';
		this.overlay.style.position = 'absolute';
		this.node.style.zIndex = '';
		this.node.style.position = 'absolute';
		this.node.style.overflow = 'auto';
	}
	if( par.withoutPadding ){
		addClassName( this.contentWrapNode, 'InfoBoxNoPadding' );
	}
	if( par.className ){
		addClassName( this.node, par.className );
		addClassName( this.overlay, par.className );
	}
	if( par.overflowVisible ){
		addClassName( this.node, 'InfoBoxOverflowVisible' );
	}
	if ( par.withoutTitle ) {
		addClassName( this.contentWrapNode, 'InfoBoxNoTitle' );
		this.titleNode.style.display = 'none';
	}
};

D.Modal.c = 0;
/** @type {Array.<D.Modal>} */
D.Modal._inst = [];
D.Modal.resizeOnClose = false;

D.Modal.closeLast = function(){
	if( !this._inst.length ){
		return false;
	}
	this._inst[ this._inst.length - 1 ].close();
	return true;
};

D.Modal.stacks = new D.SortedMap;

D.Modal.count = function(){
	return this._inst.length;
};

D.Modal.beforeCloseEvents = [];

D.Modal.prototype.opened = false;

D.Modal.prototype.onBeforeClose = function(){
	for( var i = 0, l = D.Modal.beforeCloseEvents.length; i < l; i++ ){
		if( typeof D.Modal.beforeCloseEvents[i] == 'function' && !D.Modal.beforeCloseEvents[i]() ){
			return false;
		}
	}
	return this._onBeforeClose;
};

D.Modal.prototype._show = function(){
	if( this.opened ){
		return;
	}
	if( this.parent === document.body && ++ D.Modal.c == 1 ){
		$('.InfoBox').remove();
		InfoBox.opened = true;
		D.Modal.hideBodyScroll();
		D.Modal._bindEventsGlobal();
	}
	D.Modal._inst.push(this);
	this.opened = true;
	this.overlay.append( this.parent );
	if( !this.withoutOverlay ){
		setTimeout( D.closure( this, function(){
			if ( !this.ready && this.loadingText ) {
				mkE({
					tag: 'div',
					className: 'loadingTextWidth'
				} ).append( this.content );
				mkE({
					tag: 'div',
					className: 'loadingText',
					text: this.loadingText
				} ).append( this.content );
			}
		}), 2000 );
		this.node.append( this.parent );
	}
	this._bindEvents();
	setTimeout( D.closure( this, function(){
		this.node.style.height = '';
		this.overlay.style.height = '';
		addClassName( this.node, 'InfoBoxAnimated' );
		addClassName( this.overlay, 'InfoBoxAnimated' );
	} ), 1 );
};

D.Modal.prototype._bindEvents = function(){
	this._resizeWin = D.closure( this, this._resize );
	$(window).bind( 'resize', this._resizeWin );
	this._scrollEvent = D.closure(this, this._scroll);
	$(this.node).bind( 'scroll', this._scrollEvent)
	this._resizeTO = setInterval( D.closure( this, this._resize ), 100 );
	this._resize();
};

D.Modal.prototype._unbindEvents = function(){
	$(window).unbind( 'resize', this._resizeWin );
	$(this.node).unbind( 'scroll', this._scrollEvent );
	clearTimeout( this._resizeTO );
};

D.Modal.prototype._scroll = function(){
	$(window).trigger('scroll');
};

D.Modal.prototype._resize = function(){
	if( this.type == 'img' ){
		this.content.style.width = 'auto';
	} else if( parseInt( this.content.style.width ) ){
		this.content.style.width = this.width + 'px';
	}
	if( this.type == 'iframe' && this.iframeNode && this.ready ){
		try{
			var h = this.iframeNode.contentWindow.document.getElementById( this.iframeHeightId ).offsetHeight;
			this.iframeNode.style.height = h + 'px';
		} catch(e){
			if( parseInt( this.height ) ){
				this.iframeNode.style.height = this.height + 'px';
			}
		}
	}
	if (this.stickToTop) {
		return;
	}
	var wh = $(window).height();
	var marginTop = Math.max( 20, wh - this.borderNode.offsetHeight ) / 2;
	var mt = parseInt( this.borderNode.style.top );
	if( !mt || marginTop < mt || !this.stickTop ){
		this.borderNode.style.top = marginTop + 'px';
	}
};

D.Modal.prototype._onLoad = function(){
	this.ready = true;
	addClassName( this.node, 'InfoBoxReady' );
	addClassName( this.overlay, 'InfoBoxReady' );
	if( parseInt( this.width ) ){
		this.content.style.width = this.width + 'px';
	}
	this._resize();
	setTimeout( D.closure( this, function(){
		addClassName( this.borderNode, 'InfoBoxBorderAnimated' );
	} ), 1 );
	this.setTitle( this.title );
	this.onload();
};

D.Modal.prototype.open = function( url, rqPar ){
	clearNode( this.content );
	rqPar = rqPar || {};
	this.type = 'ajax';
	this._show();
	rqPar.withoutLoading = true;
	if( typeof rqPar.hash == 'undefined' ){
		rqPar.hash = false;
	}
	var onload = rqPar.onload;
	rqPar.onload = D.closure( this, function(html){
		this._onLoad();
		if(onload){
			onload(html);
		}
	} );
	rq( url, this.content, rqPar );
};

D.Modal.prototype.iframe = function(url){
	clearNode( this.content );
	this.type = 'iframe';
	this._show();
	this.iframeNode = mkE( {
		tag:'iframe',
		className:'radius3 InfoBoxIframe',
		prop:{
			frameBorder:0
			//onload:D.closure( this, this._iframeOnload )
		}
	} ).append( this.content );
	if( InfoBox._i === this ){ // compatiblity
		InfoBox._.iframe = InfoBox._i.iframeNode;
	}
	// f**king IE8
	$( this.iframeNode ).bind( 'load', D.closure( this, this._iframeOnload ) );
	this.iframeNode.src = url;
};

D.Modal.prototype._iframeOnload = function(){
	this._onLoad();
};

D.Modal.prototype.img = function(src){
	clearNode( this.content );
	addClassName( this.node, 'InfoBoxImg' );
	this.type = 'img';
	this._show();
	this._imgNode = mkE( {
		tag:'img',
		prop:{
			onload:D.closure( this, this._imgOnload )
		},
		style:{
			display:'block',
			maxHeight:( $(window).height() - 60 ) + 'px',
			maxWidth:( Math.max(1080, $(window).width()) - 60 ) + 'px'
		}
	} );
	if( this.href ){
		mkE( {
			tag:'a',
			href:this.href,
			els:[
				this._imgNode
			]
		} ).append( this.content );
	} else {
		this._imgNode.append( this.content );
	}
	this._imgNode.src = src;
	if( !D.DEV ){
		this._imgNode.oncontextmenu = function(){
			if(!D.ADMIN){
				return false;
			}
		};
	}
};

D.Modal.prototype._imgOnload = function(){
	this._onLoad();
};

D.Modal.prototype.html = function(html){
	clearNode( this.content );
	this.type = 'html';
	this._show();
	this.content.innerHTML = html || '';
	this._onLoad();
};

D.Modal.prototype.els = function(els){
	clearNode( this.content );
	this.type = 'html';
	this._show();
	mkE.appendTypeElement( this.content, els );
	this._onLoad();
};

/**
 * @param {boolean} [overlayClick]
 * @returns {boolean}
 */
D.Modal.prototype.close = function(overlayClick){
	if( this.insideClick && overlayClick === true){
		this.insideClick = false;
		return false;
	}
	if( !this.opened ){
		this.insideClick = false;
		return false;
	}
	if( this.parent === document.body && -- D.Modal.c == 0 ){
		D.Modal.showBodyScroll();
		D.Modal._unbindEventsGlobal();
		InfoBox.opened = false;
		D.smallPopUp.close();
	}
	this.opened = false;
	var k = array_search( this, D.Modal._inst, true );
	if( k !== false ){
		D.Modal._inst.splice( k, 1 );
	}
	this._unbindEvents();
	if( D.Modal.resizeOnClose ){
		var event;
		if (document.createEvent) {
			event = document.createEvent("HTMLEvents");
			event.initEvent("resize", true, true);
		} else {
			event = document.createEventObject();
			event.eventType = "resize";
		}
		event.eventName = "resize";
		if (document.createEvent) {
			document.body.dispatchEvent(event);
		} else {
			document.body.fireEvent("on" + event.eventType, event);
		}
	}
	this.node.style.overflow = 'hidden';
	this.node.style.height = '0';
	if( D.browser.name == 'Edge' ){
		if( !D.Modal.c ){
			clearNode( this.node );
		}
	} else {
		this.node.remove();
	}
	if ( this.stack && D.Modal.stacks.length() > 1 ) {
		D.Modal.stacks.popLast();
		this.overlay.style.zIndex = D.Modal.stacks.last().zIndex - 1;
	} else {
		D.Modal.stacks.clear();
		this.overlay.style.overflow = 'hidden';
		this.overlay.style.height = '0';
		this.overlay.remove();
	}
	this.onClose();
	this.insideClick = false;
	return true;
};

D.Modal.prototype.setTitle = function(title){
	this.title = title;
	this.titleTextNode.nodeValue = title;
};

D.Modal.prototype._overlayOnclick = function(e){
	if( !this.overlayClose ){
		this.insideClick = false;
		return;
	}
	if( this.borderNode.contains(e.target) || this.borderNode === e.target ){
		this.insideClick = false;
		return;
	}
	if( this.onBeforeClose() === false ){
		this.insideClick = false;
		return;
	}
	this.close(true);
};

D.Modal.hideBodyScroll = function(){
	//this._scrollTop = $(window).scrollTop();
	var outermost = document.getElementById('outermost');
	var bw = document.body.offsetWidth;
	if( D.browser.name == 'Explorer' && D.browser.version < 9 ){
		var html = document.getElementsByTagName('html')[0];
		html.style.overflowY = 'hidden';
	} else {
		document.body.style.overflowY = 'hidden';
	}
	if(outermost){
		outermost.style.marginRight = document.body.offsetWidth - bw + 'px';
	}
};

D.Modal.showBodyScroll = function(){
	var outermost = document.getElementById('outermost');
	if( D.browser.name == 'Explorer' && D.browser.version < 9 ){
		var html = document.getElementsByTagName('html')[0];
		html.style.overflowY = '';
	} else {
		document.body.style.overflowY = '';
	}
	if(outermost){
		outermost.style.marginRight = '';
	}
	//$(window).scrollTop( this._scrollTop );
};

D.Modal._keyDown = D.closure( D.Modal, function(e){
	if( e.keyCode != 27 ){
		return;
	}
	var m = this._inst[ this._inst.length - 1 ];
	if( !m.overlayClose ){
		return;
	}
	if( m.onBeforeClose() === false ){
		return;
	}
	m.close();
} );

D.Modal._bindEventsGlobal = function(){
	$(document).keydown( this._keyDown );
	if( D.browser.name == 'Firefox' ){
		//$(window).bind( 'resize',  this._winResize );
	}
};

D.Modal._unbindEventsGlobal = function(){
	$(document).unbind( 'keydown', this._keyDown );
	if( D.browser.name == 'Firefox' ){
		//$(window).unbind( 'resize',  this._winResize );
	}
};

var InfoBox = {

	zIndex:1000,
	retVal:false,
	closeParent: true,
	_:{},
	/** @type {D.Modal} */
	_i:null,

	close:function(){
		// Prevent parent closing
		if (!this.closeParent) {
			return;
		}
		if(!this.opened && window.parent && window.parent !== window ){
			try{
				parent.InfoBox.close();
			} catch(e){
			}
			return;
		}
		D.Modal.closeLast();
		if( !D.Modal.count()  ){
			D.smallPopUp.close();
		}
	}, // close:function

	_init:function(par){
		par = par || {};
		this.onClose = par.onClose || null;
		par.onClose = D.closure( this, this._onClose );
		this.retVal = false;
		this.closeParent = typeof par.closeParent !== 'undefined' ? par.closeParent : true;
		InfoBox.close();
		InfoBox._i = new D.Modal(par);
		InfoBox._.node = InfoBox._i.node;
		InfoBox.node = InfoBox._i.node;
		InfoBox.content = InfoBox._i.content;
		InfoBox.content.id = 'infobox3_box_content';
	},

	/**
	 * @returns {*}
	 * @private
	 */
	_onClose:function(){
		this.opened = false;
		this._i = null;
		if( this.onClose ){
			var re = this.onClose();
			this.onClose = null;
			return re;
		}
	},

	open:function( href, par ){
		this._init(par);
		InfoBox._i.open(href);
		return false;
	}, // open:function

	html:function( html, par ){
		this._init(par);
		InfoBox._i.html(html);
		return false;
	},

	els:function( els, par ){
		this._init(par);
		InfoBox._i.els(els);
		return false;
	},

	iframe:function( href, par ){
		this._init(par);
		InfoBox._i.iframe(href);
		//InfoBox._.iframe = InfoBox._i.iframeNode;
		return false;
	}, // iframe:function

	img:function( src, par ){
		this._init(par);
		InfoBox._i.img(src);
		return false;
	},

	setTitle:function(v){
		if( this._i ){
			this._i.setTitle(v);
		}
	},

	resizeTo:function( w, h ){
		if( !this._i ){
			return;
		}
		this._i.width = w;
		if(h){
			this._i.height = h;
		}
		this._i._resize();
	},

	/**
	 * @deprecated
	 */
	autoResize:function(){
	}
};

var InfoLite = {
	// loga platums un augstums
	width: 300,
	height: 40,
	defaultWidth: 300,
	defaultHeight: 40,
	wnd: null,
	mode: null,
	text: '...',
	init: function(){
		InfoLite.wnd = $('#infolite');
	},
	open: function(props){
		InfoBox.openLite( props )
		return false;
	},
	close: function(){
		InfoBox.close();
	},
	postload: function(){
	},
	resizeto: function(w,h){
		InfoBox.resizeTo( w, h );
	},
	IEcenter:function(){
	},
	viewport:function(){
	}
};

// --- modal.js ---

// +++ small_popup.js +++
D.smallPopUp = function(){
};

D.smallPopUp._bodyClose = function(){
	if( D.smallPopUp.last ){
		D.smallPopUp.last.close();
	}
};

D.smallPopUp.prototype = {

	html:function(html, par){
		html = html || '';
		par = par || {};
		this.open(false, par, html);
	},

	open:function( url, par, html ){
		if( D.smallPopUp.last ){
			D.smallPopUp.last.close();
		}
		D.smallPopUp.last = this;
		this.close(true);
		this.opened  = true;
		if( D.smallPopUp._inst === this ){
			D.smallPopUp.opened = true;
		}
		html = html || '';
		par.color = par.color || 'Default';
		par.title = par.title || '';
		if( typeof par.offsetY == 'undefined' ){
			this.offsetY = 20 + $(document).scrollTop();
		} else {
			this.offsetY = par.offsetY;
		}
		this.onLoad = par.onLoad || function(){};
		this.onClose = par.onClose || function(){};
		var $this = this;
		this.x = par.x || D.mouseX;
		this.y = par.y || D.mouseY;
		this.dragable = par.dragable;
		this.forceUp = par.forceUp;
		this.forceDown = (typeof par.forceDown !== 'undefined' ? par.forceDown : false);
		this.showClose = (typeof par.showClose !== 'undefined' ? par.showClose : true);
		this.bodyClose = par.bodyClose || false;
		this.parent = par.parent || null;
		if( this.bodyClose ){
			setTimeout( function(){
				$('body').click( D.smallPopUp._bodyClose );
			}, 10 );
		}
		if( this.node ){
			this.node.remove();
		}
		this.node = mkE( {
			tag:'div',
			prop:{
				className:'radius3 smallPopup' + ( par.color ? ' smallPopup' + par.color : '' ),
				style:{
					top:this.parent ? '' : this.y + this.offsetY + 'px',
					width:( par.width ? par.width + 'px' : '' ),
					height:( par.height ? par.height + 'px' : '' ),
					zIndex:InfoBox.zIndex ++
				},
				onclick:function(e){
					D.stopPropagation(e);
				}
			},
			els:[
				this._titleNode = mkE( {
					tag:'div',
					className:'smallPopupTitle' + ( par.dragable ? ' dragable' : '' ),
					prop:{
						onmousedown:function(){
							if( ! par.dragable ){
								return;
							}
							var this_ = this;
							this._drDrag = {
								x:D.mouseX,
								y:D.mouseY,
								sx:$this.node.offsetLeft,
								sy:$this.node.offsetTop,
								onmove:function(){
									$this.node.style.left = D.mouseX - this_._drDrag.x + this_._drDrag.sx  + 'px';
									$this.node.style.top = D.mouseY - this_._drDrag.y + this_._drDrag.sy + 'px';
								}
							};
							$( document.body ).mousemove( this._drDrag.onmove );
							document.body.onmousedown = document.body.onselectstart = function(){return false;};
						},
						onmouseup:function(){
							if( ! par.dragable ){
								return;
							}
							$( document.body ).unbind( 'mousemove', this._drDrag.onmove );
							delete this._drDrag;
							document.body.onmousedown = document.body.onselectstart = function(){};
						}
					},
					els:[
						this.titleDiv = mkE( {
							tag:'div'
						} ),
						mkE( {
							tag:'a',
							className:'smallPopupClose',
							els: [
								T.svgIcon({
									icon: 'close-10'
								})
							],
							style: {
								display: (this.showClose ? '' : 'none')
							},
							prop:{
								href:'',
								onclick:function(){
									$this.close();
									return false;
								}
							}
						} )
					]
				} ),
				this.content = mkE( {
					tag:'div',
					className:'smallPopupContent radius3'
				} ),
				this.arrow = mkE( {
					tag:'div',
					className:'smallPopupArrow'
				} )
			]
		} );
		if( par.hideTitle ){
			this._titleNode.style.display = 'none';
		}
		mkE.appendTypeElement(this.titleDiv, par.title);
		this.node.append( this.parent || document.body );
		$( this.node ).bind( 'mousewheel DOMMouseScroll', function(event){
			var up = event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0;
			var el = event.target;
			while(el){
				if( el.scrollHeight > el.offsetHeight ){
					if( up && !el.scrollTop ){
						return false;
					}
					if( !up && el.scrollTop + el.offsetHeight >= el.scrollHeight ){
						return false;
					}
					return;
				}
				el = el.parentNode;
			}
		} );
		if( url ){
			this.load( url );
		} else {
			if( typeof html == 'string' ){
				this.content.innerHTML = html;
			}else{
				html.append(this.content);
			}
		}
		$this.move();
		var closeFn = D.closure(this, this.close);

		if(par.onclickClose){
			/*
			 * Ļauj man pastāstīt, kāpēc te ir setTimeout...
			 * Kad kliko uz nodes, kas atver small popupu, tad kliks uz-bubble-o līdz dokumentam, un tiek
			 * noķerts ar šo close eventu. Attiecīgi, tiek atvērts popups un uzreiz tiek aivērts, jo tehniski uz body
			 * tika uzklikots. Tāpēc close eventu piekabinam ar aizturi, lai popups momentā neaizveras
			 */
			$this.eventClose = 'click.sp.' + (new Date).getTime();
			setTimeout(function(){
				$(document.body).on($this.eventClose, function(event){
					if(!$(event.target).closest('.smallPopup').length){
						closeFn();
					}
				});
			}, 50);
		}

		// Esc aizver
		this.eventKeyup = 'keyup.sp.' + (new Date).getTime();
		$(document.body).on(this.eventKeyup, function(event){
			if(event.keyCode == 27){
				closeFn();
			}
		});

		return false;
	},

	load:function( url ){
		var $this = this;
		rq( url, this.content, {
			hash:false,
			onload:function(){
				$this.onLoad();
				$this.move();
			}
		} );
	},

	setTitle:function( title ){
		if( ! this.titleDiv ){
			return;
		}
		clearNode( this.titleDiv );
		mkE( {
			tag:'span',
			text:title
		} ).append( this.titleDiv );
	},

	close:function( withoutEvent ){
		if(this.eventClose){
			$(document.body).off(this.eventClose);
			this.eventClose = null;
		}

		if(this.eventKeyup){
			$(document.body).off(this.eventKeyup);
			this.eventKeyup = null;
		}

		this.opened  = false;
		if( D.smallPopUp._inst === this ){
			D.smallPopUp.opened = false;
		}
		if( this.node ){
			if(D.browser.name ==  'Edge' ){
				this.node.style.overflow = 'hidden';
				this.node.style.height = '0';
			} else {
				this.node.remove();
			}
			if(!withoutEvent){
				this.onClose();
			}
		}
		this.onClose = function(){};
		$('body').unbind( 'click', D.smallPopUp._bodyClose );
	},

	move:function(){
		if( this.parent ){
			return;
		}
		var arrowTop = true;
		var arrowLeft = true;
		if( this.x < document.body.offsetWidth / 2 ){
			this.node.style.left = this.x - 15 + 'px';
		} else {
			arrowLeft = false;
			this.node.style.left = this.x - this.node.offsetWidth + 20 + 'px';
		}
		if( !this.forceDown && (this.forceUp || (this.node.offsetTop + this.node.offsetHeight - $(document).scrollTop() > $(window).height())) ){
			this.node.style.top = String( this.y - this.node.offsetHeight + $(document).scrollTop() - 20 ) + 'px';
			arrowTop = false;
		}
		this.arrowPosition( arrowLeft, arrowTop );
	},

	arrowPosition:function( left, top ){
		if(left){
			removeClassName( this.node, 'smallPopUpAR' );
		} else {
			addClassName( this.node, 'smallPopUpAR' );
		}
		if(top){
			removeClassName( this.node, 'smallPopUpAD' );
		} else {
			addClassName( this.node, 'smallPopUpAD' );
		}
	}
};

D.smallPopUp._inst = new D.smallPopUp();

D.smallPopUp.opened = false;

D.smallPopUp.html = function( html, par ){
	var re = this._inst.html( html, par );
	this.content = this._inst.content;
	return re;
};

D.smallPopUp.open = function( url, par, html ){
	var re = this._inst.open( url, par, html );
	this.content = this._inst.content;
	return re;
};

D.smallPopUp.load = function(url){
	return this._inst.load(url);
};

D.smallPopUp.setTitle = function(title){
	return this._inst.setTitle(title);
};

D.smallPopUp.move = function(){
	return this._inst.move();
};

D.smallPopUp.close = function(){
	if( D.smallPopUp.last ){
		D.smallPopUp.last.close();
	}
	return this._inst.close();
};

// --- small_popup.js ---

// +++ music.js +++
"use strict";

D.Music = {
	html5: null,
	/** @type {D.Music.Audio[]} */
	playerInstances: [],
	helpers: {},
	openPlaylistSelect : function(sid, callback) {
		D.smallPopUp.open('/music/rq/get.php?task=add_to_playlist&sid='+sid+'&callback='+callback,{title:D.Lang.get('Pievienot dziesmu izlasei', 'xMusic')});
	},
	toggleSmallPlayerFav : function(sid, a, n) {
		a = $(a);
		var status = parseInt(a.attr('favorited'));

		if (status) {
			a.attr('favorited', '0').removeClass('active');
			$.post('/music/rq/post.php?task=rem_song&sid='+sid+'&'+n);
		} else {
			this.openPlaylistSelect(sid, '');
		}
	},
	openAddToPlaylist: function (song_id, callback) {
		var rpc = new RPC('/music/rq/app.php');
		rpc.send('getPlaylists', {type:'user'}, function (re) {
			if(!re.playlists || !re.playlists.length) {
				return;
			}
			var playlist, options = [
				{
					caption: D.Lang.get('Izveidot jaunu izlasi', 'xMusic'),
					value: 'new'
				}
			];
			for(var i in re.playlists) {
				playlist = re.playlists[i];
				options.push({
					caption: htmlspecialchars_decode(playlist.title),
					value: playlist.id
				});
			}
			var els = mkE({
				tag: 'form',
				onsubmit: function (e) {
					e.preventDefault();
					var v = this.querySelector('input[name="playlist"]:checked');
					if(v) {
						D.loadingOverlay(D.smallPopUp.content);
						D.Music.addSongToPlaylist(song_id, v.value, function (song_id, playlist_id, re) {
							D.removeLoadingOverlay(D.smallPopUp.content);
							if(re.ok) {
								callback(song_id, playlist_id, re);
								D.smallPopUp.last.close();
							}
						});
					}
				},
				els: [
					new T.Form.RadioList({
						name: 'playlist',
						options: options,
						className: 'musicAddToPlaylists'
					}),
					new T.Form.Button({
						caption: D.Lang.get('Save'),
						type: 'submit'
					})
				]
			});
			D.smallPopUp.html(els, {
				title: D.Lang.get('Pievienot dziesmu izlasei', 'xMusic')
			});
			D.smallPopUp.move();
		});
	},
	addSongToPlaylist: function (song_id, playlist_id, callback) {
		var rpc = new RPC('/music/rq/app.php');
		rpc.send('addToPlaylist', {song_id: song_id, playlist_id: playlist_id}, function (re) {
			callback(song_id, playlist_id, re);
		});
	},
	removeSongFromPlaylist: function (song_id, playlist_id, callback) {
		var rpc = new RPC('/music/rq/app.php');
		rpc.send('removeFromPlaylist', {song_id: song_id, playlist_id: playlist_id}, function (re) {
			callback(song_id, playlist_id, re);
		});
	},
	createPlayer: function (par) {
		new D.Music.Player(par.song, par.par).replace(par.id);
	},
	likeSong: function(song_id, cb, dislike) {
		D.onLoad('DR.like', function () {
			var m = dislike ? new DR.like.Dislike : new DR.like.Like;
			m.select = [
				new DR.like.select.GetRe().liked()
			];
			m.id = song_id;
			m.type = DR.like.Like.TYPE_SONG;
			m.onLoad = function () {
				cb(m.re);
			};
			m.call();
		});
	},
	unlikeSong: function (song_id, cb) {
		this.likeSong(song_id, cb, true);
	},
	canPlayHTML5: function () {
		if(this.html5 === null) {
			var a = document.createElement('audio');
			this.html5 = !!(a.canPlayType && a.canPlayType('audio/mpeg;').replace(/no/, ''));
		}
		return this.html5;
	},
	pauseInstancesExceptId: function (id) {
		for(var i in this.playerInstances) {
			if(i != id) {
				if (!this.playerInstances[i].paused) {
					this.playerInstances[i].pause();
				}
			}
		}
	}
};

var currentSong = false;
var nextSong = false;
var currentSongContainer = '';
var waitForSong = '';

var miniPlaylist = [];

function showPlayer(sid, a, id, url, idx) {
	$('#'+id).css('display','block');
	$(a).remove();
	var playerid = id + 'p';

	var swf = url == '' ? 'drminiplayer.swf' : 'drminiplayer_old.swf';
	var so = new SWFObject("/music/media/"+swf, playerid, "27", "27", "9", "#ffffff");

	so.addVariable("url", url);
	so.addVariable("id", playerid);
	so.addVariable("sid", sid);
	so.addParam('wmode','transparent');
	so.addParam('allowScriptAccess', 'always');
	so.write(id);

	waitForSong = playerid;
}

function playerInitComplete() {
	if (waitForSong) {
		D.flash(waitForSong, 'miniPlayerStart');
		waitForSong = false;
	}
}

function onMiniPlayerStart(playerid) {
	/* Check current song */

	if (currentSong && playerid != currentSong) {
		var c = D.flash(currentSong);
		c.miniPlayerStop();
	}

	currentSong = playerid;

	/* Check next song */

	var idx = playerid.split('_');
	currentSongContainer = idx[2];
	idx = parseInt(idx[3], 10);


	var next = miniPlaylist[currentSongContainer][idx + 1];

	if (typeof(next) != 'undefined') {
		nextSong = next;
	} else {
		nextSong = false;
	}
}

function onSongEnd() {
	if (nextSong) {
		var id = currentSong.split('_');

		var pl = id[2];
		id = parseInt(id[3]);
		id = 'sm_player_' + +pl+'_'+id;

		var a = $('#' + nextSong.id).next('a');

		showPlayer(a, nextSong.id, nextSong.url, nextSong.idx);
	}
}

/**
 * @class
 * @extends mkE.Base
 */
D.Music.Audio = Class(
	/**
	 * @lends {D.Music.Audio#}
	 */
	{
		sourceLoaded: false,
		flashLoaded: false,
		flashReady: false,
		paused: true,
		flash: false,
		duration: null,
		currentTime: null,
		player: null,
		source: null,
		volume: 100,
		canplay: false,
		wait: false,
		buffer: 0,
		instanceId: null,
		type: null,
		songId: null,
		__construct: function (par) {
			this.par = par;
			this.html5 = D.Music.canPlayHTML5();
			this.source = this.par.source;
			this.type = this.par.type || 'mini';
			this.songId = this.par.songId || 0;

			this.node = mkE({
				tag: 'div',
				style: {
					position: 'absolute',
					width: '1px',
					height: '1px'
				}
			});

			if(this.html5) {
				this.player = mkE({ tag: 'audio',
					oncanplay: this.oncanplay,
					onpause: this.onpause,
					onplay: this.onplay,
					ontimeupdate: this.ontimeupdate,
					onended: this.onended,
					onprogress: this.onprogress,
					onvolumechange: this.onvolumechange,
					onseeked: this.onseeked,
					onseeking: this.onseeking
				}).append(this.node);
			}
		},

		resume: function () {
			if(!this.sourceLoaded) {
				this.sourceLoaded = true;
				this.setSource(this.source, true);
				return;
			}
			this.paused ? this.play() : this.pause();
		},
		play: function () {
			if(this.canplay) {
				this.flash ? this.player.pplay() : this.player.play();
			}
		},
		pause: function () {
			if(this.flash) {
				if(this.flashReady) {
					this.player.ppause();
				}
			} else {
				this.player.pause();
			}
		},
		_lastVolume: null,
		mute: function () {
			if(this.volume > 0) {
				this._lastVolume = this.volume;
				this.setVolume(0);
			} else {
				this.setVolume(this._lastVolume);
			}
		},
		/**
		 * 0-100
		 * @param int v
		 */
		skipTo: function (v) {
			v = parseInt(v);
			v = v > 0 ? Math.round(this.getDuration() / 100 * v) : 0
			this.flash ? this.player.skipTo(v) : this.player.currentTime = v;
		},
		/**
		 * 0-100
		 * @param int v
		 */
		setVolume: function (v) {
			this.volume = parseInt(v);
			v = this.volume / 100;
			if(this.flash) {
				if(this.flashReady) {
					this.player.setVolume(v);
				}
			} else if (this.player) {
				this.player.volume = v;
			}
		},
		/**
		 * seconds
		 * @return {number}
		 */
		getDuration: function () {
			return this.flash ? this.duration : this.player.duration;
		},
		getVolume: function () {
			return this.volume;
		},
		getBuffer: function () {
			return this.buffer;
		},
		/**
		 * seconds
		 * @return {number}
		 */
		getCurrentTime: function () {
			return this.flash ? this.currentTime : this.player.currentTime;
		},
		//
		flashFallback: function () {
			var loaded = false;
			if(!this.flashLoaded) {
				this.flashLoaded = true;
				this.instanceId = D.Music.playerInstances.push(this) - 1;
				var dom_id = 'dmusicflash' + this.instanceId;
				var so = new SWFObject("/music/media/audiojs.swf?playerInstance=D.Music.playerInstances["+this.instanceId+"]", dom_id, "100%", "100%", "0", "#ffffff");
				so.addParam('wmode','transparent');
				so.addParam('allowScriptAccess', 'always');
				so.write(this.node);
				loaded = true;
				if(GetSwfVer() <= 0) {
					this.node.style.width = '100%';
					this.node.style.height = '100%';
					this.node.style.zIndex = '1';
					this.node.style.top = '0';
					this.node.style.left = '0';
					if(navigator.userAgent.indexOf('MSIE') > -1 || navigator.userAgent.indexOf('Edge') > -1) {
						D.messageBox({
							els: [
								D.Lang.get('Tava pārlūkprogramma neprot atskaņot Flash. Lejupielādē to šeit', 'xMusic'),
								': ',
								{	tag: 'a',
									text: 'https://get.adobe.com/flashplayer/',
									href: 'https://get.adobe.com/flashplayer/'
								}
							],
							title: null,
							type: 'OK'
						});
					}
					this.flashReady = false;
				}
				this.player = this.node.getElementsByTagName('embed')[0];
			}
			return loaded;
		},
		/**
		 * @param string source
		 * @param bool autoplay
		 * @param bool init // Load flash player for big player
		 */
		setSource: function (source, autoplay, init) {
			this.source = source;
			this.wait = false;
			if(!source) {
				return;
			}
			if(!this.flash) {
				var ext = source.split('.').pop();
				this.flash = !this.html5 || ext === 'flv';
			}
			if(this.flash) {
				if(autoplay) {
					var state = this.flashFallback();
					if (!state && this.flashReady) {
						this.sourceLoaded = true;
						this.player.load(source);
					}
				} else if (init) {
					this.wait = true;
					this.flashFallback();
				}
			} else {
				this.sourceLoaded = true;
				this.player.autoplay = autoplay;
				this.player.src = source;
				if(this.instanceId === null) {
					this.instanceId = D.Music.playerInstances.push(this) - 1;
				}
			}
		},
		// Events
		flashready: function () {
			if(GetSwfVer() <= 0) {
				return;
			}
			this.flashReady = true;
			if(!this.wait && this.source) {
				this.sourceLoaded = true;
				this.player.load(this.source);
			}
			this.player.setVolume(this.volume / 100);
		},
		onerror: function (e) {
			console.log('onerror', e);
		},
		onended: function () {
			if(this.type === 'mini') {
				new RPC('/music/rq/app.php').send('addPlay', {
					song_id: this.songId,
					mini: this.type === 'mini'
				});
			}
			if(!this.par.onended()) {
				this.pause();
				this.skipTo(0);
				this.ontimeupdate(0);
			}
		},
		ondurationchange: function (e) {
			this.duration = isNaN(e) ? e.target.duration : e;
			this.par.ondurationchange();
		},
		oncanplay: function () {
			this.canplay = true;
			this.par.oncanplay();
		},
		onpause: function () {
			this.paused = true;
			this.par.onpause();
		},
		onplay: function () {
			D.Music.pauseInstancesExceptId(this.instanceId);
			this.paused = false;
			this.par.onplay();
		},
		ontimeupdate: function (e) {
			this.currentTime = isNaN(e) ? e.target.currentTime : e;
			this.par.ontimeupdate();
		},
		onvolumechange: function (e) {
			this.volume = (isNaN(e) ? e.target.volume : e) * 100;
			this.par.onvolumechange();
		},
		onprogress: function (e) {
			if(this.flash) {
				this.buffer = Math.ceil(e * 100);
			} else if(this.player.buffered.length) {
				this.buffer = Math.ceil(Math.floor(this.player.buffered.end(0)) / Math.floor(this.player.duration) * 100);
			}
			this.par.onprogress();
		},
		onseeked: function () {
			this.par.onseeked();
		},
		onseeking: function () {
			this.par.onseeking();
		}
	},
	mkE.Base
);

/**
 * @class
 * @extends mkE.Base
 */
D.Music.Player = Class(
	/**
	 * @lends {D.Music.Player#}
	 */
	{
		/** @type {D.Music.Player.Par} */
		par: null,
		/** @type {DR.music.struct.Song} */
		song: null,
		/**
		 * @param {DR.music.struct.Song} song
		 * @param {D.Music.Player.Par} par
		 * @private
		 */
		__construct: function ( song, par ) {
			this.song = song;
			this.par = par || {size:'full'};
			if(this.par.size === 'tiny') {
				this.par.hideArtist = true;
				this.par.hideTitle = true;
				this.par.hideCover = true;
				this.par.hideSeek = true;
				this.par.hideTime = true;
			} else if (this.par.size === 'controls') {
				this.par.hideArtist = true;
				this.par.hideTitle = true;
				this.par.hideCover = true;
			}
			this.node = mkE({
				tag: 'div',
				className: 'audioPlayer ' + (this.par.size?'audioPlayer-'+this.par.size:''),
				els: [
					this._nPlay = mkE({
						tag: 'div',
						className: 'play',
						onclick: this.resume,
						els: [
							T.svgIcon({
								icon: 'music-play'
							}),
							T.svgIcon({
								icon: 'music-pause'
							}),
							this._nAudio = D.Music.Audio({
								source: this.song.source,
								songId: this.song.id,
								oncanplay: this._onCanPlay,
								onpause: this._onPause,
								onplay: this._onPlay,
								ontimeupdate: this._onTimeUpdate,
								onended: function () {
									return false;
								},
								onvolumechange: function () {},
								onprogress: function() {},
								onseeking: this._onSeeking,
								onseeked: this._onSeeked
							})
						]
					})
				]
			});
			var favAppend = this.node;
			if(!this.par.hideCover) {
				mkE({
					tag: 'div',
					className: 'cover',
					style: {
						backgroundImage: 'url('+(song.album ? song.album.image.small : song.artist.image.small)+')'
					}
				}).append(this.node);
			}
			if(!this.par.hideTitle) {
				favAppend = mkE({
					tag: 'div',
					className: 'title',
					els: [
						{	tag: 'span',
							className: 'eclipse',
							text: htmlspecialchars_decode(song.title)
						}
					]
				}).append(this.node);
			}
			if(!this.par.hideArtist) {
				mkE({
					tag: 'div',
					className: 'artist-title',
					els: [
						{	tag: 'a',
							className: 'eclipse',
							text: htmlspecialchars_decode(song.artist.title),
							href: song.artist.url
						}
					]
				}).append(this.node);
			}
			if(!this.par.hideSeek) {
				mkE({
					tag: 'div',
					className: 'trackWrap',
					els: [
						this._nSeek = mkE({
							tag: 'input',
							type: 'range',
							value: 0,
							min: 0,
							max: 100,
							oninput: this._onSeekTime,
							onchange: this._onSeekedTime,
							onmousedown: this._onSeekingTime,
							onmouseup: this._onStopSeekingTime,
							onmouseover: this._onMouseOverTime,
							onmouseout: this._onMouseOutTime,
							disabled: true
						})
					]
				}).append(this.node);
			}
			if(!this.par.hideTime) {
				this._nDuration = mkE({
					tag: 'div',
					className: 'duration',
					text: song.duration ? this.secondsToTime(song.duration) : '--:--'
				}).append(this.node);
			}
			if(!this.par.hideFav && D.ID && song.id) {
				mkE({
					tag: 'div',
					className: 'fav ' + (song.isFav ? 'active' : ''),
					title: D.Lang.get('Pievienot dziesmu izlasei', 'xMusic'),
					els: [
						T.svgIcon({
							icon: 'music-bookmark'
						})
					],
					onclick: function () {
						var el = this;
						if(song.isFav) {
							D.Music.removeSongFromPlaylist(song.id, 0, function (a,b,re) {
								if(re.ok) {
									song.isFav = false;
									removeClassName(el, 'active')
								}
							});
						} else {
							D.Music.openAddToPlaylist(song.id, function (a,b,re) {
								if(re.ok) {
									song.isFav = true;
									addClassName(el, 'active')
								}
							});
						}
					}
				}).append(favAppend);
			}
		},
		resume: function () {
			this._nAudio.resume();
		},
		_seeking: false,
		_onSeekTime: function () {
			var duration = this._nAudio.getDuration();
			if(duration) {
				var seconds = Math.round(duration / 100 * this._nSeek.value);
				if(this._nDuration) {
					setNodeText(this._nDuration, this.secondsToTime(seconds));
				}
			}
		},
		_onSeekedTime: function () {
			if(this._canPlay) {
				this._nAudio.skipTo(this._nSeek.value);
			}
		},
		_onSeekingTime: function () {
			this._seeking = true;
			addClassName(this._nSeek.parentNode, 'active');
		},
		_onStopSeekingTime: function () {
			this._seeking = false;
			removeClassName(this._nSeek.parentNode, 'active');
		},
		_onMouseMoveTime: function (e) {
			var pos = D.position(this._nSeek);
			var off = 7;
			var percent = Math.round((e.pageX - pos.x - off) / ($(this._nSeek).width() - (off+7)) * 100);
			percent = Math.max(Math.min(percent, 100), 0);
			var seconds = Math.round(this._nAudio.getDuration() / 100 * percent);
			this._nSeek.title = this.secondsToTime(seconds);
		},
		_onMouseOverTime: function (e) {
			window.addEventListener('mousemove', this._onMouseMoveTime);
		},
		_onMouseOutTime: function () {
			window.removeEventListener('mousemove', this._onMouseMoveTime);
		},
		_onPause: function() {
			removeClassName(this.node, 'playing');
			addClassName(this._nPlay, 'play');
			removeClassName(this._nPlay, 'pause');
		},
		_onPlay: function() {
			addClassName(this.node, 'playing');
			addClassName(this._nPlay, 'pause');
			removeClassName(this._nPlay, 'play');
		},
		GRADIENT_FROM:'#6d8fb6',
		GRANDIENT_TO:'rgba(255,0,0,0)',
		_onTimeUpdate: function () {
			if( !this._seeking && (this._nSeek || this._nDuration) ) {
				var s = this._nAudio.getDuration(), t = this._nAudio.getCurrentTime();
				if( s ) {
					if( this._nSeek ) {
						var percent = Math.round(t / s * 100);
						this._nSeek.value = percent;
						this._nSeek.style.background = 'linear-gradient(to right, ' +
							this.GRADIENT_FROM + ' 0%, ' + this.GRADIENT_FROM + ' ' + percent + '%, ' +
							this.GRANDIENT_TO + ' ' + percent + '%, ' + this.GRANDIENT_TO + ' 100%)';
						this._nSeek.title = this.secondsToTime(Math.round(t));
					}
					if( this._nDuration ) {
						setNodeText(this._nDuration, this.secondsToTime(Math.round(t)));
					}
				}
			}
		},
		_onCanPlay: function () {
			this._canPlay = true;
			addClassName(this.node, 'canplay');
			var duration = this._nAudio.getDuration();
			if (duration) {
				if(this._nSeek) {
					this._nSeek.disabled = false;
				}
				if(this._nDuration) {
					setNodeText(this._nDuration, this.secondsToTime(Math.ceil(duration)));
				}
			}
		},
		_onSeeking: function () {
			this._seeking = true;
		},
		_onSeeked: function () {
			this._seeking = false;
		},
		parseTime: function (seconds) {
			if(typeof seconds === "string") {
				var a = seconds.split(':');
				seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);
			}
			return seconds;
		},
		secondsToTime: function (seconds) {
			seconds = this.parseTime(seconds);
			var time = [];
			var hours   = Math.floor(seconds / 3600);
			var minutes = Math.floor((seconds - (hours * 3600)) / 60);
			var seconds = seconds - (hours * 3600) - (minutes * 60);
			if(hours>=1) {
				time.push(hours);
			}
			time.push(minutes);
			time.push(str_pad(seconds, 2, '0', 'STR_PAD_LEFT'));
			return time.join(':');
		}
	},
	mkE.Base
);

/**
 * @class
 */
D.Music.Player.Par = Class(
	/**
	 * @lends {D.Music.Player.Par#}
	 */
	{
		/** @type {string} */
		size: 'full',
		/** @type {boolean} */
		hideArtist: false,
		/** @type {boolean} */
		hideTitle: false,
		/** @type {boolean} */
		hideCover: false,
		/** @type {boolean} */
		hideSeek: false,
		/** @type {boolean} */
		hideDuration: false,
		/** @type {boolean} */
		hideTime: false,
		/** @type {boolean} */
		hideFav: false,
		/**
		 * @param {boolean} v
		 * @return {D.Music.Player.Par}
		 */
		setHideFav: function ( v ) {
			this.hideFav = v;
			return this;
		},
		/**
		 * @param {boolean} v
		 * @return {D.Music.Player.Par}
		 */
		setHideTime: function ( v ) {
			this.hideTime = v;
			return this;
		},
		/**
		 * @param {boolean} v
		 * @return {D.Music.Player.Par}
		 */
		setHideDuration: function ( v ) {
			this.hideDuration = v;
			return this;
		},
		/**
		 * @param {boolean} v
		 * @return {D.Music.Player.Par}
		 */
		setHideSeek: function ( v ) {
			this.hideSeek = v;
			return this;
		},
		/**
		 * @param {boolean} v
		 * @return {D.Music.Player.Par}
		 */
		setHideCover: function ( v ) {
			this.hideCover = v;
			return this;
		},
		/**
		 * @param {boolean} v
		 * @return {D.Music.Player.Par}
		 */
		setHideTitle: function ( v ) {
			this.hideTitle = v;
			return this;
		},
		/**
		 * @param {boolean} v
		 * @return {D.Music.Player.Par}
		 */
		setHideArtist: function ( v ) {
			this.hideArtist = v;
			return this;
		},
		/**
		 * @param {string} v
		 * @return {D.Music.Player.Par}
		 */
		setSize: function ( v ) {
			this.size = v;
			return this;
		}
	}
);

/**
 * @class
 * @param {D.Music.Player.Par} par
 * @extends D.Music.Player
 */
D.Music.Player.Say = Class(
	/**
	 * @lends {D.Music.Player.Say#}
	 */
	{
		/**
		 * @param {DR.music.struct.Song} song
		 * @private
		 */
		__construct: function ( song, sayItem, canVote ) {
			this.song = song;
			this.par = {size:'full'};
			this.node = mkE({
				tag: 'div',
				className: 'audioPlayer audioPlayer-full SayAudioPlayer',
				els: [
					{
						tag: 'div',
						className: 'cover',
						style: {
							backgroundImage: 'url('+(song.album ? song.album.image.small : song.artist.image.small)+')'
						}
					},
					{
						tag: 'div',
						className: 'right',
						els: [
							{
								tag: 'div',
								className: 'artist-title',
								els: [
									{	tag: 'a',
										className: 'eclipse',
										text: htmlspecialchars_decode(song.artist.title),
										href: song.artist.url
									}
								]
							},
							this._nTitle = mkE({
								tag: 'div',
								className: 'title',
								els: [
									{	tag: 'span',
										className: 'eclipse',
										text: htmlspecialchars_decode(song.title)
									}
								]
							}),
							{
								tag: 'table',
								className: '',
								els: [
									{
										tag: 'tr',
										els: [
											{
												tag: 'td',
												els: [
													this._nPlay = mkE({
														tag: 'div',
														className: 'play',
														onclick: this.resume,
														els: [
															T.svgIcon({
																icon: 'music-play'
															}),
															T.svgIcon({
																icon: 'music-pause'
															}),
															this._nAudio = D.Music.Audio({
																source: this.song.source,
																songId: this.song.id,
																oncanplay: this._onCanPlay,
																onpause: this._onPause,
																onplay: this._onPlay,
																ontimeupdate: this._onTimeUpdate,
																onended: function () {
																	return false;
																},
																onvolumechange: function () {},
																onprogress: function() {},
																onseeking: this._onSeeking,
																onseeked: this._onSeeked
															})
														]
													})
												]
											},
											{
												tag: 'td',
												className: 'trackWrapCol',
												els: [
													{
														tag: 'div',
														className: 'trackWrap',
														els: [
															this._nSeek = mkE({
																tag: 'input',
																type: 'range',
																value: 0,
																min: 0,
																max: 100,
																oninput: this._onSeekTime,
																onchange: this._onSeekedTime,
																onmousedown: this._onSeekingTime,
																onmouseup: this._onStopSeekingTime,
																onmouseover: this._onMouseOverTime,
																onmouseout: this._onMouseOutTime,
																disabled: true
															})
														]
													}
												]
											},
											{
												tag: 'td',
												els: [
													this._nDuration = mkE({
														tag: 'div',
														className: 'duration',
														text: song.duration ? this.secondsToTime(song.duration) : '--:--'
													})
												]
											},
											canVote ?{
												tag: 'td',
												els: [
													{
														tag: 'div',
														className: 'SayEventMusicTop-vote',
														id: 'voteIcon' + sayItem.id,
														els: [
															song.voted ? D.Lang.get('voted') : new T.Form.Button({
																caption: D.Lang.get('vote'),
																onclick: function () {
																	Say.voteSong(song.id, sayItem.id);
																}
															})
														]
													}
												]
											} : false
										]
									}
								]
							}
						]
					},
					T.clear()
				]
			});
			if(D.ID && song.id) {
				mkE({
					tag: 'div',
					className: 'fav ' + (song.isFav ? 'active' : ''),
					title: D.Lang.get('Pievienot dziesmu izlasei', 'xMusic'),
					els: [
						T.svgIcon({
							icon: 'music-bookmark'
						})
					],
					onclick: function () {
						D.addLang('xMusic');
						var el = this;
						if(song.isFav) {
							D.Music.removeSongFromPlaylist(song.id, 0, function (a,b,re) {
								if(re.ok) {
									song.isFav = false;
									removeClassName(el, 'active')
								}
							});
						} else {
							D.Music.openAddToPlaylist(song.id, function (a,b,re) {
								if(re.ok) {
									song.isFav = true;
									addClassName(el, 'active')
								}
							});
						}
					}
				}).append(this._nTitle);
			}
		}
	},
	D.Music.Player
);
// --- music.js ---

// +++ other.js +++
// sludinajuma atversana (arpus /zip/ radamajiem sludinajumiem)
function zipOpen(href){
	var w=860;
	var h=620;
	var left = (screen.width) ? (screen.width-w)/2 : 0;
	var top = (screen.height) ? (screen.height-h)/2 : 0;
	var handle;
	if(handle=window.open(href + '&popup=1','ad_view'+(new Date().getTime()) ,'width='+w+', height='+h+', left='+left+', top='+top+', status=no, scrollbars=yes')){
		handle.focus();
		return false;
	} else {
		return true;
	}
}

function profpic(link, id){
	InfoBox.iframe( link, {onload_resize:false} );
	return false;
}

D.LargeSpotlight = function(id, params) {
	var $this = this;
	this.oId = id;
	this.el = $('#' + id);
	this.itemCount = 0;
	this.itemIndex = 0;
	this.switching = false;

	this.params = {
		interval : 1,
		auto : true
	};

	this.onLoad = function() {
		$this.itemCount = $this.el.find('.pager-block li').length;

		$this.params = $.extend({}, $this.params, params);

		setInterval(function(){
			$this.advance();
		}, $this.params.interval * 1000);

		$this.el.find('.pager-block li a').hover(function(){
			var idx = parseInt($(this).attr('idx'));
			$this.switchTo(idx, true);
		}, function(){

		});
	};

	this.switchTo = function(idx, manual) {
		idx = Math.max(idx, 0);

		if (idx > $this.itemCount-1) {
			idx = 0;
		}

		if ($this.switching) {
			return;
		}

		if (manual) {
			$this.params.auto = false;
		}

		var imgb = $this.el.find('.image-block');
		var pgrb = $this.el.find('.pager-block');

		var currB = imgb.find('.slide:eq('+$this.itemIndex+')');
		var newB =  imgb.find('.slide:eq('+idx+')');

		$this.switching = true;

		pgrb.find('li').removeClass('active');
		pgrb.find('li:eq('+idx+')').addClass('active');

		currB.css({opacity:0,display:'none'});
		newB.css({opacity:1, display:'block'});

		$this.itemIndex = idx;
		$this.switching=false;
	};

	this.advance = function() {
		var idx = $this.itemIndex;
		if (idx + 1 > $this.itemCount) {
			idx = 0;
		}
		idx++;

		if ($this.params.auto) {
			$this.switchTo(idx);
		}
	};

	this.onLoad();
};

var defAlert = alert;
D._alert = function(t){
	/*if( InfoBox.opened ){
		defAlert(t);
	} else {*/
		D.messageBox( { type:'OK', text:t, title:D.domain, width:300 }, function(){} );
	//}
};
try{
	alert = D._alert;
} catch(e){
	try{
		eval('function alert(t){ D._alert(t); }');
	} catch(e){}
}

// IE 8- support for HTML5
if( D.browser.name == 'Explorer' && D.browser.version < 9 ){
	document.createElement('header');
	document.createElement('footer');
	document.createElement('section');
	document.createElement('aside');
	document.createElement('nav');
	document.createElement('article');
	document.createElement('figure');
	document.createElement('figcaption');
}

// chrome bug fix novērš melno ekreānu
if( D.browser.name == 'Chrome' ){
	$( function(){
		document.body.style.position = 'relative';
		setTimeout( function(){
			document.body.style.position = '';
		}, 500 );
	} );
}

function authorizeUser() {
    var temp_ret = {};
    temp_ret.session_hash = $('#session_hash').val();
    temp_ret.app_id = $('#app_id').val();
    temp_ret.permissions = {};
    $('form input:checkbox').each(function(){
        if($(this).attr("perm-nr") != undefined) {
            temp_ret.permissions[$(this).attr('perm-nr')] = $(this).prop("checked");
        }
        if($(this).attr("name") ==  "joinPage") {
            temp_ret.permissions["joinPage"] = $(this).prop("checked");
        }
				if($(this).attr("name") == "accept_app_cookies") {
					temp_ret.accept_app_cookies = $(this).prop("checked");
				}
    });
    var rpc = new RPC('/applications/rq/javascript_authorize.php');
    rpc.send('authorizeUser', {data: temp_ret}, function(re){
        if(re) {
            var json = D.JSON.parse(re);
            if(json.refresh_url) {
                window.location = json.refresh_url;
            } else {
                InfoBox.retVal = json;
                InfoBox.close();
            }
        }
    })
}

function showKinoMovie(urlOrNode, backUrl) {
	D.onLoad( 'Kino',function() {
		if(typeof urlOrNode !== "string"){
			urlOrNode = urlOrNode.getAttribute('href');
		}
		return D.Kino.showMovie(urlOrNode, backUrl);
	} );
	return false;
}

function showKinoRecommendations(mid) {
	InfoBox.open('/kino/rq/other_user.php?mid='+mid,{width:820, modal:true, overlayClose:true});
}

D.frgroups = {
	check : function(el, gid) {
		document.getElementById('g_input_' + gid).disabled = !el.checked;
	},
	edit : function() {
		return InfoBox.open('/friends/rq/edit_gr_names.php', { title: this.title, width: 300});
	},
	open: function () {
		D.addCSS('/account/css/settings.css');
		D.addJS('/account/js/settings.js', function () {
			D.FriendSettings.open(true);
		});
	}
};

/**
 * @class
 * @param {string} key
 * @param {string} text
 * @param {boolean} popup
 * @extends mkE.Base
 */
D.Feedback = Class(
	/**
	 * @lends {D.Feedback#}
	 */
	{
		/** @type {string} */
		key: null,
		/** @type {boolean} */
		popup: null,

		/**
		 * @param {string} key
		 * @param {string} text
		 * @param {boolean} popup
		 * @private
		 */
		__construct: function ( key, text, popup ) {
			this.key = key;
			this.popup = popup;

			this.node = mkE({
				tag: 'div',
				className: 'draugiemFeedback',
				els: [
					T.info(text),
					this._textArea = new T.Form.TextArea({
						caption: 'Apraksts'
					}),
					new T.Form.Footer({
						els: [
							this._saveBtn = new T.Form.Button({
								caption: 'Atcelt',
								color: 'link',
								onclick: this.close
							}),
							new T.Form.Button({
								caption: 'Nosūtīt',
								onclick: this.save
							})
						]
					})
				]
			});

			if( this.popup ) {
				InfoBox.els(this.node, {
					title: 'Kā tev patīk?',
					width: 448
				});
			}
		},

		close: function () {
			if( this.popup ) {
				InfoBox.close();
			}
		},

		save: function () {
			if( !this._textArea.value().trim() ) {
				return;
			}
			D.onLoad('DR.special.common', this._onLoadApi);
		},

		_onLoadApi: function () {
			if( this._mSendFeedback && this._mSendFeedback.processing ) {
				return;
			}
			this._mSendFeedback = new DR.special.common.SendFeedback();
			this._mSendFeedback.text = this._textArea.value();
			this._mSendFeedback.type = this.key;
			this._mSendFeedback.onLoad = this._mSendFeedbackRe;
			this._mSendFeedback.onError = this._mSendFeedbackErr;
			this._saveBtn.disable(true);
			D.loadingOverlay(this.node, {delay: true});
			this._mSendFeedback.call();
		},

		_mSendFeedbackRe: function () {
			D.removeLoadingOverlay(this.node);
			clearNode(this.node);
			T.success('Paldies!').append(this.node);
			new T.Form.Footer({
				els: [
					this._saveBtn = new T.Form.Button({
						caption: 'Aizvērt',
						color: 'link',
						onclick: this.close
					})
				]
			}).append(this.node);
		},

		_mSendFeedbackErr: function () {
			D.removeLoadingOverlay(this.node);
			this._saveBtn.disable(false);
		}

	},
	mkE.Base
);
// --- other.js ---

// +++ animate.js +++
D.animate = function( style, time, par ){
	if( empty( style ) ){
		return this;
	}
	par = par || {};
	var node = this;
	node._animateN = node._animateN || ++ D.animate.n;
	node._animate = node._animate || {};
	var steps = Math.ceil( time / D.animate.INTERVAL );
	var a = node._animate;
	var v;
	for( var k in style ){
		v = style[ k ];
		switch( k ){
			case 'height':
			case 'width':
			case 'top':
			case 'left':
			case 'opacity':
				a[ k ] = {
					type:'number',
					steps:steps,
					cur:Number( D.animate.getStyle( node, k ) ) || 0,
					end:v
				};
				a[ k ].d = D.animate.getD( k, a );
				if( !a[ k ].d ){
					delete a[ k ];
				}
		}
		if( a[ k ] ){
			a[ k ].endTime = ( new Date().getTime() ) + time;
			a[ k ].par = par;
		}
	}
	D.animate.nodes[ node._animateN ] = node;
	if( !D.animate._loopInterval ){
		D.animate.loop();
		D.animate._loopInterval = setInterval( D.animate.loop, D.animate.INTERVAL );
	}
	return this;
};

D.animate.getStyle = function( node, name ){
	switch( name ){
		case 'top':
			return node.offsetTop;
		case 'left':
			return node.offsetLeft;
		case 'width':
			return node.offsetWidth;
		case 'height':
			return node.offsetHeight;
		case 'opacity':
			return Number( getStyle( node, name ) || node.style.opacity );
	}
};

D.animate.getD = function( k, a ){
	switch( k ){
		case 'height':
			case 'width':
			case 'top':
			case 'left':
				return Math.round( ( a[ k ].end - a[ k ].cur ) / a[ k ].steps * 10 ) / 10;
			case 'opacity':
				return Math.round( ( a[ k ].end - a[ k ].cur ) / a[ k ].steps * 100 ) / 100;
	}
	return 0;
};

D.animate.INTERVAL = 20;
D.animate.n = 0;
D.animate.nodes = {};

D.animate.loop = function(){
	var s = ( new Date() ).getTime();
	var node;
	for( var i in D.animate.nodes ){
		node = D.animate.nodes[ i ];
		if( ! node.parentNode || ! ( node.offsetHeight || node.offsetWidth ) ){
			node._animate = {};
			delete D.animate.nodes[ i ];
		}
		var a = node._animate;
		for( var k in a ){
			var r = a[ k ];
			if( r.type == 'number' ){
				r.cur += r.d;
				if( r.d > 0 ){
					r.cur = Math.min( r.cur, r.end );
				} else {
					r.cur = Math.max( r.cur, r.end );
				}
			}
			switch( k ){
				case 'height':
				case 'top':
				case 'width':
				case 'left':
					node.style[ k ] = Math.round( r.cur ) + 'px';
					break;
				case 'opacity':
					var v = Math.round( r.cur * 100 ) / 100;
					node.style[ k ] = v;
					node.style.filter = 'alpha(opacity=' + Math.round( v * 100 ) + ')';
					break;
			}
			var steps = r.steps;
			var t = ( new Date() ).getTime();
			if( r.type == 'number' ){
				var dt = r.endTime - t;
				if( dt > D.animate.INTERVAL ){
					r.steps = Math.ceil( dt / D.animate.INTERVAL );
				} else {
					r.steps = 1;
				}
				if( steps != r.steps ){
					r.d = D.animate.getD( k, a );
					//D.console.info( r.steps, ', ', r.d, ', ', r.cur, ', ', r.end );
				}
			}
			-- r.steps;
			if( r.cur == r.end || ! r.d ){
				delete a[ k ];
				if( r.par && r.par.callback ){
					r.par.callback( {name:k, target:node} );
				}
			}
		}
		if( empty( a ) ){
			delete D.animate.nodes[ node._animateN ];
		}
	}
	if( empty( D.animate.nodes ) ){
		clearInterval( D.animate._loopInterval );
		D.animate._loopInterval = 0;
	}
	//var e = ( new Date() ).getTime();
	//setTimeout( D.animate.loop, Math.max( D.animate.INTERVAL - ( e - s ), 1 ) );
};


D.FX = function( node ){
	if( this === D ){
		return new D.FX( node );
	}
	this.node = node;
	node.animate = node.animate || D.animate;
};
D.FX.prototype = {

	slideDown:function( time, par ){
		time = time || 300;
		par = par || {};
		var node = this.node;
		var callback = par.callback || function(){};
		par.callback = function( e ){
			e.target.style.height = '';
			e.target.style.overflow = e.target._animateSlideDown.overflow;
			//delete e.target._animateSlideDown; // IE7 bug
			callback( e );
		};
		node._animateSlideDown = node._animateSlideDown || {
			overflow:getStyle( node, 'overflow' )
		};
		node.style.overflow = 'hidden';
		if( getStyle( node, 'display' ) == 'none' ){
			node.style.height = '0px';
			node.style.display = '';
		}
		node.animate(
			{height:node.scrollHeight},
			time,
			par
		);
		return this;
	},

	slideUp:function( time, par ){
		time = time || 300;
		par = par || {};
		var node = this.node;
		var callback = par.callback || function(){};
		par.callback = function( e ){
			e.target.style.display = 'none';
			callback();
		};
		node._animateSlideDown = node._animateSlideDown || {
			overflow:getStyle( node, 'overflow' )
		};
		node.style.overflow = 'hidden';
		node.animate(
			{height:0},
			time,
			par
		);
		return this;
	},

	fadeOut:function( time, par ){
		time = time || 300;
		par = par || {};
		var callback = par.callback || function(){};
		par.callback = function( e ){
			e.target.style.display = 'none';
			callback();
		};
		this.node.animate(
			{opacity:0},
			time,
			par
		)
	},

	fadeIn:function( time, par ){
		time = time || 300;
		par = par || {};
		if( getStyle( this.node, 'display' ) == 'none' ){
			this.node.style.opacity = 0;
			this.node.style.display = '';
		}
		this.node.animate(
			{opacity:1},
			time,
			par
		)
	}

};

// --- animate.js ---

// +++ section.js +++
var sectionRouting = {
	'messages':true,
	'blogs':true,
	'groups':function(){
		var section = new SectionLoader('groups');
		section.js = "/groups/js/section.js";
		section.css = "/groups/css/groups.css";
		return section;
	},
	'tv-programma':function(){
		var section = new SectionLoader('tvguide');
		section.js = "/tv-programma/tv-programma.js";
		section.css = "/tv-programma/tv-programma.css";
		return section;
	},
	'skatuve':function (  ) {
		return new SectionLoader('events');
	},
	'events':true,
	'kid-approval':function(){
		var section = new SectionLoader('KidApproval');
		section.js = "/kid-approval/kid-approval.js";
		section.css = "/kid-approval/kid-approval.css";
		return section;
	},
	'kitties':true,
	'zinas':true,
	'radio':true,
	/**
	 * Special
	 */
	'ziemasfantazija':'S',
	'skrape':'S',
	'leduspils':'S',
	'sieviesudiena16':'S',
	'bucasrozes':'S',
	'saulainie':'S',
	'putni':'S',
	'hokejs2016':'S',
	'ziedumagija':'S',
	'malaizija':'S',
    'tavstips':'S',
	'patiesibavaimeli':'S',
	'lieldienas16':'S',
	'olukaujas':function(){
		var section = new SectionLoader('lieldienas16');
		section.js = "/special/lieldienas16/assets/script.js";
		section.css = "/special/lieldienas16/assets/style.css";
		return section;
	},
	'euro2016':'S',
	'jani16':'S',
	'rio2016':'S',
	'spigulo':'S',
	'zigzags':'S',
	'kugisi':'S',
	'magiskie':'S',
	'kodoma':'S',
	'dzejanosirds': function (  ) {
		var section = new SectionLoader('dzejanosirds2019');
		section.js = "/special/dzejanosirds2019/assets/script.js";
		section.css = "/special/dzejanosirds2019/assets/style.css";
		return section;
	},
	'rasensdejo3':'S',
	'flirtins':'S',
	'kirbitis':'S',
	'latvijasraksti':'S',
	'svetkulentite2016':'S',
	'advente2016':'S',
	'pasts16':'S',
	'gads2016':'S',
	'uzsauctostu':'S',
	'pikosanas':'S',
	'lapas2016':'S',
	'lapas2017':'S',
	'zobratins':'S',
	'sieviesudiena17':'S',
	'lieldienas17':'S',
	'hokejs2017':'S',
	'makoni':'S',
	'papardes':'S',
	'jani17':'S',
	'skaistakiemirkli':'S',
	'vilki2017':'S',
	'auglubole':function(){
		var section = new SectionLoader('ogubole');
		section.js = "/special/ogubole/assets/script.js";
		section.css = "/special/ogubole/assets/style.css";
		return section;
	},
	'ogubole':'S',
	'reibinosieziedi':'S',
	'soliprieksa':'S',
	'pudele':'S',
	'dzejanosirds2017':'S',
	'dzejanosirds2016':function (  ) {
		var section = new SectionLoader('dzejanosirds');
		section.js = "/special/dzejanosirds/assets/script.js";
		section.css = "/special/dzejanosirds/assets/style.css";
		return section;
	},
	'svetkulentite2017':'S',
	'karaoke':'S',
	'advente':function (  ) {
		var section = new SectionLoader('advente2021');
		section.js = "/special/advente2021/assets/script.js";
		section.css = "/special/advente2021/assets/style.css";
		return section;
	},
	'pasts17': 'S',
	'amorins': 'S',
	'komixeris':'S',
	'sieviesudiena18':'S',
	'lieldienas18':'S',
	'draugiem14':'S',
	'jani18':'S',
	'hokejs2018':'S',
	'dainas':'S',
	'vasarasatminas':'S',
	'soliprieksa2018':'S',
	'liesmins':'S',
	'simtgade':'S',
	'romantika':'S',
	'advente2017':function (  ) {
		var section = new SectionLoader('advente');
		section.js = "/special/advente/assets/script.js";
		section.css = "/special/advente/assets/style.css";
		return section;
	},
	'advente2018':'S',
	'pasts18':'S',
	'cukurins':'S',
	'valentinapasts':'S',
	'sieviesudiena19':'S',
	'draugiem15':'S',
	'lieldienas19':'S',
	'galcon':'S',
	'hokejs2019':'S',
	'karsts':'S',
	'vainags':'S',
	'senes': 'S',
	'zemenite': 'S',
	'pasts19': 'S',
	'rotajumi': 'S',
	'gads2019': 'S',
	'pudele20': 'S',
	'mur': 'S',
	'sveicam': 'S',
	'draugiem16': 'S',
	'ziedi': 'S',
	'aprilapril2020': 'S',
	'lieldienas20': 'S',
	'taureniti': 'S',
	'bites': 'S',
	'magiskaskartis': 'S',
	'ligo20': 'S',
	'iepriecini': 'S',
	'zivs': 'S',
	'burbulisi': 'S',
	'serijas': 'S',
	'nedarbi': 'S',
	'cinas': 'S',
	'pukainasspeles': 'S',
	'latins': 'S',
	'kopajautrak': 'S',
	'pasts20': 'S',
	'dodrozi': 'S',
	'sieviesudiena21': 'S',
	'cepumi': 'S',
	'draugiem17': 'S',
	'lieldienas21': 'S',
	'hokejs2021': 'S',
	'zvaigzne': 'S',
	'setev': 'S',
	'ejietsenot': 'S',
	'civ': 'S',
};
// ---------------------------------------------------------------------------------------------------------------------

// +++ Url +++
{
	/**
	 * @param {String} [href]
	 * @constructor
	 */
	function Url(href){
		this.href = href ? Url.normalize(href) : Url.get();
		this._path = this.href.split('?')[0].split('/');
		this._path.shift();
		this.before = '';
		this.current = this._path[0];
		/** @type {Get} get */
		this.get = new Get( this.href );
	}

	Url.prototype.shift = function(){
		this.before = this._path.shift() || '';
		this.current = this._path[0] || '';
		return this.before;
	};

	Url.prototype.shiftTill = function(v){
		while(true){
			if( this.current == v || !this._path.length ){
				break;
			}
			this.shift();
		}
	};

	Url.makeUrl = function(el){
		el = el || location;
		if( el.tagName == 'A' ){ // IE fix
			el['href'] = el.href;
		}
		return ( el.pathname[0] == '/' ? '' : '/' ) + el.pathname + ( el.search ? el.search : '' );
	};

	Url.get = function(){
		if( location.hash.indexOf('!') == 1 ){
			return location.hash.substr(2);
		}
		return Url.makeUrl();
	};

	Url.set = function(href){
		if( history.pushState ){
			history.pushState( null, '', href );
			return;
		}
		location.hash = '!' + href;
	};

	Url.replace = function(href){
		if( history.replaceState ){
			history.replaceState( null, '', href );
			return;
		}
		location.replace( '#!' + href );
	};

	Url.normalize = function(url){
		var el = document.createElement('a');
		if( history.pushState || url[0] == '/' ){
			el.href = url;
		} else {
			var a = Url.get().split('/');
			a.splice( a.length - 1, 1 );
			el.href = a.join('/') + '/' + url;
		}
		return this.makeUrl(el);
	};
}
// --- Url ---

// +++ Layout +++
/**
 * @class
 */
var Layout = Class(
	/**
	 * @lends {Layout#}
	 */
	{
		__NAME:'Layout',

		LT_WIDTH: 240,
		LT_MARGIN: 20,

		/** @type {Node} */
		megaGigaNode:null,

		__construct:function(){
			this.node = mkE( {
				tag:'div',
				id:'container',
				els:[
					this.ctNode = mkE( {
						tag:'div',
						id:'ct'
					} )
				]
			} );
		},

		breadCrumbs: null,

		addCrumb: function(title, href) {
			if (!this.breadCrumbs) {
				this.breadCrumbs = new BreadCrumbs;
				this.breadCrumbNode = this.breadCrumbs.node;
			}
			this.breadCrumbs.addCrumb(title, href);
		},

		ct:function(){
			if( !this.ctNode.style.width ){
				this._setSizes();
			}
			return this.ctNode;
		},

		/**
		 * @param lt
		 * @returns {Node|null|*}
		 */
		lt:function(lt){
			if(lt){
				this.ltNode = lt;
				D.insertBefore( this.ltNode, this.ctNode );
				this._setSizes();
			}
			if( !this.ltNode ){
				this.ltNode = mkE( {
					tag:'div',
					id:'lt',
					style:{
						width: this.LT_WIDTH + 'px'
					}
				} );
				D.insertBefore( this.ltNode, this.ctttNode || this.ctNode );
				this._setSizes();
			}
			return this.ltNode;
		},

		rt:function(){
			if( !this.rtNode ){
				this.rtNode = mkE( {
					tag:'div',
					id:'rt',
					style:{
						width:'300px'
					}
				} );
				this.rtNode.append( this.node );
				this._setSizes();
			}
			return this.rtNode;
		},

		tt:function(){
			if( !this.ttNode ){
				this.ttNode = mkE( {
					tag:'div',
					id:'tt'
				} );
				D.insertBefore( this.ttNode, this.ltNode || this.ctNode );
			}
			return this.ttNode;
		},

		cttt:function(){
			if( !this.ctttNode ){
				this.ctttNode = mkE( {
					tag:'div',
					id:'cttt'
				} );
				D.insertBefore( this.ctttNode, this.ctNode );
			}
			return this.ctttNode;
		},

		searcher:function(searcher){
			if( !this._sectionTitleNode ){
				this._drawSectionTitle();
			}
			clearNode(this._searcherContainerNode);
			searcher.node.append(this._searcherContainerNode);
		},

		feedback:function(type, text){
			if( !this._sectionTitleNode ){
				this._drawSectionTitle();
			}
			clearNode(this._feedbackContainerNode);
			this._feedbackContainerNode.style.display = '';
			new T.Form.Button({
				caption: ' ' + D.Lang.get('Kā tev patīk?'),
				color: 'link',
				svgIcon: 'comments',
				onclick: function () {
					D.Feedback(type, text, true);
				}
			}).append(this._feedbackContainerNode);
		},

		sectionTitle: function(title){
			if( this._sectionTitleNode ){
				clearNode(this._sectionTitleNode);
			}else{
				this._drawSectionTitle();
			}
			mkE.appendTypeElement(this._sectionTitleNode, title);
		},

		_drawSectionTitle: function(){
			this._sectionTitleContainer = mkE({
				tag: 'div',
				id: 'sectionTitle',
				els: [
					this._sectionTitleNode = mkE({
						tag: 'h1'
					}),
					this._feedbackContainerNode = mkE({
						tag: 'div',
						id: 'feedbackContainer',
						style: {
							display: 'none'
						}
					}),
					this._searcherContainerNode = mkE({
						tag: 'div',
						id: 'searcherContainer'
					}),
					T.clear()
				]
			}).prepend(this.node);
		},

		_setSizes:function(){
			var w = 1080;
			if( this.ltNode ){
				w -= this.LT_WIDTH + this.LT_MARGIN;
			}
			if( this.rtNode ){
				w -= 320;
			}
			this.ctNode.style.width = w + 'px';
		},

		megaGiga:function(place){
			$('#header .adv').remove();
			this.megaGigaNode = mkE( {
				tag:'div',
				className:'adv',
				id:'adv' + place
			} ).append( document.getElementById('header') );
		},

		show:function(){
			D.removeLoadingOverlay( this.node );
			var node = document.getElementById('container');
			if( node != this.node ){
				D.insertBefore( this.node, node );
				removeNode(node);
			}
			$('#header > .adv').remove();
			var headerNode = document.getElementById('header');
			if( this.megaGigaNode ){
				headerNode.appendChild( this.megaGigaNode );
			}
			$('#marquee').remove();
			$('#breadCrumb').remove();
			$('#header_admin').remove();
			if( this.headerAdminNode ){
				if( node.childNodes ){
					D.insertBefore(this.headerAdminNode, node.childNodes[0]);
				}else{
					node.appendChild(this.headerAdminNode);
				}
			}
			if( this.breadCrumbNode ){
				if( node.childNodes ){
					D.insertBefore(this.breadCrumbNode, node.childNodes[0]);
				}else{
					node.appendChild(this.breadCrumbNode);
				}
			}
		},

		getCurrent:function(){
			this.node = document.getElementById('container');
			this.ltNode = document.getElementById('lt');
			this.ctNode = document.getElementById('ct');
			this.rtNode = document.getElementById('rt');
			this.ttNode = document.getElementById('tt');
			this.ctttNode = document.getElementById('cttt');
			this.megaGigaNode = $('#header > .adv')[0] || null;
			this.breadCrumbNode = $('#breadCrumb')[0] || null;
			this.headerAdminNode = $('#header_admin')[0] || null;
		}

	}
);
// --- Layout ---

// +++ Section +++
/**
 * @constructor
 */
var Section = Class(
	/**
	 * @lends {Section#}
	 */
	{

		__NAME:'Section',
		/** @type {DR.ApiCall} */
		apiCall:null,
		cache:false,
		cacheBack:false,
		title:'',
		skinUrl:'',
		scrollTop:0,
		skipSkin:false,
		/** @type {Section} */
		prev:null,
		/** @type {*} */
		data:null,
		/** @type {String} */
		gemiusKey:null,
		/** @type {Url} */
		url:null,

		route:D.doNothing,
		/** @type {Function} */
		onBeforeLeave:null,
		/** @type {Function} */
		onLeave:null,
		/** @type {Function} */
		onScroll:null,
		/** @type {Function} */
		onScrollUp:null,
		/** @type {Function} */
		onScrollDown:null,
		/** @type {Function} */
		onMouseWheel:null,
		/** @type {Function} */
		onMouseWheelUp:null,
		/** @type {Function} */
		onMouseWheelDown:null,
		/** @type {Function} */
		onBack:null,

		hideFooter:false,
		leftFooter: false,

		enableHeatMap:false,

		_construct:function(){ // alias
			this.__construct();
		},

		__construct:function(){
			/** @member {Layout} */
			this.layout = new Layout;
			this.apiCall = new DR.ApiCall;
			this.apiCall.onClosed = this._onClosed;
			this.apiCall.onLoad = this.ready;
		},

		_onClosed:function(){
			var s = new SectionClosed;
			s.url = this.url;
			s.replace(this);
		},

		_onLeave:function(){
			if( this.onLeave ){
				this.onLeave();
			}
		},

		_onBeforeLeave:function(){
			if( this.onBeforeLeave ){
				return this.onBeforeLeave();
			}
		},

		routeNext:function(){
			var re = this;
			var tmp;
			while( tmp = re.route() ){
				re = tmp;
				re._copyVars(this);
			}
			if( tmp === false ){
				return false;
			}
			return re;
		},

		/**
		 * @param {Section} section
		 * @protected
		 */
		_copyVars:function(section){
			this.url = section.url;
			this.data = section.data;
			this._routePar = section._routePar;
		},

		_showCleanup:function(){
			InfoBox.close();
			if( D.GalleryFS ){
				D.GalleryFS.close();
			}
			if( T.Tooltip ){
				T.Tooltip.hide();
			}
			try {
				var event;
				if( typeof window.Event === "function" ) {
					event = new Event('Cleanup');
					document.dispatchEvent(event);
				} else if( typeof window.Event === "object" ) { //IE
					event = document.createEvent( 'CustomEvent' );
					event.initCustomEvent( 'Cleanup', true, false, false);
					document.dispatchEvent(event);
				}
			} catch( error ) {
			}
		},

		/** @const */
		show:function(){
			this._showCleanup();
			if( Section.last ){
				Section.last._onLeave();
				if( Section.last instanceof SectionLoader ){
					this.prev = Section.last.prev;
				} else {
					this.prev = Section.last;
				}
			}
			Section.last = this;
			if( this.isReady ){
				this.ready();
				return;
			}
			D.loadingOverlay( /*Section._container ||*/ document.getElementById('container'), { delay:true } );
			this.draw();
		},

		/**
		 * Call from php
		 */
		showRaw:function(){
			this.url = this.url || new Url;
			this.url.shift();
			var nextRoute = this.routeNext();
			// replace url from php
			nextRoute._routePar = nextRoute._routePar || {};
			nextRoute._routePar.popState = true;
			nextRoute.show();
		},

		draw:function(){
			this.ready();
		},

		ready:function(){
			if( this != Section.last ){
				return;
			}
			if( this._routePar && this._routePar.popState ){
				Section.replaceUrl( this.url.href );
			} else {
				Section.setUrl( this.url.href );
			}
			this._cacheAdd();
			var isReadyBefore = this.isReady;
			this.isReady = true;
			if( D.ENV == 'WWW' && !this.skipSkin ){
				Section.setSkin( this.skinUrl || D.mySkinUrl );
			}
			this.layout.show();
			if(isReadyBefore){
				$(window).scrollTop( Section.last.scrollTop );
			} else if( $(window).scrollTop() > 250 ){
				$(window).scrollTop(0);
			}
			document.title = (this.title ? this.title + " \u2014 " : '') + D.domain;
			D.bounceStats();
			if( this.hideFooter ){
				addClassName( document.body, 'hideFooter' );
			} else {
				removeClassName( document.body, 'hideFooter' );
			}
			if( this.leftFooter ) {
				this.leftFooterNode = new T.LeftFooter().append(this.layout.lt());
			}
			if( this.enableHeatMap ){
				Section.HeatMap.init();
			}else{
				Section.HeatMap.remove();
			}
		},

		back:function(){
			if( !this.prev ){
				return false;
			}
			this.prev.show();
			this.prev.onBack();
			return true;
		},

		replace:function(){
			//this._routePar = { replace:true };
			this.show();
		},

		_cacheAdd:function(){
			Section._cache.del( this.url.href );
			Section._cache.set( this.url.href, this );
		},

		getCurrent:function(){
			this.layout.getCurrent();
			var skinStyle = $('head link[title=Skin]')[0];
			if(skinStyle){
				this.skinUrl = skinStyle.href;
			}
		},

		referer:function(){
			if( this.prev ){
				return this.prev.url.href;
			}
			return document.referrer || location.referrer || '';
		},

		addRefererStats:function(){
			var mRef = new DR.stats.Referer;
			mRef.url = this.url.href;
			mRef.referer = this.referer();
			this.apiCall.addMethod(mRef);
		}
	}
);

Section.forceReload = false;

/**
 * @type {Section}
 * @static
 */
Section.last = null;

Section._href = Url.get();
Section._hrefOrig = Section._href; // nemainās ajax pieprasījumos

/**
 * @type {D.SortedMap<Section>}
 */
Section._cache = new D.SortedMap;

Section.init = function(){
	if( this.init.ok ){
		return;
	}
	this.init.ok = true;
	if( 'onpopstate' in window ){
		$(window).on( 'popstate', D.closure( this, this._popstate ) );
	} else {
		this._hash = '#!' + location.pathname + ( location.search ? location.search : '' );
		setInterval( D.closure( this, this._checkHash ), 100 );
	}
	$(document).click( D.closure( this, Section._documentClick ) );
	$(window).scroll( D.closure( this, Section._onScroll ) );
	$(window).bind( 'mousewheel DOMMouseScroll', D.closure( this, Section._onMouseWheel ) );
	$(window).bind( 'beforeunload', D.closure( this, Section._onBeforeUnload ) );
	$(function(){
		if( Section.last ){
			return;
		}
		SectionHTML.get();
	});
};

Section._checkHash = function(){
	if( this._hash == location.hash ){
		return;
	}
	this._hash = location.hash;
	this._popstate();
};

Section._popstate = function(){
	if( this._href == Url.get() ){
		D.log('repeat');
		return;
	}
	this._href = Url.get();
	var hash = location.hash;
	if( hash[1] == '?' || hash[1] == '/' || hash == '#...' || hash == '#_' ){
		D.log('fix hash url');
		return;
	}
	Section._route( null, { popState:true } );
};

Section._onScroll = function(){
	if( !Section.last ){
		return;
	}
	if( Section.last.leftFooterNode ) {
		Section.last.leftFooterNode.onScroll();
	}
	if( Section.last.onScroll ){
		Section.last.onScroll();
	}
	var st = Section.last.scrollTop;
	Section.last.scrollTop = $(window).scrollTop();
	if( Section.last.scrollTop - st > 0 ){
		if( Section.last.onScrollDown ){
			Section.last.onScrollDown();
		}
	} else if( Section.last.scrollTop - st < 0 ){
		if( Section.last.onScrollUp ){
			Section.last.onScrollUp();
		}
	}
};

Section._onMouseWheel = function(event){
	if( Section.last ){
		if( Section.last.onMouseWheel ){
			Section.last.onMouseWheel(event);
		}
		if( event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0 ){
			if( Section.last.onMouseWheelUp ){
				Section.last.onMouseWheelUp(event);
			}
		} else {
			if( Section.last.onMouseWheelDown ){
				Section.last.onMouseWheelDown(event);
			}
		}
	}
};

Section._onBeforeUnload = function(){
	if( Section.last ){
		return Section.last._onLeave();
	}
};

Section.setUrl = function(href){
	if( href instanceof Url ){
		href = href.href;
	}
	Url.set(href);
	this._href = Url.get();
	//D.log('setUrl');
};

Section.replaceUrl = function(href){
	if( href instanceof Url ){
		href = href.href;
	}
	Url.replace(href);
	this._href = Url.get();
	//D.log('replaceUrl');
};

/**
 * @param {Event} e
 * @returns {*}
 * @private
 */
Section._documentClick = function(e){
	if( Section.forceReload ){
		return;
	}
	var a = e.target;
	if( ( D.browser.name != 'Explorer' || D.browser.version > 8 ) && e.which != 1 || e.ctrlKey ){
		return;
	}
	if( !a || !a.tagName ){
		return;
	}
	if( a.tagName.toUpperCase() != 'A' ){
		a = $(a).closest('a')[0];
		if(!a){
			return;
		}
	}
	if( a.tagName.toUpperCase() != 'A' ){
		return;
	}
	if( a.target || empty( a.href ) || a.href.indexOf('javascript:') != -1 || a.className.indexOf('noAjax') != -1 ){
		return;
	}
	if( a.hash && a.hash != '#' ){
		return;
	}
	if( a.className.indexOf('ajax') == -1 && a.onclick && !D.checkDoNothing( a.onclick ) ){
		return;
	}
	if( a.hostname != location.hostname ){
		return;
	}
	if( a.pathname.indexOf('/click.php') != -1 || a.pathname.indexOf('/logout.php') != -1 ){
		return;
	}
	var href = '';
	if( a.pathname[0] != '/' ){
		href = '/';
	}
	href += a.pathname;
	if( a.search ){
		href += a.search;
	}
	this.navigate(href);
	return false;
};

/**
 * @param {string|Url} href
 */
Section.navigate = function(href, par){
	var url = ( href instanceof  Url ? href : new Url(href) );
	this._route(url, par);
};

/**
 * @static
 * @param {Url} [url]
 * @param {Object} [par]
 */
Section._route = function( url, par ){
	if (Section.last) {
		if(Section.last._onBeforeLeave() === false) {
			return;
		}
	}
	par = par || {};
	url = url || new Url;
	this._href = url.href;
	this._hrefOrig = this._href;
	var cache = this._cache.get( url.href );
	if(cache){
		if( cache.cache || ( par.popState && this.last.prev === cache && cache.cacheBack ) ){ // back
			if( D.DEV ){
				D.log( 'Section back', cache );
			}
			this._cache.popLast();
			this.last._onLeave();
			this.last = cache;
			cache._routePar = par;
			cache.ready();
			if( cache.onBack ){
				cache.onBack();
			}
			return;
		}
	}
	if( par.popState && D.GalleryFS && D.GalleryFS.opened ){
		D.GalleryFS.close();
		return;
	}
	/** @type {Section} section */
	var section;
	var cur = url.shift();
	var r = sectionRouting[cur];
	if(r){
		if( r === true ){
			section = new SectionLoader(cur);
		} else if( r === 'S' ){
			section = new SectionLoader(cur);
			section.js = "/special/" + cur + "/assets/script.js";
			section.css = "/special/" + cur + "/assets/style.css";
		} else if( typeof r == 'function' ){
			section = r();
		}
	}
	if(!section){
		if( par.from404 ){
			return;
		}
		if( /*D.DEV*/ 0 && D.ID == 178429 ){
			this._ajax(url);
			if( !par.popState ){
				Section.setUrl(url.href);
			}
			return;
		}
		//location.replace( url.href );
		location.href = url.href;
		return;
	}
	section.url = url;
	section._routePar = par;
	section = section.routeNext();
	if( section === false ){
		return;
	}
	section.show();
};

Section._ajaxN = 0;

/**
 * @param {Url} url
 * @protected
 */
Section._ajax = function(url){
	this._ajaxLastUrl = url;
	if( !existsClassName( document.body, 'iframe' ) ){
		InfoBox.close();
	}
	if( D.GalleryFS ){
		D.GalleryFS.close();
	}
	D.loadingOverlay( document.getElementById('container'), { delay:true } );

	/*
	var cacheItem = this._cache.get( url.href );
	if( this._cache.length() > 1 && cacheItem ){
		var cKeys = this._cache.keys().reverse();
		if( cKeys[1] == url.href && cacheItem.html ){ // back button
			this._cache.popLast();
			this._ajaxRe( url, cacheItem.html );
			return;
		}
	}*/
	if( ++ Section._ajaxN == 20 ){ // memory cleanup
		document.location = url.href;
		return;
	}
	$.ajax( {
		url:url.href,
		success:D.closure( this, this._ajaxRe, url ),
		headers:{
			'X-Requested-With':'Section'
		},
		statusCode:{
			404:function(){
				D.log(404);
				Section.setUrl( url.href );
			}
		}
	} );
};

Section._ajaxLinks = {};

Section._ajaxNotRemove = {
	chatContent:true,
	chatFlashContent:true,
	ToolTip:true,
	storeIframe:true
};

Section._getAndRemoveCSS = function(html){
	var re = {
		css:[],
		html:html
	};
	var reg = /<link[^>]*href="([^"]*\.css)"[^>]*>/gi;
	var css = preg_match_all( reg, html );
	for( var k in css ){
		var r = css[k];
		if( r[0].indexOf('title="Skin"') != -1 ){
			continue;
		}
		re.css.push( r[1] );
		re.html = re.html.replace( r[0], '' );
	}
	return re;
};

Section._documentWriteBuffer = '';

Section._documentWrite = function(html){
	this._documentWriteBuffer += html;
};

Section._documentWriteProcess = function(callback){
	var node = mkE( {
		tag:'div',
		innerHTML:this._documentWriteBuffer
	} );
	this._documentWriteBuffer = '';
	var list = [];
	$( 'script[src]', node ).each( function(){
		list.push( this.src );
	} );
	this.loadCrossScripts( list, callback );
};

Section.loadCrossScripts = function( srcList, callback, s ){
	if(s){
		D.log( 'done', new Date().getTime() - s );
	}
	var src = srcList.shift();
	if(!src){
		if( this._documentWriteBuffer ){
			this._documentWriteProcess(callback);
			return;
		}
		document.write = document._write || document.write;
		callback();
		return;
	}
	D.log( 'loading cross-domain JS', src );
	document._write = document._write || document.write;
	document.write = D.closure( this, this._documentWrite );
	D.addJS( src, D.closure( this, this.loadCrossScripts, srcList, callback, new Date().getTime() ) );
};

Section.loadScripts = function( srcList, callback ){
	var crossList = [];
	for( var i = 0; i < srcList.length; ++ i ){
		var src = srcList[i];
		if( this._ajaxLinks[src] ){
			continue;
		}
		this._ajaxLinks[src] = true;
		var a = mkE( {
			tag:'a',
			href:src
		} );
		if( a.hostname == 'ifrype.com' || a.hostname == location.hostname ){
			this.syncScript(src);
			continue;
		}
		crossList.push(src);
	}
	if( !crossList.length ){
		callback();
		return;
	}
	this.loadCrossScripts( crossList, callback );
};

/**
 * @param {Url} url
 * @param {String} resp
 * @param {String} [status]
 * @param {XMLHttpRequest} [xhr]
 * @private
 */
Section._ajaxRe = function( url, resp, status, xhr ){
	var urlSet = false;
	if( xhr && xhr.getResponseHeader ){
		var curUrl = xhr.getResponseHeader('X-DrUrl');
		if( curUrl && curUrl != Url.get() ){
			Section.replaceUrl(curUrl);
			urlSet = true;
		}
	}
	if(!urlSet){
		Section.replaceUrl( url.href );
	}
	var links = this._ajaxLinks;
	$('head script').each( function(){
		if( empty( this.src ) ){
			return;
		}
		links[ this.src ] = true;
	} );
	var headHTML = Section.textFromReg2reg( resp, /<head>/, /<\/head>/ );
	//var style = this._getAndRemoveCSS(headHTML);
	var headNode = mkE( {
		tag:'div', // <head> neiet uz IE9
		innerHTML:headHTML //style.html
	} );
	if( D.browser.name == 'Explorer' && D.browser.version < 9 ){
		$(headNode).html(headHTML)
	}
	var bodyHTML = Section.textFromReg2reg( resp, /<body([^>]*)>/, /<\/body>/ );
	var bodyNode = mkE( {
		tag:'body',
		innerHTML:bodyHTML
	} );
	var list = [];
	var crossScriptCB = function(){
		list.push( this.src );
	};
	$( 'script[src]', headNode ).each(crossScriptCB);
	$( 'script[src]', bodyNode ).each(crossScriptCB);
	if(!list.length){
		this._ajaxReDraw( url, resp, headNode, bodyNode );
		return;
	}
	this.loadScripts( list, D.closure( this, this._ajaxReDraw, url, resp, headNode, bodyNode ) );
	if( $(window).scrollTop() > 250 ){
		$(window).scrollTop(0);
	}
};

Section._ajaxReDraw = function( url, resp, headNode, bodyNode ){
	if( this._ajaxLastUrl != url ){
		D.log( 'Expired: ', url );
		return;
	}
	//this._ajaxCache[ url.href ] = resp;
	// body cleanup
	var bodyChilds = [];
	for( var k = 0; k < document.body.childNodes.length; ++ k ){
		bodyChilds.push( document.body.childNodes[k] );
	}
	for( var k in bodyChilds ){
		if( this._ajaxNotRemove[ bodyChilds[k].id ] ){
			continue;
		}
		removeNode( bodyChilds[k] );
	}
	// head cleanup
	$('head style:not([css])').remove();
	$('head script[defer=defer]').remove(); // gemius cleanup
	$("head script[src*='w.ifrype']").remove();
	var links = this._ajaxLinks;
	$('head link[type="text/css"]').each( function(){
		if( this.getAttribute('title') == 'Skin' ){
			return;
		}
		links[ this.href ] = true;
	} );
	// izmetam skin tikai, ja atšķirās
	$('head link[title=Skin]').each( function(){
		var link = this;
		$( 'link[title=Skin]', headNode ).each( function(){
			if( link.href != this.href ){
				removeNode(link);
				return;
			}
			removeNode(this);
		} );
	} );
	/*
	for( var k in style.css ){
		var r = style.css[k];
		if( links[r] ){
			continue;
		}
		links[r] = true;
		Section.syncCSS(r);
	}*/
	// add
	$( 'style,link[type="text/css"]', headNode ).each( function(){
		if( this.tagName.toUpperCase() == 'LINK' && this.getAttribute('title') != 'Skin' ){
			if( links[ this.href ] ){
				return;
			}
			links[ this.href ] = true;
			Section.syncCSS( this.href );
			return;
		}
		getHeadElement().appendChild(this);
	} );
	$( 'title', headNode ).each( function(){
		document.title = htmlspecialchars_decode( this.innerHTML );
	} );
	try{
		var chatContent = $( '#chatContent', bodyNode )[0];
		if(chatContent){
			removeNode( nextElementSibling(chatContent) );
			removeNode(chatContent);
		}
	} catch(e){
	}
	var bodyChilds = [];
	for( var k = 0; k < bodyNode.childNodes.length; ++ k ){
		bodyChilds.push( bodyNode.childNodes[k] );
	}
	for( var k in bodyChilds ){
		document.body.appendChild( bodyChilds[k] );
	}
	SectionHTML.get();
	evalScriptHTML(resp);
	if( D.MMenu ){
		D.MMenu.resetMenu();
	}
}; // Section._ajaxReDraw

Section.syncScript = function(src){
	D.log( 'Loading JS', src );
	var s = new Date().getTime();
	$.ajax( {
		url:src,
		success:function(result){
			try{
				var fn = new Function(result);
				fn.call(window);
				//eval.call( window, result );
			} catch(e){
				D.console.error(e);
			}
			D.log( 'done', new Date().getTime() - s );
		},
		async:false
	} );
};

Section.syncCSS = function(src){
	D.log( 'Loading CSS', src );
	var s = new Date().getTime();
	$.ajax( {
		url:src,
		success:function(css){
			var style = document.createElement('style');
			style.setAttribute( 'css', src );
			style.type = 'text/css';
			if( style.styleSheet ){
			  style.styleSheet.cssText = css;
			} else {
			  style.appendChild( document.createTextNode(css) );
			}
			getHeadElement().appendChild(style);
			D.log( 'done', new Date().getTime() - s );
		},
		async:false
	} );
};

Section.textFromReg2reg = function( text, from, to ){
	var f = text.match(from);
	if(!f){
		return '';
	}
	var t = text.match(to);
	if(!t){
		return '';
	}
	return text.substr( f.index + f[0].length, t.index - f.index - f[0].length );
};

Section.setSkin = function(url){
	var css = $('head link[title=Skin]');
	if(!url){
		css.remove();
		return;
	}
	if( css[0] && (css[0].href == url || css[0].href.indexOf(url) != -1) ){
		return;
	}
	css.remove();
	// Lai nepaliek papildus elementi no iepriekšējā skina
	$('.skin-extra-item').remove();
	mkE( {
		tag:'link',
		attr:{
			rel:'stylesheet',
			title:'Skin'
		},
		href:url
	} ).append( document.head || document.getElementsByTagName('head')[0] );
};

Section.getSkinId = function(){
	var css = $('head link[title=Skin]');
	if( !css[0] || !(css[0].href) ){
		return false;
	}
	var href = css[0].href;
	if( typeof href != 'string' ){
		return false;
	}
	var m = href.match(/css\/skin\/([0-9]+)/);
	if( !m || !m[1] ){
		return false;
	}
	return Number(m[1]);
};

Section.init();
// --- Section ---


/**
 * @class
 * @extends {Section}
 */
var SectionLoader = Class(
	/**
	 * @lends {SectionLoader#}
	 */
	{
		/**
		 * @param {string} name
		 * @private
		 */
		__construct:function(name){
			this._name = name;
			this.env = D.ENV;
		},

		draw:function(){
			var parts = this._name.split('_');
			this.js = this.js   || ( this.env == 'WWW' ? '' : '/' ) + parts.concat( [ this._name + '.js' ] ).join('/');
			this.css = this.css || ( this.env == 'WWW' ? '' : '/' ) + parts.concat( [ this._name + '.css' ] ).join('/');
			if( D.DEV ){
				D.log( this.js );
			}
			D.addJS( this.js, D.closure( this, this._onload ) );
			if( is_array(this.css) ){
				for( var i in this.css ){
					D.addCSS( this.css[i] );
				}
			} else {
				D.addCSS( this.css );
			}
		},

		_onload:function(){
			/** @type {Section} section */
			var section;
			if( this.env == 'INSP' ){
				section = new D.insp.section[ this._name[0].toUpperCase() + this._name.substr(1) ];
			} else {
				var name = 'Section' + this._name[0].toUpperCase() + this._name.substr(1);
				var sectionConstructor = window[name];
				if(!sectionConstructor){
					D.console.error( 'Section not defined: ', name );
					return;
				}
				section = new sectionConstructor;
			}
			section._copyVars(this);
			section = section.routeNext();
			if( section === false ){
				return;
			}
			if( this != Section.last ){
				return;
			}
			section.show();
		}
	},
	Section
);

// +++ SectionUnknown +++
/**
 * @class
 * @extends {Section}
 */
var SectionUnknown = Class(
	/**
	 * @lends {SectionUnknown#}
	 */
	{
		__construct:function(){
			mkE( {
				tag:'div',
				id:'error404box',
				els:[
					{
						tag:'div',
						className:'howToGet',
						text:'Hei, kā tu te nokļuvi? Šajā adresē neviena lapa nedzīvo...'
					} // .howToGet
				]
			} ).append( this.layout.ct() );
			D.addCSS('css/404.css');
		}
	},
	Section
);
// --- SectionUnknown ---

/**
 * @class
 * @extends {Section}
 */
var SectionClosed = Class(
	/**
	 * @lends {SectionClosed#}
	 */
	{
		__NAME:'SectionClosed',

		cacheBack:false,

		__construct:function(){
			mkE( {
				tag:'center',
				els:[
					{
						tag:'img',
						src:D.PIMG + 'i/misc/closed_' + D.LANG + '.png',
						style:{
							height:'300px'
						}
					}
				]
			} ).append( this.layout.ct() );
			T.error( D.Lang.get('section_down') ).append( this.layout.ct() );
		}
	},
	Section
);

/**
 * @class
 * @extends {Section}
 */
var SectionHTML = Class(
	{
		__NAME:'SectionHTML',

		cacheBack:true,

		__construct:function(){
			this.url = new Url;
			this.prev = Section.last;
			this.getCurrent();
			this.scrollTop = $(window).scrollTop();
			this.isReady = true;
			if( getHeadElement().getElementsByTagName('title')[0] ){
				this.title = getNodeText( getHeadElement().getElementsByTagName('title')[0] ) || document.title;
			} else {
				this.title = document.title;
			}
		}

	},
	Section
);

/**
 * @static
 */
SectionHTML.get = function(){
	var s = new SectionHTML;
	s._cacheAdd();
	s.prev = Section.last;
	Section.last = s;
};

// +++ BreadCrumbs +++

/**
 * @class
 */
var BreadCrumbs = Class(
	/**
	 * @lends {BreadCrumbs#}
	 */
	{
		items: [],
		__construct: function() {
			this.items = [];
			this.node = mkE({
				tag: 'div',
				id: 'breadCrumb',
				className: 'radius3',
				els: [
					this._itemsNode = mkE({
						tag: 'ul'
					})
				]
			});
		},
		title: [],
		addCrumb: function(title, href) {
			if (this.items.length) {
				mkE({
					tag: 'li',
					innerHTML: '&rarr;',
					className: 'color2'
				}).append(this._itemsNode);
			}
			this.title.push(title);
			var crumb = mkE({
				tag: 'li',
				className: 'last',
				els: [
					{
						tag: 'a',
						innerHTML: title,
						href: href
					}
				]
			}).append(this._itemsNode);
			this.items.push(crumb);
			for (var k in this.items) {
				if (+k+1 < this.items.length) {
					removeClassName(this.items[k], 'last');
				}
			}
		}
	}
);

// --- BreadCrumbs ---
Section.HeatMap = {
	skip: [
		/item/,
		/movie-[0-9]{1,}/,
		/selection-[0-9]{1,}/,
		/galleryLargePicThumb/,
		/chBox/,
		/poster/,
		/name/
	],

	rpc: new RPC('/stats/app.php'),

	init: function(){
		if( !D.ID ){
			return;
		}
		var containers = $('#content, #infobox3_box_content');
		containers.off('click.heatmap');
		containers.on('click.heatmap', Section.HeatMap.click);
	},

	remove: function(){
		var containers = $('#content, #infobox3_box_content');
		containers.off('click.heatmap');
	},

	click: function(e){
		if( !e.target || (Section.last && !Section.last.enableHeatMap)){
			return;
		}
		var path = Section.HeatMap.getPath( e.target );
		D.console.info( path.string );
		D.console.info( $( path.string ) );
		Section.HeatMap.rpc.aync = false;
		Section.HeatMap.rpc.send('pageClick', {
			path:path.string
		});
	},

	getPath:function( el ){
		var parent = el;
		var path = [];
		var j = 0;
		while( parent ){
			if( parent.id == 'content' ){
				break;
			}
			++ j;
			if( !parent.tagName || j == 100 ){
				break;
			}
			var item = parent.tagName.toLowerCase();
			var parentId = false;
			if( !empty( parent.id ) ){
				var ok = true;
				for( var k2 in Section.HeatMap.skip ){
					if( parent.id.match( Section.HeatMap.skip[k2] ) ){
						ok = false;
						break;
					}
				}
				if(ok){
					parentId = parent.id;
					item += '#' + parent.id;
				}
			}
			if( !empty( parent.className ) && parent.tagName.toLowerCase() != 'body' ){
				var cn = parent.className.split(' ');
				for( var k in cn ){
					if( empty( cn[k] ) ){
						continue;
					}
					var ok = true;
					for( var k2 in Section.HeatMap.skip ){
						if( cn[k].match( Section.HeatMap.skip[k2] ) ){
							ok = false;
							break;
						}
					}
					if(ok){
						item += '.' + cn[k];
					}
				}
			}
			if(!parentId){
				var n = 0, i = 0;
				var node = parent.previousSibling;
				while( node ){
					++ i;
					if( i == 1000 ){
						D.console.info(node);
						break;
					}
					if( node.tagName && node.tagName.toLowerCase() == parent.tagName.toLowerCase() && ( !parent.className.length || node.className == parent.className ) ){
						++ n;
					}
					node = node.previousSibling;
				}
				item += ':eq(' + n + ')';
			}
			path.push(item);
			parent = parent.parentNode;
		}
		var re = {
			string:path.reverse().join(' > ')
		};
		return re;
	},

	draw:function(p){
		p = p || {};
		var sp = {};
		if( typeof p.group != 'undefined' ){
			sp.group = p.group;
		}
		Section.HeatMap.rpc.send(
			'getData',
			sp,
			function( re ){
				var max = 0;
				for( var k in re.items ){
					max = Math.max( max, re.items[k].count );
				}
				for( var k in re.items ){
					var r = re.items[k];
					try{
						var els = $(r.path);
						if(!els[0]){
							continue;
						}
						if(els.css('position') == 'static'){
							els.css('position', 'relative');
						}
						var color = 'rgb(' + Math.round(r.count / max * 239 + 16) + ',' + Math.round(( 1 - ( r.count / max ) ) * 239 + 16) + ',0)';
						//D.console.info(color);
						mkE({
							tag:'font',
							text:r.count,
							style:{
								display:'block',
								position:'absolute',
								backgroundColor:color,
								color:'#000',
								top:'0px',
								left:'0px',
								paddingLeft:'5px',
								paddingRight:'5px'
							},
							attr: {
								'data-path': r.path
							},
							prop:{
								onclick:function(e){
									D.stopPropagation(e);
									this.remove();
									return false;
								}
							}
						}).append(els[0]);
					} catch(e){
					}
				} // for
			} // function
		);
	}
};

// --- section.js ---

// +++ device.js +++
D.Arva = function(){
	this._ips = [];
	try{
		this.name = D.Cookie.read( D.Arva.key ) || sessionStorage.getItem( D.Arva.key ) || localStorage.getItem( D.Arva.key );
	} catch(e){}
	this.noName = !this.name;
	this.setName( this.name || this.newName() );
	this.onChange();
	this.node = mkE( {
		tag:'div',
		style:{
			position:'absolute',
			top:'0',
			right:'0',
			width:'5px',
			height:'5px'
		}
	} ).append( document.body );
};

D.Arva.movieName = 'deviceSwf';
D.Arva.key = '__name';

D.Arva.prototype._flashTimeout = function(){
	if( this.noName ){
		this.getFromRq();
	}
};

D.Arva.prototype.newName = function(){
	var a = '01234567890abcdef';
	var re = '';
	while( re.length < 32 ){
		re += a[ Math.floor( Math.random() * a.length ) ];
	}
	return re;
};

D.Arva.prototype.setName = function(name){
	this.name = name;
	try{
		D.Cookie.create( D.Arva.key, this.name, 365, '/' );
		sessionStorage.setItem( D.Arva.key, this.name );
		localStorage.setItem( D.Arva.key, this.name );
	} catch(e){
	}
};

D.Arva.prototype.onChange = function(){
	//D.log( 'dev name', this.name );
};

D.Arva.prototype.hash = function(){
	var a = '01234567890abcdef';
	var strItems = [
		screen.width + 'x' + screen.height,
		String( navigator.userAgent || navigator.vendor ),
		navigator.language || ''
	];
	var i, item;
	try{
		if( navigator.plugins && navigator.plugins.length ){
			for( i = 0; i < navigator.plugins.length; ++ i ){
				item = navigator.plugins[i];
				strItems.push( item.name );
				strItems.push( item.description );
			}
		}
	} catch(e){
	}
	try{
		if( navigator.mimeTypes && navigator.mimeTypes.length ){
			for( i = 0; i < navigator.mimeTypes.length; ++ i ){
				item = navigator.mimeTypes[i];
				strItems.push( item.type );
				strItems.push( item.description );
			}
		}
	} catch(e){
	}
	var str = strItems.join("\n");
	var arr = [];
	for( var k in str ){
		var ord = str[k].charCodeAt(0);
		var kk = ( ord + k ) % 32;
		arr[kk] = ( arr[kk] ? arr[kk] + ord : ord );
	}
	var re = [];
	for( i = 0; i < 32; ++ i ){
		re += a[ arr[i] % a.length || 0 ];
	}
	return re;
};

D.Arva.prototype.getFromRq = function(){
	this._iframe = mkE( {
		tag:'iframe',
		frameBorder:0,
		src:'/rq/darva.php?' + ( new Get( { h:this.hash(), name:this.name } )),
		style:{
			border:'none',
			width:'1px',
			height:'1px'
		}
	} ).append( this.node );
};

D.Arva.prototype.onsubmit = function(form){
	mkE( {
		tag:'input',
		type:'hidden',
		name:'__nameBrowser',
		value:this.hash()
	} ).append(form);
	mkE( {
		tag:'input',
		type:'hidden',
		name:'__name',
		value:this.name
	} ).append(form);
	if( !empty( this._ips ) ){
		mkE({
			tag:'input',
			type:'hidden',
			name:'__spi',
			value:D.Arva.encode( this._ips.join(',') )
		}).append(form);
	}
};

D.Arva.prototype._onIp = function(ip){
	this._ips.push(ip);
};

D.Arva.set = function(name){ //swf
	var i = D.Arva.i;
	clearTimeout( i._flashTO );
	if( !name && i.noName  ){
		i.getFromRq();
		return;
	}
	if( name && i.name != name ){
		D.Arva.i.setName(name);
		D.Arva.i.onChange();
	}
};

D.Arva.setFromRq = function(name){
	D.Arva.i.setName(name);
	//D.flash( D.Arva.movieName, 'set', name );
	D.Arva.i.onChange();
};

D.Arva.init = function(){
	var form = $('form[name=login]')[0];
	if(!form){
		return;
	}
	var i = D.Arva.i = new D.Arva;
	this.getIPs( D.closure( i, i._onIp ) );
	$(form).bind( 'submit', D.closure( i, i.onsubmit, form ) );
};

D.Arva.getIPs = function(callback){
  var ip_dups = {};
  var RTCPeerConnection = window.RTCPeerConnection
      || window.mozRTCPeerConnection
      || window.webkitRTCPeerConnection;
  if( !RTCPeerConnection ){
    if( !this._iframe ){
			this._iframe = mkE( {
				tag:'iframe',
				attr:{
					sandbox:'allow-same-origin'
				},
				style:{
					display:'none'
				}
			} ).append( document.body );
		}
	  var win = this._iframe.contentWindow;
      RTCPeerConnection = win.RTCPeerConnection
          || win.mozRTCPeerConnection
          || win.webkitRTCPeerConnection;
  }
  if( !RTCPeerConnection ){
    return;
  }
  if( !window.RTCDataChannel ){
  	return;
	}
  var mediaConstraints = {
      optional: [{RtpDataChannels: true}]
  };
	var stuns = [
		//{urls: "stun:stun.services.mozilla.com"},
		{urls:'stun:stun1.l.google.com:19302'},
		{urls:'stun:stun2.l.google.com:19302'},
		{urls:'stun:stun3.l.google.com:19302'},
		{urls:'stun:stun4.l.google.com:19302'},
		{urls:'stun:stun.voiparound.com'},
		{urls:'stun:stun.voipbuster.com'},
		{urls:'stun:stun.voipstunt.com'},
		{urls:'stun:stun.voxgratia.org'},
		{urls:'stun:stun.xten.com'}
	];
	var servers = {iceServers: []};
	for( var i = 0; i < 2; ++ i ){
		var k = Math.floor( Math.random() * stuns.length );
		servers.iceServers.push( stuns[k] );
		stuns.splice( k, 1 );
	}
  try{
	  var pc = new RTCPeerConnection(servers, mediaConstraints);
  } catch(e){
    return;
  }
  var handleCandidate = function( candidate ){
      var ip_regex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/;
	    var match = ip_regex.exec(candidate);
	    if(!match){
	      return;
	    }
      var ip = match[1];
      //remove duplicates
      if( !ip_dups[ip] ){
	      callback(ip);
      }
      ip_dups[ip] = true;
  };
  pc.onicecandidate = function(ice){
      //skip non-candidate events
      if(ice.candidate) {
	      handleCandidate(ice.candidate.candidate);
      }
  };
  pc.createDataChannel("");
  pc.createOffer( function( result ){
      pc.setLocalDescription( result, D.doNothing, D.doNothing );
  }, D.doNothing );
  setTimeout( function(){
      if( !pc.localDescription || !pc.localDescription.sdp ){
        return;
      }
      //read candidate info from local description
      var lines = pc.localDescription.sdp.split('\n');
      lines.forEach( function( line ){
          if( line.indexOf('a=candidate:') === 0 ) {
	          handleCandidate(line);
          }
      } );
  }, 1000 );
};

D.Arva.encode = function(str){
	var re = '';
	for( var i = 0; i < str.length; ++ i ){
		re += String.fromCharCode( str[i].charCodeAt(0) + 13 );
	}
	return re;
};
// --- device.js ---

// +++ twemoji.js +++
/*jslint indent: 2, browser: true, bitwise: true, plusplus: true */
var twemoji = (function (
  /*! Copyright Twitter Inc. and other contributors. Licensed under MIT *//*
    https://github.com/twitter/twemoji/blob/gh-pages/LICENSE
  */

  // WARNING:   this file is generated automatically via
  //            `node scripts/generate`
  //            please update its `createTwemoji` function
  //            at the bottom of the same file instead.

) {
	'use strict';

  /*jshint maxparams:4 */

	var
		// the exported module object
		twemoji = {


		/////////////////////////
		//      properties     //
		/////////////////////////

		// default assets url, by default will be Twitter Inc. CDN
		base: 'https://i.ifrype.com/emoji/3/',

		// default assets file extensions, by default '.png'
		ext: '.png',

		// default assets/folder size, by default "72x72"
		// available via Twitter CDN: 72
		size: '72x72',

		// default class name, by default 'emoji'
		className: 'emoji',

		// basic utilities / helpers to convert code points
		// to JavaScript surrogates and vice versa
		convert: {

			/**
	         * Given an HEX codepoint, returns UTF16 surrogate pairs.
	         *
	         * @param   string  generic codepoint, i.e. '1F4A9'
	         * @return  string  codepoint transformed into utf16 surrogates pair,
	         *          i.e. \uD83D\uDCA9
	         *
	         * @example
	         *  twemoji.convert.fromCodePoint('1f1e8');
	         *  // "\ud83c\udde8"
	         *
	         *  '1f1e8-1f1f3'.split('-').map(twemoji.convert.fromCodePoint).join('')
	         *  // "\ud83c\udde8\ud83c\uddf3"
	         */
			fromCodePoint: fromCodePoint,

	        /**
	         * Given UTF16 surrogate pairs, returns the equivalent HEX codepoint.
	         *
	         * @param   string  generic utf16 surrogates pair, i.e. \uD83D\uDCA9
	         * @param   string  optional separator for double code points, default='-'
	         * @return  string  utf16 transformed into codepoint, i.e. '1F4A9'
	         *
	         * @example
	         *  twemoji.convert.toCodePoint('\ud83c\udde8\ud83c\uddf3');
	         *  // "1f1e8-1f1f3"
	         *
	         *  twemoji.convert.toCodePoint('\ud83c\udde8\ud83c\uddf3', '~');
	         *  // "1f1e8~1f1f3"
	         */
			toCodePoint: toCodePoint
		},


    /////////////////////////
    //       methods       //
    /////////////////////////

			/**
	       * User first: used to remove missing images
	       * preserving the original text intent when
	       * a fallback for network problems is desired.
	       * Automatically added to Image nodes via DOM
	       * It could be recycled for string operations via:
	       *  $('img.emoji').on('error', twemoji.onerror)
	       */
		onerror: function onerror() {
			if (this.parentNode) {
          this.parentNode.replaceChild(createText(this.alt, false), this);
			}
		},

      /**
       * Main method/logic to generate either <img> tags or HTMLImage nodes.
       *  "emojify" a generic text or DOM Element.
       *
       * @overloads
       *
       * String replacement for `innerHTML` or server side operations
       *  twemoji.parse(string);
       *  twemoji.parse(string, Function);
       *  twemoji.parse(string, Object);
       *
       * HTMLElement tree parsing for safer operations over existing DOM
       *  twemoji.parse(HTMLElement);
       *  twemoji.parse(HTMLElement, Function);
       *  twemoji.parse(HTMLElement, Object);
       *
       * @param   string|HTMLElement  the source to parse and enrich with emoji.
       *
       *          string              replace emoji matches with <img> tags.
       *                              Mainly used to inject emoji via `innerHTML`
       *                              It does **not** parse the string or validate it,
       *                              it simply replaces found emoji with a tag.
       *                              NOTE: be sure this won't affect security.
       *
       *          HTMLElement         walk through the DOM tree and find emoji
       *                              that are inside **text node only** (nodeType === 3)
       *                              Mainly used to put emoji in already generated DOM
       *                              without compromising surrounding nodes and
       *                              **avoiding** the usage of `innerHTML`.
       *                              NOTE: Using DOM elements instead of strings should
       *                              improve security without compromising too much
       *                              performance compared with a less safe `innerHTML`.
       *
       * @param   Function|Object  [optional]
       *                              either the callback that will be invoked or an object
       *                              with all properties to use per each found emoji.
       *
       *          Function            if specified, this will be invoked per each emoji
       *                              that has been found through the RegExp except
       *                              those follwed by the invariant \uFE0E ("as text").
       *                              Once invoked, parameters will be:
       *
       *                                iconId:string     the lower case HEX code point
       *                                                  i.e. "1f4a9"
       *
       *                                options:Object    all info for this parsing operation
       *
       *                                variant:char      the optional \uFE0F ("as image")
       *                                                  variant, in case this info
       *                                                  is anyhow meaningful.
       *                                                  By default this is ignored.
       *
       *                              If such callback will return a falsy value instead
       *                              of a valid `src` to use for the image, nothing will
       *                              actually change for that specific emoji.
       *
       *
       *          Object              if specified, an object containing the following properties
       *
       *            callback   Function  the callback to invoke per each found emoji.
       *            base       string    the base url, by default twemoji.base
       *            ext        string    the image extension, by default twemoji.ext
       *            size       string    the assets size, by default twemoji.size
       *
       * @example
       *
       *  twemoji.parse("I \u2764\uFE0F emoji!");
       *  // I <img class="emoji" draggable="false" alt="❤️" src="/assets/2764.gif"/> emoji!
       *
       *
       *  twemoji.parse("I \u2764\uFE0F emoji!", function(iconId, options) {
       *    return '/assets/' + iconId + '.gif';
       *  });
       *  // I <img class="emoji" draggable="false" alt="❤️" src="/assets/2764.gif"/> emoji!
       *
       *
       * twemoji.parse("I \u2764\uFE0F emoji!", {
       *   size: 72,
       *   callback: function(iconId, options) {
       *     return '/assets/' + options.size + '/' + iconId + options.ext;
       *   }
       * });
       *  // I <img class="emoji" draggable="false" alt="❤️" src="/assets/72x72/2764.png"/> emoji!
       *
       */
		parse: parse,

      /**
       * Given a string, invokes the callback argument
       *  per each emoji found in such string.
       * This is the most raw version used by
       *  the .parse(string) method itself.
       *
       * @param   string    generic string to parse
       * @param   Function  a generic callback that will be
       *                    invoked to replace the content.
       *                    This calback wil receive standard
       *                    String.prototype.replace(str, callback)
       *                    arguments such:
       *  callback(
       *    rawText,  // the emoji match
       *  );
       *
       *                    and others commonly received via replace.
       */
		replace: replace,

      /**
       * Simplify string tests against emoji.
       *
       * @param   string  some text that might contain emoji
       * @return  boolean true if any emoji was found, false otherwise.
       *
       * @example
       *
       *  if (twemoji.test(someContent)) {
       *    console.log("emoji All The Things!");
       *  }
       */
		test: test,
	    getRecentlyUsed: getRecentlyUsed,
	    addRecentlyUsed: addRecentlyUsed
    },

    // used to escape HTML special chars in attributes
	escaper = {
		'&': '&amp;',
		'<': '&lt;',
		'>': '&gt;',
		"'": '&#39;',
		'"': '&quot;'
    },

    // RegExp based on emoji's official Unicode standards
    // http://www.unicode.org/Public/UNIDATA/EmojiSources.txt
    re = /(?:\ud83d\udc68\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c\udffb|\ud83d\udc68\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc]|\ud83d\udc68\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd]|\ud83d\udc68\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c\udffb|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffc]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffd]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffb|\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb\udffc]|\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udffd]|\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1|\ud83d\udc6b\ud83c[\udffb-\udfff]|\ud83d\udc6c\ud83c[\udffb-\udfff]|\ud83d\udc6d\ud83c[\udffb-\udfff]|\ud83d[\udc6b-\udc6d])|(?:\ud83d[\udc68\udc69])(?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92]|\ud83e[\uddaf-\uddb3\uddbc\uddbd])|(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75]|\u26f9)((?:\ud83c[\udffb-\udfff]|\ufe0f)\u200d[\u2640\u2642]\ufe0f)|(?:\ud83c[\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6]|\ud83e[\udd26\udd35\udd37-\udd39\udd3d\udd3e\uddb8\uddb9\uddcd-\uddcf\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|(?:\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc15\u200d\ud83e\uddba|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f)|[#*0-9]\ufe0f?\u20e3|(?:[©®\u2122\u265f]\ufe0f)|(?:\ud83c[\udc04\udd70\udd71\udd7e\udd7f\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u203c\u2049\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2697\u2699\u269b\u269c\u26a0\u26a1\u26a7\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|(?:\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd0f\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\uddb5\uddb6\uddb8\uddb9\uddbb\uddcd-\uddcf\uddd1-\udddd]|[\u270a\u270b]))(?:\ud83c[\udffb-\udfff])?|(?:\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a-\udc6d\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\uded5\udeeb\udeec\udef4-\udefa\udfe0-\udfeb]|\ud83e[\udd0d\udd0e\udd10-\udd17\udd1d\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd3f-\udd45\udd47-\udd71\udd73-\udd76\udd7a-\udda2\udda5-\uddaa\uddae-\uddb4\uddb7\uddba\uddbc-\uddca\uddd0\uddde-\uddff\ude70-\ude73\ude78-\ude7a\ude80-\ude82\ude90-\ude95]|[\u23e9-\u23ec\u23f0\u23f3\u267e\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a])|\ufe0f/g,

    // avoid runtime RegExp creation for not so smart,
    // not JIT based, and old browsers / engines
	UFE0Fg = /\uFE0F/g,

    // avoid using a string literal like '\u200D' here because minifiers expand it inline
	U200D = String.fromCharCode(0x200D),

    // used to find HTML special chars in attributes
	rescaper = /[&<>'"]/g,

    // nodes with type 1 which should **not** be parsed (including lower case svg)
	shouldntBeParsed = /IFRAME|NOFRAMES|NOSCRIPT|SCRIPT|SELECT|STYLE|TEXTAREA|[a-z]/,

    // just a private shortcut
	fromCharCode = String.fromCharCode;

	return twemoji;


	/////////////////////////
	//  private functions  //
	//     declaration     //
	// ///////////////////////

  /**
   * Shortcut to create text nodes
   * @param   string  text used to create DOM text node
   * @return  Node  a DOM node with that text
   */
  function createText(text, clean) {
    return document.createTextNode(clean ? text.replace(UFE0Fg, '') : text);
	}

  /**
   * Utility function to escape html attribute text
   * @param   string  text use in HTML attribute
   * @return  string  text encoded to use in HTML attribute
   */
	function escapeHTML(s) {
		return s.replace(rescaper, replacer);
	}

  /**
   * Default callback used to generate emoji src
   *  based on Twitter CDN
   * @param   string    the emoji codepoint string
   * @param   string    the default size to use, i.e. "36x36"
   * @return  string    the image source to use
   */
	function defaultImageSrcGenerator(icon, options) {
		return ''.concat(options.base, options.size, '/', icon, options.ext);
	}

  /**
   * Given a generic DOM nodeType 1, walk through all children
   * and store every nodeType 3 (#text) found in the tree.
   * @param   Element a DOM Element with probably some text in it
   * @param   Array the list of previously discovered text nodes
   * @return  Array same list with new discovered nodes, if any
   */
	function grabAllTextNodes(node, allText) {
		var
			childNodes = node.childNodes,
			length = childNodes.length,
			subnode,
			nodeType;
		while (length--) {
			subnode = childNodes[length];
			nodeType = subnode.nodeType;
			// parse emoji only in text nodes
			if (nodeType === 3) {
			// collect them to process emoji later
			allText.push(subnode);
			}
      // ignore all nodes that are not type 1, that are svg, or that
			// should not be parsed as script, style, and others
      else if (nodeType === 1 && !('ownerSVGElement' in subnode) &&
          !shouldntBeParsed.test(subnode.nodeName.toLowerCase())) {
				grabAllTextNodes(subnode, allText);
			}
		}
		return allText;
	}

  /**
   * Used to both remove the possible variant
   *  and to convert utf16 into code points.
   *  If there is a zero-width-joiner (U+200D), leave the variants in.
   * @param   string    the raw text of the emoji match
   * @return  string    the code point
   */
	function grabTheRightIcon(rawText) {
	// if variant is present as \uFE0F
		return toCodePoint(rawText.indexOf(U200D) < 0 ?
			rawText.replace(UFE0Fg, '') :
			rawText
		);
	}

  /**
   * DOM version of the same logic / parser:
   *  emojify all found sub-text nodes placing images node instead.
   * @param   Element   generic DOM node with some text in some child node
   * @param   Object    options  containing info about how to parse
    *
    *            .callback   Function  the callback to invoke per each found emoji.
    *            .base       string    the base url, by default twemoji.base
    *            .ext        string    the image extension, by default twemoji.ext
    *            .size       string    the assets size, by default twemoji.size
    *
   * @return  Element same generic node with emoji in place, if any.
   */
	function parseNode(node, options) {
		var
			allText = grabAllTextNodes(node, []),
			length = allText.length,
			attrib,
			attrname,
			modified,
			fragment,
			subnode,
			text,
			match,
			i,
			index,
			img,
			rawText,
			iconId,
			src;
		while (length--) {
			modified = false;
			fragment = document.createDocumentFragment();
			subnode = allText[length];
			text = subnode.nodeValue;
			i = 0;
			while ((match = re.exec(text))) {
				index = match.index;
				if (index !== i) {
					fragment.appendChild(
            createText(text.slice(i, index), true)
					);
				}
				rawText = match[0];
				iconId = grabTheRightIcon(rawText);
				i = index + rawText.length;
				src = options.callback(iconId, options);
        if (iconId && src) {
					img = new Image();
					img.onerror = options.onerror;
					img.setAttribute('draggable', 'false');
					attrib = options.attributes(rawText, iconId);
					for (attrname in attrib) {
						if (
							attrib.hasOwnProperty(attrname) &&
						// don't allow any handlers to be set + don't allow overrides
						attrname.indexOf('on') !== 0 &&
						!img.hasAttribute(attrname)
						) {
							img.setAttribute(attrname, attrib[attrname]);
						}
					}
					img.className = options.className;
					img.alt = rawText;
					img.src = src;
					modified = true;
					fragment.appendChild(img);
				}
        if (!img) fragment.appendChild(createText(rawText, false));
				img = null;
			}
			// is there actually anything to replace in here ?
			if (modified) {
			// any text left to be added ?
				if (i < text.length) {
					fragment.appendChild(
            createText(text.slice(i), true)
					);
				}
				// replace the text node only, leave intact
				// anything else surrounding such text
				subnode.parentNode.replaceChild(fragment, subnode);
			}
		}

		return node;
	}

  /**
   * String/HTML version of the same logic / parser:
   *  emojify a generic text placing images tags instead of surrogates pair.
   * @param   string    generic string with possibly some emoji in it
   * @param   Object    options  containing info about how to parse
   *
   *            .callback   Function  the callback to invoke per each found emoji.
   *            .base       string    the base url, by default twemoji.base
   *            .ext        string    the image extension, by default twemoji.ext
   *            .size       string    the assets size, by default twemoji.size
   *
   * @return  the string with <img tags> replacing all found and parsed emoji
   */
	function parseString(str, options) {
		return replace(str, function (rawText) {
			var
				ret = rawText,
				iconId = grabTheRightIcon(rawText),
				src = options.callback(iconId, options),
				attrib,
				attrname;
      if (iconId && src) {
				// recycle the match string replacing the emoji
				// with its image counter part
				ret = '<img '.concat(
					'class="', options.className, '" ',
					'draggable="false" ',
					// needs to preserve user original intent
					// when variants should be copied and pasted too
					'alt="',
					rawText,
					'"',
					' src="',
					src,
					'"'
				);
				attrib = options.attributes(rawText, iconId);
				for (attrname in attrib) {
					if (
						attrib.hasOwnProperty(attrname) &&
						// don't allow any handlers to be set + don't allow overrides
						attrname.indexOf('on') !== 0 &&
						ret.indexOf(' ' + attrname + '=') === -1
					) {
						ret = ret.concat(' ', attrname, '="', escapeHTML(attrib[attrname]), '"');
					}
				}
        ret = ret.concat('/>');
			}
			return ret;
		});
	}

	/**
	* Function used to actually replace HTML special chars
	* @param   string  HTML special char
	* @return  string  encoded HTML special char
	*/
	function replacer(m) {
		return escaper[m];
	}

	/**
	* Default options.attribute callback
	* @return  null
	*/
	function returnNull() {
		return null;
	}

	/**
	* Given a generic value, creates its squared counterpart if it's a number.
	*  As example, number 36 will return '36x36'.
	* @param   any     a generic value.
	* @return  any     a string representing asset size, i.e. "36x36"
	*                  only in case the value was a number.
	*                  Returns initial value otherwise.
	*/
	function toSizeSquaredAsset(value) {
		return typeof value === 'number' ?
			value + 'x' + value :
			value;
	}


	/////////////////////////
	//  exported functions //
	//     declaration     //
	/////////////////////////

	function fromCodePoint(codepoint) {
		var code = typeof codepoint === 'string' ?
			parseInt(codepoint, 16) : codepoint;
		if (code < 0x10000) {
			return fromCharCode(code);
		}
		code -= 0x10000;
		return fromCharCode(
			0xD800 + (code >> 10),
			0xDC00 + (code & 0x3FF)
		);
	}

	function parse(what, how) {
		if (!how || typeof how === 'function') {
			how = {callback: how};
		}
		// if first argument is string, inject html <img> tags
		// otherwise use the DOM tree and parse text nodes only
		return (typeof what === 'string' ? parseString : parseNode)(what, {
			callback:   how.callback || defaultImageSrcGenerator,
			attributes: typeof how.attributes === 'function' ? how.attributes : returnNull,
			base:       typeof how.base === 'string' ? how.base : twemoji.base,
			ext:        how.ext || twemoji.ext,
			size:       how.folder || toSizeSquaredAsset(how.size || twemoji.size),
			className:  how.className || twemoji.className,
			onerror:    how.onerror || twemoji.onerror
		});
	}

	function replace(text, callback) {
		return String(text).replace(re, callback);
	}

	function test(text) {
		// IE6 needs a reset before too
		re.lastIndex = 0;
		var result = re.test(text);
		re.lastIndex = 0;
		return result;
	}

	function toCodePoint(unicodeSurrogates, sep) {
		var
			r = [],
			c = 0,
			p = 0,
			i = 0;
		while (i < unicodeSurrogates.length) {
			c = unicodeSurrogates.charCodeAt(i++);
			if (p) {
				r.push((0x10000 + ((p - 0xD800) << 10) + (c - 0xDC00)).toString(16));
				p = 0;
			} else if (0xD800 <= c && c <= 0xDBFF) {
				p = c;
			} else {
				r.push(c.toString(16));
			}
		}
		return r.join(sep || '-');
	}

	function getRecentlyUsed() {
		var storeEmoji = [];
		if (D.ID) {
			storeEmoji = D.store.get('emoji');
		}
		var defaultItems = ['1f600', '1f602', '1f603', '1f642', '1f60e', '1f609', '1f618', '1f62f', '1f61b', '1f61c', '1f643', '2639'];
		if (!storeEmoji) {
			storeEmoji = defaultItems.slice();
		}
		return storeEmoji;
	}

	function addRecentlyUsed(emoji) {
		if (!D.ID) {
			return;
		}
		var storeEmoji = D.store.get('emoji');
		if (!storeEmoji) {
			storeEmoji = [];
		}
		if (in_array(emoji, storeEmoji)) {
			storeEmoji.splice(storeEmoji.indexOf(emoji), 1);
		}
		storeEmoji.unshift(emoji);
		D.store.set('emoji', storeEmoji);
	}

}());

D.Emoji = twemoji;

twemoji.config = {
	tabs: [
		{id: 1, name: 'History', title: 'Nesen izmantotie', className: 'emojiRecentIcon'},
		{id: 2, name: 'Smileys & People', title: 'Smaidiņi un cilvēki', className: 'emojiSmileysIcon'},
		{id: 3, name: 'Animals & Nature', title: 'Dzīvnieki un daba', className: 'emojiAnimalsIcon'},
		{id: 4, name: 'Food & Drink', title: 'Ēdieni un dzērieni', className: 'emojiFoodIcon'},
		{id: 5, name: 'Activity', title: 'Aktivitātes', className: 'emojiActivityIcon'},
		{id: 6, name: 'Travel & Places', title: 'Ceļošana un vietas', className: 'emojiTravelIcon'},
		{id: 7, name: 'Objects', title: 'Objekti', className: 'emojiObjectsIcon'},
		{id: 8, name: 'Symbols', title: 'Simboli', className: 'emojiSymbolsIcon'},
		{id: 9, name: 'Flags', title: 'Karogi', className: 'emojiFlagsIcon'},
		{id: 10, name: 'Draugiem', title: 'draugiem.lv', className: 'emojiDrIcon'}
	],

	tabItems: [
		[],
		[],
		["1f600", "1f62c", "1f601", "1f602", "1f603", "1f604", "1f605", "1f606", "1f607", "1f609", "1f60a", "1f642", "1f643", "263a", "1f970", "1f60b", "1f929", "1f60c", "1f60d", "1f618", "1f617", "1f619", "1f61a", "1f61c", "1f61d", "1f61b", "1f92a", "1f911", "1f913", "1f60e", "1f92d", "1f92b", "1f917", "1f60f", "1f928", "1f636", "1f610", "1f611", "1f612", "1f644", "1f914", "1f633", "1f61e", "1f61f", "1f620", "1f621", "1f614", "1f615", "1f641", "2639", "1f623", "1f616", "1f92e", "1f62b", "1f975", "1f976", "1f974", "1f629", "1f92f", "1f624", "1f973", "1f62e", "1f631", "1f9d0", "1f628", "1f630", "1f62f", "1f626", "1f627", "1f622", "1f625", "1f62a", "1f613", "1f97a", "1f62d", "1f635", "1f632", "1f910", "1f637", "1f912", "1f915", "1f634", "1f4a4", "1f4a9", "1f608", "1f47f", "1f479", "1f47a", "1f971", "1f480", "1f47b", "1f47d", "1f92c", "1f916", "1f63a", "1f638", "1f639", "1f63b", "1f63c", "1f63d", "1f640", "1f63f", "1f63e", "1f64c", "1f44f", "1f44b", "1f44d", "1f44e", "1f44a", "270a", "270c", "1f44c", "270b", "1f450", "1f4aa", "1f64f", "261d", "1f446", "1f447", "1f448", "1f449", "1f595", "1f590", "1f918", "1f596", "270d", "1f485", "1f444", "1f445", "1f442", "1f443", "1f441", "1f440", "1f9e1", "1f464", "1f465", "1f5e3", "1f476", "1f90e", "1f466", "1f90d", "1f467", "1f468", "1f469", "1f471", "1f474", "1f475", "1f472", "1f473", "1f46e", "1f477", "1f482", "1f575", "1f385", "1f47c", "1f478", "1f470", "1f6b6", "1f3c3", "1f483", "1f46f", "1f46b", "1f46c", "1f46d", "1f647", "1f481", "1f645", "1f646", "1f64b", "1f64e", "1f64d", "1f487", "1f486", "1f491", "1f469-2764-1f469", "1f468-2764-1f468", "1f48f", "1f469-2764-1f48b-1f469", "1f468-2764-1f48b-1f468", "1f46a", "1f468-1f469-1f467", "1f468-1f469-1f467-1f466", "1f468-1f469-1f466-1f466", "1f468-1f469-1f467-1f467", "1f469-1f469-1f466", "1f469-1f469-1f467", "1f469-1f469-1f467-1f466", "1f469-1f469-1f466-1f466", "1f469-1f469-1f467-1f467", "1f468-1f468-1f466", "1f468-1f468-1f467", "1f468-1f468-1f467-1f466", "1f468-1f468-1f466-1f466", "1f468-1f468-1f467-1f467", "1f45a", "1f455", "1f456", "1f90f", "1f454", "1f457", "1f459", "1f458", "1f484", "1f48b", "1f463", "1f460", "1f461", "1f462", "1f45e", "1f45f", "1f452", "1f3a9", "26d1", "1f393", "1f451", "1f392", "1f91f", "1f45d", "1f45b", "1f45c", "1f4bc", "1f453", "1f576", "1f48d", "1f302", "1f64c-1f3fb", "1f64c-1f3fc", "1f64c-1f3fd", "1f64c-1f3fe", "1f64c-1f3ff", "1f44f-1f3fb", "1f44f-1f3fc", "1f44f-1f3fd", "1f44f-1f3fe", "1f44f-1f3ff", "1f44b-1f3fb", "1f44b-1f3fc", "1f44b-1f3fd", "1f44b-1f3fe", "1f44b-1f3ff", "1f44d-1f3fb", "1f44d-1f3fc", "1f44d-1f3fd", "1f44d-1f3fe", "1f44d-1f3ff", "1f44e-1f3fb", "1f44e-1f3fc", "1f44e-1f3fd", "1f44e-1f3fe", "1f44e-1f3ff", "1f44a-1f3fb", "1f44a-1f3fc", "1f44a-1f3fd", "1f44a-1f3fe", "1f44a-1f3ff", "270a-1f3fb", "270a-1f3fc", "270a-1f3fd", "270a-1f3fe", "270a-1f3ff", "270c-1f3fb", "270c-1f3fc", "270c-1f3fd", "270c-1f3fe", "270c-1f3ff", "1f44c-1f3fb", "1f44c-1f3fc", "1f44c-1f3fd", "1f44c-1f3fe", "1f44c-1f3ff", "270b-1f3fb", "270b-1f3fc", "270b-1f3fd", "270b-1f3fe", "270b-1f3ff", "1f450-1f3fb", "1f450-1f3fc", "1f450-1f3fd", "1f450-1f3fe", "1f450-1f3ff", "1f4aa-1f3fb", "1f4aa-1f3fc", "1f4aa-1f3fd", "1f4aa-1f3fe", "1f4aa-1f3ff", "1f64f-1f3fb", "1f64f-1f3fc", "1f64f-1f3fd", "1f64f-1f3fe", "1f64f-1f3ff", "261d-1f3fb", "261d-1f3fc", "261d-1f3fd", "261d-1f3fe", "261d-1f3ff", "1f446-1f3fb", "1f446-1f3fc", "1f446-1f3fd", "1f446-1f3fe", "1f446-1f3ff", "1f447-1f3fb", "1f447-1f3fc", "1f447-1f3fd", "1f447-1f3fe", "1f447-1f3ff", "1f448-1f3fb", "1f448-1f3fc", "1f448-1f3fd", "1f448-1f3fe", "1f448-1f3ff", "1f449-1f3fb", "1f449-1f3fc", "1f449-1f3fd", "1f449-1f3fe", "1f449-1f3ff", "1f595-1f3fb", "1f595-1f3fc", "1f595-1f3fd", "1f595-1f3fe", "1f595-1f3ff", "1f590-1f3fb", "1f590-1f3fc", "1f590-1f3fd", "1f590-1f3fe", "1f590-1f3ff", "1f932", "1f918-1f3fb", "1f918-1f3fc", "1f918-1f3fd", "1f918-1f3fe", "1f918-1f3ff", "1f596-1f3fb", "1f596-1f3fc", "1f596-1f3fd", "1f596-1f3fe", "1f596-1f3ff", "270d-1f3fb", "270d-1f3fc", "270d-1f3fd", "270d-1f3fe", "270d-1f3ff", "1f485-1f3fb", "1f485-1f3fc", "1f485-1f3fd", "1f485-1f3fe", "1f485-1f3ff", "1f442-1f3fb", "1f442-1f3fc", "1f442-1f3fd", "1f442-1f3fe", "1f442-1f3ff", "1f443-1f3fb", "1f443-1f3fc", "1f443-1f3fd", "1f443-1f3fe", "1f443-1f3ff", "1f476-1f3fb", "1f476-1f3fc", "1f476-1f3fd", "1f476-1f3fe", "1f476-1f3ff", "1f466-1f3fb", "1f466-1f3fc", "1f9be", "1f9bf", "1f9b5", "1f466-1f3fd", "1f466-1f3fe", "1f466-1f3ff", "1f467-1f3fb", "1f467-1f3fc", "1f9b6", "1f467-1f3fd", "1f467-1f3fe", "1f467-1f3ff", "1f468-1f3fb", "1f468-1f3fc", "1f468-1f3fd", "1f468-1f3fe", "1f468-1f3ff", "1f469-1f3fb", "1f469-1f3fc", "1f469-1f3fd", "1f9bb", "1f469-1f3fe", "1f469-1f3ff", "1f471-1f3fb", "1f471-1f3fc", "1f471-1f3fd", "1f471-1f3fe", "1f471-1f3ff", "1f474-1f3fb", "1f474-1f3fc", "1f474-1f3fd", "1f474-1f3fe", "1f9e0", "1f9b7", "1f9b4", "1f474-1f3ff", "1f475-1f3fb", "1f475-1f3fc", "1f475-1f3fd", "1f475-1f3fe", "1f475-1f3ff", "1f472-1f3fb", "1f472-1f3fc", "1f472-1f3fd", "1f472-1f3fe", "1f472-1f3ff", "1f9d2", "1f473-1f3fb", "1f473-1f3fc", "1f473-1f3fd", "1f473-1f3fe", "1f473-1f3ff", "1f46e-1f3fb", "1f46e-1f3fc", "1f46e-1f3fd", "1f46e-1f3fe", "1f46e-1f3ff", "1f477-1f3fb", "1f477-1f3fc", "1f477-1f3fd", "1f477-1f3fe", "1f477-1f3ff", "1f482-1f3fb", "1f482-1f3fc", "1f9d1", "1f482-1f3fd", "1f482-1f3fe", "1f482-1f3ff", "1f385-1f3fb", "1f385-1f3fc", "1f385-1f3fd", "1f385-1f3fe", "1f385-1f3ff", "1f47c-1f3fb", "1f47c-1f3fc", "1f47c-1f3fd", "1f47c-1f3fe", "1f47c-1f3ff", "1f478-1f3fb", "1f478-1f3fc", "1f478-1f3fd", "1f478-1f3fe", "1f9d4", "1f478-1f3ff", "1f470-1f3fb", "1f470-1f3fc", "1f470-1f3fd", "1f470-1f3fe", "1f471-200d-2642-fe0f", "1f470-1f3ff", "1f6b6-1f3fb", "1f6b6-1f3fc", "1f6b6-1f3fd", "1f6b6-1f3fe", "1f6b6-1f3ff", "1f3c3-1f3fb", "1f3c3-1f3fc", "1f3c3-1f3fd", "1f3c3-1f3fe", "1f3c3-1f3ff", "1f468-200d-1f9b0", "1f483-1f3fb", "1f483-1f3fc", "1f483-1f3fd", "1f483-1f3fe", "1f483-1f3ff", "1f468-200d-1f9b1", "1f647-1f3fb", "1f647-1f3fc", "1f647-1f3fd", "1f647-1f3fe", "1f647-1f3ff", "1f468-200d-1f9b3", "1f481-1f3fb", "1f481-1f3fc", "1f481-1f3fd", "1f481-1f3fe", "1f481-1f3ff", "1f468-200d-1f9b2", "1f645-1f3fb", "1f645-1f3fc", "1f645-1f3fd", "1f645-1f3fe", "1f645-1f3ff", "1f646-1f3fb", "1f646-1f3fc", "1f646-1f3fd", "1f646-1f3fe", "1f646-1f3ff", "1f64b-1f3fb", "1f471-200d-2640-fe0f", "1f64b-1f3fc", "1f64b-1f3fd", "1f64b-1f3fe", "1f64b-1f3ff", "1f64e-1f3fb", "1f64e-1f3fc", "1f64e-1f3fd", "1f64e-1f3fe", "1f64e-1f3ff", "1f64d-1f3fb", "1f64d-1f3fc", "1f469-200d-1f9b0", "1f64d-1f3fd", "1f64d-1f3fe", "1f64d-1f3ff", "1f487-1f3fb", "1f487-1f3fc", "1f469-200d-1f9b1", "1f487-1f3fd", "1f487-1f3fe", "1f487-1f3ff", "1f486-1f3fb", "1f486-1f3fc", "1f469-200d-1f9b3", "1f486-1f3fd", "1f486-1f3fe", "1f486-1f3ff", "1f575-1f3fb", "1f575-1f3fc", "1f469-200d-1f9b2", "1f575-1f3fd", "1f575-1f3fe", "1f575-1f3ff", "1f934-1f3fb", "1f934-1f3fc", "1f9d3", "1f934-1f3fd", "1f934-1f3fe", "1f934-1f3ff", "1f936-1f3fb", "1f936-1f3fc", "1f936-1f3fd", "1f936-1f3fe", "1f936-1f3ff", "1f935-1f3fb", "1f935-1f3fc", "1f935-1f3fd", "1f935-1f3fe", "1f935-1f3ff", "1f937-1f3fb", "1f937-1f3fc", "1f937-1f3fd", "1f937-1f3fe", "1f937-1f3ff", "1f926-1f3fb", "1f926-1f3fc", "1f926-1f3fd", "1f926-1f3fe", "1f926-1f3ff", "1f64d-200d-2642-fe0f", "1f930-1f3fb", "1f930-1f3fc", "1f930-1f3fd", "1f930-1f3fe", "1f930-1f3ff", "1f933-1f3fb", "1f933-1f3fc", "1f933-1f3fd", "1f933-1f3fe", "1f933-1f3ff", "1f91e-1f3fb", "1f64d-200d-2640-fe0f", "1f91e-1f3fc", "1f91e-1f3fd", "1f91e-1f3fe", "1f91e-1f3ff", "1f919-1f3fb", "1f919-1f3fc", "1f919-1f3fd", "1f919-1f3fe", "1f919-1f3ff", "1f91b-1f3fb", "1f91b-1f3fc", "1f91b-1f3fd", "1f91b-1f3fe", "1f91b-1f3ff", "1f91c-1f3fb", "1f91c-1f3fc", "1f91c-1f3fd", "1f64e-200d-2642-fe0f", "1f91c-1f3fe", "1f91c-1f3ff", "1f91a-1f3fb", "1f91a-1f3fc", "1f91a-1f3fd", "1f91a-1f3fe", "1f91a-1f3ff", "1f91d-1f3fb", "1f91d-1f3fc", "1f91d-1f3fd", "1f91d-1f3fe", "1f64e-200d-2640-fe0f", "1f91d-1f3ff", "1f920", "1f921", "1f922", "1f923", "1f924", "1f925", "1f927", "1f934", "1f935", "1f936", "1f926", "1f937", "1f930", "1f933", "1f57a", "1f919", "1f645-200d-2642-fe0f", "1f91a", "1f91b", "1f91c", "1f91d", "1f91e", "1f645-200d-2640-fe0f", "1f646-200d-2642-fe0f", "1f646-200d-2640-fe0f", "1f481-200d-2642-fe0f", "1f481-200d-2640-fe0f", "1f64b-200d-2642-fe0f", "1f64b-200d-2640-fe0f", "1f9cf", "1f9cf-200d-2642-fe0f", "1f9cf-200d-2640-fe0f", "1f647-200d-2642-fe0f", "1f647-200d-2640-fe0f", "1f926-200d-2642-fe0f", "1f926-200d-2640-fe0f", "1f937-200d-2642-fe0f", "1f937-200d-2640-fe0f", "1f468-200d-2695-fe0f", "1f469-200d-2695-fe0f", "1f468-200d-1f393", "1f469-200d-1f393", "1f468-200d-1f3eb", "1f469-200d-1f3eb", "1f468-200d-2696-fe0f", "1f469-200d-2696-fe0f", "1f468-200d-1f33e", "1f469-200d-1f33e", "1f468-200d-1f373", "1f469-200d-1f373", "1f468-200d-1f527", "1f469-200d-1f527", "1f468-200d-1f3ed", "1f469-200d-1f3ed", "1f468-200d-1f4bc", "1f469-200d-1f4bc", "1f468-200d-1f52c", "1f469-200d-1f52c", "1f468-200d-1f4bb", "1f469-200d-1f4bb", "1f468-200d-1f3a4", "1f469-200d-1f3a4", "1f468-200d-1f3a8", "1f469-200d-1f3a8", "1f468-200d-2708-fe0f", "1f469-200d-2708-fe0f", "1f468-200d-1f680", "1f469-200d-1f680", "1f468-200d-1f692", "1f469-200d-1f692", "1f46e-200d-2642-fe0f", "1f46e-200d-2640-fe0f", "1f575-fe0f-200d-2642-fe0f", "1f575-fe0f-200d-2640-fe0f", "1f482-200d-2642-fe0f", "1f482-200d-2640-fe0f", "1f477-200d-2642-fe0f", "1f477-200d-2640-fe0f", "1f473-200d-2642-fe0f", "1f473-200d-2640-fe0f", "1f9d5", "1f931", "1f9b8", "1f9b8-200d-2642-fe0f", "1f9b8-200d-2640-fe0f", "1f9b9", "1f9b9-200d-2642-fe0f", "1f9b9-200d-2640-fe0f", "1f9d9", "1f9d9-200d-2642-fe0f", "1f9d9-200d-2640-fe0f", "1f9da", "1f9da-200d-2642-fe0f", "1f9da-200d-2640-fe0f", "1f9db", "1f9db-200d-2642-fe0f", "1f9db-200d-2640-fe0f", "1f9dc", "1f9dc-200d-2642-fe0f", "1f9dc-200d-2640-fe0f", "1f9dd", "1f9dd-200d-2642-fe0f", "1f9dd-200d-2640-fe0f", "1f9de", "1f9de-200d-2642-fe0f", "1f9de-200d-2640-fe0f", "1f9df", "1f9df-200d-2642-fe0f", "1f9df-200d-2640-fe0f", "1f486-200d-2642-fe0f", "1f486-200d-2640-fe0f", "1f487-200d-2642-fe0f", "1f487-200d-2640-fe0f", "1f6b6-200d-2642-fe0f", "1f6b6-200d-2640-fe0f", "1f9cd", "1f9cd-200d-2642-fe0f", "1f9cd-200d-2640-fe0f", "1f9ce", "1f9ce-200d-2642-fe0f", "1f9ce-200d-2640-fe0f", "1f468-200d-1f9af", "1f469-200d-1f9af", "1f468-200d-1f9bc", "1f469-200d-1f9bc", "1f468-200d-1f9bd", "1f469-200d-1f9bd", "1f3c3-200d-2642-fe0f", "1f3c3-200d-2640-fe0f", "1f46f-200d-2642-fe0f", "1f46f-200d-2640-fe0f", "1f9d6", "1f9d6-200d-2642-fe0f", "1f9d6-200d-2640-fe0f", "1f9d7", "1f9d7-200d-2642-fe0f", "1f9d7-200d-2640-fe0f", "1f3cc-fe0f-200d-2642-fe0f", "1f3cc-fe0f-200d-2640-fe0f", "1f3c4-200d-2642-fe0f", "1f3c4-200d-2640-fe0f", "1f6a3-200d-2642-fe0f", "1f6a3-200d-2640-fe0f", "1f3ca-200d-2642-fe0f", "1f3ca-200d-2640-fe0f", "26f9-fe0f-200d-2642-fe0f", "26f9-fe0f-200d-2640-fe0f", "1f3cb-fe0f-200d-2642-fe0f", "1f3cb-fe0f-200d-2640-fe0f", "1f6b4-200d-2642-fe0f", "1f6b4-200d-2640-fe0f", "1f6b5-200d-2642-fe0f", "1f6b5-200d-2640-fe0f", "1f938-200d-2642-fe0f", "1f938-200d-2640-fe0f", "1f93c-200d-2642-fe0f", "1f93c-200d-2640-fe0f", "1f93d-200d-2642-fe0f", "1f93d-200d-2640-fe0f", "1f93e-200d-2642-fe0f", "1f93e-200d-2640-fe0f", "1f939-200d-2642-fe0f", "1f939-200d-2640-fe0f", "1f9d8", "1f9d8-200d-2642-fe0f", "1f9d8-200d-2640-fe0f", "1f9d1-200d-1f91d-200d-1f9d1", "1f469-200d-2764-fe0f-200d-1f48b-200d-1f468", "1f468-200d-2764-fe0f-200d-1f48b-200d-1f468", "1f469-200d-2764-fe0f-200d-1f48b-200d-1f469", "1f469-200d-2764-fe0f-200d-1f468", "1f468-200d-2764-fe0f-200d-1f468", "1f469-200d-2764-fe0f-200d-1f469", "1f468-200d-1f469-200d-1f466", "1f468-200d-1f469-200d-1f467", "1f468-200d-1f469-200d-1f467-200d-1f466", "1f468-200d-1f469-200d-1f466-200d-1f466", "1f468-200d-1f469-200d-1f467-200d-1f467", "1f468-200d-1f468-200d-1f466", "1f468-200d-1f468-200d-1f467", "1f468-200d-1f468-200d-1f467-200d-1f466", "1f468-200d-1f468-200d-1f466-200d-1f466", "1f468-200d-1f468-200d-1f467-200d-1f467", "1f469-200d-1f469-200d-1f466", "1f469-200d-1f469-200d-1f467", "1f469-200d-1f469-200d-1f467-200d-1f466", "1f469-200d-1f469-200d-1f466-200d-1f466", "1f469-200d-1f469-200d-1f467-200d-1f467", "1f468-200d-1f466", "1f468-200d-1f466-200d-1f466", "1f468-200d-1f467", "1f468-200d-1f467-200d-1f466", "1f468-200d-1f467-200d-1f467", "1f469-200d-1f466", "1f469-200d-1f466-200d-1f466", "1f469-200d-1f467", "1f469-200d-1f467-200d-1f466", "1f469-200d-1f467-200d-1f467"],
		["1f436", "1f431", "1f42d", "1f439", "1f430", "1f43b", "1f43c", "1f428", "1f42f", "1f981", "1f42e", "1f437", "1f43d", "1f438", "1f419", "1f435", "1f648", "1f649", "1f64a", "1f412", "1f414", "1f427", "1f426", "1f424", "1f423", "1f425", "1f43a", "1f417", "1f434", "1f984", "1f41d", "1f41b", "1f40c", "1f41e", "1f41c", "1f577", "1f982", "1f980", "1f40d", "1f422", "1f420", "1f41f", "1f421", "1f42c", "1f433", "1f40b", "1f40a", "1f406", "1f405", "1f403", "1f402", "1f404", "1f42a", "1f42b", "1f418", "1f410", "1f40f", "1f411", "1f40e", "1f416", "1f400", "1f401", "1f413", "1f983", "1f54a", "1f415", "1f429", "1f408", "1f407", "1f43f", "1f43e", "1f409", "1f432", "1f335", "1f384", "1f332", "1f333", "1f334", "1f331", "1f33f", "2618", "1f340", "1f38d", "1f38b", "1f343", "1f342", "1f341", "1f33e", "1f33a", "1f33b", "1f339", "1f337", "1f33c", "1f338", "1f490", "1f344", "1f330", "1f383", "1f41a", "1f578", "1f30e", "1f30d", "1f30f", "1f315", "1f316", "1f317", "1f318", "1f311", "1f312", "1f313", "1f314", "1f31a", "1f31d", "1f31b", "1f31c", "1f31e", "1f319", "2b50", "1f31f", "1f4ab", "2728", "2604", "2600", "1f324", "26c5", "1f325", "1f326", "2601", "1f327", "26c8", "1f329", "26a1", "1f525", "1f4a5", "2744", "1f328", "2603", "26c4", "1f32c", "1f4a8", "1f32a", "1f32b", "2602", "2614", "1f4a7", "1f4a6", "1f30a", "1f985", "1f986", "1f987", "1f988", "1f989", "1f98a", "1f98b", "1f98c", "1f98d", "1f98e", "1f98f", "1f940", "1f990", "1f991", "1f9a7", "1f9ae", "1f415-200d-1f9ba", "1f99d", "1f993", "1f999", "1f992", "1f99b", "1f994", "1f9a5", "1f9a6", "1f9a8", "1f998", "1f9a1", "1f9a2", "1f9a9", "1f99a", "1f99c", "1f995", "1f996", "1f997", "1f99f", "1f9a0"],
		["1f34f", "1f34e", "1f350", "1f34a", "1f34b", "1f34c", "1f349", "1f347", "1f353", "1f348", "1f352", "1f351", "1f34d", "1f345", "1f346", "1f336", "1f33d", "1f360", "1f36f", "1f35e", "1f9c0", "1f357", "1f356", "1f364", "1f373", "1f354", "1f35f", "1f32d", "1f355", "1f35d", "1f32e", "1f32f", "1f35c", "1f372", "1f365", "1f363", "1f371", "1f35b", "1f359", "1f35a", "1f358", "1f362", "1f361", "1f367", "1f368", "1f366", "1f370", "1f382", "1f36e", "1f36c", "1f36d", "1f36b", "1f37f", "1f369", "1f36a", "1f37a", "1f37b", "1f377", "1f378", "1f379", "1f37e", "1f376", "1f375", "2615", "1f37c", "1f374", "1f37d", "1f950", "1f951", "1f952", "1f953", "1f954", "1f955", "1f956", "1f957", "1f958", "1f959", "1f942", "1f943", "1f944", "1f95a", "1f95b", "1f95c", "1f95d", "1f95e", "1f96d", "1f965", "1f96c", "1f966", "1f9c4", "1f9c5", "1f968", "1f96f", "1f9c7", "1f969", "1f96a", "1f9c6", "1f963", "1f9c8", "1f9c2", "1f96b", "1f96e", "1f95f", "1f960", "1f961", "1f99e", "1f9aa", "1f9c1", "1f967", "1f964", "1f9c3", "1f9c9", "1f9ca", "1f962"],
		["26bd", "1f3c0", "1f3c8", "26be", "1f3be", "1f3d0", "1f3c9", "1f3b1", "26f3", "1f3cc", "1f3d3", "1f3f8", "1f3d2", "1f3d1", "1f3cf", "1f3bf", "26f7", "1f3c2", "26f8", "1f3f9", "1f3a3", "1f6a3", "1f3ca", "1f3c4", "1f6c0", "26f9", "1f3cb", "1f6b4", "1f6b5", "1f3c7", "1f574", "1f3c6", "1f3bd", "1f3c5", "1f396", "1f397", "1f3f5", "1f3ab", "1f39f", "1f3ad", "1f3a8", "1f3aa", "1f3a4", "1f3a7", "1f3bc", "1f3b9", "1f3b7", "1f3ba", "1f3b8", "1f3bb", "1f3ac", "1f3ae", "1f47e", "1f3af", "1f3b2", "1f3b0", "1f3b3", "1f6a3-1f3fb", "1f6a3-1f3fc", "1f6a3-1f3fd", "1f6a3-1f3fe", "1f6a3-1f3ff", "1f3ca-1f3fb", "1f3ca-1f3fc", "1f3ca-1f3fd", "1f3ca-1f3fe", "1f3ca-1f3ff", "1f3c4-1f3fb", "1f3c4-1f3fc", "1f3c4-1f3fd", "1f3c4-1f3fe", "1f3c4-1f3ff", "1f6c0-1f3fb", "1f6c0-1f3fc", "1f6c0-1f3fd", "1f6c0-1f3fe", "1f6c0-1f3ff", "26f9-1f3fb", "26f9-1f3fc", "26f9-1f3fd", "26f9-1f3fe", "26f9-1f3ff", "1f3cb-1f3fb", "1f3cb-1f3fc", "1f3cb-1f3fd", "1f3cb-1f3fe", "1f3cb-1f3ff", "1f6b4-1f3fb", "1f6b4-1f3fc", "1f6b4-1f3fd", "1f6b4-1f3fe", "1f6b4-1f3ff", "1f6b5-1f3fb", "1f6b5-1f3fc", "1f6b5-1f3fd", "1f6b5-1f3fe", "1f6b5-1f3ff", "1f3c7-1f3fb", "1f3c7-1f3fc", "1f3c7-1f3fd", "1f3c7-1f3fe", "1f3c7-1f3ff", "1f57a-1f3fb", "1f57a-1f3fc", "1f57a-1f3fd", "1f57a-1f3fe", "1f57a-1f3ff", "1f938-1f3fb", "1f938-1f3fc", "1f938-1f3fd", "1f938-1f3fe", "1f938-1f3ff", "1f93d-1f3fb", "1f93d-1f3fc", "1f93d-1f3fd", "1f93d-1f3fe", "1f93d-1f3ff", "1f93e-1f3fb", "1f93e-1f3fc", "1f93e-1f3fd", "1f93e-1f3fe", "1f93e-1f3ff", "1f939-1f3fb", "1f939-1f3fc", "1f939-1f3fd", "1f939-1f3fe", "1f939-1f3ff", "1f938", "1f939", "1f93c", "1f94a", "1f94b", "1f93d", "1f93e", "1f945", "1f93a", "1f947", "1f948", "1f949", "1f941", "1f9e8", "1f9e7", "1f94e", "1f94f", "1f94d", "1f93f", "1f6f7", "1f94c", "1fa80", "1fa81", "1f9ff", "1f9e9", "1f9f8", "265f", "1f9f5", "1f9f6"],
		["1f697", "1f695", "1f699", "1f68c", "1f68e", "1f3ce", "1f693", "1f691", "1f692", "1f690", "1f69a", "1f69b", "1f69c", "1f3cd", "1f6b2", "1f6a8", "1f694", "1f68d", "1f698", "1f696", "1f6a1", "1f6a0", "1f69f", "1f683", "1f68b", "1f69d", "1f684", "1f685", "1f688", "1f69e", "1f682", "1f686", "1f687", "1f68a", "1f689", "1f681", "1f6e9", "2708", "1f6eb", "1f6ec", "26f5", "1f6e5", "1f6a4", "26f4", "1f6f3", "1f680", "1f6f0", "1f4ba", "2693", "1f6a7", "26fd", "1f68f", "1f6a6", "1f6a5", "1f3c1", "1f6a2", "1f3a1", "1f3a2", "1f3a0", "1f3d7", "1f301", "1f5fc", "1f3ed", "26f2", "1f391", "26f0", "1f3d4", "1f5fb", "1f30b", "1f5fe", "1f3d5", "26fa", "1f3de", "1f6e3", "1f6e4", "1f305", "1f304", "1f3dc", "1f3d6", "1f3dd", "1f307", "1f306", "1f3d9", "1f303", "1f309", "1f30c", "1f320", "1f387", "1f386", "1f308", "1f3d8", "1f3f0", "1f3ef", "1f3df", "1f5fd", "1f3e0", "1f3e1", "1f3da", "1f3e2", "1f3ec", "1f3e3", "1f3e4", "1f3e5", "1f3e6", "1f3e8", "1f3ea", "1f3eb", "1f3e9", "1f492", "1f3db", "26ea", "1f54c", "1f54d", "1f54b", "26e9", "1f6f4", "1f6f5", "1f6f6", "1f9ed", "1f9f1", "1f6d5", "1f9bd", "1f9bc", "1f6fa", "1f6f9", "1fa82", "1f6f8", "1f9f3", "1fa90"],
		["231a", "1f4f1", "1f4f2", "1f4bb", "2328", "1f5a5", "1f5a8", "1f5b1", "1f5b2", "1f579", "1f5dc", "1f4bd", "1f4be", "1f4bf", "1f4c0", "1f4fc", "1f4f7", "1f4f8", "1f4f9", "1f3a5", "1f4fd", "1f39e", "1f4de", "260e", "1f4df", "1f4e0", "1f4fa", "1f4fb", "1f399", "1f39a", "1f39b", "23f1", "23f2", "23f0", "1f570", "23f3", "231b", "1f4e1", "1f50b", "1f50c", "1f4a1", "1f526", "1f56f", "1f5d1", "1f6e2", "1f4b8", "1f4b5", "1f4b4", "1f4b6", "1f4b7", "1f4b0", "1f4b3", "1f48e", "2696", "1f527", "1f528", "2692", "1f6e0", "26cf", "1f529", "2699", "26d3", "1f52b", "1f4a3", "1f52a", "1f5e1", "2694", "1f6e1", "1f6ac", "2620", "26b0", "26b1", "1f3fa", "1f52e", "1f4ff", "1f488", "2697", "1f52d", "1f52c", "1f573", "1f48a", "1f489", "1f321", "1f3f7", "1f516", "1f6bd", "1f6bf", "1f6c1", "1f511", "1f5dd", "1f6cb", "1f6cc", "1f6cf", "1f6aa", "1f6ce", "1f5bc", "1f5fa", "26f1", "1f5ff", "1f6cd", "1f388", "1f38f", "1f380", "1f381", "1f38a", "1f389", "1f38e", "1f390", "1f38c", "1f3ee", "2709", "1f4e9", "1f4e8", "1f4e7", "1f48c", "1f4ee", "1f4ea", "1f4eb", "1f4ec", "1f4ed", "1f4e6", "1f4ef", "1f4e5", "1f4e4", "1f4dc", "1f4c3", "1f4d1", "1f4ca", "1f4c8", "1f4c9", "1f4c4", "1f4c5", "1f4c6", "1f5d3", "1f4c7", "1f5c3", "1f5f3", "1f5c4", "1f4cb", "1f5d2", "1f4c1", "1f4c2", "1f5c2", "1f5de", "1f4f0", "1f4d3", "1f4d5", "1f4d7", "1f4d8", "1f4d9", "1f4d4", "1f4d2", "1f4da", "1f4d6", "1f517", "1f4ce", "1f587", "2702", "1f4d0", "1f4cf", "1f4cc", "1f4cd", "1f6a9", "1f3f3", "1f3f4", "1f510", "1f512", "1f513", "1f50f", "1f58a", "1f58b", "2712", "1f4dd", "270f", "1f58d", "1f58c", "1f50d", "1f50e", "1f6d2", "1f97d", "1f97c", "1f9ba", "1f9e3", "1f9e4", "1f9e5", "1f9e6", "1f97b", "1fa71", "1fa72", "1fa73", "1f97e", "1f97f", "1fa70", "1f9e2", "1fa95", "1f9ee", "1fa94", "1f9fe", "1fa93", "1f9af", "1f9f0", "1f9f2", "1f9ea", "1f9eb", "1f9ec", "1fa78", "1fa79", "1fa7a", "1fa91", "1fa92", "1f9f4", "1f9f7", "1f9f9", "1f9fa", "1f9fb", "1f9fc", "1f9fd", "1f9ef"],
		["2764", "1f49b", "1f49a", "1f499", "1f49c", "1f494", "2763", "1f495", "1f49e", "1f493", "1f497", "1f496", "1f498", "1f49d", "1f49f", "262e", "271d", "262a", "1f549", "2638", "2721", "1f52f", "1f54e", "262f", "2626", "1f6d0", "26ce", "2648", "2649", "264a", "264b", "264c", "264d", "264e", "264f", "2650", "2651", "2652", "2653", "1f194", "269b", "1f233", "1f239", "2622", "2623", "1f4f4", "1f4f3", "1f236", "1f21a", "1f238", "1f23a", "1f237", "2734", "1f19a", "1f251", "1f4ae", "1f250", "3299", "3297", "1f234", "1f235", "1f232", "1f170", "1f171", "1f18e", "1f191", "1f17e", "1f198", "26d4", "1f4db", "1f6ab", "274c", "2b55", "1f4a2", "2668", "1f6b7", "1f6af", "1f6b3", "1f6b1", "1f51e", "1f4f5", "2757", "2755", "2753", "2754", "203c", "2049", "1f4af", "1f505", "1f506", "1f531", "269c", "303d", "26a0", "1f6b8", "1f530", "267b", "1f22f", "1f4b9", "2747", "2733", "274e", "2705", "1f4a0", "1f300", "27bf", "1f310", "24c2", "1f3e7", "1f202", "1f6c2", "1f6c3", "1f6c4", "1f6c5", "267f", "1f6ad", "1f6be", "1f17f", "1f6b0", "1f6b9", "1f6ba", "1f6bc", "1f6bb", "1f6ae", "1f3a6", "1f4f6", "1f201", "1f196", "1f197", "1f199", "1f192", "1f195", "1f193", "0030-20e3", "0031-20e3", "0032-20e3", "0033-20e3", "0034-20e3", "0035-20e3", "0036-20e3", "0037-20e3", "0038-20e3", "0039-20e3", "1f51f", "1f522", "25b6", "23f8", "23ef", "23f9", "23fa", "23ed", "23ee", "23e9", "23ea", "1f500", "1f501", "1f502", "25c0", "1f53c", "1f53d", "23eb", "23ec", "27a1", "2b05", "2b06", "2b07", "2197", "2198", "2199", "2196", "2195", "2194", "1f504", "21aa", "21a9", "2934", "2935", "0023-20e3", "002a-20e3", "2139", "1f524", "1f521", "1f520", "1f523", "1f3b5", "1f3b6", "3030", "27b0", "2714", "1f503", "2795", "2796", "2797", "2716", "1f4b2", "1f4b1", "00a9", "00ae", "2122", "1f51a", "1f519", "1f51b", "1f51d", "1f51c", "2611", "1f518", "26aa", "26ab", "1f534", "1f535", "1f538", "1f539", "1f536", "1f537", "1f53a", "25aa", "25ab", "2b1b", "2b1c", "1f53b", "25fc", "25fb", "25fe", "25fd", "1f532", "1f533", "1f508", "1f509", "1f50a", "1f507", "1f4e3", "1f4e2", "1f514", "1f515", "1f0cf", "1f004", "2660", "2663", "2665", "2666", "1f3b4", "1f4ad", "1f5ef", "1f4ac", "1f550", "1f551", "1f552", "1f553", "1f554", "1f555", "1f556", "1f557", "1f558", "1f559", "1f55a", "1f55b", "1f55c", "1f55d", "1f55e", "1f55f", "1f560", "1f561", "1f562", "1f563", "1f564", "1f565", "1f566", "1f567", "1f441-1f5e8", "1f5e8", "23cf", "1f5a4", "1f6d1", "2640", "2642", "2695", "267e", "0023-fe0f-20e3", "002a-fe0f-20e3", "0030-fe0f-20e3", "0031-fe0f-20e3", "0032-fe0f-20e3", "0033-fe0f-20e3", "0034-fe0f-20e3", "0035-fe0f-20e3", "0036-fe0f-20e3", "0037-fe0f-20e3", "0038-fe0f-20e3", "0039-fe0f-20e3"],
		["1f1f1-1f1fb", "1f1e6-1f1e8", "1f1e6-1f1eb", "1f1e6-1f1f1", "1f1e9-1f1ff", "1f1e6-1f1e9", "1f1e6-1f1f4", "1f1e6-1f1ee", "1f1e6-1f1ec", "1f1e6-1f1f7", "1f1e6-1f1f2", "1f1e6-1f1fc", "1f1e6-1f1fa", "1f1e6-1f1f9", "1f1e6-1f1ff", "1f1e7-1f1f8", "1f1e7-1f1ed", "1f1e7-1f1e9", "1f1e7-1f1e7", "1f1e7-1f1fe", "1f1e7-1f1ea", "1f1e7-1f1ff", "1f1e7-1f1ef", "1f1e7-1f1f2", "1f1e7-1f1f9", "1f1e7-1f1f4", "1f1e7-1f1e6", "1f1e7-1f1fc", "1f1e7-1f1f7", "1f1e7-1f1f3", "1f1e7-1f1ec", "1f1e7-1f1eb", "1f1e7-1f1ee", "1f1e8-1f1fb", "1f1f0-1f1ed", "1f1e8-1f1f2", "1f1e8-1f1e6", "1f1f0-1f1fe", "1f1e8-1f1eb", "1f1f9-1f1e9", "1f1e8-1f1f1", "1f1e8-1f1f3", "1f1e8-1f1f4", "1f1f0-1f1f2", "1f1e8-1f1ec", "1f1e8-1f1e9", "1f1e8-1f1f7", "1f1ed-1f1f7", "1f1e8-1f1fa", "1f1e8-1f1fe", "1f1e8-1f1ff", "1f1e9-1f1f0", "1f1e9-1f1ef", "1f1e9-1f1f2", "1f1e9-1f1f4", "1f1ea-1f1e8", "1f1ea-1f1ec", "1f1f8-1f1fb", "1f1ec-1f1f6", "1f1ea-1f1f7", "1f1ea-1f1ea", "1f1ea-1f1f9", "1f1eb-1f1f0", "1f1eb-1f1f4", "1f1eb-1f1ef", "1f1eb-1f1ee", "1f1eb-1f1f7", "1f1f5-1f1eb", "1f1ec-1f1e6", "1f1ec-1f1f2", "1f1ec-1f1ea", "1f1e9-1f1ea", "1f1ec-1f1ed", "1f1ec-1f1ee", "1f1ec-1f1f7", "1f1ec-1f1f1", "1f1ec-1f1e9", "1f1ec-1f1fa", "1f1ec-1f1f9", "1f1ec-1f1f3", "1f1ec-1f1fc", "1f1ec-1f1fe", "1f1ed-1f1f9", "1f1ed-1f1f3", "1f1ed-1f1f0", "1f1ed-1f1fa", "1f1ee-1f1f8", "1f1ee-1f1f3", "1f1ee-1f1e9", "1f1ee-1f1f7", "1f1ee-1f1f6", "1f1ee-1f1ea", "1f1ee-1f1f1", "1f1ee-1f1f9", "1f1e8-1f1ee", "1f1ef-1f1f2", "1f1ef-1f1f5", "1f1ef-1f1ea", "1f1ef-1f1f4", "1f1f0-1f1ff", "1f1f0-1f1ea", "1f1f0-1f1ee", "1f1fd-1f1f0", "1f1f0-1f1fc", "1f1f0-1f1ec", "1f1f1-1f1e6", "1f1f1-1f1e7", "1f1f1-1f1f8", "1f1f1-1f1f7", "1f1f1-1f1fe", "1f1f1-1f1ee", "1f1f1-1f1f9", "1f1f1-1f1fa", "1f1f2-1f1f4", "1f1f2-1f1f0", "1f1f2-1f1ec", "1f1f2-1f1fc", "1f1f2-1f1fe", "1f1f2-1f1fb", "1f1f2-1f1f1", "1f1f2-1f1f9", "1f1f2-1f1ed", "1f1f2-1f1f7", "1f1f2-1f1fa", "1f1f2-1f1fd", "1f1eb-1f1f2", "1f1f2-1f1e9", "1f1f2-1f1e8", "1f1f2-1f1f3", "1f1f2-1f1ea", "1f1f2-1f1f8", "1f1f2-1f1e6", "1f1f2-1f1ff", "1f1f2-1f1f2", "1f1f3-1f1e6", "1f1f3-1f1f7", "1f1f3-1f1f5", "1f1f3-1f1f1", "1f1f3-1f1e8", "1f1f3-1f1ff", "1f1f3-1f1ee", "1f1f3-1f1ea", "1f1f3-1f1ec", "1f1f3-1f1fa", "1f1f0-1f1f5", "1f1f3-1f1f4", "1f1f4-1f1f2", "1f1f5-1f1f0", "1f1f5-1f1fc", "1f1f5-1f1f8", "1f1f5-1f1e6", "1f1f5-1f1ec", "1f1f5-1f1fe", "1f1f5-1f1ea", "1f1f5-1f1ed", "1f1f5-1f1f1", "1f1f5-1f1f9", "1f1f5-1f1f7", "1f1f6-1f1e6", "1f1f7-1f1f4", "1f1f7-1f1fa", "1f1f7-1f1fc", "1f1f8-1f1ed", "1f1f0-1f1f3", "1f1f1-1f1e8", "1f1fb-1f1e8", "1f1fc-1f1f8", "1f1f8-1f1f2", "1f1f8-1f1f9", "1f1f8-1f1e6", "1f1f8-1f1f3", "1f1f7-1f1f8", "1f1f8-1f1e8", "1f1f8-1f1f1", "1f1f8-1f1ec", "1f1f8-1f1f0", "1f1f8-1f1ee", "1f1f8-1f1e7", "1f1f8-1f1f4", "1f1ff-1f1e6", "1f1f0-1f1f7", "1f1ea-1f1f8", "1f1f1-1f1f0", "1f1f8-1f1e9", "1f1f8-1f1f7", "1f1f8-1f1ff", "1f1f8-1f1ea", "1f1e8-1f1ed", "1f1f8-1f1fe", "1f1f9-1f1fc", "1f1f9-1f1ef", "1f1f9-1f1ff", "1f1f9-1f1ed", "1f1f9-1f1f1", "1f1f9-1f1ec", "1f1f9-1f1f4", "1f1f9-1f1f9", "1f1f9-1f1f3", "1f1f9-1f1f7", "1f1f9-1f1f2", "1f1f9-1f1fb", "1f1fa-1f1ec", "1f1fa-1f1e6", "1f1e6-1f1ea", "1f1ec-1f1e7", "1f1fa-1f1f8", "1f1fb-1f1ee", "1f1fa-1f1fe", "1f1fa-1f1ff", "1f1fb-1f1fa", "1f1fb-1f1e6", "1f1fb-1f1ea", "1f1fb-1f1f3", "1f1fc-1f1eb", "1f1ea-1f1ed", "1f1fe-1f1ea", "1f1ff-1f1f2", "1f1ff-1f1fc", "1f1f7-1f1ea", "1f1e6-1f1fd", "1f1f9-1f1e6", "1f1ee-1f1f4", "1f1e7-1f1f6", "1f1e8-1f1fd", "1f1e8-1f1e8", "1f1ec-1f1ec", "1f1ee-1f1f2", "1f1fe-1f1f9", "1f1f3-1f1eb", "1f1f5-1f1f3", "1f1e7-1f1f1", "1f1f5-1f1f2", "1f1ec-1f1f8", "1f1f9-1f1f0", "1f1e7-1f1fb", "1f1ed-1f1f2", "1f1f8-1f1ef", "1f1fa-1f1f2", "1f1ee-1f1e8", "1f1ea-1f1e6", "1f1e8-1f1f5", "1f1e9-1f1ec", "1f1e6-1f1f8", "1f1e6-1f1f6", "1f1fb-1f1ec", "1f1e8-1f1f0", "1f1e8-1f1fc", "1f1ea-1f1fa", "1f1ec-1f1eb", "1f1f9-1f1eb", "1f1ec-1f1f5", "1f1f2-1f1f6", "1f1f2-1f1f5", "1f1f8-1f1fd", "1f1f8-1f1f8", "1f1f9-1f1e8", "1f1f2-1f1eb", "1f3f3-fe0f-200d-1f308", "1f3f4-200d-2620-fe0f", "1f1fa-1f1f3", "1f3f4-e0067-e0062-e0065-e006e-e0067-e007f", "1f3f4-e0067-e0062-e0073-e0063-e0074-e007f", "1f3f4-e0067-e0062-e0077-e006c-e0073-e007f"]
	],

	doubleSmiley: {
		'(car)' : 1,
		'(d)' : 1,
		'(ninja)' : 1,
		'(gun)' : 1,
		'(flower)' : 1,
		'(split)' : 1,
		'(tree)' : 1,
		'(kiss2)' : 1,
		'(iloveyou)' : 1,
		'(beer)' : 1,
		'(hug)' : 1
	},

	emoji: {
		// "00a9": ["\u00A9", ["copyright"]],
		// "00ae": ["\u00AE", ["registered"]],
		"203c": ["\u203C", ["bangbang"]],
		"2049": ["\u2049", ["interrobang"]],
		"2122": ["\u2122", ["tm"]],
		"2139": ["\u2139", ["information_source"]],
		"2194": ["\u2194", ["left_right_arrow"]],
		"2195": ["\u2195", ["arrow_up_down"]],
		"2196": ["\u2196", ["arrow_upper_left"]],
		"2197": ["\u2197", ["arrow_upper_right"]],
		"2198": ["\u2198", ["arrow_lower_right"]],
		"2199": ["\u2199", ["arrow_lower_left"]],
		"21a9": ["\u21A9", ["leftwards_arrow_with_hook"]],
		"21aa": ["\u21AA", ["arrow_right_hook"]],
		"231a": ["\u231A", ["watch"]],
		"231b": ["\u231B", ["hourglass"]],
		"23e9": ["\u23E9", ["fast_forward"]],
		"23ea": ["\u23EA", ["rewind"]],
		"23eb": ["\u23EB", ["arrow_double_up"]],
		"23ec": ["\u23EC", ["arrow_double_down"]],
		"23f0": ["\u23F0", ["alarm_clock"]],
		"23f3": ["\u23F3", ["hourglass_flowing_sand"]],
		"24c2": ["\u24C2", ["m"]],
		"25aa": ["\u25AA", ["black_small_square"]],
		"25ab": ["\u25AB", ["white_small_square"]],
		"25b6": ["\u25B6", ["arrow_forward"]],
		"25c0": ["\u25C0", ["arrow_backward"]],
		"25fb": ["\u25FB", ["white_medium_square"]],
		"25fc": ["\u25FC", ["black_medium_square"]],
		"25fd": ["\u25FD", ["white_medium_small_square"]],
		"25fe": ["\u25FE", ["black_medium_small_square"]],
		"2600": ["\u2600", ["sunny"]],
		"2601": ["\u2601", ["cloud"]],
		"260e": ["\u260E", ["phone", "telephone"]],
		"2611": ["\u2611", ["ballot_box_with_check"]],
		"2614": ["\u2614", ["umbrella"]],
		"2615": ["\u2615", ["coffee"]],
		"261d": ["\u261D", ["point_up"]],
		"263a": ["\u263A", ["relaxed"]],
		"2648": ["\u2648", ["aries"]],
		"2649": ["\u2649", ["taurus"]],
		"264a": ["\u264A", ["gemini"]],
		"264b": ["\u264B", ["cancer"]],
		"264c": ["\u264C", ["leo"]],
		"264d": ["\u264D", ["virgo"]],
		"264e": ["\u264E", ["libra"]],
		"264f": ["\u264F", ["scorpius"]],
		"2650": ["\u2650", ["sagittarius"]],
		"2651": ["\u2651", ["capricorn"]],
		"2652": ["\u2652", ["aquarius"]],
		"2653": ["\u2653", ["pisces"]],
		"2660": ["\u2660", ["spades"]],
		"2663": ["\u2663", ["clubs"]],
		"2665": ["\u2665", ["hearts"]],
		"2666": ["\u2666", ["diamonds"]],
		"2668": ["\u2668", ["hotsprings"]],
		"267b": ["\u267B", ["recycle"]],
		"267f": ["\u267F", ["wheelchair"]],
		"2693": ["\u2693", ["anchor"]],
		"26a0": ["\u26A0", ["warning"]],
		"26a1": ["\u26A1", ["zap"]],
		"26aa": ["\u26AA", ["white_circle"]],
		"26ab": ["\u26AB", ["black_circle"]],
		"26bd": ["\u26BD", ["soccer"]],
		"26be": ["\u26BE", ["baseball"]],
		"26c4": ["\u26C4", ["snowman"]],
		"26c5": ["\u26C5", ["partly_sunny"]],
		"26ce": ["\u26CE", ["ophiuchus"]],
		"26d4": ["\u26D4", ["no_entry"]],
		"26ea": ["\u26EA", ["church"]],
		"26f2": ["\u26F2", ["fountain"]],
		"26f3": ["\u26F3", ["golf"]],
		"26f5": ["\u26F5", ["boat", "sailboat"]],
		"26fa": ["\u26FA", ["tent"]],
		"26fd": ["\u26FD", ["fuelpump"]],
		"2702": ["\u2702", ["scissors"]],
		"2705": ["\u2705", ["white_check_mark"]],
		"2708": ["\u2708", ["airplane"]],
		"2709": ["\u2709", ["email", "envelope"]],
		"270a": ["\u270A", ["fist"]],
		"270b": ["\u270B", ["hand", "raised_hand"]],
		"270c": ["\u270C", ["v"]],
		"270f": ["\u270F", ["pencil2"]],
		"2712": ["\u2712", ["black_nib"]],
		"2714": ["\u2714", ["heavy_check_mark"]],
		"2716": ["\u2716", ["heavy_multiplication_x"]],
		"2728": ["\u2728", ["sparkles"]],
		"2733": ["\u2733", ["eight_spoked_asterisk"]],
		"2734": ["\u2734", ["eight_pointed_black_star"]],
		"2744": ["\u2744", ["snowflake"]],
		"2747": ["\u2747", ["sparkle"]],
		"274c": ["\u274C", ["x"]],
		"274e": ["\u274E", ["negative_squared_cross_mark"]],
		"2753": ["\u2753", ["question"]],
		"2754": ["\u2754", ["grey_question"]],
		"2755": ["\u2755", ["grey_exclamation"]],
		"2757": ["\u2757", ["exclamation", "heavy_exclamation_mark"]],
		"2764": ["\u2764", ["heart"], "<3"],
		"2795": ["\u2795", ["heavy_plus_sign"]],
		"2796": ["\u2796", ["heavy_minus_sign"]],
		"2797": ["\u2797", ["heavy_division_sign"]],
		"27a1": ["\u27A1", ["arrow_right"]],
		"27b0": ["\u27B0", ["curly_loop"]],
		"27bf": ["\u27BF", ["loop"]],
		"2934": ["\u2934", ["arrow_heading_up"]],
		"2935": ["\u2935", ["arrow_heading_down"]],
		"2b05": ["\u2B05", ["arrow_left"]],
		"2b06": ["\u2B06", ["arrow_up"]],
		"2b07": ["\u2B07", ["arrow_down"]],
		"2b1b": ["\u2B1B", ["black_large_square"]],
		"2b1c": ["\u2B1C", ["white_large_square"]],
		"2b50": ["\u2B50", ["star"]],
		"2b55": ["\u2B55", ["o"]],
		"3030": ["\u3030", ["wavy_dash"]],
		"303d": ["\u303D", ["part_alternation_mark"]],
		"3297": ["\u3297", ["congratulations"]],
		"3299": ["\u3299", ["secret"]],
		"1f004": ["\uD83C\uDC04", ["mahjong"]],
		"1f0cf": ["\uD83C\uDCCF", ["black_joker"]],
		"1f170": ["\uD83C\uDD70", ["a"]],
		"1f171": ["\uD83C\uDD71", ["b"]],
		"1f17e": ["\uD83C\uDD7E", ["o2"]],
		"1f17f": ["\uD83C\uDD7F", ["parking"]],
		"1f18e": ["\uD83C\uDD8E", ["ab"]],
		"1f191": ["\uD83C\uDD91", ["cl"]],
		"1f192": ["\uD83C\uDD92", ["cool"]],
		"1f193": ["\uD83C\uDD93", ["free"]],
		"1f194": ["\uD83C\uDD94", ["id"]],
		"1f195": ["\uD83C\uDD95", ["new"]],
		"1f196": ["\uD83C\uDD96", ["ng"]],
		"1f197": ["\uD83C\uDD97", ["ok"]],
		"1f198": ["\uD83C\uDD98", ["sos"]],
		"1f199": ["\uD83C\uDD99", ["up"]],
		"1f19a": ["\uD83C\uDD9A", ["vs"]],
		"1f201": ["\uD83C\uDE01", ["koko"]],
		"1f202": ["\uD83C\uDE02", ["sa"]],
		"1f21a": ["\uD83C\uDE1A", ["u7121"]],
		"1f22f": ["\uD83C\uDE2F", ["u6307"]],
		"1f232": ["\uD83C\uDE32", ["u7981"]],
		"1f233": ["\uD83C\uDE33", ["u7a7a"]],
		"1f234": ["\uD83C\uDE34", ["u5408"]],
		"1f235": ["\uD83C\uDE35", ["u6e80"]],
		"1f236": ["\uD83C\uDE36", ["u6709"]],
		"1f237": ["\uD83C\uDE37", ["u6708"]],
		"1f238": ["\uD83C\uDE38", ["u7533"]],
		"1f239": ["\uD83C\uDE39", ["u5272"]],
		"1f23a": ["\uD83C\uDE3A", ["u55b6"]],
		"1f250": ["\uD83C\uDE50", ["ideograph_advantage"]],
		"1f251": ["\uD83C\uDE51", ["accept"]],
		"1f300": ["\uD83C\uDF00", ["cyclone"]],
		"1f301": ["\uD83C\uDF01", ["foggy"]],
		"1f302": ["\uD83C\uDF02", ["closed_umbrella"]],
		"1f303": ["\uD83C\uDF03", ["night_with_stars"]],
		"1f304": ["\uD83C\uDF04", ["sunrise_over_mountains"]],
		"1f305": ["\uD83C\uDF05", ["sunrise"]],
		"1f306": ["\uD83C\uDF06", ["city_sunset"]],
		"1f307": ["\uD83C\uDF07", ["city_sunrise"]],
		"1f308": ["\uD83C\uDF08", ["rainbow"]],
		"1f309": ["\uD83C\uDF09", ["bridge_at_night"]],
		"1f30a": ["\uD83C\uDF0A", ["ocean"]],
		"1f30b": ["\uD83C\uDF0B", ["volcano"]],
		"1f30c": ["\uD83C\uDF0C", ["milky_way"]],
		"1f30d": ["\uD83C\uDF0D", ["earth_africa"]],
		"1f30e": ["\uD83C\uDF0E", ["earth_americas"]],
		"1f30f": ["\uD83C\uDF0F", ["earth_asia"]],
		"1f310": ["\uD83C\uDF10", ["globe_with_meridians"]],
		"1f311": ["\uD83C\uDF11", ["new_moon"]],
		"1f312": ["\uD83C\uDF12", ["waxing_crescent_moon"]],
		"1f313": ["\uD83C\uDF13", ["first_quarter_moon"]],
		"1f314": ["\uD83C\uDF14", ["moon", "waxing_gibbous_moon"]],
		"1f315": ["\uD83C\uDF15", ["full_moon"]],
		"1f316": ["\uD83C\uDF16", ["waning_gibbous_moon"]],
		"1f317": ["\uD83C\uDF17", ["last_quarter_moon"]],
		"1f318": ["\uD83C\uDF18", ["waning_crescent_moon"]],
		"1f319": ["\uD83C\uDF19", ["crescent_moon"]],
		"1f320": ["\uD83C\uDF20", ["stars"]],
		"1f31a": ["\uD83C\uDF1A", ["new_moon_with_face"]],
		"1f31b": ["\uD83C\uDF1B", ["first_quarter_moon_with_face"]],
		"1f31c": ["\uD83C\uDF1C", ["last_quarter_moon_with_face"]],
		"1f31d": ["\uD83C\uDF1D", ["full_moon_with_face"]],
		"1f31e": ["\uD83C\uDF1E", ["sun_with_face"]],
		"1f31f": ["\uD83C\uDF1F", ["star2"]],
		"1f330": ["\uD83C\uDF30", ["chestnut"]],
		"1f331": ["\uD83C\uDF31", ["seedling"]],
		"1f332": ["\uD83C\uDF32", ["evergreen_tree"]],
		"1f333": ["\uD83C\uDF33", ["deciduous_tree"]],
		"1f334": ["\uD83C\uDF34", ["palm_tree"]],
		"1f335": ["\uD83C\uDF35", ["cactus"]],
		"1f337": ["\uD83C\uDF37", ["tulip"]],
		"1f338": ["\uD83C\uDF38", ["cherry_blossom"]],
		"1f339": ["\uD83C\uDF39", ["rose"]],
		"1f33a": ["\uD83C\uDF3A", ["hibiscus"]],
		"1f33b": ["\uD83C\uDF3B", ["sunflower"]],
		"1f33c": ["\uD83C\uDF3C", ["blossom"]],
		"1f33d": ["\uD83C\uDF3D", ["corn"]],
		"1f33e": ["\uD83C\uDF3E", ["ear_of_rice"]],
		"1f33f": ["\uD83C\uDF3F", ["herb"]],
		"1f340": ["\uD83C\uDF40", ["four_leaf_clover"]],
		"1f341": ["\uD83C\uDF41", ["maple_leaf"]],
		"1f342": ["\uD83C\uDF42", ["fallen_leaf"]],
		"1f343": ["\uD83C\uDF43", ["leaves"]],
		"1f344": ["\uD83C\uDF44", ["mushroom"]],
		"1f345": ["\uD83C\uDF45", ["tomato"]],
		"1f346": ["\uD83C\uDF46", ["eggplant"]],
		"1f347": ["\uD83C\uDF47", ["grapes"]],
		"1f348": ["\uD83C\uDF48", ["melon"]],
		"1f349": ["\uD83C\uDF49", ["watermelon"]],
		"1f34a": ["\uD83C\uDF4A", ["tangerine"]],
		"1f34b": ["\uD83C\uDF4B", ["lemon"]],
		"1f34c": ["\uD83C\uDF4C", ["banana"]],
		"1f34d": ["\uD83C\uDF4D", ["pineapple"]],
		"1f34e": ["\uD83C\uDF4E", ["apple"]],
		"1f34f": ["\uD83C\uDF4F", ["green_apple"]],
		"1f350": ["\uD83C\uDF50", ["pear"]],
		"1f351": ["\uD83C\uDF51", ["peach"]],
		"1f352": ["\uD83C\uDF52", ["cherries"]],
		"1f353": ["\uD83C\uDF53", ["strawberry"]],
		"1f354": ["\uD83C\uDF54", ["hamburger"]],
		"1f355": ["\uD83C\uDF55", ["pizza"]],
		"1f356": ["\uD83C\uDF56", ["meat_on_bone"]],
		"1f357": ["\uD83C\uDF57", ["poultry_leg"]],
		"1f358": ["\uD83C\uDF58", ["rice_cracker"]],
		"1f359": ["\uD83C\uDF59", ["rice_ball"]],
		"1f35a": ["\uD83C\uDF5A", ["rice"]],
		"1f35b": ["\uD83C\uDF5B", ["curry"]],
		"1f35c": ["\uD83C\uDF5C", ["ramen"]],
		"1f35d": ["\uD83C\uDF5D", ["spaghetti"]],
		"1f35e": ["\uD83C\uDF5E", ["bread"]],
		"1f35f": ["\uD83C\uDF5F", ["fries"]],
		"1f360": ["\uD83C\uDF60", ["sweet_potato"]],
		"1f361": ["\uD83C\uDF61", ["dango"]],
		"1f362": ["\uD83C\uDF62", ["oden"]],
		"1f363": ["\uD83C\uDF63", ["sushi"]],
		"1f364": ["\uD83C\uDF64", ["fried_shrimp"]],
		"1f365": ["\uD83C\uDF65", ["fish_cake"]],
		"1f366": ["\uD83C\uDF66", ["icecream"]],
		"1f367": ["\uD83C\uDF67", ["shaved_ice"]],
		"1f368": ["\uD83C\uDF68", ["ice_cream"]],
		"1f369": ["\uD83C\uDF69", ["doughnut"]],
		"1f36a": ["\uD83C\uDF6A", ["cookie"]],
		"1f36b": ["\uD83C\uDF6B", ["chocolate_bar"]],
		"1f36c": ["\uD83C\uDF6C", ["candy"]],
		"1f36d": ["\uD83C\uDF6D", ["lollipop"]],
		"1f36e": ["\uD83C\uDF6E", ["custard"]],
		"1f36f": ["\uD83C\uDF6F", ["honey_pot"]],
		"1f370": ["\uD83C\uDF70", ["cake"]],
		"1f371": ["\uD83C\uDF71", ["bento"]],
		"1f372": ["\uD83C\uDF72", ["stew"]],
		"1f373": ["\uD83C\uDF73", ["egg"]],
		"1f374": ["\uD83C\uDF74", ["fork_and_knife"]],
		"1f375": ["\uD83C\uDF75", ["tea"]],
		"1f376": ["\uD83C\uDF76", ["sake"]],
		"1f377": ["\uD83C\uDF77", ["wine_glass"]],
		"1f378": ["\uD83C\uDF78", ["cocktail"]],
		"1f379": ["\uD83C\uDF79", ["tropical_drink"]],
		"1f37a": ["\uD83C\uDF7A", ["beer"]],
		"1f37b": ["\uD83C\uDF7B", ["beers"]],
		"1f37c": ["\uD83C\uDF7C", ["baby_bottle"]],
		"1f380": ["\uD83C\uDF80", ["ribbon"]],
		"1f381": ["\uD83C\uDF81", ["gift"]],
		"1f382": ["\uD83C\uDF82", ["birthday"]],
		"1f383": ["\uD83C\uDF83", ["jack_o_lantern"]],
		"1f384": ["\uD83C\uDF84", ["christmas_tree"]],
		"1f385": ["\uD83C\uDF85", ["santa"]],
		"1f386": ["\uD83C\uDF86", ["fireworks"]],
		"1f387": ["\uD83C\uDF87", ["sparkler"]],
		"1f388": ["\uD83C\uDF88", ["balloon"]],
		"1f389": ["\uD83C\uDF89", ["tada"]],
		"1f38a": ["\uD83C\uDF8A", ["confetti_ball"]],
		"1f38b": ["\uD83C\uDF8B", ["tanabata_tree"]],
		"1f38c": ["\uD83C\uDF8C", ["crossed_flags"]],
		"1f38d": ["\uD83C\uDF8D", ["bamboo"]],
		"1f38e": ["\uD83C\uDF8E", ["dolls"]],
		"1f38f": ["\uD83C\uDF8F", ["flags"]],
		"1f390": ["\uD83C\uDF90", ["wind_chime"]],
		"1f391": ["\uD83C\uDF91", ["rice_scene"]],
		"1f392": ["\uD83C\uDF92", ["school_satchel"]],
		"1f393": ["\uD83C\uDF93", ["mortar_board"]],
		"1f3a0": ["\uD83C\uDFA0", ["carousel_horse"]],
		"1f3a1": ["\uD83C\uDFA1", ["ferris_wheel"]],
		"1f3a2": ["\uD83C\uDFA2", ["roller_coaster"]],
		"1f3a3": ["\uD83C\uDFA3", ["fishing_pole_and_fish"]],
		"1f3a4": ["\uD83C\uDFA4", ["microphone"]],
		"1f3a5": ["\uD83C\uDFA5", ["movie_camera"]],
		"1f3a6": ["\uD83C\uDFA6", ["cinema"]],
		"1f3a7": ["\uD83C\uDFA7", ["headphones"]],
		"1f3a8": ["\uD83C\uDFA8", ["art"]],
		"1f3a9": ["\uD83C\uDFA9", ["tophat"]],
		"1f3aa": ["\uD83C\uDFAA", ["circus_tent"]],
		"1f3ab": ["\uD83C\uDFAB", ["ticket"]],
		"1f3ac": ["\uD83C\uDFAC", ["clapper"]],
		"1f3ad": ["\uD83C\uDFAD", ["performing_arts"]],
		"1f3ae": ["\uD83C\uDFAE", ["video_game"]],
		"1f3af": ["\uD83C\uDFAF", ["dart"]],
		"1f3b0": ["\uD83C\uDFB0", ["slot_machine"]],
		"1f3b1": ["\uD83C\uDFB1", ["8ball"]],
		"1f3b2": ["\uD83C\uDFB2", ["game_die"]],
		"1f3b3": ["\uD83C\uDFB3", ["bowling"]],
		"1f3b4": ["\uD83C\uDFB4", ["flower_playing_cards"]],
		"1f3b5": ["\uD83C\uDFB5", ["musical_note"]],
		"1f3b6": ["\uD83C\uDFB6", ["notes"]],
		"1f3b7": ["\uD83C\uDFB7", ["saxophone"]],
		"1f3b8": ["\uD83C\uDFB8", ["guitar"]],
		"1f3b9": ["\uD83C\uDFB9", ["musical_keyboard"]],
		"1f3ba": ["\uD83C\uDFBA", ["trumpet"]],
		"1f3bb": ["\uD83C\uDFBB", ["violin"]],
		"1f3bc": ["\uD83C\uDFBC", ["musical_score"]],
		"1f3bd": ["\uD83C\uDFBD", ["running_shirt_with_sash"]],
		"1f3be": ["\uD83C\uDFBE", ["tennis"]],
		"1f3bf": ["\uD83C\uDFBF", ["ski"]],
		"1f3c0": ["\uD83C\uDFC0", ["basketball"]],
		"1f3c1": ["\uD83C\uDFC1", ["checkered_flag"]],
		"1f3c2": ["\uD83C\uDFC2", ["snowboarder"]],
		"1f3c3": ["\uD83C\uDFC3", ["runner", "running"]],
		"1f3c4": ["\uD83C\uDFC4", ["surfer"]],
		"1f3c6": ["\uD83C\uDFC6", ["trophy"]],
		"1f3c7": ["\uD83C\uDFC7", ["horse_racing"]],
		"1f3c8": ["\uD83C\uDFC8", ["football"]],
		"1f3c9": ["\uD83C\uDFC9", ["rugby_football"]],
		"1f3ca": ["\uD83C\uDFCA", ["swimmer"]],
		"1f3e0": ["\uD83C\uDFE0", ["house"]],
		"1f3e1": ["\uD83C\uDFE1", ["house_with_garden"]],
		"1f3e2": ["\uD83C\uDFE2", ["office"]],
		"1f3e3": ["\uD83C\uDFE3", ["post_office"]],
		"1f3e4": ["\uD83C\uDFE4", ["european_post_office"]],
		"1f3e5": ["\uD83C\uDFE5", ["hospital"]],
		"1f3e6": ["\uD83C\uDFE6", ["bank"]],
		"1f3e7": ["\uD83C\uDFE7", ["atm"]],
		"1f3e8": ["\uD83C\uDFE8", ["hotel"]],
		"1f3e9": ["\uD83C\uDFE9", ["love_hotel"]],
		"1f3ea": ["\uD83C\uDFEA", ["convenience_store"]],
		"1f3eb": ["\uD83C\uDFEB", ["school"]],
		"1f3ec": ["\uD83C\uDFEC", ["department_store"]],
		"1f3ed": ["\uD83C\uDFED", ["factory"]],
		"1f3ee": ["\uD83C\uDFEE", ["izakaya_lantern", "lantern"]],
		"1f3ef": ["\uD83C\uDFEF", ["japanese_castle"]],
		"1f3f0": ["\uD83C\uDFF0", ["european_castle"]],
		"1f400": ["\uD83D\uDC00", ["rat"]],
		"1f401": ["\uD83D\uDC01", ["mouse2"]],
		"1f402": ["\uD83D\uDC02", ["ox"]],
		"1f403": ["\uD83D\uDC03", ["water_buffalo"]],
		"1f404": ["\uD83D\uDC04", ["cow2"]],
		"1f405": ["\uD83D\uDC05", ["tiger2"]],
		"1f406": ["\uD83D\uDC06", ["leopard"]],
		"1f407": ["\uD83D\uDC07", ["rabbit2"]],
		"1f408": ["\uD83D\uDC08", ["cat2"]],
		"1f409": ["\uD83D\uDC09", ["dragon"]],
		"1f40a": ["\uD83D\uDC0A", ["crocodile"]],
		"1f40b": ["\uD83D\uDC0B", ["whale2"]],
		"1f40c": ["\uD83D\uDC0C", ["snail"]],
		"1f40d": ["\uD83D\uDC0D", ["snake"]],
		"1f40e": ["\uD83D\uDC0E", ["racehorse"]],
		"1f40f": ["\uD83D\uDC0F", ["ram"]],
		"1f410": ["\uD83D\uDC10", ["goat"]],
		"1f411": ["\uD83D\uDC11", ["sheep"]],
		"1f412": ["\uD83D\uDC12", ["monkey"]],
		"1f413": ["\uD83D\uDC13", ["rooster"]],
		"1f414": ["\uD83D\uDC14", ["chicken"]],
		"1f415": ["\uD83D\uDC15", ["dog2"]],
		"1f416": ["\uD83D\uDC16", ["pig2"]],
		"1f417": ["\uD83D\uDC17", ["boar"]],
		"1f418": ["\uD83D\uDC18", ["elephant"]],
		"1f419": ["\uD83D\uDC19", ["octopus"]],
		"1f41a": ["\uD83D\uDC1A", ["shell"]],
		"1f41b": ["\uD83D\uDC1B", ["bug"]],
		"1f41c": ["\uD83D\uDC1C", ["ant"]],
		"1f41d": ["\uD83D\uDC1D", ["bee", "honeybee"]],
		"1f41e": ["\uD83D\uDC1E", ["beetle"]],
		"1f41f": ["\uD83D\uDC1F", ["fish"]],
		"1f420": ["\uD83D\uDC20", ["tropical_fish"]],
		"1f421": ["\uD83D\uDC21", ["blowfish"]],
		"1f422": ["\uD83D\uDC22", ["turtle"]],
		"1f423": ["\uD83D\uDC23", ["hatching_chick"]],
		"1f424": ["\uD83D\uDC24", ["baby_chick"]],
		"1f425": ["\uD83D\uDC25", ["hatched_chick"]],
		"1f426": ["\uD83D\uDC26", ["bird"]],
		"1f427": ["\uD83D\uDC27", ["penguin"]],
		"1f428": ["\uD83D\uDC28", ["koala"]],
		"1f429": ["\uD83D\uDC29", ["poodle"]],
		"1f42a": ["\uD83D\uDC2A", ["dromedary_camel"]],
		"1f42b": ["\uD83D\uDC2B", ["camel"]],
		"1f42c": ["\uD83D\uDC2C", ["dolphin", "flipper"]],
		"1f42d": ["\uD83D\uDC2D", ["mouse"]],
		"1f42e": ["\uD83D\uDC2E", ["cow"]],
		"1f42f": ["\uD83D\uDC2F", ["tiger"]],
		"1f430": ["\uD83D\uDC30", ["rabbit"]],
		"1f431": ["\uD83D\uDC31", ["cat"]],
		"1f432": ["\uD83D\uDC32", ["dragon_face"]],
		"1f433": ["\uD83D\uDC33", ["whale"]],
		"1f434": ["\uD83D\uDC34", ["horse"]],
		"1f435": ["\uD83D\uDC35", ["monkey_face"]],
		"1f436": ["\uD83D\uDC36", ["dog"]],
		"1f437": ["\uD83D\uDC37", ["pig"]],
		"1f438": ["\uD83D\uDC38", ["frog"]],
		"1f439": ["\uD83D\uDC39", ["hamster"]],
		"1f43a": ["\uD83D\uDC3A", ["wolf"]],
		"1f43b": ["\uD83D\uDC3B", ["bear"]],
		"1f43c": ["\uD83D\uDC3C", ["panda_face"]],
		"1f43d": ["\uD83D\uDC3D", ["pig_nose"]],
		"1f43e": ["\uD83D\uDC3E", ["feet", "paw_prints"]],
		"1f440": ["\uD83D\uDC40", ["eyes"]],
		"1f442": ["\uD83D\uDC42", ["ear"]],
		"1f443": ["\uD83D\uDC43", ["nose"]],
		"1f444": ["\uD83D\uDC44", ["lips"]],
		"1f445": ["\uD83D\uDC45", ["tongue"]],
		"1f446": ["\uD83D\uDC46", ["point_up_2"]],
		"1f447": ["\uD83D\uDC47", ["point_down"]],
		"1f448": ["\uD83D\uDC48", ["point_left"]],
		"1f449": ["\uD83D\uDC49", ["point_right"]],
		"1f44a": ["\uD83D\uDC4A", ["facepunch", "punch"]],
		"1f44b": ["\uD83D\uDC4B", ["wave"]],
		"1f44c": ["\uD83D\uDC4C", ["ok_hand"]],
		"1f44d": ["\uD83D\uDC4D", ["+1", "thumbsup"]],
		"1f44e": ["\uD83D\uDC4E", ["-1", "thumbsdown"]],
		"1f44f": ["\uD83D\uDC4F", ["clap"]],
		"1f450": ["\uD83D\uDC50", ["open_hands"]],
		"1f451": ["\uD83D\uDC51", ["crown"]],
		"1f452": ["\uD83D\uDC52", ["womans_hat"]],
		"1f453": ["\uD83D\uDC53", ["eyeglasses"]],
		"1f454": ["\uD83D\uDC54", ["necktie"]],
		"1f455": ["\uD83D\uDC55", ["shirt", "tshirt"]],
		"1f456": ["\uD83D\uDC56", ["jeans"]],
		"1f457": ["\uD83D\uDC57", ["dress"]],
		"1f458": ["\uD83D\uDC58", ["kimono"]],
		"1f459": ["\uD83D\uDC59", ["bikini"]],
		"1f45a": ["\uD83D\uDC5A", ["womans_clothes"]],
		"1f45b": ["\uD83D\uDC5B", ["purse"]],
		"1f45c": ["\uD83D\uDC5C", ["handbag"]],
		"1f45d": ["\uD83D\uDC5D", ["pouch"]],
		"1f45e": ["\uD83D\uDC5E", ["mans_shoe", "shoe"]],
		"1f45f": ["\uD83D\uDC5F", ["athletic_shoe"]],
		"1f460": ["\uD83D\uDC60", ["high_heel"]],
		"1f461": ["\uD83D\uDC61", ["sandal"]],
		"1f462": ["\uD83D\uDC62", ["boot"]],
		"1f463": ["\uD83D\uDC63", ["footprints"]],
		"1f464": ["\uD83D\uDC64", ["bust_in_silhouette"]],
		"1f465": ["\uD83D\uDC65", ["busts_in_silhouette"]],
		"1f466": ["\uD83D\uDC66", ["boy"]],
		"1f467": ["\uD83D\uDC67", ["girl"]],
		"1f468": ["\uD83D\uDC68", ["man"]],
		"1f469": ["\uD83D\uDC69", ["woman"]],
		"1f46a": ["\uD83D\uDC6A", ["family"]],
		"1f46b": ["\uD83D\uDC6B", ["couple"]],
		"1f46c": ["\uD83D\uDC6C", ["two_men_holding_hands"]],
		"1f46d": ["\uD83D\uDC6D", ["two_women_holding_hands"]],
		"1f46e": ["\uD83D\uDC6E", ["cop"]],
		"1f46f": ["\uD83D\uDC6F", ["dancers"]],
		"1f470": ["\uD83D\uDC70", ["bride_with_veil"]],
		"1f471": ["\uD83D\uDC71", ["person_with_blond_hair"]],
		"1f472": ["\uD83D\uDC72", ["man_with_gua_pi_mao"]],
		"1f473": ["\uD83D\uDC73", ["man_with_turban"]],
		"1f474": ["\uD83D\uDC74", ["older_man"]],
		"1f475": ["\uD83D\uDC75", ["older_woman"]],
		"1f476": ["\uD83D\uDC76", ["baby"]],
		"1f477": ["\uD83D\uDC77", ["construction_worker"]],
		"1f478": ["\uD83D\uDC78", ["princess"]],
		"1f479": ["\uD83D\uDC79", ["japanese_ogre"]],
		"1f47a": ["\uD83D\uDC7A", ["japanese_goblin"]],
		"1f47b": ["\uD83D\uDC7B", ["ghost"]],
		"1f47c": ["\uD83D\uDC7C", ["angel"]],
		"1f47d": ["\uD83D\uDC7D", ["alien"]],
		"1f47e": ["\uD83D\uDC7E", ["space_invader"]],
		"1f47f": ["\uD83D\uDC7F", ["imp"]],
		"1f480": ["\uD83D\uDC80", ["skull"]],
		"1f481": ["\uD83D\uDC81", ["information_desk_person"]],
		"1f482": ["\uD83D\uDC82", ["guardsman"]],
		"1f483": ["\uD83D\uDC83", ["dancer"]],
		"1f484": ["\uD83D\uDC84", ["lipstick"]],
		"1f485": ["\uD83D\uDC85", ["nail_care"]],
		"1f486": ["\uD83D\uDC86", ["massage"]],
		"1f487": ["\uD83D\uDC87", ["haircut"]],
		"1f488": ["\uD83D\uDC88", ["barber"]],
		"1f489": ["\uD83D\uDC89", ["syringe"]],
		"1f48a": ["\uD83D\uDC8A", ["pill"]],
		"1f48b": ["\uD83D\uDC8B", ["kiss"]],
		"1f48c": ["\uD83D\uDC8C", ["love_letter"]],
		"1f48d": ["\uD83D\uDC8D", ["ring"]],
		"1f48e": ["\uD83D\uDC8E", ["gem"]],
		"1f48f": ["\uD83D\uDC8F", ["couplekiss"]],
		"1f490": ["\uD83D\uDC90", ["bouquet"]],
		"1f491": ["\uD83D\uDC91", ["couple_with_heart"]],
		"1f492": ["\uD83D\uDC92", ["wedding"]],
		"1f493": ["\uD83D\uDC93", ["heartbeat"]],
		"1f494": ["\uD83D\uDC94", ["broken_heart"], "<\/3"],
		"1f495": ["\uD83D\uDC95", ["two_hearts"]],
		"1f496": ["\uD83D\uDC96", ["sparkling_heart"]],
		"1f497": ["\uD83D\uDC97", ["heartpulse"]],
		"1f498": ["\uD83D\uDC98", ["cupid"]],
		"1f499": ["\uD83D\uDC99", ["blue_heart"], "<3"],
		"1f49a": ["\uD83D\uDC9A", ["green_heart"], "<3"],
		"1f49b": ["\uD83D\uDC9B", ["yellow_heart"], "<3"],
		"1f49c": ["\uD83D\uDC9C", ["purple_heart"], "<3"],
		"1f49d": ["\uD83D\uDC9D", ["gift_heart"]],
		"1f49e": ["\uD83D\uDC9E", ["revolving_hearts"]],
		"1f49f": ["\uD83D\uDC9F", ["heart_decoration"]],
		"1f4a0": ["\uD83D\uDCA0", ["diamond_shape_with_a_dot_inside"]],
		"1f4a1": ["\uD83D\uDCA1", ["bulb"]],
		"1f4a2": ["\uD83D\uDCA2", ["anger"]],
		"1f4a3": ["\uD83D\uDCA3", ["bomb"]],
		"1f4a4": ["\uD83D\uDCA4", ["zzz"]],
		"1f4a5": ["\uD83D\uDCA5", ["boom", "collision"]],
		"1f4a6": ["\uD83D\uDCA6", ["sweat_drops"]],
		"1f4a7": ["\uD83D\uDCA7", ["droplet"]],
		"1f4a8": ["\uD83D\uDCA8", ["dash"]],
		"1f4a9": ["\uD83D\uDCA9", ["hankey", "poop", "shit"]],
		"1f4aa": ["\uD83D\uDCAA", ["muscle"]],
		"1f4ab": ["\uD83D\uDCAB", ["dizzy"]],
		"1f4ac": ["\uD83D\uDCAC", ["speech_balloon"]],
		"1f4ad": ["\uD83D\uDCAD", ["thought_balloon"]],
		"1f4ae": ["\uD83D\uDCAE", ["white_flower"]],
		"1f4af": ["\uD83D\uDCAF", ["100"]],
		"1f4b0": ["\uD83D\uDCB0", ["moneybag"]],
		"1f4b1": ["\uD83D\uDCB1", ["currency_exchange"]],
		"1f4b2": ["\uD83D\uDCB2", ["heavy_dollar_sign"]],
		"1f4b3": ["\uD83D\uDCB3", ["credit_card"]],
		"1f4b4": ["\uD83D\uDCB4", ["yen"]],
		"1f4b5": ["\uD83D\uDCB5", ["dollar"]],
		"1f4b6": ["\uD83D\uDCB6", ["euro"]],
		"1f4b7": ["\uD83D\uDCB7", ["pound"]],
		"1f4b8": ["\uD83D\uDCB8", ["money_with_wings"]],
		"1f4b9": ["\uD83D\uDCB9", ["chart"]],
		"1f4ba": ["\uD83D\uDCBA", ["seat"]],
		"1f4bb": ["\uD83D\uDCBB", ["computer"]],
		"1f4bc": ["\uD83D\uDCBC", ["briefcase"]],
		"1f4bd": ["\uD83D\uDCBD", ["minidisc"]],
		"1f4be": ["\uD83D\uDCBE", ["floppy_disk"]],
		"1f4bf": ["\uD83D\uDCBF", ["cd"]],
		"1f4c0": ["\uD83D\uDCC0", ["dvd"]],
		"1f4c1": ["\uD83D\uDCC1", ["file_folder"]],
		"1f4c2": ["\uD83D\uDCC2", ["open_file_folder"]],
		"1f4c3": ["\uD83D\uDCC3", ["page_with_curl"]],
		"1f4c4": ["\uD83D\uDCC4", ["page_facing_up"]],
		"1f4c5": ["\uD83D\uDCC5", ["date"]],
		"1f4c6": ["\uD83D\uDCC6", ["calendar"]],
		"1f4c7": ["\uD83D\uDCC7", ["card_index"]],
		"1f4c8": ["\uD83D\uDCC8", ["chart_with_upwards_trend"]],
		"1f4c9": ["\uD83D\uDCC9", ["chart_with_downwards_trend"]],
		"1f4ca": ["\uD83D\uDCCA", ["bar_chart"]],
		"1f4cb": ["\uD83D\uDCCB", ["clipboard"]],
		"1f4cc": ["\uD83D\uDCCC", ["pushpin"]],
		"1f4cd": ["\uD83D\uDCCD", ["round_pushpin"]],
		"1f4ce": ["\uD83D\uDCCE", ["paperclip"]],
		"1f4cf": ["\uD83D\uDCCF", ["straight_ruler"]],
		"1f4d0": ["\uD83D\uDCD0", ["triangular_ruler"]],
		"1f4d1": ["\uD83D\uDCD1", ["bookmark_tabs"]],
		"1f4d2": ["\uD83D\uDCD2", ["ledger"]],
		"1f4d3": ["\uD83D\uDCD3", ["notebook"]],
		"1f4d4": ["\uD83D\uDCD4", ["notebook_with_decorative_cover"]],
		"1f4d5": ["\uD83D\uDCD5", ["closed_book"]],
		"1f4d6": ["\uD83D\uDCD6", ["book", "open_book"]],
		"1f4d7": ["\uD83D\uDCD7", ["green_book"]],
		"1f4d8": ["\uD83D\uDCD8", ["blue_book"]],
		"1f4d9": ["\uD83D\uDCD9", ["orange_book"]],
		"1f4da": ["\uD83D\uDCDA", ["books"]],
		"1f4db": ["\uD83D\uDCDB", ["name_badge"]],
		"1f4dc": ["\uD83D\uDCDC", ["scroll"]],
		"1f4dd": ["\uD83D\uDCDD", ["memo", "pencil"]],
		"1f4de": ["\uD83D\uDCDE", ["telephone_receiver"]],
		"1f4df": ["\uD83D\uDCDF", ["pager"]],
		"1f4e0": ["\uD83D\uDCE0", ["fax"]],
		"1f4e1": ["\uD83D\uDCE1", ["satellite"]],
		"1f4e2": ["\uD83D\uDCE2", ["loudspeaker"]],
		"1f4e3": ["\uD83D\uDCE3", ["mega"]],
		"1f4e4": ["\uD83D\uDCE4", ["outbox_tray"]],
		"1f4e5": ["\uD83D\uDCE5", ["inbox_tray"]],
		"1f4e6": ["\uD83D\uDCE6", ["package"]],
		"1f4e7": ["\uD83D\uDCE7", ["e-mail"]],
		"1f4e8": ["\uD83D\uDCE8", ["incoming_envelope"]],
		"1f4e9": ["\uD83D\uDCE9", ["envelope_with_arrow"]],
		"1f4ea": ["\uD83D\uDCEA", ["mailbox_closed"]],
		"1f4eb": ["\uD83D\uDCEB", ["mailbox"]],
		"1f4ec": ["\uD83D\uDCEC", ["mailbox_with_mail"]],
		"1f4ed": ["\uD83D\uDCED", ["mailbox_with_no_mail"]],
		"1f4ee": ["\uD83D\uDCEE", ["postbox"]],
		"1f4ef": ["\uD83D\uDCEF", ["postal_horn"]],
		"1f4f0": ["\uD83D\uDCF0", ["newspaper"]],
		"1f4f1": ["\uD83D\uDCF1", ["iphone"]],
		"1f4f2": ["\uD83D\uDCF2", ["calling"]],
		"1f4f3": ["\uD83D\uDCF3", ["vibration_mode"]],
		"1f4f4": ["\uD83D\uDCF4", ["mobile_phone_off"]],
		"1f4f5": ["\uD83D\uDCF5", ["no_mobile_phones"]],
		"1f4f6": ["\uD83D\uDCF6", ["signal_strength"]],
		"1f4f7": ["\uD83D\uDCF7", ["camera"]],
		"1f4f9": ["\uD83D\uDCF9", ["video_camera"]],
		"1f4fa": ["\uD83D\uDCFA", ["tv"]],
		"1f4fb": ["\uD83D\uDCFB", ["radio"]],
		"1f4fc": ["\uD83D\uDCFC", ["vhs"]],
		"1f500": ["\uD83D\uDD00", ["twisted_rightwards_arrows"]],
		"1f501": ["\uD83D\uDD01", ["repeat"]],
		"1f502": ["\uD83D\uDD02", ["repeat_one"]],
		"1f503": ["\uD83D\uDD03", ["arrows_clockwise"]],
		"1f504": ["\uD83D\uDD04", ["arrows_counterclockwise"]],
		"1f505": ["\uD83D\uDD05", ["low_brightness"]],
		"1f506": ["\uD83D\uDD06", ["high_brightness"]],
		"1f507": ["\uD83D\uDD07", ["mute"]],
		"1f508": ["\uD83D\uDD09", ["speaker"]],
		"1f509": ["\uD83D\uDD09", ["sound"]],
		"1f50a": ["\uD83D\uDD0A", ["loud_sound"]],
		"1f50b": ["\uD83D\uDD0B", ["battery"]],
		"1f50c": ["\uD83D\uDD0C", ["electric_plug"]],
		"1f50d": ["\uD83D\uDD0D", ["mag"]],
		"1f50e": ["\uD83D\uDD0E", ["mag_right"]],
		"1f50f": ["\uD83D\uDD0F", ["lock_with_ink_pen"]],
		"1f510": ["\uD83D\uDD10", ["closed_lock_with_key"]],
		"1f511": ["\uD83D\uDD11", ["key"]],
		"1f512": ["\uD83D\uDD12", ["lock"]],
		"1f513": ["\uD83D\uDD13", ["unlock"]],
		"1f514": ["\uD83D\uDD14", ["bell"]],
		"1f515": ["\uD83D\uDD15", ["no_bell"]],
		"1f516": ["\uD83D\uDD16", ["bookmark"]],
		"1f517": ["\uD83D\uDD17", ["link"]],
		"1f518": ["\uD83D\uDD18", ["radio_button"]],
		"1f519": ["\uD83D\uDD19", ["back"]],
		"1f51a": ["\uD83D\uDD1A", ["end"]],
		"1f51b": ["\uD83D\uDD1B", ["on"]],
		"1f51c": ["\uD83D\uDD1C", ["soon"]],
		"1f51d": ["\uD83D\uDD1D", ["top"]],
		"1f51e": ["\uD83D\uDD1E", ["underage"]],
		"1f51f": ["\uD83D\uDD1F", ["keycap_ten"]],
		"1f520": ["\uD83D\uDD20", ["capital_abcd"]],
		"1f521": ["\uD83D\uDD21", ["abcd"]],
		"1f522": ["\uD83D\uDD22", ["1234"]],
		"1f523": ["\uD83D\uDD23", ["symbols"]],
		"1f524": ["\uD83D\uDD24", ["abc"]],
		"1f525": ["\uD83D\uDD25", ["fire"]],
		"1f526": ["\uD83D\uDD26", ["flashlight"]],
		"1f527": ["\uD83D\uDD27", ["wrench"]],
		"1f528": ["\uD83D\uDD28", ["hammer"]],
		"1f529": ["\uD83D\uDD29", ["nut_and_bolt"]],
		"1f52a": ["\uD83D\uDD2A", ["hocho"]],
		"1f52b": ["\uD83D\uDD2B", ["gun"]],
		"1f52c": ["\uD83D\uDD2C", ["microscope"]],
		"1f52d": ["\uD83D\uDD2D", ["telescope"]],
		"1f52e": ["\uD83D\uDD2E", ["crystal_ball"]],
		"1f52f": ["\uD83D\uDD2F", ["six_pointed_star"]],
		"1f530": ["\uD83D\uDD30", ["beginner"]],
		"1f531": ["\uD83D\uDD31", ["trident"]],
		"1f532": ["\uD83D\uDD32", ["black_square_button"]],
		"1f533": ["\uD83D\uDD33", ["white_square_button"]],
		"1f534": ["\uD83D\uDD34", ["red_circle"]],
		"1f535": ["\uD83D\uDD35", ["large_blue_circle"]],
		"1f536": ["\uD83D\uDD36", ["large_orange_diamond"]],
		"1f537": ["\uD83D\uDD37", ["large_blue_diamond"]],
		"1f538": ["\uD83D\uDD38", ["small_orange_diamond"]],
		"1f539": ["\uD83D\uDD39", ["small_blue_diamond"]],
		"1f53a": ["\uD83D\uDD3A", ["small_red_triangle"]],
		"1f53b": ["\uD83D\uDD3B", ["small_red_triangle_down"]],
		"1f53c": ["\uD83D\uDD3C", ["arrow_up_small"]],
		"1f53d": ["\uD83D\uDD3D", ["arrow_down_small"]],
		"1f550": ["\uD83D\uDD50", ["clock1"]],
		"1f551": ["\uD83D\uDD51", ["clock2"]],
		"1f552": ["\uD83D\uDD52", ["clock3"]],
		"1f553": ["\uD83D\uDD53", ["clock4"]],
		"1f554": ["\uD83D\uDD54", ["clock5"]],
		"1f555": ["\uD83D\uDD55", ["clock6"]],
		"1f556": ["\uD83D\uDD56", ["clock7"]],
		"1f557": ["\uD83D\uDD57", ["clock8"]],
		"1f558": ["\uD83D\uDD58", ["clock9"]],
		"1f559": ["\uD83D\uDD59", ["clock10"]],
		"1f55a": ["\uD83D\uDD5A", ["clock11"]],
		"1f55b": ["\uD83D\uDD5B", ["clock12"]],
		"1f55c": ["\uD83D\uDD5C", ["clock130"]],
		"1f55d": ["\uD83D\uDD5D", ["clock230"]],
		"1f55e": ["\uD83D\uDD5E", ["clock330"]],
		"1f55f": ["\uD83D\uDD5F", ["clock430"]],
		"1f560": ["\uD83D\uDD60", ["clock530"]],
		"1f561": ["\uD83D\uDD61", ["clock630"]],
		"1f562": ["\uD83D\uDD62", ["clock730"]],
		"1f563": ["\uD83D\uDD63", ["clock830"]],
		"1f564": ["\uD83D\uDD64", ["clock930"]],
		"1f565": ["\uD83D\uDD65", ["clock1030"]],
		"1f566": ["\uD83D\uDD66", ["clock1130"]],
		"1f567": ["\uD83D\uDD67", ["clock1230"]],
		"1f5fb": ["\uD83D\uDDFB", ["mount_fuji"]],
		"1f5fc": ["\uD83D\uDDFC", ["tokyo_tower"]],
		"1f5fd": ["\uD83D\uDDFD", ["statue_of_liberty"]],
		"1f5fe": ["\uD83D\uDDFE", ["japan"]],
		"1f5ff": ["\uD83D\uDDFF", ["moyai"]],
		"1f600": ["\uD83D\uDE00", ["grinning"]],
		"1f601": ["\uD83D\uDE01", ["grin"]],
		"1f602": ["\uD83D\uDE02", ["joy"]],
		"1f603": ["\uD83D\uDE03", ["smiley"], ":)"],
		"1f604": ["\uD83D\uDE04", ["smile"], ":)"],
		"1f605": ["\uD83D\uDE05", ["sweat_smile"]],
		"1f606": ["\uD83D\uDE06", ["satisfied"]],
		"1f607": ["\uD83D\uDE07", ["innocent"]],
		"1f608": ["\uD83D\uDE08", ["smiling_imp"]],
		"1f609": ["\uD83D\uDE09", ["wink"], ";)"],
		"1f60a": ["\uD83D\uDE0A", ["blush"]],
		"1f60b": ["\uD83D\uDE0B", ["yum"]],
		"1f60c": ["\uD83D\uDE0C", ["relieved"]],
		"1f60d": ["\uD83D\uDE0D", ["heart_eyes"]],
		"1f60e": ["\uD83D\uDE0E", ["sunglasses"]],
		"1f60f": ["\uD83D\uDE0F", ["smirk"]],
		"1f610": ["\uD83D\uDE10", ["neutral_face"]],
		"1f611": ["\uD83D\uDE11", ["expressionless"]],
		"1f612": ["\uD83D\uDE12", ["unamused"]],
		"1f613": ["\uD83D\uDE13", ["sweat"]],
		"1f614": ["\uD83D\uDE14", ["pensive"]],
		"1f615": ["\uD83D\uDE15", ["confused"]],
		"1f616": ["\uD83D\uDE16", ["confounded"]],
		"1f617": ["\uD83D\uDE17", ["kissing"]],
		"1f618": ["\uD83D\uDE18", ["kissing_heart"]],
		"1f619": ["\uD83D\uDE19", ["kissing_smiling_eyes"]],
		"1f61a": ["\uD83D\uDE1A", ["kissing_closed_eyes"]],
		"1f61b": ["\uD83D\uDE1B", ["stuck_out_tongue"]],
		"1f61c": ["\uD83D\uDE1C", ["stuck_out_tongue_winking_eye"], ";p"],
		"1f61d": ["\uD83D\uDE1D", ["stuck_out_tongue_closed_eyes"]],
		"1f61e": ["\uD83D\uDE1E", ["disappointed"], ":("],
		"1f61f": ["\uD83D\uDE1F", ["worried"]],
		"1f620": ["\uD83D\uDE20", ["angry"]],
		"1f621": ["\uD83D\uDE21", ["rage"]],
		"1f622": ["\uD83D\uDE22", ["cry"], ":'("],
		"1f623": ["\uD83D\uDE23", ["persevere"]],
		"1f624": ["\uD83D\uDE24", ["triumph"]],
		"1f625": ["\uD83D\uDE25", ["disappointed_relieved"]],
		"1f626": ["\uD83D\uDE26", ["frowning"]],
		"1f627": ["\uD83D\uDE27", ["anguished"]],
		"1f628": ["\uD83D\uDE28", ["fearful"]],
		"1f629": ["\uD83D\uDE29", ["weary"]],
		"1f62a": ["\uD83D\uDE2A", ["sleepy"]],
		"1f62b": ["\uD83D\uDE2B", ["tired_face"]],
		"1f62c": ["\uD83D\uDE2C", ["grimacing"]],
		"1f62d": ["\uD83D\uDE2D", ["sob"], ":'("],
		"1f62e": ["\uD83D\uDE2E", ["open_mouth"]],
		"1f62f": ["\uD83D\uDE2F", ["hushed"]],
		"1f630": ["\uD83D\uDE30", ["cold_sweat"]],
		"1f631": ["\uD83D\uDE31", ["scream"]],
		"1f632": ["\uD83D\uDE32", ["astonished"]],
		"1f633": ["\uD83D\uDE33", ["flushed"]],
		"1f634": ["\uD83D\uDE34", ["sleeping"]],
		"1f635": ["\uD83D\uDE35", ["dizzy_face"]],
		"1f636": ["\uD83D\uDE36", ["no_mouth"]],
		"1f637": ["\uD83D\uDE37", ["mask"]],
		"1f638": ["\uD83D\uDE38", ["smile_cat"]],
		"1f639": ["\uD83D\uDE39", ["joy_cat"]],
		"1f63a": ["\uD83D\uDE3A", ["smiley_cat"]],
		"1f63b": ["\uD83D\uDE3B", ["heart_eyes_cat"]],
		"1f63c": ["\uD83D\uDE3C", ["smirk_cat"]],
		"1f63d": ["\uD83D\uDE3D", ["kissing_cat"]],
		"1f63e": ["\uD83D\uDE3E", ["pouting_cat"]],
		"1f63f": ["\uD83D\uDE3F", ["crying_cat_face"]],
		"1f640": ["\uD83D\uDE40", ["scream_cat"]],
		"1f645": ["\uD83D\uDE45", ["no_good"]],
		"1f646": ["\uD83D\uDE46", ["ok_woman"]],
		"1f647": ["\uD83D\uDE47", ["bow"]],
		"1f648": ["\uD83D\uDE48", ["see_no_evil"]],
		"1f649": ["\uD83D\uDE49", ["hear_no_evil"]],
		"1f64a": ["\uD83D\uDE4A", ["speak_no_evil"]],
		"1f64b": ["\uD83D\uDE4B", ["raising_hand"]],
		"1f64c": ["\uD83D\uDE4C", ["raised_hands"]],
		"1f64d": ["\uD83D\uDE4D", ["person_frowning"]],
		"1f64e": ["\uD83D\uDE4E", ["person_with_pouting_face"]],
		"1f64f": ["\uD83D\uDE4F", ["pray"]],
		"1f680": ["\uD83D\uDE80", ["rocket"]],
		"1f681": ["\uD83D\uDE81", ["helicopter"]],
		"1f682": ["\uD83D\uDE82", ["steam_locomotive"]],
		"1f683": ["\uD83D\uDE83", ["railway_car"]],
		"1f68b": ["\uD83D\uDE8B", ["train"]],
		"1f684": ["\uD83D\uDE84", ["bullettrain_side"]],
		"1f685": ["\uD83D\uDE85", ["bullettrain_front"]],
		"1f686": ["\uD83D\uDE86", ["train2"]],
		"1f687": ["\uD83D\uDE87", ["metro"]],
		"1f688": ["\uD83D\uDE88", ["light_rail"]],
		"1f689": ["\uD83D\uDE89", ["station"]],
		"1f68a": ["\uD83D\uDE8A", ["tram"]],
		"1f68c": ["\uD83D\uDE8C", ["bus"]],
		"1f68d": ["\uD83D\uDE8D", ["oncoming_bus"]],
		"1f68e": ["\uD83D\uDE8E", ["trolleybus"]],
		"1f68f": ["\uD83D\uDE8F", ["busstop"]],
		"1f690": ["\uD83D\uDE90", ["minibus"]],
		"1f691": ["\uD83D\uDE91", ["ambulance"]],
		"1f692": ["\uD83D\uDE92", ["fire_engine"]],
		"1f693": ["\uD83D\uDE93", ["police_car"]],
		"1f694": ["\uD83D\uDE94", ["oncoming_police_car"]],
		"1f695": ["\uD83D\uDE95", ["taxi"]],
		"1f696": ["\uD83D\uDE96", ["oncoming_taxi"]],
		"1f697": ["\uD83D\uDE97", ["car", "red_car"]],
		"1f698": ["\uD83D\uDE98", ["oncoming_automobile"]],
		"1f699": ["\uD83D\uDE99", ["blue_car"]],
		"1f69a": ["\uD83D\uDE9A", ["truck"]],
		"1f69b": ["\uD83D\uDE9B", ["articulated_lorry"]],
		"1f69c": ["\uD83D\uDE9C", ["tractor"]],
		"1f69d": ["\uD83D\uDE9D", ["monorail"]],
		"1f69e": ["\uD83D\uDE9E", ["mountain_railway"]],
		"1f69f": ["\uD83D\uDE9F", ["suspension_railway"]],
		"1f6a0": ["\uD83D\uDEA0", ["mountain_cableway"]],
		"1f6a1": ["\uD83D\uDEA1", ["aerial_tramway"]],
		"1f6a2": ["\uD83D\uDEA2", ["ship"]],
		"1f6a3": ["\uD83D\uDEA3", ["rowboat"]],
		"1f6a4": ["\uD83D\uDEA4", ["speedboat"]],
		"1f6a5": ["\uD83D\uDEA5", ["traffic_light"]],
		"1f6a6": ["\uD83D\uDEA6", ["vertical_traffic_light"]],
		"1f6a7": ["\uD83D\uDEA7", ["construction"]],
		"1f6a8": ["\uD83D\uDEA8", ["rotating_light"]],
		"1f6a9": ["\uD83D\uDEA9", ["triangular_flag_on_post"]],
		"1f6aa": ["\uD83D\uDEAA", ["door"]],
		"1f6ab": ["\uD83D\uDEAB", ["no_entry_sign"]],
		"1f6ac": ["\uD83D\uDEAC", ["smoking"]],
		"1f6ad": ["\uD83D\uDEAD", ["no_smoking"]],
		"1f6ae": ["\uD83D\uDEAE", ["put_litter_in_its_place"]],
		"1f6af": ["\uD83D\uDEAF", ["do_not_litter"]],
		"1f6b0": ["\uD83D\uDEB0", ["potable_water"]],
		"1f6b1": ["\uD83D\uDEB1", ["non-potable_water"]],
		"1f6b2": ["\uD83D\uDEB2", ["bike"]],
		"1f6b3": ["\uD83D\uDEB3", ["no_bicycles"]],
		"1f6b4": ["\uD83D\uDEB4", ["bicyclist"]],
		"1f6b5": ["\uD83D\uDEB5", ["mountain_bicyclist"]],
		"1f6b6": ["\uD83D\uDEB6", ["walking"]],
		"1f6b7": ["\uD83D\uDEB7", ["no_pedestrians"]],
		"1f6b8": ["\uD83D\uDEB8", ["children_crossing"]],
		"1f6b9": ["\uD83D\uDEB9", ["mens"]],
		"1f6ba": ["\uD83D\uDEBA", ["womens"]],
		"1f6bb": ["\uD83D\uDEBB", ["restroom"]],
		"1f6bc": ["\uD83D\uDEBC", ["baby_symbol"]],
		"1f6bd": ["\uD83D\uDEBD", ["toilet"]],
		"1f6be": ["\uD83D\uDEBE", ["wc"]],
		"1f6bf": ["\uD83D\uDEBF", ["shower"]],
		"1f6c0": ["\uD83D\uDEC0", ["bath"]],
		"1f6c1": ["\uD83D\uDEC1", ["bathtub"]],
		"1f6c2": ["\uD83D\uDEC2", ["passport_control"]],
		"1f6c3": ["\uD83D\uDEC3", ["customs"]],
		"1f6c4": ["\uD83D\uDEC4", ["baggage_claim"]],
		"1f6c5": ["\uD83D\uDEC5", ["left_luggage"]],
		"0023": ["\u0023\u20E3", ["hash"]],
		"0030": ["\u0030\u20E3", ["zero"]],
		"0031": ["\u0031\u20E3", ["one"]],
		"0032": ["\u0032\u20E3", ["two"]],
		"0033": ["\u0033\u20E3", ["three"]],
		"0034": ["\u0034\u20E3", ["four"]],
		"0035": ["\u0035\u20E3", ["five"]],
		"0036": ["\u0036\u20E3", ["six"]],
		"0037": ["\u0037\u20E3", ["seven"]],
		"0038": ["\u0038\u20E3", ["eight"]],
		"0039": ["\u0039\u20E3", ["nine"]],
		// "1f1e8-1f1f3": ["\uD83C\uDDE8\uD83C\uDDF3", ["cn"]],
		// "1f1e9-1f1ea": ["\uD83C\uDDE9\uD83C\uDDEA", ["de"]],
		// "1f1ea-1f1f8": ["\uD83C\uDDEA\uD83C\uDDF8", ["es"]],
		// "1f1eb-1f1f7": ["\uD83C\uDDEB\uD83C\uDDF7", ["fr"]],
		// "1f1ec-1f1e7": ["\uD83C\uDDEC\uD83C\uDDE7", ["gb", "uk"]],
		// "1f1ee-1f1f9": ["\uD83C\uDDEE\uD83C\uDDF9", ["it"]],
		// "1f1ef-1f1f5": ["\uD83C\uDDEF\uD83C\uDDF5", ["jp"]],
		// "1f1f0-1f1f7": ["\uD83C\uDDF0\uD83C\uDDF7", ["kr"]],
		// "1f1f7-1f1fa": ["\uD83C\uDDF7\uD83C\uDDFA", ["ru"]],
		// "1f1fa-1f1f8": ["\uD83C\uDDFA\uD83C\uDDF8", ["us"]],
		// "1f1f1-1f1fb": ["\uD83C\uDDF1\uD83C\uDDFB", ["us"]],
		/*people*/
		"1f642":["\uD83D\uDE42",[""]],
		"1f643":["\uD83D\uDE43",[""]],
		"1f911":["\uD83E\uDD11",[""]],
		"1f913":["\uD83E\uDD13",[""]],
		"1f917":["\uD83E\uDD17",[""]],
		"1f644":["\uD83D\uDE44",[""]],
		"1f914":["\uD83E\uDD14",[""]],
		"1f641":["\uD83D\uDE41",[""]],
		"2639":["\u2639",[""]],
		"1f910":["\uD83E\uDD10",[""]],
		"1f912":["\uD83E\uDD12",[""]],
		"1f915":["\uD83E\uDD15",[""]],
		"1f916":["\uD83E\uDD16",[""]],
		"1f595":["\uD83D\uDD95",[""]],
		"1f590":["\uD83D\uDD90",[""]],
		"1f918":["\uD83E\uDD18",[""]],
		"1f596":["\uD83D\uDD96",[""]],
		"270d":["\u270D",[""]],
		"1f441":["\uD83D\uDC41",[""]],
		"1f5e3":["\uD83D\uDDE3",[""]],
		"1f575":["\uD83D\uDD75",[""]],
		/*"1f469-2764-1f469":["\uD83D\uDC69\u2764\uD83D\uDC69",[""]],
		"1f468-2764-1f468":["\uD83D\uDC68\u2764\uD83D\uDC68",[""]],
		"1f469-2764-1f48b-1f469":["\uD83D\uDC69\u2764\uD83D\uDC8B\uD83D\uDC69",[""]],
		"1f468-2764-1f48b-1f468":["\uD83D\uDC68\u2764\uD83D\uDC8B\uD83D\uDC68",[""]],
		"1f468-1f469-1f467":["\uD83D\uDC68\uD83D\uDC69\uD83D\uDC67",[""]],
		"1f468-1f469-1f467-1f466":["\uD83D\uDC68\uD83D\uDC69\uD83D\uDC67\uD83D\uDC66",[""]],
		"1f468-1f469-1f466-1f466":["\uD83D\uDC68\uD83D\uDC69\uD83D\uDC66\uD83D\uDC66",[""]],
		"1f468-1f469-1f467-1f467":["\uD83D\uDC68\uD83D\uDC69\uD83D\uDC67\uD83D\uDC67",[""]],
		"1f469-1f469-1f466":["\uD83D\uDC69\uD83D\uDC69\uD83D\uDC66",[""]],
		"1f469-1f469-1f467":["\uD83D\uDC69\uD83D\uDC69\uD83D\uDC67",[""]],
		"1f469-1f469-1f467-1f466":["\uD83D\uDC69\uD83D\uDC69\uD83D\uDC67\uD83D\uDC66",[""]],
		"1f469-1f469-1f466-1f466":["\uD83D\uDC69\uD83D\uDC69\uD83D\uDC66\uD83D\uDC66",[""]],
		"1f469-1f469-1f467-1f467":["\uD83D\uDC69\uD83D\uDC69\uD83D\uDC67\uD83D\uDC67",[""]],
		"1f468-1f468-1f466":["\uD83D\uDC68\uD83D\uDC68\uD83D\uDC66",[""]],
		"1f468-1f468-1f467":["\uD83D\uDC68\uD83D\uDC68\uD83D\uDC67",[""]],
		"1f468-1f468-1f467-1f466":["\uD83D\uDC68\uD83D\uDC68\uD83D\uDC67\uD83D\uDC66",[""]],
		"1f468-1f468-1f466-1f466":["\uD83D\uDC68\uD83D\uDC68\uD83D\uDC66\uD83D\uDC66",[""]],
		"1f468-1f468-1f467-1f467":["\uD83D\uDC68\uD83D\uDC68\uD83D\uDC67\uD83D\uDC67",[""]],*/
		"26d1":["\u26D1",[""]],
		"1f576":["\uD83D\uDD76",[""]],
		/*"1f64c-1f3fb":["\uD83D\uDE4C\uD83C\uDFFB",[""]],
		"1f64c-1f3fc":["\uD83D\uDE4C\uD83C\uDFFC",[""]],
		"1f64c-1f3fd":["\uD83D\uDE4C\uD83C\uDFFD",[""]],
		"1f64c-1f3fe":["\uD83D\uDE4C\uD83C\uDFFE",[""]],
		"1f64c-1f3ff":["\uD83D\uDE4C\uD83C\uDFFF",[""]],
		"1f44f-1f3fb":["\uD83D\uDC4F\uD83C\uDFFB",[""]],
		"1f44f-1f3fc":["\uD83D\uDC4F\uD83C\uDFFC",[""]],
		"1f44f-1f3fd":["\uD83D\uDC4F\uD83C\uDFFD",[""]],
		"1f44f-1f3fe":["\uD83D\uDC4F\uD83C\uDFFE",[""]],
		"1f44f-1f3ff":["\uD83D\uDC4F\uD83C\uDFFF",[""]],
		"1f44b-1f3fb":["\uD83D\uDC4B\uD83C\uDFFB",[""]],
		"1f44b-1f3fc":["\uD83D\uDC4B\uD83C\uDFFC",[""]],
		"1f44b-1f3fd":["\uD83D\uDC4B\uD83C\uDFFD",[""]],
		"1f44b-1f3fe":["\uD83D\uDC4B\uD83C\uDFFE",[""]],
		"1f44b-1f3ff":["\uD83D\uDC4B\uD83C\uDFFF",[""]],
		"1f44d-1f3fb":["\uD83D\uDC4D\uD83C\uDFFB",[""]],
		"1f44d-1f3fc":["\uD83D\uDC4D\uD83C\uDFFC",[""]],
		"1f44d-1f3fd":["\uD83D\uDC4D\uD83C\uDFFD",[""]],
		"1f44d-1f3fe":["\uD83D\uDC4D\uD83C\uDFFE",[""]],
		"1f44d-1f3ff":["\uD83D\uDC4D\uD83C\uDFFF",[""]],
		"1f44e-1f3fb":["\uD83D\uDC4E\uD83C\uDFFB",[""]],
		"1f44e-1f3fc":["\uD83D\uDC4E\uD83C\uDFFC",[""]],
		"1f44e-1f3fd":["\uD83D\uDC4E\uD83C\uDFFD",[""]],
		"1f44e-1f3fe":["\uD83D\uDC4E\uD83C\uDFFE",[""]],
		"1f44e-1f3ff":["\uD83D\uDC4E\uD83C\uDFFF",[""]],
		"1f44a-1f3fb":["\uD83D\uDC4A\uD83C\uDFFB",[""]],
		"1f44a-1f3fc":["\uD83D\uDC4A\uD83C\uDFFC",[""]],
		"1f44a-1f3fd":["\uD83D\uDC4A\uD83C\uDFFD",[""]],
		"1f44a-1f3fe":["\uD83D\uDC4A\uD83C\uDFFE",[""]],
		"1f44a-1f3ff":["\uD83D\uDC4A\uD83C\uDFFF",[""]],
		"270a-1f3fb":["\u270A\uD83C\uDFFB",[""]],
		"270a-1f3fc":["\u270A\uD83C\uDFFC",[""]],
		"270a-1f3fd":["\u270A\uD83C\uDFFD",[""]],
		"270a-1f3fe":["\u270A\uD83C\uDFFE",[""]],
		"270a-1f3ff":["\u270A\uD83C\uDFFF",[""]],
		"270c-1f3fb":["\u270C\uD83C\uDFFB",[""]],
		"270c-1f3fc":["\u270C\uD83C\uDFFC",[""]],
		"270c-1f3fd":["\u270C\uD83C\uDFFD",[""]],
		"270c-1f3fe":["\u270C\uD83C\uDFFE",[""]],
		"270c-1f3ff":["\u270C\uD83C\uDFFF",[""]],
		"1f44c-1f3fb":["\uD83D\uDC4C\uD83C\uDFFB",[""]],
		"1f44c-1f3fc":["\uD83D\uDC4C\uD83C\uDFFC",[""]],
		"1f44c-1f3fd":["\uD83D\uDC4C\uD83C\uDFFD",[""]],
		"1f44c-1f3fe":["\uD83D\uDC4C\uD83C\uDFFE",[""]],
		"1f44c-1f3ff":["\uD83D\uDC4C\uD83C\uDFFF",[""]],
		"270b-1f3fb":["\u270B\uD83C\uDFFB",[""]],
		"270b-1f3fc":["\u270B\uD83C\uDFFC",[""]],
		"270b-1f3fd":["\u270B\uD83C\uDFFD",[""]],
		"270b-1f3fe":["\u270B\uD83C\uDFFE",[""]],
		"270b-1f3ff":["\u270B\uD83C\uDFFF",[""]],
		"1f450-1f3fb":["\uD83D\uDC50\uD83C\uDFFB",[""]],
		"1f450-1f3fc":["\uD83D\uDC50\uD83C\uDFFC",[""]],
		"1f450-1f3fd":["\uD83D\uDC50\uD83C\uDFFD",[""]],
		"1f450-1f3fe":["\uD83D\uDC50\uD83C\uDFFE",[""]],
		"1f450-1f3ff":["\uD83D\uDC50\uD83C\uDFFF",[""]],
		"1f4aa-1f3fb":["\uD83D\uDCAA\uD83C\uDFFB",[""]],
		"1f4aa-1f3fc":["\uD83D\uDCAA\uD83C\uDFFC",[""]],
		"1f4aa-1f3fd":["\uD83D\uDCAA\uD83C\uDFFD",[""]],
		"1f4aa-1f3fe":["\uD83D\uDCAA\uD83C\uDFFE",[""]],
		"1f4aa-1f3ff":["\uD83D\uDCAA\uD83C\uDFFF",[""]],
		"1f64f-1f3fb":["\uD83D\uDE4F\uD83C\uDFFB",[""]],
		"1f64f-1f3fc":["\uD83D\uDE4F\uD83C\uDFFC",[""]],
		"1f64f-1f3fd":["\uD83D\uDE4F\uD83C\uDFFD",[""]],
		"1f64f-1f3fe":["\uD83D\uDE4F\uD83C\uDFFE",[""]],
		"1f64f-1f3ff":["\uD83D\uDE4F\uD83C\uDFFF",[""]],
		"261d-1f3fb":["\u261D\uD83C\uDFFB",[""]],
		"261d-1f3fc":["\u261D\uD83C\uDFFC",[""]],
		"261d-1f3fd":["\u261D\uD83C\uDFFD",[""]],
		"261d-1f3fe":["\u261D\uD83C\uDFFE",[""]],
		"261d-1f3ff":["\u261D\uD83C\uDFFF",[""]],
		"1f446-1f3fb":["\uD83D\uDC46\uD83C\uDFFB",[""]],
		"1f446-1f3fc":["\uD83D\uDC46\uD83C\uDFFC",[""]],
		"1f446-1f3fd":["\uD83D\uDC46\uD83C\uDFFD",[""]],
		"1f446-1f3fe":["\uD83D\uDC46\uD83C\uDFFE",[""]],
		"1f446-1f3ff":["\uD83D\uDC46\uD83C\uDFFF",[""]],
		"1f447-1f3fb":["\uD83D\uDC47\uD83C\uDFFB",[""]],
		"1f447-1f3fc":["\uD83D\uDC47\uD83C\uDFFC",[""]],
		"1f447-1f3fd":["\uD83D\uDC47\uD83C\uDFFD",[""]],
		"1f447-1f3fe":["\uD83D\uDC47\uD83C\uDFFE",[""]],
		"1f447-1f3ff":["\uD83D\uDC47\uD83C\uDFFF",[""]],
		"1f448-1f3fb":["\uD83D\uDC48\uD83C\uDFFB",[""]],
		"1f448-1f3fc":["\uD83D\uDC48\uD83C\uDFFC",[""]],
		"1f448-1f3fd":["\uD83D\uDC48\uD83C\uDFFD",[""]],
		"1f448-1f3fe":["\uD83D\uDC48\uD83C\uDFFE",[""]],
		"1f448-1f3ff":["\uD83D\uDC48\uD83C\uDFFF",[""]],
		"1f449-1f3fb":["\uD83D\uDC49\uD83C\uDFFB",[""]],
		"1f449-1f3fc":["\uD83D\uDC49\uD83C\uDFFC",[""]],
		"1f449-1f3fd":["\uD83D\uDC49\uD83C\uDFFD",[""]],
		"1f449-1f3fe":["\uD83D\uDC49\uD83C\uDFFE",[""]],
		"1f449-1f3ff":["\uD83D\uDC49\uD83C\uDFFF",[""]],
		"1f595-1f3fb":["\uD83D\uDD95\uD83C\uDFFB",[""]],
		"1f595-1f3fc":["\uD83D\uDD95\uD83C\uDFFC",[""]],
		"1f595-1f3fd":["\uD83D\uDD95\uD83C\uDFFD",[""]],
		"1f595-1f3fe":["\uD83D\uDD95\uD83C\uDFFE",[""]],
		"1f595-1f3ff":["\uD83D\uDD95\uD83C\uDFFF",[""]],
		"1f590-1f3fb":["\uD83D\uDD90\uD83C\uDFFB",[""]],
		"1f590-1f3fc":["\uD83D\uDD90\uD83C\uDFFC",[""]],
		"1f590-1f3fd":["\uD83D\uDD90\uD83C\uDFFD",[""]],
		"1f590-1f3fe":["\uD83D\uDD90\uD83C\uDFFE",[""]],
		"1f590-1f3ff":["\uD83D\uDD90\uD83C\uDFFF",[""]],
		"1f918-1f3fb":["\uD83E\uDD18\uD83C\uDFFB",[""]],
		"1f918-1f3fc":["\uD83E\uDD18\uD83C\uDFFC",[""]],
		"1f918-1f3fd":["\uD83E\uDD18\uD83C\uDFFD",[""]],
		"1f918-1f3fe":["\uD83E\uDD18\uD83C\uDFFE",[""]],
		"1f918-1f3ff":["\uD83E\uDD18\uD83C\uDFFF",[""]],
		"1f596-1f3fb":["\uD83D\uDD96\uD83C\uDFFB",[""]],
		"1f596-1f3fc":["\uD83D\uDD96\uD83C\uDFFC",[""]],
		"1f596-1f3fd":["\uD83D\uDD96\uD83C\uDFFD",[""]],
		"1f596-1f3fe":["\uD83D\uDD96\uD83C\uDFFE",[""]],
		"1f596-1f3ff":["\uD83D\uDD96\uD83C\uDFFF",[""]],
		"270d-1f3fb":["\u270D\uD83C\uDFFB",[""]],
		"270d-1f3fc":["\u270D\uD83C\uDFFC",[""]],
		"270d-1f3fd":["\u270D\uD83C\uDFFD",[""]],
		"270d-1f3fe":["\u270D\uD83C\uDFFE",[""]],
		"270d-1f3ff":["\u270D\uD83C\uDFFF",[""]],
		"1f485-1f3fb":["\uD83D\uDC85\uD83C\uDFFB",[""]],
		"1f485-1f3fc":["\uD83D\uDC85\uD83C\uDFFC",[""]],
		"1f485-1f3fd":["\uD83D\uDC85\uD83C\uDFFD",[""]],
		"1f485-1f3fe":["\uD83D\uDC85\uD83C\uDFFE",[""]],
		"1f485-1f3ff":["\uD83D\uDC85\uD83C\uDFFF",[""]],
		"1f442-1f3fb":["\uD83D\uDC42\uD83C\uDFFB",[""]],
		"1f442-1f3fc":["\uD83D\uDC42\uD83C\uDFFC",[""]],
		"1f442-1f3fd":["\uD83D\uDC42\uD83C\uDFFD",[""]],
		"1f442-1f3fe":["\uD83D\uDC42\uD83C\uDFFE",[""]],
		"1f442-1f3ff":["\uD83D\uDC42\uD83C\uDFFF",[""]],
		"1f443-1f3fb":["\uD83D\uDC43\uD83C\uDFFB",[""]],
		"1f443-1f3fc":["\uD83D\uDC43\uD83C\uDFFC",[""]],
		"1f443-1f3fd":["\uD83D\uDC43\uD83C\uDFFD",[""]],
		"1f443-1f3fe":["\uD83D\uDC43\uD83C\uDFFE",[""]],
		"1f443-1f3ff":["\uD83D\uDC43\uD83C\uDFFF",[""]],
		"1f476-1f3fb":["\uD83D\uDC76\uD83C\uDFFB",[""]],
		"1f476-1f3fc":["\uD83D\uDC76\uD83C\uDFFC",[""]],
		"1f476-1f3fd":["\uD83D\uDC76\uD83C\uDFFD",[""]],
		"1f476-1f3fe":["\uD83D\uDC76\uD83C\uDFFE",[""]],
		"1f476-1f3ff":["\uD83D\uDC76\uD83C\uDFFF",[""]],
		"1f466-1f3fb":["\uD83D\uDC66\uD83C\uDFFB",[""]],
		"1f466-1f3fc":["\uD83D\uDC66\uD83C\uDFFC",[""]],
		"1f466-1f3fd":["\uD83D\uDC66\uD83C\uDFFD",[""]],
		"1f466-1f3fe":["\uD83D\uDC66\uD83C\uDFFE",[""]],
		"1f466-1f3ff":["\uD83D\uDC66\uD83C\uDFFF",[""]],
		"1f467-1f3fb":["\uD83D\uDC67\uD83C\uDFFB",[""]],
		"1f467-1f3fc":["\uD83D\uDC67\uD83C\uDFFC",[""]],
		"1f467-1f3fd":["\uD83D\uDC67\uD83C\uDFFD",[""]],
		"1f467-1f3fe":["\uD83D\uDC67\uD83C\uDFFE",[""]],
		"1f467-1f3ff":["\uD83D\uDC67\uD83C\uDFFF",[""]],
		"1f468-1f3fb":["\uD83D\uDC68\uD83C\uDFFB",[""]],
		"1f468-1f3fc":["\uD83D\uDC68\uD83C\uDFFC",[""]],
		"1f468-1f3fd":["\uD83D\uDC68\uD83C\uDFFD",[""]],
		"1f468-1f3fe":["\uD83D\uDC68\uD83C\uDFFE",[""]],
		"1f468-1f3ff":["\uD83D\uDC68\uD83C\uDFFF",[""]],
		"1f469-1f3fb":["\uD83D\uDC69\uD83C\uDFFB",[""]],
		"1f469-1f3fc":["\uD83D\uDC69\uD83C\uDFFC",[""]],
		"1f469-1f3fd":["\uD83D\uDC69\uD83C\uDFFD",[""]],
		"1f469-1f3fe":["\uD83D\uDC69\uD83C\uDFFE",[""]],
		"1f469-1f3ff":["\uD83D\uDC69\uD83C\uDFFF",[""]],
		"1f471-1f3fb":["\uD83D\uDC71\uD83C\uDFFB",[""]],
		"1f471-1f3fc":["\uD83D\uDC71\uD83C\uDFFC",[""]],
		"1f471-1f3fd":["\uD83D\uDC71\uD83C\uDFFD",[""]],
		"1f471-1f3fe":["\uD83D\uDC71\uD83C\uDFFE",[""]],
		"1f471-1f3ff":["\uD83D\uDC71\uD83C\uDFFF",[""]],
		"1f474-1f3fb":["\uD83D\uDC74\uD83C\uDFFB",[""]],
		"1f474-1f3fc":["\uD83D\uDC74\uD83C\uDFFC",[""]],
		"1f474-1f3fd":["\uD83D\uDC74\uD83C\uDFFD",[""]],
		"1f474-1f3fe":["\uD83D\uDC74\uD83C\uDFFE",[""]],
		"1f474-1f3ff":["\uD83D\uDC74\uD83C\uDFFF",[""]],
		"1f475-1f3fb":["\uD83D\uDC75\uD83C\uDFFB",[""]],
		"1f475-1f3fc":["\uD83D\uDC75\uD83C\uDFFC",[""]],
		"1f475-1f3fd":["\uD83D\uDC75\uD83C\uDFFD",[""]],
		"1f475-1f3fe":["\uD83D\uDC75\uD83C\uDFFE",[""]],
		"1f475-1f3ff":["\uD83D\uDC75\uD83C\uDFFF",[""]],
		"1f472-1f3fb":["\uD83D\uDC72\uD83C\uDFFB",[""]],
		"1f472-1f3fc":["\uD83D\uDC72\uD83C\uDFFC",[""]],
		"1f472-1f3fd":["\uD83D\uDC72\uD83C\uDFFD",[""]],
		"1f472-1f3fe":["\uD83D\uDC72\uD83C\uDFFE",[""]],
		"1f472-1f3ff":["\uD83D\uDC72\uD83C\uDFFF",[""]],
		"1f473-1f3fb":["\uD83D\uDC73\uD83C\uDFFB",[""]],
		"1f473-1f3fc":["\uD83D\uDC73\uD83C\uDFFC",[""]],
		"1f473-1f3fd":["\uD83D\uDC73\uD83C\uDFFD",[""]],
		"1f473-1f3fe":["\uD83D\uDC73\uD83C\uDFFE",[""]],
		"1f473-1f3ff":["\uD83D\uDC73\uD83C\uDFFF",[""]],
		"1f46e-1f3fb":["\uD83D\uDC6E\uD83C\uDFFB",[""]],
		"1f46e-1f3fc":["\uD83D\uDC6E\uD83C\uDFFC",[""]],
		"1f46e-1f3fd":["\uD83D\uDC6E\uD83C\uDFFD",[""]],
		"1f46e-1f3fe":["\uD83D\uDC6E\uD83C\uDFFE",[""]],
		"1f46e-1f3ff":["\uD83D\uDC6E\uD83C\uDFFF",[""]],
		"1f477-1f3fb":["\uD83D\uDC77\uD83C\uDFFB",[""]],
		"1f477-1f3fc":["\uD83D\uDC77\uD83C\uDFFC",[""]],
		"1f477-1f3fd":["\uD83D\uDC77\uD83C\uDFFD",[""]],
		"1f477-1f3fe":["\uD83D\uDC77\uD83C\uDFFE",[""]],
		"1f477-1f3ff":["\uD83D\uDC77\uD83C\uDFFF",[""]],
		"1f482-1f3fb":["\uD83D\uDC82\uD83C\uDFFB",[""]],
		"1f482-1f3fc":["\uD83D\uDC82\uD83C\uDFFC",[""]],
		"1f482-1f3fd":["\uD83D\uDC82\uD83C\uDFFD",[""]],
		"1f482-1f3fe":["\uD83D\uDC82\uD83C\uDFFE",[""]],
		"1f482-1f3ff":["\uD83D\uDC82\uD83C\uDFFF",[""]],
		"1f385-1f3fb":["\uD83C\uDF85\uD83C\uDFFB",[""]],
		"1f385-1f3fc":["\uD83C\uDF85\uD83C\uDFFC",[""]],
		"1f385-1f3fd":["\uD83C\uDF85\uD83C\uDFFD",[""]],
		"1f385-1f3fe":["\uD83C\uDF85\uD83C\uDFFE",[""]],
		"1f385-1f3ff":["\uD83C\uDF85\uD83C\uDFFF",[""]],
		"1f47c-1f3fb":["\uD83D\uDC7C\uD83C\uDFFB",[""]],
		"1f47c-1f3fc":["\uD83D\uDC7C\uD83C\uDFFC",[""]],
		"1f47c-1f3fd":["\uD83D\uDC7C\uD83C\uDFFD",[""]],
		"1f47c-1f3fe":["\uD83D\uDC7C\uD83C\uDFFE",[""]],
		"1f47c-1f3ff":["\uD83D\uDC7C\uD83C\uDFFF",[""]],
		"1f478-1f3fb":["\uD83D\uDC78\uD83C\uDFFB",[""]],
		"1f478-1f3fc":["\uD83D\uDC78\uD83C\uDFFC",[""]],
		"1f478-1f3fd":["\uD83D\uDC78\uD83C\uDFFD",[""]],
		"1f478-1f3fe":["\uD83D\uDC78\uD83C\uDFFE",[""]],
		"1f478-1f3ff":["\uD83D\uDC78\uD83C\uDFFF",[""]],
		"1f470-1f3fb":["\uD83D\uDC70\uD83C\uDFFB",[""]],
		"1f470-1f3fc":["\uD83D\uDC70\uD83C\uDFFC",[""]],
		"1f470-1f3fd":["\uD83D\uDC70\uD83C\uDFFD",[""]],
		"1f470-1f3fe":["\uD83D\uDC70\uD83C\uDFFE",[""]],
		"1f470-1f3ff":["\uD83D\uDC70\uD83C\uDFFF",[""]],
		"1f6b6-1f3fb":["\uD83D\uDEB6\uD83C\uDFFB",[""]],
		"1f6b6-1f3fc":["\uD83D\uDEB6\uD83C\uDFFC",[""]],
		"1f6b6-1f3fd":["\uD83D\uDEB6\uD83C\uDFFD",[""]],
		"1f6b6-1f3fe":["\uD83D\uDEB6\uD83C\uDFFE",[""]],
		"1f6b6-1f3ff":["\uD83D\uDEB6\uD83C\uDFFF",[""]],
		"1f3c3-1f3fb":["\uD83C\uDFC3\uD83C\uDFFB",[""]],
		"1f3c3-1f3fc":["\uD83C\uDFC3\uD83C\uDFFC",[""]],
		"1f3c3-1f3fd":["\uD83C\uDFC3\uD83C\uDFFD",[""]],
		"1f3c3-1f3fe":["\uD83C\uDFC3\uD83C\uDFFE",[""]],
		"1f3c3-1f3ff":["\uD83C\uDFC3\uD83C\uDFFF",[""]],
		"1f483-1f3fb":["\uD83D\uDC83\uD83C\uDFFB",[""]],
		"1f483-1f3fc":["\uD83D\uDC83\uD83C\uDFFC",[""]],
		"1f483-1f3fd":["\uD83D\uDC83\uD83C\uDFFD",[""]],
		"1f483-1f3fe":["\uD83D\uDC83\uD83C\uDFFE",[""]],
		"1f483-1f3ff":["\uD83D\uDC83\uD83C\uDFFF",[""]],
		"1f647-1f3fb":["\uD83D\uDE47\uD83C\uDFFB",[""]],
		"1f647-1f3fc":["\uD83D\uDE47\uD83C\uDFFC",[""]],
		"1f647-1f3fd":["\uD83D\uDE47\uD83C\uDFFD",[""]],
		"1f647-1f3fe":["\uD83D\uDE47\uD83C\uDFFE",[""]],
		"1f647-1f3ff":["\uD83D\uDE47\uD83C\uDFFF",[""]],
		"1f481-1f3fb":["\uD83D\uDC81\uD83C\uDFFB",[""]],
		"1f481-1f3fc":["\uD83D\uDC81\uD83C\uDFFC",[""]],
		"1f481-1f3fd":["\uD83D\uDC81\uD83C\uDFFD",[""]],
		"1f481-1f3fe":["\uD83D\uDC81\uD83C\uDFFE",[""]],
		"1f481-1f3ff":["\uD83D\uDC81\uD83C\uDFFF",[""]],
		"1f645-1f3fb":["\uD83D\uDE45\uD83C\uDFFB",[""]],
		"1f645-1f3fc":["\uD83D\uDE45\uD83C\uDFFC",[""]],
		"1f645-1f3fd":["\uD83D\uDE45\uD83C\uDFFD",[""]],
		"1f645-1f3fe":["\uD83D\uDE45\uD83C\uDFFE",[""]],
		"1f645-1f3ff":["\uD83D\uDE45\uD83C\uDFFF",[""]],
		"1f646-1f3fb":["\uD83D\uDE46\uD83C\uDFFB",[""]],
		"1f646-1f3fc":["\uD83D\uDE46\uD83C\uDFFC",[""]],
		"1f646-1f3fd":["\uD83D\uDE46\uD83C\uDFFD",[""]],
		"1f646-1f3fe":["\uD83D\uDE46\uD83C\uDFFE",[""]],
		"1f646-1f3ff":["\uD83D\uDE46\uD83C\uDFFF",[""]],
		"1f64b-1f3fb":["\uD83D\uDE4B\uD83C\uDFFB",[""]],
		"1f64b-1f3fc":["\uD83D\uDE4B\uD83C\uDFFC",[""]],
		"1f64b-1f3fd":["\uD83D\uDE4B\uD83C\uDFFD",[""]],
		"1f64b-1f3fe":["\uD83D\uDE4B\uD83C\uDFFE",[""]],
		"1f64b-1f3ff":["\uD83D\uDE4B\uD83C\uDFFF",[""]],
		"1f64e-1f3fb":["\uD83D\uDE4E\uD83C\uDFFB",[""]],
		"1f64e-1f3fc":["\uD83D\uDE4E\uD83C\uDFFC",[""]],
		"1f64e-1f3fd":["\uD83D\uDE4E\uD83C\uDFFD",[""]],
		"1f64e-1f3fe":["\uD83D\uDE4E\uD83C\uDFFE",[""]],
		"1f64e-1f3ff":["\uD83D\uDE4E\uD83C\uDFFF",[""]],
		"1f64d-1f3fb":["\uD83D\uDE4D\uD83C\uDFFB",[""]],
		"1f64d-1f3fc":["\uD83D\uDE4D\uD83C\uDFFC",[""]],
		"1f64d-1f3fd":["\uD83D\uDE4D\uD83C\uDFFD",[""]],
		"1f64d-1f3fe":["\uD83D\uDE4D\uD83C\uDFFE",[""]],
		"1f64d-1f3ff":["\uD83D\uDE4D\uD83C\uDFFF",[""]],
		"1f487-1f3fb":["\uD83D\uDC87\uD83C\uDFFB",[""]],
		"1f487-1f3fc":["\uD83D\uDC87\uD83C\uDFFC",[""]],
		"1f487-1f3fd":["\uD83D\uDC87\uD83C\uDFFD",[""]],
		"1f487-1f3fe":["\uD83D\uDC87\uD83C\uDFFE",[""]],
		"1f487-1f3ff":["\uD83D\uDC87\uD83C\uDFFF",[""]],
		"1f486-1f3fb":["\uD83D\uDC86\uD83C\uDFFB",[""]],
		"1f486-1f3fc":["\uD83D\uDC86\uD83C\uDFFC",[""]],
		"1f486-1f3fd":["\uD83D\uDC86\uD83C\uDFFD",[""]],
		"1f486-1f3fe":["\uD83D\uDC86\uD83C\uDFFE",[""]],
		"1f486-1f3ff":["\uD83D\uDC86\uD83C\uDFFF",[""]],
		"1f575-1f3fb":["\uD83D\uDD75\uD83C\uDFFB",[""]],
		"1f575-1f3fc":["\uD83D\uDD75\uD83C\uDFFC",[""]],
		"1f575-1f3fd":["\uD83D\uDD75\uD83C\uDFFD",[""]],
		"1f575-1f3fe":["\uD83D\uDD75\uD83C\uDFFE",[""]],
		"1f575-1f3ff":["\uD83D\uDD75\uD83C\uDFFF",[""]],
		"1f934-1f3fb":["\uD83E\uDD34\uD83C\uDFFB",[""]],
		"1f934-1f3fc":["\uD83E\uDD34\uD83C\uDFFC",[""]],
		"1f934-1f3fd":["\uD83E\uDD34\uD83C\uDFFD",[""]],
		"1f934-1f3fe":["\uD83E\uDD34\uD83C\uDFFE",[""]],
		"1f934-1f3ff":["\uD83E\uDD34\uD83C\uDFFF",[""]],
		"1f936-1f3fb":["\uD83E\uDD36\uD83C\uDFFB",[""]],
		"1f936-1f3fc":["\uD83E\uDD36\uD83C\uDFFC",[""]],
		"1f936-1f3fd":["\uD83E\uDD36\uD83C\uDFFD",[""]],
		"1f936-1f3fe":["\uD83E\uDD36\uD83C\uDFFE",[""]],
		"1f936-1f3ff":["\uD83E\uDD36\uD83C\uDFFF",[""]],
		"1f935-1f3fb":["\uD83E\uDD35\uD83C\uDFFB",[""]],
		"1f935-1f3fc":["\uD83E\uDD35\uD83C\uDFFC",[""]],
		"1f935-1f3fd":["\uD83E\uDD35\uD83C\uDFFD",[""]],
		"1f935-1f3fe":["\uD83E\uDD35\uD83C\uDFFE",[""]],
		"1f935-1f3ff":["\uD83E\uDD35\uD83C\uDFFF",[""]],
		"1f937-1f3fb":["\uD83E\uDD37\uD83C\uDFFB",[""]],
		"1f937-1f3fc":["\uD83E\uDD37\uD83C\uDFFC",[""]],
		"1f937-1f3fd":["\uD83E\uDD37\uD83C\uDFFD",[""]],
		"1f937-1f3fe":["\uD83E\uDD37\uD83C\uDFFE",[""]],
		"1f937-1f3ff":["\uD83E\uDD37\uD83C\uDFFF",[""]],
		"1f926-1f3fb":["\uD83E\uDD26\uD83C\uDFFB",[""]],
		"1f926-1f3fc":["\uD83E\uDD26\uD83C\uDFFC",[""]],
		"1f926-1f3fd":["\uD83E\uDD26\uD83C\uDFFD",[""]],
		"1f926-1f3fe":["\uD83E\uDD26\uD83C\uDFFE",[""]],
		"1f926-1f3ff":["\uD83E\uDD26\uD83C\uDFFF",[""]],
		"1f930-1f3fb":["\uD83E\uDD30\uD83C\uDFFB",[""]],
		"1f930-1f3fc":["\uD83E\uDD30\uD83C\uDFFC",[""]],
		"1f930-1f3fd":["\uD83E\uDD30\uD83C\uDFFD",[""]],
		"1f930-1f3fe":["\uD83E\uDD30\uD83C\uDFFE",[""]],
		"1f930-1f3ff":["\uD83E\uDD30\uD83C\uDFFF",[""]],
		"1f933-1f3fb":["\uD83E\uDD33\uD83C\uDFFB",[""]],
		"1f933-1f3fc":["\uD83E\uDD33\uD83C\uDFFC",[""]],
		"1f933-1f3fd":["\uD83E\uDD33\uD83C\uDFFD",[""]],
		"1f933-1f3fe":["\uD83E\uDD33\uD83C\uDFFE",[""]],
		"1f933-1f3ff":["\uD83E\uDD33\uD83C\uDFFF",[""]],
		"1f91e-1f3fb":["\uD83E\uDD1E\uD83C\uDFFB",[""]],
		"1f91e-1f3fc":["\uD83E\uDD1E\uD83C\uDFFC",[""]],
		"1f91e-1f3fd":["\uD83E\uDD1E\uD83C\uDFFD",[""]],
		"1f91e-1f3fe":["\uD83E\uDD1E\uD83C\uDFFE",[""]],
		"1f91e-1f3ff":["\uD83E\uDD1E\uD83C\uDFFF",[""]],
		"1f919-1f3fb":["\uD83E\uDD19\uD83C\uDFFB",[""]],
		"1f919-1f3fc":["\uD83E\uDD19\uD83C\uDFFC",[""]],
		"1f919-1f3fd":["\uD83E\uDD19\uD83C\uDFFD",[""]],
		"1f919-1f3fe":["\uD83E\uDD19\uD83C\uDFFE",[""]],
		"1f919-1f3ff":["\uD83E\uDD19\uD83C\uDFFF",[""]],
		"1f91b-1f3fb":["\uD83E\uDD1B\uD83C\uDFFB",[""]],
		"1f91b-1f3fc":["\uD83E\uDD1B\uD83C\uDFFC",[""]],
		"1f91b-1f3fd":["\uD83E\uDD1B\uD83C\uDFFD",[""]],
		"1f91b-1f3fe":["\uD83E\uDD1B\uD83C\uDFFE",[""]],
		"1f91b-1f3ff":["\uD83E\uDD1B\uD83C\uDFFF",[""]],
		"1f91c-1f3fb":["\uD83E\uDD1C\uD83C\uDFFB",[""]],
		"1f91c-1f3fc":["\uD83E\uDD1C\uD83C\uDFFC",[""]],
		"1f91c-1f3fd":["\uD83E\uDD1C\uD83C\uDFFD",[""]],
		"1f91c-1f3fe":["\uD83E\uDD1C\uD83C\uDFFE",[""]],
		"1f91c-1f3ff":["\uD83E\uDD1C\uD83C\uDFFF",[""]],
		"1f91a-1f3fb":["\uD83E\uDD1A\uD83C\uDFFB",[""]],
		"1f91a-1f3fc":["\uD83E\uDD1A\uD83C\uDFFC",[""]],
		"1f91a-1f3fd":["\uD83E\uDD1A\uD83C\uDFFD",[""]],
		"1f91a-1f3fe":["\uD83E\uDD1A\uD83C\uDFFE",[""]],
		"1f91a-1f3ff":["\uD83E\uDD1A\uD83C\uDFFF",[""]],
		"1f91d-1f3fb":["\uD83E\uDD1D\uD83C\uDFFB",[""]],
		"1f91d-1f3fc":["\uD83E\uDD1D\uD83C\uDFFC",[""]],
		"1f91d-1f3fd":["\uD83E\uDD1D\uD83C\uDFFD",[""]],
		"1f91d-1f3fe":["\uD83E\uDD1D\uD83C\uDFFE",[""]],
		"1f91d-1f3ff":["\uD83E\uDD1D\uD83C\uDFFF",[""]],*/
		/*unicode 9.0*/
		/*"1f920":["\uD83E\uDD20",[""]],
		"1f921":["\uD83E\uDD21",[""]],
		"1f922":["\uD83E\uDD22",[""]],
		"1f923":["\uD83E\uDD23",[""]],
		"1f924":["\uD83E\uDD24",[""]],
		"1f925":["\uD83E\uDD25",[""]],
		"1f927":["\uD83E\uDD27",[""]],
		"1f934":["\uD83E\uDD34",[""]],
		"1f935":["\uD83E\uDD35",[""]],
		"1f936":["\uD83E\uDD36",[""]],
		"1f926":["\uD83E\uDD26",[""]],
		"1f937":["\uD83E\uDD37",[""]],
		"1f930":["\uD83E\uDD30",[""]],
		"1f933":["\uD83E\uDD33",[""]],
		"1f57a":["\uD83D\uDD7A",[""]],
		"1f919":["\uD83E\uDD19",[""]],
		"1f91a":["\uD83E\uDD1A",[""]],
		"1f91b":["\uD83E\uDD1B",[""]],
		"1f91c":["\uD83E\uDD1C",[""]],
		"1f91d":["\uD83E\uDD1D",[""]],
		"1f91e":["\uD83E\uDD1E",[""]],*/
		/*nature*/
		"1f981":["\uD83E\uDD81",[""]],
		"1f984":["\uD83E\uDD84",[""]],
		"1f577":["\uD83D\uDD77",[""]],
		"1f982":["\uD83E\uDD82",[""]],
		"1f980":["\uD83E\uDD80",[""]],
		"1f983":["\uD83E\uDD83",[""]],
		"1f54a":["\uD83D\uDD4A",[""]],
		"1f43f":["\uD83D\uDC3F",[""]],
		"2618":["\u2618",[""]],
		"1f578":["\uD83D\uDD78",[""]],
		"2604":["\u2604",[""]],
		"1f324":["\uD83C\uDF24",[""]],
		"1f325":["\uD83C\uDF25",[""]],
		"1f326":["\uD83C\uDF26",[""]],
		"1f327":["\uD83C\uDF27",[""]],
		"26c8":["\u26C8",[""]],
		"1f329":["\uD83C\uDF29",[""]],
		"1f328":["\uD83C\uDF28",[""]],
		"2603":["\u2603",[""]],
		"1f32c":["\uD83C\uDF2C",[""]],
		"1f32a":["\uD83C\uDF2A",[""]],
		"1f32b":["\uD83C\uDF2B",[""]],
		"2602":["\u2602",[""]],
		/*unicode 9.0*/
		/*"1f985":["\uD83E\uDD85",[""]],
		"1f986":["\uD83E\uDD86",[""]],
		"1f987":["\uD83E\uDD87",[""]],
		"1f988":["\uD83E\uDD88",[""]],
		"1f989":["\uD83E\uDD89",[""]],
		"1f98a":["\uD83E\uDD8A",[""]],
		"1f98b":["\uD83E\uDD8B",[""]],
		"1f98c":["\uD83E\uDD8C",[""]],
		"1f98d":["\uD83E\uDD8D",[""]],
		"1f98e":["\uD83E\uDD8E",[""]],
		"1f98f":["\uD83E\uDD8F",[""]],
		"1f940":["\uD83E\uDD40",[""]],
		"1f990":["\uD83E\uDD90",[""]],
		"1f991":["\uD83E\uDD91",[""]],*/
		/*food*/
		"1f336":["\uD83C\uDF36",[""]],
		"1f9c0":["\uD83E\uDDC0",[""]],
		"1f32d":["\uD83C\uDF2D",[""]],
		"1f32e":["\uD83C\uDF2E",[""]],
		"1f32f":["\uD83C\uDF2F",[""]],
		"1f37f":["\uD83C\uDF7F",[""]],
		"1f37e":["\uD83C\uDF7E",[""]],
		"1f37d":["\uD83C\uDF7D",[""]],
		/*unicode 9.0*/
		/*"1f950":["\uD83E\uDD50",[""]],
		"1f951":["\uD83E\uDD51",[""]],
		"1f952":["\uD83E\uDD52",[""]],
		"1f953":["\uD83E\uDD53",[""]],
		"1f954":["\uD83E\uDD54",[""]],
		"1f955":["\uD83E\uDD55",[""]],
		"1f956":["\uD83E\uDD56",[""]],
		"1f957":["\uD83E\uDD57",[""]],
		"1f958":["\uD83E\uDD58",[""]],
		"1f959":["\uD83E\uDD59",[""]],
		"1f942":["\uD83E\uDD42",[""]],
		"1f943":["\uD83E\uDD43",[""]],
		"1f944":["\uD83E\uDD44",[""]],
		"1f95a":["\uD83E\uDD5A",[""]],
		"1f95b":["\uD83E\uDD5B",[""]],
		"1f95c":["\uD83E\uDD5C",[""]],
		"1f95d":["\uD83E\uDD5D",[""]],
		"1f95e":["\uD83E\uDD5E",[""]],*/
		/*activity*/
		"1f3d0":["\uD83C\uDFD0",[""]],
		"1f3cc":["\uD83C\uDFCC",[""]],
		"1f3d3":["\uD83C\uDFD3",[""]],
		"1f3f8":["\uD83C\uDFF8",[""]],
		"1f3d2":["\uD83C\uDFD2",[""]],
		"1f3d1":["\uD83C\uDFD1",[""]],
		"1f3cf":["\uD83C\uDFCF",[""]],
		"26f7":["\u26F7",[""]],
		"26f8":["\u26F8",[""]],
		"1f3f9":["\uD83C\uDFF9",[""]],
		"26f9":["\u26F9",[""]],
		"1f3cb":["\uD83C\uDFCB",[""]],
		"1f574":["\uD83D\uDD74",[""]],
		"1f3c5":["\uD83C\uDFC5",[""]],
		"1f396":["\uD83C\uDF96",[""]],
		"1f397":["\uD83C\uDF97",[""]],
		"1f3f5":["\uD83C\uDFF5",[""]],
		"1f39f":["\uD83C\uDF9F",[""]],
		"1f6a3-1f3fb":["\uD83D\uDEA3\uD83C\uDFFB",[""]],
		"1f6a3-1f3fc":["\uD83D\uDEA3\uD83C\uDFFC",[""]],
		"1f6a3-1f3fd":["\uD83D\uDEA3\uD83C\uDFFD",[""]],
		"1f6a3-1f3fe":["\uD83D\uDEA3\uD83C\uDFFE",[""]],
		"1f6a3-1f3ff":["\uD83D\uDEA3\uD83C\uDFFF",[""]],
		"1f3ca-1f3fb":["\uD83C\uDFCA\uD83C\uDFFB",[""]],
		"1f3ca-1f3fc":["\uD83C\uDFCA\uD83C\uDFFC",[""]],
		"1f3ca-1f3fd":["\uD83C\uDFCA\uD83C\uDFFD",[""]],
		"1f3ca-1f3fe":["\uD83C\uDFCA\uD83C\uDFFE",[""]],
		"1f3ca-1f3ff":["\uD83C\uDFCA\uD83C\uDFFF",[""]],
		"1f3c4-1f3fb":["\uD83C\uDFC4\uD83C\uDFFB",[""]],
		"1f3c4-1f3fc":["\uD83C\uDFC4\uD83C\uDFFC",[""]],
		"1f3c4-1f3fd":["\uD83C\uDFC4\uD83C\uDFFD",[""]],
		"1f3c4-1f3fe":["\uD83C\uDFC4\uD83C\uDFFE",[""]],
		"1f3c4-1f3ff":["\uD83C\uDFC4\uD83C\uDFFF",[""]],
		"1f6c0-1f3fb":["\uD83D\uDEC0\uD83C\uDFFB",[""]],
		"1f6c0-1f3fc":["\uD83D\uDEC0\uD83C\uDFFC",[""]],
		"1f6c0-1f3fd":["\uD83D\uDEC0\uD83C\uDFFD",[""]],
		"1f6c0-1f3fe":["\uD83D\uDEC0\uD83C\uDFFE",[""]],
		"1f6c0-1f3ff":["\uD83D\uDEC0\uD83C\uDFFF",[""]],
		"26f9-1f3fb":["\u26F9\uD83C\uDFFB",[""]],
		"26f9-1f3fc":["\u26F9\uD83C\uDFFC",[""]],
		"26f9-1f3fd":["\u26F9\uD83C\uDFFD",[""]],
		"26f9-1f3fe":["\u26F9\uD83C\uDFFE",[""]],
		"26f9-1f3ff":["\u26F9\uD83C\uDFFF",[""]],
		"1f3cb-1f3fb":["\uD83C\uDFCB\uD83C\uDFFB",[""]],
		"1f3cb-1f3fc":["\uD83C\uDFCB\uD83C\uDFFC",[""]],
		"1f3cb-1f3fd":["\uD83C\uDFCB\uD83C\uDFFD",[""]],
		"1f3cb-1f3fe":["\uD83C\uDFCB\uD83C\uDFFE",[""]],
		"1f3cb-1f3ff":["\uD83C\uDFCB\uD83C\uDFFF",[""]],
		"1f6b4-1f3fb":["\uD83D\uDEB4\uD83C\uDFFB",[""]],
		"1f6b4-1f3fc":["\uD83D\uDEB4\uD83C\uDFFC",[""]],
		"1f6b4-1f3fd":["\uD83D\uDEB4\uD83C\uDFFD",[""]],
		"1f6b4-1f3fe":["\uD83D\uDEB4\uD83C\uDFFE",[""]],
		"1f6b4-1f3ff":["\uD83D\uDEB4\uD83C\uDFFF",[""]],
		"1f6b5-1f3fb":["\uD83D\uDEB5\uD83C\uDFFB",[""]],
		"1f6b5-1f3fc":["\uD83D\uDEB5\uD83C\uDFFC",[""]],
		"1f6b5-1f3fd":["\uD83D\uDEB5\uD83C\uDFFD",[""]],
		"1f6b5-1f3fe":["\uD83D\uDEB5\uD83C\uDFFE",[""]],
		"1f6b5-1f3ff":["\uD83D\uDEB5\uD83C\uDFFF",[""]],
		"1f3c7-1f3fb":["\uD83C\uDFC7\uD83C\uDFFB",[""]],
		"1f3c7-1f3fc":["\uD83C\uDFC7\uD83C\uDFFC",[""]],
		"1f3c7-1f3fd":["\uD83C\uDFC7\uD83C\uDFFD",[""]],
		"1f3c7-1f3fe":["\uD83C\uDFC7\uD83C\uDFFE",[""]],
		"1f3c7-1f3ff":["\uD83C\uDFC7\uD83C\uDFFF",[""]],
		"1f57a-1f3fb":["\uD83D\uDD7A\uD83C\uDFFB",[""]],
		"1f57a-1f3fc":["\uD83D\uDD7A\uD83C\uDFFC",[""]],
		"1f57a-1f3fd":["\uD83D\uDD7A\uD83C\uDFFD",[""]],
		"1f57a-1f3fe":["\uD83D\uDD7A\uD83C\uDFFE",[""]],
		"1f57a-1f3ff":["\uD83D\uDD7A\uD83C\uDFFF",[""]],
		"1f938-1f3fb":["\uD83E\uDD38\uD83C\uDFFB",[""]],
		"1f938-1f3fc":["\uD83E\uDD38\uD83C\uDFFC",[""]],
		"1f938-1f3fd":["\uD83E\uDD38\uD83C\uDFFD",[""]],
		"1f938-1f3fe":["\uD83E\uDD38\uD83C\uDFFE",[""]],
		"1f938-1f3ff":["\uD83E\uDD38\uD83C\uDFFF",[""]],
		"1f93d-1f3fb":["\uD83E\uDD3D\uD83C\uDFFB",[""]],
		"1f93d-1f3fc":["\uD83E\uDD3D\uD83C\uDFFC",[""]],
		"1f93d-1f3fd":["\uD83E\uDD3D\uD83C\uDFFD",[""]],
		"1f93d-1f3fe":["\uD83E\uDD3D\uD83C\uDFFE",[""]],
		"1f93d-1f3ff":["\uD83E\uDD3D\uD83C\uDFFF",[""]],
		"1f93e-1f3fb":["\uD83E\uDD3E\uD83C\uDFFB",[""]],
		"1f93e-1f3fc":["\uD83E\uDD3E\uD83C\uDFFC",[""]],
		"1f93e-1f3fd":["\uD83E\uDD3E\uD83C\uDFFD",[""]],
		"1f93e-1f3fe":["\uD83E\uDD3E\uD83C\uDFFE",[""]],
		"1f93e-1f3ff":["\uD83E\uDD3E\uD83C\uDFFF",[""]],
		"1f939-1f3fb":["\uD83E\uDD39\uD83C\uDFFB",[""]],
		"1f939-1f3fc":["\uD83E\uDD39\uD83C\uDFFC",[""]],
		"1f939-1f3fd":["\uD83E\uDD39\uD83C\uDFFD",[""]],
		"1f939-1f3fe":["\uD83E\uDD39\uD83C\uDFFE",[""]],
		"1f939-1f3ff":["\uD83E\uDD39\uD83C\uDFFF",[""]],
		"1f938":["\uD83E\uDD38",[""]],
		"1f939":["\uD83E\uDD39",[""]],
		"1f94a":["\uD83E\uDD4A",[""]],
		"1f94b":["\uD83E\uDD4B",[""]],
		"1f93d":["\uD83E\uDD3D",[""]],
		"1f93e":["\uD83E\uDD3E",[""]],
		"1f945":["\uD83E\uDD45",[""]],
		"1f93a":["\uD83E\uDD3A",[""]],
		"1f947":["\uD83E\uDD47",[""]],
		"1f948":["\uD83E\uDD48",[""]],
		"1f949":["\uD83E\uDD49",[""]],
		"1f941":["\uD83E\uDD41",[""]],
		/*travel*/
		"1f3ce":["\uD83C\uDFCE",[""]],
		"1f3cd":["\uD83C\uDFCD",[""]],
		"1f6e9":["\uD83D\uDEE9",[""]],
		"1f6eb":["\uD83D\uDEEB",[""]],
		"1f6ec":["\uD83D\uDEEC",[""]],
		"1f6e5":["\uD83D\uDEE5",[""]],
		"26f4":["\u26F4",[""]],
		"1f6f3":["\uD83D\uDEF3",[""]],
		"1f6f0":["\uD83D\uDEF0",[""]],
		"1f3d7":["\uD83C\uDFD7",[""]],
		"26f0":["\u26F0",[""]],
		"1f3d4":["\uD83C\uDFD4",[""]],
		"1f3d5":["\uD83C\uDFD5",[""]],
		"1f3de":["\uD83C\uDFDE",[""]],
		"1f6e3":["\uD83D\uDEE3",[""]],
		"1f6e4":["\uD83D\uDEE4",[""]],
		"1f3dc":["\uD83C\uDFDC",[""]],
		"1f3d6":["\uD83C\uDFD6",[""]],
		"1f3dd":["\uD83C\uDFDD",[""]],
		"1f3d9":["\uD83C\uDFD9",[""]],
		"1f3d8":["\uD83C\uDFD8",[""]],
		"1f3df":["\uD83C\uDFDF",[""]],
		"1f3da":["\uD83C\uDFDA",[""]],
		"1f3db":["\uD83C\uDFDB",[""]],
		"1f54c":["\uD83D\uDD4C",[""]],
		"1f54d":["\uD83D\uDD4D",[""]],
		"1f54b":["\uD83D\uDD4B",[""]],
		"26e9":["\u26E9",[""]],
		"1f6f4":["\uD83D\uDEF4",[""]],
		"1f6f5":["\uD83D\uDEF5",[""]],
		"1f6f6":["\uD83D\uDEF6",[""]],
		/*objects*/
		"2328":["\u2328",[""]],
		"1f5a5":["\uD83D\uDDA5",[""]],
		"1f5a8":["\uD83D\uDDA8",[""]],
		"1f5b1":["\uD83D\uDDB1",[""]],
		"1f5b2":["\uD83D\uDDB2",[""]],
		"1f579":["\uD83D\uDD79",[""]],
		"1f5dc":["\uD83D\uDDDC",[""]],
		"1f4f8":["\uD83D\uDCF8",[""]],
		"1f4fd":["\uD83D\uDCFD",[""]],
		"1f39e":["\uD83C\uDF9E",[""]],
		"1f399":["\uD83C\uDF99",[""]],
		"1f39a":["\uD83C\uDF9A",[""]],
		"1f39b":["\uD83C\uDF9B",[""]],
		"23f1":["\u23F1",[""]],
		"23f2":["\u23F2",[""]],
		"1f570":["\uD83D\uDD70",[""]],
		"1f56f":["\uD83D\uDD6F",[""]],
		"1f5d1":["\uD83D\uDDD1",[""]],
		"1f6e2":["\uD83D\uDEE2",[""]],
		"2696":["\u2696",[""]],
		"2692":["\u2692",[""]],
		"1f6e0":["\uD83D\uDEE0",[""]],
		"26cf":["\u26CF",[""]],
		"2699":["\u2699",[""]],
		"26d3":["\u26D3",[""]],
		"1f5e1":["\uD83D\uDDE1",[""]],
		"2694":["\u2694",[""]],
		"1f6e1":["\uD83D\uDEE1",[""]],
		"2620":["\u2620",[""]],
		"26b0":["\u26B0",[""]],
		"26b1":["\u26B1",[""]],
		"1f3fa":["\uD83C\uDFFA",[""]],
		"1f4ff":["\uD83D\uDCFF",[""]],
		"2697":["\u2697",[""]],
		"1f573":["\uD83D\uDD73",[""]],
		"1f321":["\uD83C\uDF21",[""]],
		"1f3f7":["\uD83C\uDFF7",[""]],
		"1f5dd":["\uD83D\uDDDD",[""]],
		"1f6cb":["\uD83D\uDECB",[""]],
		"1f6cc":["\uD83D\uDECC",[""]],
		"1f6cf":["\uD83D\uDECF",[""]],
		"1f6ce":["\uD83D\uDECE",[""]],
		"1f5bc":["\uD83D\uDDBC",[""]],
		"1f5fa":["\uD83D\uDDFA",[""]],
		"26f1":["\u26F1",[""]],
		"1f6cd":["\uD83D\uDECD",[""]],
		"1f5d3":["\uD83D\uDDD3",[""]],
		"1f5c3":["\uD83D\uDDC3",[""]],
		"1f5f3":["\uD83D\uDDF3",[""]],
		"1f5c4":["\uD83D\uDDC4",[""]],
		"1f5d2":["\uD83D\uDDD2",[""]],
		"1f5c2":["\uD83D\uDDC2",[""]],
		"1f5de":["\uD83D\uDDDE",[""]],
		"1f587":["\uD83D\uDD87",[""]],
		"1f3f3":["\uD83C\uDFF3",[""]],
		"1f3f4":["\uD83C\uDFF4",[""]],
		"1f58a":["\uD83D\uDD8A",[""]],
		"1f58b":["\uD83D\uDD8B",[""]],
		"1f58d":["\uD83D\uDD8D",[""]],
		"1f58c":["\uD83D\uDD8C",[""]],
		"1f6d2":["\uD83D\uDED2",[""]],
		/*symbols*/
		"2763":["\u2763",[""]],
		"262e":["\u262E",[""]],
		"271d":["\u271D",[""]],
		"262a":["\u262A",[""]],
		"1f549":["\uD83D\uDD49",[""]],
		"2638":["\u2638",[""]],
		"2721":["\u2721",[""]],
		"1f54e":["\uD83D\uDD4E",[""]],
		"262f":["\u262F",[""]],
		"2626":["\u2626",[""]],
		"1f6d0":["\uD83D\uDED0",[""]],
		"269b":["\u269B",[""]],
		"2622":["\u2622",[""]],
		"2623":["\u2623",[""]],
		"269c":["\u269C",[""]],
		/*"0030-20e3":["\u0030\u20E3",[""]],
		"0031-20e3":["\u0031\u20E3",[""]],
		"0032-20e3":["\u0032\u20E3",[""]],
		"0033-20e3":["\u0033\u20E3",[""]],
		"0034-20e3":["\u0034\u20E3",[""]],
		"0035-20e3":["\u0035\u20E3",[""]],
		"0036-20e3":["\u0036\u20E3",[""]],
		"0037-20e3":["\u0037\u20E3",[""]],
		"0038-20e3":["\u0038\u20E3",[""]],
		"0039-20e3":["\u0039\u20E3",[""]],*/
		"23f8":["\u23F8",[""]],
		"23ef":["\u23EF",[""]],
		"23f9":["\u23F9",[""]],
		"23fa":["\u23FA",[""]],
		"23ed":["\u23ED",[""]],
		"23ee":["\u23EE",[""]],
		// "0023-20e3":["\u0023\u20E3",[""]],
		// "002a-20e3":["\u002A\u20E3",[""]],
		"1f5ef":["\uD83D\uDDEF",[""]],
		// "1f441-1f5e8":["\uD83D\uDC41\uD83D\uDDE8",[""]],
		"1f5e8":["\uD83D\uDDE8",[""]],
		"23cf":["\u23CF",[""]],
		"1f5a4":["\uD83D\uDDA4",[""]],
		"1f6d1":["\uD83D\uDED1",[""]],
		/*flags*/
		"1f1e6-1f1e8":["\uD83C\uDDE6\uD83C\uDDE8",[""]],
		"1f1e6-1f1eb":["\uD83C\uDDE6\uD83C\uDDEB",[""]],
		"1f1e6-1f1f1":["\uD83C\uDDE6\uD83C\uDDF1",[""]],
		"1f1e9-1f1ff":["\uD83C\uDDE9\uD83C\uDDFF",[""]],
		"1f1e6-1f1e9":["\uD83C\uDDE6\uD83C\uDDE9",[""]],
		"1f1e6-1f1f4":["\uD83C\uDDE6\uD83C\uDDF4",[""]],
		"1f1e6-1f1ee":["\uD83C\uDDE6\uD83C\uDDEE",[""]],
		"1f1e6-1f1ec":["\uD83C\uDDE6\uD83C\uDDEC",[""]],
		"1f1e6-1f1f7":["\uD83C\uDDE6\uD83C\uDDF7",[""]],
		"1f1e6-1f1f2":["\uD83C\uDDE6\uD83C\uDDF2",[""]],
		"1f1e6-1f1fc":["\uD83C\uDDE6\uD83C\uDDFC",[""]],
		"1f1e6-1f1fa":["\uD83C\uDDE6\uD83C\uDDFA",[""]],
		"1f1e6-1f1f9":["\uD83C\uDDE6\uD83C\uDDF9",[""]],
		"1f1e6-1f1ff":["\uD83C\uDDE6\uD83C\uDDFF",[""]],
		"1f1e7-1f1f8":["\uD83C\uDDE7\uD83C\uDDF8",[""]],
		"1f1e7-1f1ed":["\uD83C\uDDE7\uD83C\uDDED",[""]],
		"1f1e7-1f1e9":["\uD83C\uDDE7\uD83C\uDDE9",[""]],
		"1f1e7-1f1e7":["\uD83C\uDDE7\uD83C\uDDE7",[""]],
		"1f1e7-1f1fe":["\uD83C\uDDE7\uD83C\uDDFE",[""]],
		"1f1e7-1f1ea":["\uD83C\uDDE7\uD83C\uDDEA",[""]],
		"1f1e7-1f1ff":["\uD83C\uDDE7\uD83C\uDDFF",[""]],
		"1f1e7-1f1ef":["\uD83C\uDDE7\uD83C\uDDEF",[""]],
		"1f1e7-1f1f2":["\uD83C\uDDE7\uD83C\uDDF2",[""]],
		"1f1e7-1f1f9":["\uD83C\uDDE7\uD83C\uDDF9",[""]],
		"1f1e7-1f1f4":["\uD83C\uDDE7\uD83C\uDDF4",[""]],
		"1f1e7-1f1e6":["\uD83C\uDDE7\uD83C\uDDE6",[""]],
		"1f1e7-1f1fc":["\uD83C\uDDE7\uD83C\uDDFC",[""]],
		"1f1e7-1f1f7":["\uD83C\uDDE7\uD83C\uDDF7",[""]],
		"1f1e7-1f1f3":["\uD83C\uDDE7\uD83C\uDDF3",[""]],
		"1f1e7-1f1ec":["\uD83C\uDDE7\uD83C\uDDEC",[""]],
		"1f1e7-1f1eb":["\uD83C\uDDE7\uD83C\uDDEB",[""]],
		"1f1e7-1f1ee":["\uD83C\uDDE7\uD83C\uDDEE",[""]],
		"1f1e8-1f1fb":["\uD83C\uDDE8\uD83C\uDDFB",[""]],
		"1f1f0-1f1ed":["\uD83C\uDDF0\uD83C\uDDED",[""]],
		"1f1e8-1f1f2":["\uD83C\uDDE8\uD83C\uDDF2",[""]],
		"1f1e8-1f1e6":["\uD83C\uDDE8\uD83C\uDDE6",[""]],
		"1f1f0-1f1fe":["\uD83C\uDDF0\uD83C\uDDFE",[""]],
		"1f1e8-1f1eb":["\uD83C\uDDE8\uD83C\uDDEB",[""]],
		"1f1f9-1f1e9":["\uD83C\uDDF9\uD83C\uDDE9",[""]],
		"1f1e8-1f1f1":["\uD83C\uDDE8\uD83C\uDDF1",[""]],
		"1f1e8-1f1f3":["\uD83C\uDDE8\uD83C\uDDF3",[""]],
		"1f1e8-1f1f4":["\uD83C\uDDE8\uD83C\uDDF4",[""]],
		"1f1f0-1f1f2":["\uD83C\uDDF0\uD83C\uDDF2",[""]],
		"1f1e8-1f1ec":["\uD83C\uDDE8\uD83C\uDDEC",[""]],
		"1f1e8-1f1e9":["\uD83C\uDDE8\uD83C\uDDE9",[""]],
		"1f1e8-1f1f7":["\uD83C\uDDE8\uD83C\uDDF7",[""]],
		"1f1ed-1f1f7":["\uD83C\uDDED\uD83C\uDDF7",[""]],
		"1f1e8-1f1fa":["\uD83C\uDDE8\uD83C\uDDFA",[""]],
		"1f1e8-1f1fe":["\uD83C\uDDE8\uD83C\uDDFE",[""]],
		"1f1e8-1f1ff":["\uD83C\uDDE8\uD83C\uDDFF",[""]],
		"1f1e9-1f1f0":["\uD83C\uDDE9\uD83C\uDDF0",[""]],
		"1f1e9-1f1ef":["\uD83C\uDDE9\uD83C\uDDEF",[""]],
		"1f1e9-1f1f2":["\uD83C\uDDE9\uD83C\uDDF2",[""]],
		"1f1e9-1f1f4":["\uD83C\uDDE9\uD83C\uDDF4",[""]],
		"1f1ea-1f1e8":["\uD83C\uDDEA\uD83C\uDDE8",[""]],
		"1f1ea-1f1ec":["\uD83C\uDDEA\uD83C\uDDEC",[""]],
		"1f1f8-1f1fb":["\uD83C\uDDF8\uD83C\uDDFB",[""]],
		"1f1ec-1f1f6":["\uD83C\uDDEC\uD83C\uDDF6",[""]],
		"1f1ea-1f1f7":["\uD83C\uDDEA\uD83C\uDDF7",[""]],
		"1f1ea-1f1ea":["\uD83C\uDDEA\uD83C\uDDEA",[""]],
		"1f1ea-1f1f9":["\uD83C\uDDEA\uD83C\uDDF9",[""]],
		"1f1eb-1f1f0":["\uD83C\uDDEB\uD83C\uDDF0",[""]],
		"1f1eb-1f1f4":["\uD83C\uDDEB\uD83C\uDDF4",[""]],
		"1f1eb-1f1ef":["\uD83C\uDDEB\uD83C\uDDEF",[""]],
		"1f1eb-1f1ee":["\uD83C\uDDEB\uD83C\uDDEE",[""]],
		"1f1eb-1f1f7":["\uD83C\uDDEB\uD83C\uDDF7",[""]],
		"1f1f5-1f1eb":["\uD83C\uDDF5\uD83C\uDDEB",[""]],
		"1f1ec-1f1e6":["\uD83C\uDDEC\uD83C\uDDE6",[""]],
		"1f1ec-1f1f2":["\uD83C\uDDEC\uD83C\uDDF2",[""]],
		"1f1ec-1f1ea":["\uD83C\uDDEC\uD83C\uDDEA",[""]],
		"1f1e9-1f1ea":["\uD83C\uDDE9\uD83C\uDDEA",[""]],
		"1f1ec-1f1ed":["\uD83C\uDDEC\uD83C\uDDED",[""]],
		"1f1ec-1f1ee":["\uD83C\uDDEC\uD83C\uDDEE",[""]],
		"1f1ec-1f1f7":["\uD83C\uDDEC\uD83C\uDDF7",[""]],
		"1f1ec-1f1f1":["\uD83C\uDDEC\uD83C\uDDF1",[""]],
		"1f1ec-1f1e9":["\uD83C\uDDEC\uD83C\uDDE9",[""]],
		"1f1ec-1f1fa":["\uD83C\uDDEC\uD83C\uDDFA",[""]],
		"1f1ec-1f1f9":["\uD83C\uDDEC\uD83C\uDDF9",[""]],
		"1f1ec-1f1f3":["\uD83C\uDDEC\uD83C\uDDF3",[""]],
		"1f1ec-1f1fc":["\uD83C\uDDEC\uD83C\uDDFC",[""]],
		"1f1ec-1f1fe":["\uD83C\uDDEC\uD83C\uDDFE",[""]],
		"1f1ed-1f1f9":["\uD83C\uDDED\uD83C\uDDF9",[""]],
		"1f1ed-1f1f3":["\uD83C\uDDED\uD83C\uDDF3",[""]],
		"1f1ed-1f1f0":["\uD83C\uDDED\uD83C\uDDF0",[""]],
		"1f1ed-1f1fa":["\uD83C\uDDED\uD83C\uDDFA",[""]],
		"1f1ee-1f1f8":["\uD83C\uDDEE\uD83C\uDDF8",[""]],
		"1f1ee-1f1f3":["\uD83C\uDDEE\uD83C\uDDF3",[""]],
		"1f1ee-1f1e9":["\uD83C\uDDEE\uD83C\uDDE9",[""]],
		"1f1ee-1f1f7":["\uD83C\uDDEE\uD83C\uDDF7",[""]],
		"1f1ee-1f1f6":["\uD83C\uDDEE\uD83C\uDDF6",[""]],
		"1f1ee-1f1ea":["\uD83C\uDDEE\uD83C\uDDEA",[""]],
		"1f1ee-1f1f1":["\uD83C\uDDEE\uD83C\uDDF1",[""]],
		"1f1ee-1f1f9":["\uD83C\uDDEE\uD83C\uDDF9",[""]],
		"1f1e8-1f1ee":["\uD83C\uDDE8\uD83C\uDDEE",[""]],
		"1f1ef-1f1f2":["\uD83C\uDDEF\uD83C\uDDF2",[""]],
		"1f1ef-1f1f5":["\uD83C\uDDEF\uD83C\uDDF5",[""]],
		"1f1ef-1f1ea":["\uD83C\uDDEF\uD83C\uDDEA",[""]],
		"1f1ef-1f1f4":["\uD83C\uDDEF\uD83C\uDDF4",[""]],
		"1f1f0-1f1ff":["\uD83C\uDDF0\uD83C\uDDFF",[""]],
		"1f1f0-1f1ea":["\uD83C\uDDF0\uD83C\uDDEA",[""]],
		"1f1f0-1f1ee":["\uD83C\uDDF0\uD83C\uDDEE",[""]],
		"1f1fd-1f1f0":["\uD83C\uDDFD\uD83C\uDDF0",[""]],
		"1f1f0-1f1fc":["\uD83C\uDDF0\uD83C\uDDFC",[""]],
		"1f1f0-1f1ec":["\uD83C\uDDF0\uD83C\uDDEC",[""]],
		"1f1f1-1f1e6":["\uD83C\uDDF1\uD83C\uDDE6",[""]],
		"1f1f1-1f1fb":["\uD83C\uDDF1\uD83C\uDDFB",[""]],
		"1f1f1-1f1e7":["\uD83C\uDDF1\uD83C\uDDE7",[""]],
		"1f1f1-1f1f8":["\uD83C\uDDF1\uD83C\uDDF8",[""]],
		"1f1f1-1f1f7":["\uD83C\uDDF1\uD83C\uDDF7",[""]],
		"1f1f1-1f1fe":["\uD83C\uDDF1\uD83C\uDDFE",[""]],
		"1f1f1-1f1ee":["\uD83C\uDDF1\uD83C\uDDEE",[""]],
		"1f1f1-1f1f9":["\uD83C\uDDF1\uD83C\uDDF9",[""]],
		"1f1f1-1f1fa":["\uD83C\uDDF1\uD83C\uDDFA",[""]],
		"1f1f2-1f1f4":["\uD83C\uDDF2\uD83C\uDDF4",[""]],
		"1f1f2-1f1f0":["\uD83C\uDDF2\uD83C\uDDF0",[""]],
		"1f1f2-1f1ec":["\uD83C\uDDF2\uD83C\uDDEC",[""]],
		"1f1f2-1f1fc":["\uD83C\uDDF2\uD83C\uDDFC",[""]],
		"1f1f2-1f1fe":["\uD83C\uDDF2\uD83C\uDDFE",[""]],
		"1f1f2-1f1fb":["\uD83C\uDDF2\uD83C\uDDFB",[""]],
		"1f1f2-1f1f1":["\uD83C\uDDF2\uD83C\uDDF1",[""]],
		"1f1f2-1f1f9":["\uD83C\uDDF2\uD83C\uDDF9",[""]],
		"1f1f2-1f1ed":["\uD83C\uDDF2\uD83C\uDDED",[""]],
		"1f1f2-1f1f7":["\uD83C\uDDF2\uD83C\uDDF7",[""]],
		"1f1f2-1f1fa":["\uD83C\uDDF2\uD83C\uDDFA",[""]],
		"1f1f2-1f1fd":["\uD83C\uDDF2\uD83C\uDDFD",[""]],
		"1f1eb-1f1f2":["\uD83C\uDDEB\uD83C\uDDF2",[""]],
		"1f1f2-1f1e9":["\uD83C\uDDF2\uD83C\uDDE9",[""]],
		"1f1f2-1f1e8":["\uD83C\uDDF2\uD83C\uDDE8",[""]],
		"1f1f2-1f1f3":["\uD83C\uDDF2\uD83C\uDDF3",[""]],
		"1f1f2-1f1ea":["\uD83C\uDDF2\uD83C\uDDEA",[""]],
		"1f1f2-1f1f8":["\uD83C\uDDF2\uD83C\uDDF8",[""]],
		"1f1f2-1f1e6":["\uD83C\uDDF2\uD83C\uDDE6",[""]],
		"1f1f2-1f1ff":["\uD83C\uDDF2\uD83C\uDDFF",[""]],
		"1f1f2-1f1f2":["\uD83C\uDDF2\uD83C\uDDF2",[""]],
		"1f1f3-1f1e6":["\uD83C\uDDF3\uD83C\uDDE6",[""]],
		"1f1f3-1f1f7":["\uD83C\uDDF3\uD83C\uDDF7",[""]],
		"1f1f3-1f1f5":["\uD83C\uDDF3\uD83C\uDDF5",[""]],
		"1f1f3-1f1f1":["\uD83C\uDDF3\uD83C\uDDF1",[""]],
		"1f1f3-1f1e8":["\uD83C\uDDF3\uD83C\uDDE8",[""]],
		"1f1f3-1f1ff":["\uD83C\uDDF3\uD83C\uDDFF",[""]],
		"1f1f3-1f1ee":["\uD83C\uDDF3\uD83C\uDDEE",[""]],
		"1f1f3-1f1ea":["\uD83C\uDDF3\uD83C\uDDEA",[""]],
		"1f1f3-1f1ec":["\uD83C\uDDF3\uD83C\uDDEC",[""]],
		"1f1f3-1f1fa":["\uD83C\uDDF3\uD83C\uDDFA",[""]],
		"1f1f0-1f1f5":["\uD83C\uDDF0\uD83C\uDDF5",[""]],
		"1f1f3-1f1f4":["\uD83C\uDDF3\uD83C\uDDF4",[""]],
		"1f1f4-1f1f2":["\uD83C\uDDF4\uD83C\uDDF2",[""]],
		"1f1f5-1f1f0":["\uD83C\uDDF5\uD83C\uDDF0",[""]],
		"1f1f5-1f1fc":["\uD83C\uDDF5\uD83C\uDDFC",[""]],
		"1f1f5-1f1f8":["\uD83C\uDDF5\uD83C\uDDF8",[""]],
		"1f1f5-1f1e6":["\uD83C\uDDF5\uD83C\uDDE6",[""]],
		"1f1f5-1f1ec":["\uD83C\uDDF5\uD83C\uDDEC",[""]],
		"1f1f5-1f1fe":["\uD83C\uDDF5\uD83C\uDDFE",[""]],
		"1f1f5-1f1ea":["\uD83C\uDDF5\uD83C\uDDEA",[""]],
		"1f1f5-1f1ed":["\uD83C\uDDF5\uD83C\uDDED",[""]],
		"1f1f5-1f1f1":["\uD83C\uDDF5\uD83C\uDDF1",[""]],
		"1f1f5-1f1f9":["\uD83C\uDDF5\uD83C\uDDF9",[""]],
		"1f1f5-1f1f7":["\uD83C\uDDF5\uD83C\uDDF7",[""]],
		"1f1f6-1f1e6":["\uD83C\uDDF6\uD83C\uDDE6",[""]],
		"1f1f7-1f1f4":["\uD83C\uDDF7\uD83C\uDDF4",[""]],
		"1f1f7-1f1fa":["\uD83C\uDDF7\uD83C\uDDFA",[""]],
		"1f1f7-1f1fc":["\uD83C\uDDF7\uD83C\uDDFC",[""]],
		"1f1f8-1f1ed":["\uD83C\uDDF8\uD83C\uDDED",[""]],
		"1f1f0-1f1f3":["\uD83C\uDDF0\uD83C\uDDF3",[""]],
		"1f1f1-1f1e8":["\uD83C\uDDF1\uD83C\uDDE8",[""]],
		"1f1fb-1f1e8":["\uD83C\uDDFB\uD83C\uDDE8",[""]],
		"1f1fc-1f1f8":["\uD83C\uDDFC\uD83C\uDDF8",[""]],
		"1f1f8-1f1f2":["\uD83C\uDDF8\uD83C\uDDF2",[""]],
		"1f1f8-1f1f9":["\uD83C\uDDF8\uD83C\uDDF9",[""]],
		"1f1f8-1f1e6":["\uD83C\uDDF8\uD83C\uDDE6",[""]],
		"1f1f8-1f1f3":["\uD83C\uDDF8\uD83C\uDDF3",[""]],
		"1f1f7-1f1f8":["\uD83C\uDDF7\uD83C\uDDF8",[""]],
		"1f1f8-1f1e8":["\uD83C\uDDF8\uD83C\uDDE8",[""]],
		"1f1f8-1f1f1":["\uD83C\uDDF8\uD83C\uDDF1",[""]],
		"1f1f8-1f1ec":["\uD83C\uDDF8\uD83C\uDDEC",[""]],
		"1f1f8-1f1f0":["\uD83C\uDDF8\uD83C\uDDF0",[""]],
		"1f1f8-1f1ee":["\uD83C\uDDF8\uD83C\uDDEE",[""]],
		"1f1f8-1f1e7":["\uD83C\uDDF8\uD83C\uDDE7",[""]],
		"1f1f8-1f1f4":["\uD83C\uDDF8\uD83C\uDDF4",[""]],
		"1f1ff-1f1e6":["\uD83C\uDDFF\uD83C\uDDE6",[""]],
		"1f1f0-1f1f7":["\uD83C\uDDF0\uD83C\uDDF7",[""]],
		"1f1ea-1f1f8":["\uD83C\uDDEA\uD83C\uDDF8",[""]],
		"1f1f1-1f1f0":["\uD83C\uDDF1\uD83C\uDDF0",[""]],
		"1f1f8-1f1e9":["\uD83C\uDDF8\uD83C\uDDE9",[""]],
		"1f1f8-1f1f7":["\uD83C\uDDF8\uD83C\uDDF7",[""]],
		"1f1f8-1f1ff":["\uD83C\uDDF8\uD83C\uDDFF",[""]],
		"1f1f8-1f1ea":["\uD83C\uDDF8\uD83C\uDDEA",[""]],
		"1f1e8-1f1ed":["\uD83C\uDDE8\uD83C\uDDED",[""]],
		"1f1f8-1f1fe":["\uD83C\uDDF8\uD83C\uDDFE",[""]],
		"1f1f9-1f1fc":["\uD83C\uDDF9\uD83C\uDDFC",[""]],
		"1f1f9-1f1ef":["\uD83C\uDDF9\uD83C\uDDEF",[""]],
		"1f1f9-1f1ff":["\uD83C\uDDF9\uD83C\uDDFF",[""]],
		"1f1f9-1f1ed":["\uD83C\uDDF9\uD83C\uDDED",[""]],
		"1f1f9-1f1f1":["\uD83C\uDDF9\uD83C\uDDF1",[""]],
		"1f1f9-1f1ec":["\uD83C\uDDF9\uD83C\uDDEC",[""]],
		"1f1f9-1f1f4":["\uD83C\uDDF9\uD83C\uDDF4",[""]],
		"1f1f9-1f1f9":["\uD83C\uDDF9\uD83C\uDDF9",[""]],
		"1f1f9-1f1f3":["\uD83C\uDDF9\uD83C\uDDF3",[""]],
		"1f1f9-1f1f7":["\uD83C\uDDF9\uD83C\uDDF7",[""]],
		"1f1f9-1f1f2":["\uD83C\uDDF9\uD83C\uDDF2",[""]],
		"1f1f9-1f1fb":["\uD83C\uDDF9\uD83C\uDDFB",[""]],
		"1f1fa-1f1ec":["\uD83C\uDDFA\uD83C\uDDEC",[""]],
		"1f1fa-1f1e6":["\uD83C\uDDFA\uD83C\uDDE6",[""]],
		"1f1e6-1f1ea":["\uD83C\uDDE6\uD83C\uDDEA",[""]],
		"1f1ec-1f1e7":["\uD83C\uDDEC\uD83C\uDDE7",[""]],
		"1f1fa-1f1f8":["\uD83C\uDDFA\uD83C\uDDF8",[""]],
		"1f1fb-1f1ee":["\uD83C\uDDFB\uD83C\uDDEE",[""]],
		"1f1fa-1f1fe":["\uD83C\uDDFA\uD83C\uDDFE",[""]],
		"1f1fa-1f1ff":["\uD83C\uDDFA\uD83C\uDDFF",[""]],
		"1f1fb-1f1fa":["\uD83C\uDDFB\uD83C\uDDFA",[""]],
		"1f1fb-1f1e6":["\uD83C\uDDFB\uD83C\uDDE6",[""]],
		"1f1fb-1f1ea":["\uD83C\uDDFB\uD83C\uDDEA",[""]],
		"1f1fb-1f1f3":["\uD83C\uDDFB\uD83C\uDDF3",[""]],
		"1f1fc-1f1eb":["\uD83C\uDDFC\uD83C\uDDEB",[""]],
		"1f1ea-1f1ed":["\uD83C\uDDEA\uD83C\uDDED",[""]],
		"1f1fe-1f1ea":["\uD83C\uDDFE\uD83C\uDDEA",[""]],
		"1f1ff-1f1f2":["\uD83C\uDDFF\uD83C\uDDF2",[""]],
		"1f1ff-1f1fc":["\uD83C\uDDFF\uD83C\uDDFC",[""]],
		"1f1f7-1f1ea":["\uD83C\uDDF7\uD83C\uDDEA",[""]],
		"1f1e6-1f1fd":["\uD83C\uDDE6\uD83C\uDDFD",[""]],
		"1f1f9-1f1e6":["\uD83C\uDDF9\uD83C\uDDE6",[""]],
		"1f1ee-1f1f4":["\uD83C\uDDEE\uD83C\uDDF4",[""]],
		"1f1e7-1f1f6":["\uD83C\uDDE7\uD83C\uDDF6",[""]],
		"1f1e8-1f1fd":["\uD83C\uDDE8\uD83C\uDDFD",[""]],
		"1f1e8-1f1e8":["\uD83C\uDDE8\uD83C\uDDE8",[""]],
		"1f1ec-1f1ec":["\uD83C\uDDEC\uD83C\uDDEC",[""]],
		"1f1ee-1f1f2":["\uD83C\uDDEE\uD83C\uDDF2",[""]],
		"1f1fe-1f1f9":["\uD83C\uDDFE\uD83C\uDDF9",[""]],
		"1f1f3-1f1eb":["\uD83C\uDDF3\uD83C\uDDEB",[""]],
		"1f1f5-1f1f3":["\uD83C\uDDF5\uD83C\uDDF3",[""]],
		"1f1e7-1f1f1":["\uD83C\uDDE7\uD83C\uDDF1",[""]],
		"1f1f5-1f1f2":["\uD83C\uDDF5\uD83C\uDDF2",[""]],
		"1f1ec-1f1f8":["\uD83C\uDDEC\uD83C\uDDF8",[""]],
		"1f1f9-1f1f0":["\uD83C\uDDF9\uD83C\uDDF0",[""]],
		"1f1e7-1f1fb":["\uD83C\uDDE7\uD83C\uDDFB",[""]],
		"1f1ed-1f1f2":["\uD83C\uDDED\uD83C\uDDF2",[""]],
		"1f1f8-1f1ef":["\uD83C\uDDF8\uD83C\uDDEF",[""]],
		"1f1fa-1f1f2":["\uD83C\uDDFA\uD83C\uDDF2",[""]],
		"1f1ee-1f1e8":["\uD83C\uDDEE\uD83C\uDDE8",[""]],
		"1f1ea-1f1e6":["\uD83C\uDDEA\uD83C\uDDE6",[""]],
		"1f1e8-1f1f5":["\uD83C\uDDE8\uD83C\uDDF5",[""]],
		// "1f1e9-1f1ec":["\uD83C\uDDE9\uD83C\uDDEC",[""]],
		"1f1e6-1f1f8":["\uD83C\uDDE6\uD83C\uDDF8",[""]],
		"1f1e6-1f1f6":["\uD83C\uDDE6\uD83C\uDDF6",[""]],
		"1f1fb-1f1ec":["\uD83C\uDDFB\uD83C\uDDEC",[""]],
		"1f1e8-1f1f0":["\uD83C\uDDE8\uD83C\uDDF0",[""]],
		"1f1e8-1f1fc":["\uD83C\uDDE8\uD83C\uDDFC",[""]],
		"1f1ea-1f1fa":["\uD83C\uDDEA\uD83C\uDDFA",[""]],
		"1f1ec-1f1eb":["\uD83C\uDDEC\uD83C\uDDEB",[""]],
		"1f1f9-1f1eb":["\uD83C\uDDF9\uD83C\uDDEB",[""]],
		"1f1ec-1f1f5":["\uD83C\uDDEC\uD83C\uDDF5",[""]],
		"1f1f2-1f1f6":["\uD83C\uDDF2\uD83C\uDDF6",[""]],
		"1f1f2-1f1f5":["\uD83C\uDDF2\uD83C\uDDF5",[""]],
		"1f1f8-1f1fd":["\uD83C\uDDF8\uD83C\uDDFD",[""]],
		"1f1f8-1f1f8":["\uD83C\uDDF8\uD83C\uDDF8",[""]],
		"1f1f9-1f1e8":["\uD83C\uDDF9\uD83C\uDDE8",[""]],
		// "1f1f2-1f1eb":["\uD83C\uDDF2\uD83C\uDDEB",[""]]
		"1f970":["\ud83e\udd70",["love"]],
		"1f929":["\ud83e\udd29",["starstruck"]],
		"1f92a":["\ud83e\udd2a",["crazy"]],
		"1f92d":["\ud83e\udd2d",["gasp"]],
		"1f92b":["\ud83e\udd2b",["shushing"]],
		"1f928":["\ud83e\udd28",["contempt"]],
		"1f92e":["\ud83e\udd2e",["vomiting"]],
		"1f975":["\ud83e\udd75",["overheating"]],
		"1f976":["\ud83e\udd76",["freezing"]],
		"1f974":["\ud83e\udd74",["woozy"]],
		"1f92f":["\ud83e\udd2f",["shocked","exploding_head"]],
		"1f973":["\ud83e\udd73",["partying","celebrating"]],
		"1f9d0":["\ud83e\uddd0",["monocle"]],
		"1f97a":["\ud83e\udd7a",["pleading"]],
		"1f971":["\ud83e\udd71",["yawn"]],
		"1f92c":["\ud83e\udd2c",["censored"]],
		"1f9e1":["\ud83e\udde1",["orange_heart"]],
		"1f90e":["\ud83e\udd0e",["brown_heart"]],
		"1f90d":["\ud83e\udd0d",["white_heart"]],
		"1f441-fe0f-200d-1f5e8-fe0f":["\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f",["eye_bubble"]],
		"1f90f":["\ud83e\udd0f",["pinch"]],
		"1f91f":["\ud83e\udd1f",["love_you_gesture"]],
		"1f932":["\ud83e\udd32",["palms_up"]],
		"1f9be":["\ud83e\uddbe",["mech_arm"]],
		"1f9bf":["\ud83e\uddbf",["mech_leg"]],
		"1f9b5":["\ud83e\uddb5",["leg"]],
		"1f9b6":["\ud83e\uddb6",["foot"]],
		"1f9bb":["\ud83e\uddbb",["hearing_aid"]],
		"1f9e0":["\ud83e\udde0",["brain"]],
		"1f9b7":["\ud83e\uddb7",["tooth"]],
		"1f9b4":["\ud83e\uddb4",["bone"]],
		"1f9d2":["\ud83e\uddd2",["child"]],
		"1f9d1":["\ud83e\uddd1",["adult"]],
		"1f9d4":["\ud83e\uddd4",["bearded_person"]],
		"1f471-200d-2642-fe0f":["\ud83d\udc71\u200d\u2642\ufe0f",["blond_man"]],
		"1f468-200d-1f9b0":["\ud83d\udc68\u200d\ud83e\uddb0",["red_haired_man"]],
		"1f468-200d-1f9b1":["\ud83d\udc68\u200d\ud83e\uddb1",["curly_haired_man"]],
		"1f468-200d-1f9b3":["\ud83d\udc68\u200d\ud83e\uddb3",["white_haired_man"]],
		"1f468-200d-1f9b2":["\ud83d\udc68\u200d\ud83e\uddb2",["bald_man"]],
		"1f471-200d-2640-fe0f":["\ud83d\udc71\u200d\u2640\ufe0f",["blond_woman"]],
		"1f469-200d-1f9b0":["\ud83d\udc69\u200d\ud83e\uddb0",["red_haired_woman"]],
		"1f469-200d-1f9b1":["\ud83d\udc69\u200d\ud83e\uddb1",["curly_haired_woman"]],
		"1f469-200d-1f9b3":["\ud83d\udc69\u200d\ud83e\uddb3",["white_haired_woman"]],
		"1f469-200d-1f9b2":["\ud83d\udc69\u200d\ud83e\uddb2",["bald_woman"]],
		"1f9d3":["\ud83e\uddd3",["older_adult"]],
		"1f64d-200d-2642-fe0f":["\ud83d\ude4d\u200d\u2642\ufe0f",["man_frowning"]],
		"1f64d-200d-2640-fe0f":["\ud83d\ude4d\u200d\u2640\ufe0f",["woman_frowning"]],
		"1f64e-200d-2642-fe0f":["\ud83d\ude4e\u200d\u2642\ufe0f",["man_pouting"]],
		"1f64e-200d-2640-fe0f":["\ud83d\ude4e\u200d\u2640\ufe0f",["woman_pouting"]],
		"1f645-200d-2642-fe0f":["\ud83d\ude45\u200d\u2642\ufe0f",["man_gesturing_no"]],
		"1f645-200d-2640-fe0f":["\ud83d\ude45\u200d\u2640\ufe0f",["woman_gesturing_no"]],
		"1f646-200d-2642-fe0f":["\ud83d\ude46\u200d\u2642\ufe0f",["man_gesturing_ok"]],
		"1f646-200d-2640-fe0f":["\ud83d\ude46\u200d\u2640\ufe0f",["woman_gesturing_ok"]],
		"1f481-200d-2642-fe0f":["\ud83d\udc81\u200d\u2642\ufe0f",["man_tipping_hand"]],
		"1f481-200d-2640-fe0f":["\ud83d\udc81\u200d\u2640\ufe0f",["woman_tipping_hand"]],
		"1f64b-200d-2642-fe0f":["\ud83d\ude4b\u200d\u2642\ufe0f",["man_raising_hand"]],
		"1f64b-200d-2640-fe0f":["\ud83d\ude4b\u200d\u2640\ufe0f",["woman_raising_hand"]],
		"1f9cf":["\ud83e\uddcf",["person_deaf"]],
		"1f9cf-200d-2642-fe0f":["\ud83e\uddcf\u200d\u2642\ufe0f",["man_deaf"]],
		"1f9cf-200d-2640-fe0f":["\ud83e\uddcf\u200d\u2640\ufe0f",["woman_deaf"]],
		"1f647-200d-2642-fe0f":["\ud83d\ude47\u200d\u2642\ufe0f",["man_bowing"]],
		"1f647-200d-2640-fe0f":["\ud83d\ude47\u200d\u2640\ufe0f",["woman_bowing"]],
		"1f926-200d-2642-fe0f":["\ud83e\udd26\u200d\u2642\ufe0f",["man_facepalming"]],
		"1f926-200d-2640-fe0f":["\ud83e\udd26\u200d\u2640\ufe0f",["woman_facepalming"]],
		"1f937-200d-2642-fe0f":["\ud83e\udd37\u200d\u2642\ufe0f",["man_shrugging"]],
		"1f937-200d-2640-fe0f":["\ud83e\udd37\u200d\u2640\ufe0f",["woman_shrugging"]],
		"1f468-200d-2695-fe0f":["\ud83d\udc68\u200d\u2695\ufe0f",["man_health_worker"]],
		"1f469-200d-2695-fe0f":["\ud83d\udc69\u200d\u2695\ufe0f",["woman_health_worker"]],
		"1f468-200d-1f393":["\ud83d\udc68\u200d\ud83c\udf93",["man_student"]],
		"1f469-200d-1f393":["\ud83d\udc69\u200d\ud83c\udf93",["woman_student"]],
		"1f468-200d-1f3eb":["\ud83d\udc68\u200d\ud83c\udfeb",["man_teacher"]],
		"1f469-200d-1f3eb":["\ud83d\udc69\u200d\ud83c\udfeb",["woman_teacher"]],
		"1f468-200d-2696-fe0f":["\ud83d\udc68\u200d\u2696\ufe0f",["man_judge"]],
		"1f469-200d-2696-fe0f":["\ud83d\udc69\u200d\u2696\ufe0f",["woman_judge"]],
		"1f468-200d-1f33e":["\ud83d\udc68\u200d\ud83c\udf3e",["man_farmer"]],
		"1f469-200d-1f33e":["\ud83d\udc69\u200d\ud83c\udf3e",["woman_farmer"]],
		"1f468-200d-1f373":["\ud83d\udc68\u200d\ud83c\udf73",["man_cook"]],
		"1f469-200d-1f373":["\ud83d\udc69\u200d\ud83c\udf73",["woman_cook"]],
		"1f468-200d-1f527":["\ud83d\udc68\u200d\ud83d\udd27",["man_mechanic"]],
		"1f469-200d-1f527":["\ud83d\udc69\u200d\ud83d\udd27",["woman_mechanic"]],
		"1f468-200d-1f3ed":["\ud83d\udc68\u200d\ud83c\udfed",["man_factory_worker"]],
		"1f469-200d-1f3ed":["\ud83d\udc69\u200d\ud83c\udfed",["woman_factory_worker"]],
		"1f468-200d-1f4bc":["\ud83d\udc68\u200d\ud83d\udcbc",["man_office_worker"]],
		"1f469-200d-1f4bc":["\ud83d\udc69\u200d\ud83d\udcbc",["woman_office_worker"]],
		"1f468-200d-1f52c":["\ud83d\udc68\u200d\ud83d\udd2c",["man_scientist"]],
		"1f469-200d-1f52c":["\ud83d\udc69\u200d\ud83d\udd2c",["woman_scientist"]],
		"1f468-200d-1f4bb":["\ud83d\udc68\u200d\ud83d\udcbb",["man_technologist"]],
		"1f469-200d-1f4bb":["\ud83d\udc69\u200d\ud83d\udcbb",["woman_technologist"]],
		"1f468-200d-1f3a4":["\ud83d\udc68\u200d\ud83c\udfa4",["man_singer"]],
		"1f469-200d-1f3a4":["\ud83d\udc69\u200d\ud83c\udfa4",["woman_singer"]],
		"1f468-200d-1f3a8":["\ud83d\udc68\u200d\ud83c\udfa8",["man_artist"]],
		"1f469-200d-1f3a8":["\ud83d\udc69\u200d\ud83c\udfa8",["woman_artist"]],
		"1f468-200d-2708-fe0f":["\ud83d\udc68\u200d\u2708\ufe0f",["man_pilot"]],
		"1f469-200d-2708-fe0f":["\ud83d\udc69\u200d\u2708\ufe0f",["woman_pilot"]],
		"1f468-200d-1f680":["\ud83d\udc68\u200d\ud83d\ude80",["man_astronaut"]],
		"1f469-200d-1f680":["\ud83d\udc69\u200d\ud83d\ude80",["woman_astronaut"]],
		"1f468-200d-1f692":["\ud83d\udc68\u200d\ud83d\ude92",["man_firefighter"]],
		"1f469-200d-1f692":["\ud83d\udc69\u200d\ud83d\ude92",["woman_firefighter"]],
		"1f46e-200d-2642-fe0f":["\ud83d\udc6e\u200d\u2642\ufe0f",["man_police_officer"]],
		"1f46e-200d-2640-fe0f":["\ud83d\udc6e\u200d\u2640\ufe0f",["woman_police_officer"]],
		"1f575-fe0f-200d-2642-fe0f":["\ud83d\udd75\ufe0f\u200d\u2642\ufe0f",["man_detective"]],
		"1f575-fe0f-200d-2640-fe0f":["\ud83d\udd75\ufe0f\u200d\u2640\ufe0f",["woman_detective"]],
		"1f482-200d-2642-fe0f":["\ud83d\udc82\u200d\u2642\ufe0f",["man_guard"]],
		"1f482-200d-2640-fe0f":["\ud83d\udc82\u200d\u2640\ufe0f",["woman_guard"]],
		"1f477-200d-2642-fe0f":["\ud83d\udc77\u200d\u2642\ufe0f",["man_construction_worker"]],
		"1f477-200d-2640-fe0f":["\ud83d\udc77\u200d\u2640\ufe0f",["woman_construction_worker"]],
		"1f473-200d-2642-fe0f":["\ud83d\udc73\u200d\u2642\ufe0f",["man_turban"]],
		"1f473-200d-2640-fe0f":["\ud83d\udc73\u200d\u2640\ufe0f",["woman_turban"]],
		"1f9d5":["\ud83e\uddd5",["woman_headscarf"]],
		"1f931":["\ud83e\udd31",["breast_feeding"]],
		"1f9b8":["\ud83e\uddb8",["hero","superhero"]],
		"1f9b8-200d-2642-fe0f":["\ud83e\uddb8\u200d\u2642\ufe0f",["man_hero"]],
		"1f9b8-200d-2640-fe0f":["\ud83e\uddb8\u200d\u2640\ufe0f",["woman_hero"]],
		"1f9b9":["\ud83e\uddb9",["villain","supervillain"]],
		"1f9b9-200d-2642-fe0f":["\ud83e\uddb9\u200d\u2642\ufe0f",["man_villain"]],
		"1f9b9-200d-2640-fe0f":["\ud83e\uddb9\u200d\u2640\ufe0f",["woman_villain"]],
		"1f9d9":["\ud83e\uddd9",["mage"]],
		"1f9d9-200d-2642-fe0f":["\ud83e\uddd9\u200d\u2642\ufe0f",["man_mage"]],
		"1f9d9-200d-2640-fe0f":["\ud83e\uddd9\u200d\u2640\ufe0f",["woman_mage"]],
		"1f9da":["\ud83e\uddda",["fairy"]],
		"1f9da-200d-2642-fe0f":["\ud83e\uddda\u200d\u2642\ufe0f",["man_fairy"]],
		"1f9da-200d-2640-fe0f":["\ud83e\uddda\u200d\u2640\ufe0f",["woman_fairy"]],
		"1f9db":["\ud83e\udddb",["vampire"]],
		"1f9db-200d-2642-fe0f":["\ud83e\udddb\u200d\u2642\ufe0f",["man_vampire"]],
		"1f9db-200d-2640-fe0f":["\ud83e\udddb\u200d\u2640\ufe0f",["woman_vampire"]],
		"1f9dc":["\ud83e\udddc",["merperson"]],
		"1f9dc-200d-2642-fe0f":["\ud83e\udddc\u200d\u2642\ufe0f",["merman"]],
		"1f9dc-200d-2640-fe0f":["\ud83e\udddc\u200d\u2640\ufe0f",["mermaid"]],
		"1f9dd":["\ud83e\udddd",["elf"]],
		"1f9dd-200d-2642-fe0f":["\ud83e\udddd\u200d\u2642\ufe0f",["man_elf"]],
		"1f9dd-200d-2640-fe0f":["\ud83e\udddd\u200d\u2640\ufe0f",["woman_elf"]],
		"1f9de":["\ud83e\uddde",["genie"]],
		"1f9de-200d-2642-fe0f":["\ud83e\uddde\u200d\u2642\ufe0f",["man_genie"]],
		"1f9de-200d-2640-fe0f":["\ud83e\uddde\u200d\u2640\ufe0f",["woman_genie"]],
		"1f9df":["\ud83e\udddf",["zombie"]],
		"1f9df-200d-2642-fe0f":["\ud83e\udddf\u200d\u2642\ufe0f",["man_zombie"]],
		"1f9df-200d-2640-fe0f":["\ud83e\udddf\u200d\u2640\ufe0f",["woman_zombie"]],
		"1f486-200d-2642-fe0f":["\ud83d\udc86\u200d\u2642\ufe0f",["man_getting_face_massage"]],
		"1f486-200d-2640-fe0f":["\ud83d\udc86\u200d\u2640\ufe0f",["woman_getting_face_massage"]],
		"1f487-200d-2642-fe0f":["\ud83d\udc87\u200d\u2642\ufe0f",["man_getting_haircut"]],
		"1f487-200d-2640-fe0f":["\ud83d\udc87\u200d\u2640\ufe0f",["woman_getting_haircut"]],
		"1f6b6-200d-2642-fe0f":["\ud83d\udeb6\u200d\u2642\ufe0f",["man_walking"]],
		"1f6b6-200d-2640-fe0f":["\ud83d\udeb6\u200d\u2640\ufe0f",["woman_walking"]],
		"1f9cd":["\ud83e\uddcd",["person_standing"]],
		"1f9cd-200d-2642-fe0f":["\ud83e\uddcd\u200d\u2642\ufe0f",["man_standing"]],
		"1f9cd-200d-2640-fe0f":["\ud83e\uddcd\u200d\u2640\ufe0f",["woman_standing"]],
		"1f9ce":["\ud83e\uddce",["person_kneeling"]],
		"1f9ce-200d-2642-fe0f":["\ud83e\uddce\u200d\u2642\ufe0f",["man_kneeling"]],
		"1f9ce-200d-2640-fe0f":["\ud83e\uddce\u200d\u2640\ufe0f",["woman_kneeling"]],
		"1f468-200d-1f9af":["\ud83d\udc68\u200d\ud83e\uddaf",["man_probing_cane"]],
		"1f469-200d-1f9af":["\ud83d\udc69\u200d\ud83e\uddaf",["woman_probing_cane"]],
		"1f468-200d-1f9bc":["\ud83d\udc68\u200d\ud83e\uddbc",["man_motor_wheelchair"]],
		"1f469-200d-1f9bc":["\ud83d\udc69\u200d\ud83e\uddbc",["woman_motor_wheelchair"]],
		"1f468-200d-1f9bd":["\ud83d\udc68\u200d\ud83e\uddbd",["man_wheelchair"]],
		"1f469-200d-1f9bd":["\ud83d\udc69\u200d\ud83e\uddbd",["woman_wheelchair"]],
		"1f3c3-200d-2642-fe0f":["\ud83c\udfc3\u200d\u2642\ufe0f",["man_running"]],
		"1f3c3-200d-2640-fe0f":["\ud83c\udfc3\u200d\u2640\ufe0f",["woman_running"]],
		"1f46f-200d-2642-fe0f":["\ud83d\udc6f\u200d\u2642\ufe0f",["men_bunny_ears_partying"]],
		"1f46f-200d-2640-fe0f":["\ud83d\udc6f\u200d\u2640\ufe0f",["women_bunny_ears_partying"]],
		"1f9d6":["\ud83e\uddd6",["person_steamy_room"]],
		"1f9d6-200d-2642-fe0f":["\ud83e\uddd6\u200d\u2642\ufe0f",["man_steamy_room"]],
		"1f9d6-200d-2640-fe0f":["\ud83e\uddd6\u200d\u2640\ufe0f",["woman_steamy_room"]],
		"1f9d7":["\ud83e\uddd7",["person_climbing"]],
		"1f9d7-200d-2642-fe0f":["\ud83e\uddd7\u200d\u2642\ufe0f",["man_climbing"]],
		"1f9d7-200d-2640-fe0f":["\ud83e\uddd7\u200d\u2640\ufe0f",["woman_climbing"]],
		"1f3cc-fe0f-200d-2642-fe0f":["\ud83c\udfcc\ufe0f\u200d\u2642\ufe0f",["man_golfing"]],
		"1f3cc-fe0f-200d-2640-fe0f":["\ud83c\udfcc\ufe0f\u200d\u2640\ufe0f",["woman_golfing"]],
		"1f3c4-200d-2642-fe0f":["\ud83c\udfc4\u200d\u2642\ufe0f",["man_surfing"]],
		"1f3c4-200d-2640-fe0f":["\ud83c\udfc4\u200d\u2640\ufe0f",["woman_surfing"]],
		"1f6a3-200d-2642-fe0f":["\ud83d\udea3\u200d\u2642\ufe0f",["man_rowing_boat"]],
		"1f6a3-200d-2640-fe0f":["\ud83d\udea3\u200d\u2640\ufe0f",["woman_rowing_boat"]],
		"1f3ca-200d-2642-fe0f":["\ud83c\udfca\u200d\u2642\ufe0f",["man_swimming"]],
		"1f3ca-200d-2640-fe0f":["\ud83c\udfca\u200d\u2640\ufe0f",["woman_swimming"]],
		"26f9-fe0f-200d-2642-fe0f":["\u26f9\ufe0f\u200d\u2642\ufe0f",["man_bouncing_ball"]],
		"26f9-fe0f-200d-2640-fe0f":["\u26f9\ufe0f\u200d\u2640\ufe0f",["woman_bouncing_ball"]],
		"1f3cb-fe0f-200d-2642-fe0f":["\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f",["man_lifting_weights"]],
		"1f3cb-fe0f-200d-2640-fe0f":["\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f",["woman_lifting_weights"]],
		"1f6b4-200d-2642-fe0f":["\ud83d\udeb4\u200d\u2642\ufe0f",["man_biking"]],
		"1f6b4-200d-2640-fe0f":["\ud83d\udeb4\u200d\u2640\ufe0f",["woman_biking"]],
		"1f6b5-200d-2642-fe0f":["\ud83d\udeb5\u200d\u2642\ufe0f",["man_mountain_biking"]],
		"1f6b5-200d-2640-fe0f":["\ud83d\udeb5\u200d\u2640\ufe0f",["woman_mountain_biking"]],
		"1f938-200d-2642-fe0f":["\ud83e\udd38\u200d\u2642\ufe0f",["man_cartwheeling"]],
		"1f938-200d-2640-fe0f":["\ud83e\udd38\u200d\u2640\ufe0f",["woman_cartwheeling"]],
		"1f93c-200d-2642-fe0f":["\ud83e\udd3c\u200d\u2642\ufe0f",["men_wrestling"]],
		"1f93c-200d-2640-fe0f":["\ud83e\udd3c\u200d\u2640\ufe0f",["women_wrestling"]],
		"1f93d-200d-2642-fe0f":["\ud83e\udd3d\u200d\u2642\ufe0f",["man_water_polo"]],
		"1f93d-200d-2640-fe0f":["\ud83e\udd3d\u200d\u2640\ufe0f",["woman_water_polo"]],
		"1f93e-200d-2642-fe0f":["\ud83e\udd3e\u200d\u2642\ufe0f",["man_handball"]],
		"1f93e-200d-2640-fe0f":["\ud83e\udd3e\u200d\u2640\ufe0f",["woman_handball"]],
		"1f939-200d-2642-fe0f":["\ud83e\udd39\u200d\u2642\ufe0f",["man_juggling"]],
		"1f939-200d-2640-fe0f":["\ud83e\udd39\u200d\u2640\ufe0f",["woman_juggling"]],
		"1f9d8":["\ud83e\uddd8",["person_lotus_position"]],
		"1f9d8-200d-2642-fe0f":["\ud83e\uddd8\u200d\u2642\ufe0f",["man_lotus_position"]],
		"1f9d8-200d-2640-fe0f":["\ud83e\uddd8\u200d\u2640\ufe0f",["woman_lotus_position"]],
		"1f9d1-200d-1f91d-200d-1f9d1":["\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1",["holding_hands_people"]],
		"1f469-200d-2764-fe0f-200d-1f48b-200d-1f468":["\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68",["kiss_mw","kiss_wm"]],
		"1f468-200d-2764-fe0f-200d-1f48b-200d-1f468":["\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68",["kiss_mm"]],
		"1f469-200d-2764-fe0f-200d-1f48b-200d-1f469":["\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69",["kiss_ww"]],
		"1f469-200d-2764-fe0f-200d-1f468":["\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68",["couple_mw","couple_wm"]],
		"1f468-200d-2764-fe0f-200d-1f468":["\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68",["couple_mm"]],
		"1f469-200d-2764-fe0f-200d-1f469":["\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69",["couple_ww"]],
		"1f468-200d-1f469-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66",["family_mwb"]],
		"1f468-200d-1f469-200d-1f467":["\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67",["family_mwg"]],
		"1f468-200d-1f469-200d-1f467-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66",["family_mwgb"]],
		"1f468-200d-1f469-200d-1f466-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66",["family_mwbb"]],
		"1f468-200d-1f469-200d-1f467-200d-1f467":["\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67",["family_mwgg"]],
		"1f468-200d-1f468-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66",["family_mmb"]],
		"1f468-200d-1f468-200d-1f467":["\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67",["family_mmg"]],
		"1f468-200d-1f468-200d-1f467-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66",["family_mmgb"]],
		"1f468-200d-1f468-200d-1f466-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66",["family_mmbb"]],
		"1f468-200d-1f468-200d-1f467-200d-1f467":["\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67",["family_mmgg"]],
		"1f469-200d-1f469-200d-1f466":["\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66",["family_wwb"]],
		"1f469-200d-1f469-200d-1f467":["\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67",["family_wwg"]],
		"1f469-200d-1f469-200d-1f467-200d-1f466":["\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66",["family_wwgb"]],
		"1f469-200d-1f469-200d-1f466-200d-1f466":["\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66",["family_wwbb"]],
		"1f469-200d-1f469-200d-1f467-200d-1f467":["\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67",["family_wwgg"]],
		"1f468-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc66",["family_mb"]],
		"1f468-200d-1f466-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66",["family_mbb"]],
		"1f468-200d-1f467":["\ud83d\udc68\u200d\ud83d\udc67",["family_mg"]],
		"1f468-200d-1f467-200d-1f466":["\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66",["family_mgb"]],
		"1f468-200d-1f467-200d-1f467":["\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67",["family_mgg"]],
		"1f469-200d-1f466":["\ud83d\udc69\u200d\ud83d\udc66",["family_wb"]],
		"1f469-200d-1f466-200d-1f466":["\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66",["family_wbb"]],
		"1f469-200d-1f467":["\ud83d\udc69\u200d\ud83d\udc67",["family_wg"]],
		"1f469-200d-1f467-200d-1f466":["\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66",["family_wgb"]],
		"1f469-200d-1f467-200d-1f467":["\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67",["family_wgg"]],
		"1f3fb":["\ud83c\udffb",["tone_light","tone1"]],
		"1f3fc":["\ud83c\udffc",["tone_medium_light","tone2"]],
		"1f3fd":["\ud83c\udffd",["tone_medium","tone3"]],
		"1f3fe":["\ud83c\udffe",["tone_medium_dark","tone4"]],
		"1f3ff":["\ud83c\udfff",["tone_dark","tone5"]],
		"1f9b0":["\ud83e\uddb0",["red_hair"]],
		"1f9b1":["\ud83e\uddb1",["curly_hair"]],
		"1f9b3":["\ud83e\uddb3",["white_hair"]],
		"1f9b2":["\ud83e\uddb2",["bald"]],
		"1f9a7":["\ud83e\udda7",["orangutan"]],
		"1f9ae":["\ud83e\uddae",["guide_dog"]],
		"1f415-200d-1f9ba":["\ud83d\udc15\u200d\ud83e\uddba",["service_dog"]],
		"1f99d":["\ud83e\udd9d",["raccoon"]],
		"1f993":["\ud83e\udd93",["zebra"]],
		"1f999":["\ud83e\udd99",["llama"]],
		"1f992":["\ud83e\udd92",["giraffe"]],
		"1f99b":["\ud83e\udd9b",["hippo"]],
		"1f994":["\ud83e\udd94",["hedgehog"]],
		"1f9a5":["\ud83e\udda5",["sloth"]],
		"1f9a6":["\ud83e\udda6",["otter"]],
		"1f9a8":["\ud83e\udda8",["skunk"]],
		"1f998":["\ud83e\udd98",["kangaroo"]],
		"1f9a1":["\ud83e\udda1",["badger"]],
		"1f9a2":["\ud83e\udda2",["swan"]],
		"1f9a9":["\ud83e\udda9",["flamingo"]],
		"1f99a":["\ud83e\udd9a",["peacock"]],
		"1f99c":["\ud83e\udd9c",["parrot"]],
		"1f995":["\ud83e\udd95",["sauropod"]],
		"1f996":["\ud83e\udd96",["trex"]],
		"1f997":["\ud83e\udd97",["cricket"]],
		"1f99f":["\ud83e\udd9f",["mosquito"]],
		"1f9a0":["\ud83e\udda0",["microbe","germ"]],
		"1f96d":["\ud83e\udd6d",["mango"]],
		"1f965":["\ud83e\udd65",["coconut"]],
		"1f96c":["\ud83e\udd6c",["leafy_green"]],
		"1f966":["\ud83e\udd66",["broccoli"]],
		"1f9c4":["\ud83e\uddc4",["garlic"]],
		"1f9c5":["\ud83e\uddc5",["onion"]],
		"1f968":["\ud83e\udd68",["pretzel"]],
		"1f96f":["\ud83e\udd6f",["bagel"]],
		"1f9c7":["\ud83e\uddc7",["waffle"]],
		"1f969":["\ud83e\udd69",["cut_of_meat"]],
		"1f96a":["\ud83e\udd6a",["sandwich"]],
		"1f9c6":["\ud83e\uddc6",["falafel"]],
		"1f963":["\ud83e\udd63",["bowl_spoon"]],
		"1f9c8":["\ud83e\uddc8",["butter"]],
		"1f9c2":["\ud83e\uddc2",["salt"]],
		"1f96b":["\ud83e\udd6b",["canned_food"]],
		"1f96e":["\ud83e\udd6e",["moon_cake"]],
		"1f95f":["\ud83e\udd5f",["dumpling"]],
		"1f960":["\ud83e\udd60",["fortune_cookie"]],
		"1f961":["\ud83e\udd61",["takeout_box"]],
		"1f99e":["\ud83e\udd9e",["lobster"]],
		"1f9aa":["\ud83e\uddaa",["oyster"]],
		"1f9c1":["\ud83e\uddc1",["cupcake"]],
		"1f967":["\ud83e\udd67",["pie"]],
		"1f964":["\ud83e\udd64",["cup_straw"]],
		"1f9c3":["\ud83e\uddc3",["beverage_box","juice_box"]],
		"1f9c9":["\ud83e\uddc9",["mate","yerba_mate"]],
		"1f9ca":["\ud83e\uddca",["ice"]],
		"1f962":["\ud83e\udd62",["chopsticks"]],
		"1f9ed":["\ud83e\udded",["compass"]],
		"1f9f1":["\ud83e\uddf1",["brick"]],
		"1f6d5":["\ud83d\uded5",["hindu_temple"]],
		"1f9bd":["\ud83e\uddbd",["wheelchair"]],
		"1f9bc":["\ud83e\uddbc",["motor_wheelchair"]],
		"1f6fa":["\ud83d\udefa",["auto_rickshaw"]],
		"1f6f9":["\ud83d\udef9",["skateboard"]],
		"1fa82":["\ud83e\ude82",["parachute"]],
		"1f6f8":["\ud83d\udef8",["flying_saucer"]],
		"1f9f3":["\ud83e\uddf3",["luggage"]],
		"1fa90":["\ud83e\ude90",["ringed_planet","saturn"]],
		"1f9e8":["\ud83e\udde8",["firecracker"]],
		"1f9e7":["\ud83e\udde7",["red_envelope"]],
		"1f94e":["\ud83e\udd4e",["softball"]],
		"1f94f":["\ud83e\udd4f",["flying_disc"]],
		"1f94d":["\ud83e\udd4d",["lacrosse"]],
		"1f93f":["\ud83e\udd3f",["diving_mask","scuba_mask"]],
		"1f6f7":["\ud83d\udef7",["sled"]],
		"1f94c":["\ud83e\udd4c",["curling_stone"]],
		"1fa80":["\ud83e\ude80",["yoyo"]],
		"1fa81":["\ud83e\ude81",["kite"]],
		"1f9ff":["\ud83e\uddff",["nazar_amulet"]],
		"1f9e9":["\ud83e\udde9",["jigsaw","puzzle_piece"]],
		"1f9f8":["\ud83e\uddf8",["teddy_bear"]],
		"265f":["\u265f\ufe0f",["chess_pawn"]],
		"1f9f5":["\ud83e\uddf5",["spool"]],
		"1f9f6":["\ud83e\uddf6",["yarn"]],
		"1f97d":["\ud83e\udd7d",["goggles"]],
		"1f97c":["\ud83e\udd7c",["lab_coat"]],
		"1f9ba":["\ud83e\uddba",["safety_vest"]],
		"1f9e3":["\ud83e\udde3",["scarf"]],
		"1f9e4":["\ud83e\udde4",["gloves"]],
		"1f9e5":["\ud83e\udde5",["coat"]],
		"1f9e6":["\ud83e\udde6",["socks"]],
		"1f97b":["\ud83e\udd7b",["sari"]],
		"1fa71":["\ud83e\ude71",["one_piece_swimsuit"]],
		"1fa72":["\ud83e\ude72",["briefs"]],
		"1fa73":["\ud83e\ude73",["shorts"]],
		"1f97e":["\ud83e\udd7e",["hiking_boot"]],
		"1f97f":["\ud83e\udd7f",["flat_shoe"]],
		"1fa70":["\ud83e\ude70",["ballet_shoes"]],
		"1f9e2":["\ud83e\udde2",["billed_cap"]],
		"1fa95":["\ud83e\ude95",["banjo"]],
		"1f9ee":["\ud83e\uddee",["abacus"]],
		"1fa94":["\ud83e\ude94",["diya_lamp"]],
		"1f9fe":["\ud83e\uddfe",["receipt"]],
		"1fa93":["\ud83e\ude93",["axe"]],
		"1f9af":["\ud83e\uddaf",["probing_cane"]],
		"1f9f0":["\ud83e\uddf0",["toolbox"]],
		"1f9f2":["\ud83e\uddf2",["magnet"]],
		"1f9ea":["\ud83e\uddea",["test_tube"]],
		"1f9eb":["\ud83e\uddeb",["petri_dish"]],
		"1f9ec":["\ud83e\uddec",["dna","double_helix"]],
		"1fa78":["\ud83e\ude78",["blood_drop"]],
		"1fa79":["\ud83e\ude79",["bandaid","adhesive_bandage"]],
		"1fa7a":["\ud83e\ude7a",["stethoscope"]],
		"1fa91":["\ud83e\ude91",["chair"]],
		"1fa92":["\ud83e\ude92",["razor"]],
		"1f9f4":["\ud83e\uddf4",["lotion"]],
		"1f9f7":["\ud83e\uddf7",["safety_pin"]],
		"1f9f9":["\ud83e\uddf9",["broom"]],
		"1f9fa":["\ud83e\uddfa",["basket"]],
		"1f9fb":["\ud83e\uddfb",["toilet_paper"]],
		"1f9fc":["\ud83e\uddfc",["soap"]],
		"1f9fd":["\ud83e\uddfd",["sponge"]],
		"1f9ef":["\ud83e\uddef",["fire_extinguisher"]],
		"2640":["\u2640\ufe0f",["female","female_sign"]],
		"2642":["\u2642\ufe0f",["male","male_sign"]],
		"2695":["\u2695\ufe0f",["medical"]],
		"267e":["\u267e\ufe0f",["infinity"]],
		"0023-fe0f-20e3":["#\ufe0f\u20e3",["hash"]],
		"002a-fe0f-20e3":["*\ufe0f\u20e3",["asterisk"]],
		"0030-fe0f-20e3":["0\ufe0f\u20e3",["zero"]],
		"0031-fe0f-20e3":["1\ufe0f\u20e3",["one"]],
		"0032-fe0f-20e3":["2\ufe0f\u20e3",["two"]],
		"0033-fe0f-20e3":["3\ufe0f\u20e3",["three"]],
		"0034-fe0f-20e3":["4\ufe0f\u20e3",["four"]],
		"0035-fe0f-20e3":["5\ufe0f\u20e3",["five"]],
		"0036-fe0f-20e3":["6\ufe0f\u20e3",["six"]],
		"0037-fe0f-20e3":["7\ufe0f\u20e3",["seven"]],
		"0038-fe0f-20e3":["8\ufe0f\u20e3",["eight"]],
		"0039-fe0f-20e3":["9\ufe0f\u20e3",["nine"]],
		"1f7e0":["\ud83d\udfe0",["orange_circle"]],
		"1f7e1":["\ud83d\udfe1",["yellow_circle"]],
		"1f7e2":["\ud83d\udfe2",["green_circle"]],
		"1f7e3":["\ud83d\udfe3",["purple_circle"]],
		"1f7e4":["\ud83d\udfe4",["brown_circle"]],
		"1f7e5":["\ud83d\udfe5",["red_square"]],
		"1f7e7":["\ud83d\udfe7",["orange_square"]],
		"1f7e8":["\ud83d\udfe8",["yellow_square"]],
		"1f7e9":["\ud83d\udfe9",["green_square"]],
		"1f7e6":["\ud83d\udfe6",["blue_square"]],
		"1f7ea":["\ud83d\udfea",["purple_square"]],
		"1f7eb":["\ud83d\udfeb",["brown_square"]],
		"1f3f3-fe0f-200d-1f308":["\ud83c\udff3\ufe0f\u200d\ud83c\udf08",["rainbow_flag"]],
		"1f3f4-200d-2620-fe0f":["\ud83c\udff4\u200d\u2620\ufe0f",["pirate_flag","jolly_roger"]],
		"1f1fa-1f1f3":["\ud83c\uddfa\ud83c\uddf3",["flag_un"]],
		"1f3f4-e0067-e0062-e0065-e006e-e0067-e007f":["\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f",["flag_gbeng","england"]],
		"1f3f4-e0067-e0062-e0073-e0063-e0074-e007f":["\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f",["flag_gbsct","scotland"]],
		"1f3f4-e0067-e0062-e0077-e006c-e0073-e007f":["\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f",["flag_gbwls","wales"]]
	},

	list: {}
};

/*
 1f1f1-1f1fb'.split('-').map(twemoji.convert.fromCodePoint).map(unicodeEscape).join('')
 */



// --- twemoji.js ---

// +++ ../videoplayer/videoplayer.js +++
/**
 *
 * @param {D.VideoPlayerPar} par
 * @constructor
 */
D.VideoPlayer = function(par){
	if( par && !(par instanceof(D.VideoPlayerPar)) ){
		this.par = new D.VideoPlayerPar();
		O2O(this.par, par);
	}else{
		this.par = par || new D.VideoPlayerPar();
	}
	this.node = mkE({
		tag: 'div',
		className: 'VideoPlayer',
		prop: {
			onmousemove: D.closure(this, this.checkControls)
		}
	});
	if( this.noFlexSupport() ){
		addClassName(this.node, 'no-flex');
	}
	this.drawPoster();
	var userSettings = D.store.get('videoPlayer') || {};
	if( userSettings.volume ){
		this.volume = this.defaultVolume = userSettings.volume;
	}
	D.VideoPlayer.videos.push(this);
};
D.VideoPlayer.videos = [];
D.VideoPlayer.handleScroll = function(){
	function isElementVisible(el) {
		var vpWidth = window.innerWidth || document.documentElement.clientWidth;
		var vpHeight = window.innerHeight || document.documentElement.clientHeight;

		if (typeof el.getBoundingClientRect === 'function') {
			var rec = el.getBoundingClientRect();
			var tViz = rec.top >= 0 && rec.top < vpHeight;
			var bViz = rec.bottom > 0 && rec.bottom <= vpHeight;
			var lViz = rec.left >= 0 && rec.left < vpWidth;
			var rViz = rec.right > 0 && rec.right <= vpWidth;
			var vVisible = tViz && bViz;
			var hVisible = lViz && rViz;

			return vVisible && hVisible;
		}
		return false;
	}
	var canPlayVideo = true;
	for( var i in D.VideoPlayer.videos ){
		if( !D.VideoPlayer.videos.hasOwnProperty(i) ){
			continue;
		}
		var video = D.VideoPlayer.videos[i];
		var visible = isElementVisible(video.node);
		if( visible && video.isPlaying ){
			canPlayVideo = false;
		}else if( visible && video.par.autoPlayOnScroll && !video.isPlaying && !video.manuallyPaused && canPlayVideo && !video._replayContainer ){
			video.initPlay(true);
			video.scrollPlay = true;
			canPlayVideo = false;
		}else if( !visible && video.isPlaying && !video.par.ignoreScroll ){
			video.pause(false);
			video.showControls();
		}else if( !visible && video.ended && video.scrollPlay && !video._replayContainer ){
			video.reset();
			video.par.autoPlayOnScroll = true;
		}
	}
};
D.VideoPlayer.prototype = new mkE.Base();
D.VideoPlayer.prototype.isPlaying = false;
D.VideoPlayer.prototype.duration = 0;
D.VideoPlayer.prototype.defaultVolume = 30;
D.VideoPlayer.prototype.volume = 30;
D.VideoPlayer.prototype.fullscreen = false;
D.VideoPlayer.prototype.initialized = false;
D.VideoPlayer.prototype.manuallyPaused = false;
D.VideoPlayer.prototype.error = false;
D.VideoPlayer.prototype.ended = false;
D.VideoPlayer.prototype.scrollPlay = false;
D.VideoPlayer.prototype.statsSeconds = {};
D.VideoPlayer.prototype.previousSecond = null;
D.VideoPlayer.prototype.metadataLoaded = false;
D.VideoPlayer.prototype.noFlexSupport = function(){
	var elem = document.createElement('i');

	// Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
	// common flex features that we can rely on when checking for flex support.
	return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || 'msFlexOrder' in elem.style) /* IE10-specific (2012 flex spec)  */;
};
D.VideoPlayer.prototype.drawPoster = function(){
	this._poster = mkE({
		tag: 'div',
		className: 'poster',
		els: [
			this._posterImage = mkE({
				tag: 'img',
				className: 'posterImage',
				src: this.par.poster,
				prop: {
					onload: D.closure(this, this.onPoster)
				}
			}),
			this._posterPlay = mkE({
				tag: 'div',
				className: 'posterPlay',
				els: [
					{
						tag: 'div'
					}
				],
				onclick: D.closure(this, this.initPlay)
			})
		]
	}).append(this.node);
	if( this.par.placeholder ){
		var sizes = this.fitVideo(this.par.placeholder.maxWidth, this.par.placeholder.maxHeight, this.par.placeholder.width, this.par.placeholder.height);
		this.node.style.maxHeight = this._posterImage.style.maxHeight = this.par.placeholder.maxHeight + 'px';
		this.node.style.height = sizes[1] + 'px';
		this.node.style.backgroundColor = this.par.placeholder.color?this.par.placeholder.color:'#f8f8f8';
	}
	this._titleNode = mkE({
		tag: 'div',
		className: 'videoTitle',
		text: this.par.title
	}).append(this.node);
	if( this.par.secondaryTitle ){
		mkE({
			tag: 'div',
			className: 'secondaryTitle',
			text: this.par.secondaryTitle
		}).append(this._titleNode);
	}
	if( this._posterImage.complete ){
		setTimeout(D.closure(this, this.onPoster), 1);
	}
	if( !this.par.videoReady ){
		this.showEncoding();
	}
};
D.VideoPlayer.prototype.onPoster = function(){
	this.width = this._posterImage.offsetWidth || Math.min(this._posterImage.width, 500);
	if( this.par.width && this.par.height ){
		this.height = Math.round((this.width * this.par.height) / this.par.width) || this._posterImage.offsetHeight;
	}else{
		this.height = this._posterImage.offsetHeight || (this._posterImage.height * (this.width / this._posterImage.width));
	}
	if( this.par.maxWidth && this.width >= this.height && this.width < 500 && this.width >= 400 ){
		this.height = (500 / this.width) * this.height;
		this.width = 500;
	}else if( this.par.maxHeight && this.height > this.width && this.height < 500 && this.height >= 400 ){
		this.width = (500 / this.height) * this.width;
		this.height = 500;
	}
	if( this.height ){
		this.node.style.height = this.height + 'px';
		this._posterImage.style.width = this.width + 'px';
		this._posterImage.style.height = this.height + 'px';
	}
	if( this.width < 260 ){
		addClassName(this.node, 'videoPlayerSmall');
	}
	this.node.style.backgroundColor = '#000000';
	if( this.par.autoplay ){
		this.initPlay();
	}
	this.par.onReady();
};
D.VideoPlayer.prototype.showEncoding = function(){
	this.initialized = true;
	this._posterPlay.remove();
	this.error = true;
	mkE({
		tag: 'div',
		className: 'videoSupportError',
		text: D.Lang.get('comments_video_processing'),
		style: {
			width: '100%',
			minWidth: '100px'
		}
	}).append(this.node);
};
D.VideoPlayer.prototype.initPlay = function(scroll){
	scroll = scroll === true || false;
	if( this.initialized ){
		this.play();
		return;
	}
	this.initialized = true;
	this._posterPlay.remove();
	var testElement = document.createElement('video');
	var isHTML5Video = (typeof(testElement.canPlayType) != 'undefined');
	if( !isHTML5Video || !testElement.canPlayType('video/mp4') ){
		this.showError();
		return;
	}
	addClassName(this.node, 'playerActive');
	this.drawPlayer();
	this.play();
	this.hideControls();
	if( this.par.muted || scroll ){
		this.onVolumeChange(0);
	}else{
		this.onVolumeChange(this.volume);
	}
	if( typeof this.par.onStart == 'function' ){
		this.par.onStart();
	}
};
D.VideoPlayer.prototype.reset = function(){
	if( this.error ){
		return;
	}
	this.pause();
	this.initialized = false;
	this.ended = false;
	this.manuallyPaused = false;
	this._posterPlay.append(this._poster);
	this._posterImage.style.visibility = '';
	removeClassName(this.node, 'playerActive');
	this.player.remove();
	this._overlay.remove();
	this._controlBar.remove();
};
D.VideoPlayer.prototype.showError = function(){
	this.error = true;
	mkE({
		tag: 'div',
		className: 'videoSupportError',
		text: D.Lang.get('video_support_error'),
		style: {
			width: this.width + 'px'
		}
	}).append(this.node);
	new RPC('/say/rq/app.php').send('videoNotSupported', {});
};
D.VideoPlayer.prototype.drawPlayer = function(){
	this.player = mkE({
		tag: 'video',
		className: 'player',
		attr: {
			src: this.par.src,
			poster: this.par.poster,
			width: '100%',
			height: '100%'
		},
		prop: {
			onended: D.closure(this, this.onEnd),
			ontimeupdate: D.closure(this, this.onTimeUpdate),
			onloadedmetadata: D.closure(this, this.onMetadata)
		}
	}).append(this.node);
	if ( this.par.loop ) {
		this.player.setAttribute('loop', 'true');
	}
	mkE({
		tag: 'div',
		className: 'videoShadowOverlay'
	}).append(this.node);
	this.drawControls();
};
D.VideoPlayer.prototype.drawControls = function(){
	if (this.par.link) {
		this._overlay = mkE({
			tag: 'a',
			className: 'videoOverlay',
			prop: {
				target: this.par.linkTarget,
				href: this.par.link,
				onclick: D.closure(this, this.overlayClick)
			}
		}).append(this.node);
	} else {
		this._overlay = mkE({
			tag: 'div',
			className: 'videoOverlay',
			onclick: D.closure(this, this.overlayClick)
		}).append(this.node);
	}
	this._controlBar = mkE({
		tag: 'div',
		className: 'controlBar',
		els: [
			this._playToggle = mkE({
				tag: 'div',
				className: 'playToggle play',
				onclick: D.closure(this, this.playToggle)
			}),
			this._currentTime = mkE({
				tag: 'div',
				className: 'currentTime',
				text: '00:00'
			}),
			{
				tag: 'div',
				className: 'progressBar',
				els: [
					this._progressBarBg = mkE({
						tag: 'div',
						className: 'progressBarBg',
						els: [
							this._progressBarBuffer = mkE({
								tag: 'div',
								className: 'progressBarBuffer'
							}),
							this._progressBarActive = mkE({
								tag: 'div',
								className: 'progressBarActive',
								els: [
									this._progressBarHandle = mkE({
										tag: 'div',
										className: 'progressBarHandle',
										els: [
											{
												tag: 'div'
											}
										]
									})
								],
								style: {
									width: '0%'
								}
							})
						],
						prop: {
							onmouseover: D.closure(this, this.showProgressTooltip),
							onmousemove: D.closure(this, this.showProgressTooltip),
							onmouseout: D.closure(this, this.hideProgressTooltip),
							onclick: D.closure(this, this.onProgressClick)
						}
					}),
					this._tooltip = mkE({
						tag: 'div',
						className: 'tooltip'
					})
				]
			},
			this._totalTime = mkE({
				tag: 'div',
				className: 'totalTime',
				text: '00:00'
			}),
			this._volumeButton = mkE({
				tag: 'div',
				className: 'volumeButton high',
				els: [
					{
						tag: 'div',
						className: 'volumeBar',
						els: [
							this._volumeBarBg = mkE({
								tag: 'div',
								className: 'volumeBarBg',
								els: [
									this._volumeBarActive = mkE({
										tag: 'div',
										className: 'volumeBarActive',
										els: [
											this._volumeBarHandle = mkE({
												tag: 'div',
												className: 'volumeBarHandle',
												els: [
													{
														tag: 'div'
													}
												]
											})
										],
										style: {
											height: '100%'
										}
									})
								],
								onclick: D.closure(this, this.onVolumeClick)
							})
						]
					}
				],
				onclick: D.closure(this, this.toggleVolume)
			}),
			this._toggleFullscreen = mkE({
				tag: 'div',
				className: 'toggleFullscreen notFullscreen',
				onclick: D.closure(this, this.toggleFullscreen)
			})
		]
	}).append(this.node);

	this._progressSlider = new D.VideoPlayer.Slider({
		parent: this._progressBarBg,
		element: this._progressBarActive,
		handle: this._progressBarHandle,
		onStart: D.closure(this, function(player){
			if( player.par.stats ){
				player.sendStats();
			}
			addClassName(player._progressBarHandle, 'active');
		}, this),
		onEnd: D.closure(this, function(player){
			removeClassName(player._progressBarHandle, 'active');
			player.hideTimeTooltip();
		}, this),
		onChange: D.closure(this, this.onProgressChange),
		direction: 'horizontal'
	});

	this._volumeSlider = new D.VideoPlayer.Slider({
		parent: this._volumeBarBg,
		element: this._volumeBarActive,
		handle: this._volumeBarHandle,
		onStart: D.closure(this, function(player){
			addClassName(player._volumeBarHandle, 'active');
			addClassName(player._volumeButton, 'active');
		}, this),
		onEnd: D.closure(this, function(player){
			removeClassName(player._volumeBarHandle, 'active');
			removeClassName(player._volumeButton, 'active');
		}, this),
		onChange: D.closure(this, this.onVolumeChange),
		direction: 'vertical'
	});
};
D.VideoPlayer.prototype.play = function(){
	if( !this.player ){
		return;
	}
	if( typeof Promise !== "undefined" && Promise.toString().indexOf("[native code]") !== -1 ){
		var promise = this.player.play();
		if( promise ){
			promise.then(D.closure( this, function() {
				this.onPlay();
				this.stopOther();
			}))["catch"](D.closure(this, this.onPause));
		}else{
			this.onPlay();
			this.stopOther();
		}
	} else {
		this.player.play();
		this.onPlay();
		this.stopOther();
	}
};
D.VideoPlayer.prototype.onPlay = function(){
	this.isPlaying = true;
	removeClassName(this._playToggle, 'play');
	addClassName(this._playToggle, 'pause');
	this._posterImage.style.visibility = 'hidden';
	if( this.par.stats ) {
		this.statsTimeout();
	}
	this.par.onPlay();
};
D.VideoPlayer.prototype.pause = function(manualPause){
	this.manuallyPaused = manualPause !== false;
	if( this.metadataLoaded ){
		this.player.pause();
	}
	this.onPause();
};
D.VideoPlayer.prototype.onPause = function(){
	if( this.par.stats ){
		this.sendStats();
		clearTimeout(this._statsTimeout);
	}
	this.isPlaying = false;
	removeClassName(this._playToggle, 'pause');
	addClassName(this._playToggle, 'play');
};
D.VideoPlayer.prototype.overlayClick = function(){
	if (this.par.link) {
		this.playToggle();
		return;
	}
	if( typeof this.par.onContainerClick == 'function' ){
		this.par.onContainerClick(this);
		return;
	}
	this.playToggle();
};
D.VideoPlayer.prototype.playToggle = function(){
	if( this.isPlaying ){
		this.pause();
		return;
	}
	this.play();
};
D.VideoPlayer.prototype.onEnd = function(){
	this.par.onEnd();
	this.onPause();
};
D.VideoPlayer.prototype.onTimeUpdate = function(){
	if( !this._progressBarActive || !this._progressBarBuffer ){
		return;
	}
	if( this.par.stats && this._progressSlider && !this._progressSlider.active ){
		var second = Math.round(this.player.currentTime);
		if( this.previousSecond !== second && second <= this.duration ){
			this.previousSecond = second;
			this.statsSeconds[second] = true;
		}
	}
	setNodeText(this._currentTime, this.secondsToString(this.player.currentTime));
	var percent = (this.player.currentTime * 100) / this.duration;
	this._progressBarActive.style.width = percent + '%';
	if( this.player.buffered.length == 1 && this.player.buffered.start(0) == 0 ){
		percent = (this.player.buffered.end(0) * 100) / this.duration;
		this._progressBarBuffer.style.width = percent + '%';
	}
	if( this.par.onTimeUpdate ){
		this.par.onTimeUpdate(this.player.currentTime);
	}
	if( this.player.currentTime == this.duration ){
		this.ended = true;
		if ( !this.par.loop ) {
			this.drawReplay();
		}
	}
};
D.VideoPlayer.prototype.onMetadata = function(){
	this.duration = this.player.duration;
	this.metadataLoaded = true;
	setNodeText(this._totalTime, this.secondsToString(this.duration));
	if( this.par.startTime ){
		this.player.currentTime = this.par.startTime;
	}
};
D.VideoPlayer.prototype.secondsToString = function(totalSec){
	var hours = parseInt( totalSec / 3600 ) % 24;
	var minutes = parseInt( totalSec / 60 ) % 60;
	var seconds = parseInt( totalSec % 60 );
	var output = (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
	if( parseInt( this.duration / 3600 ) % 24 ){
		output = (hours < 10 ? '0' + hours : hours) + ':' + output;
	}
	return output;
};
D.VideoPlayer.prototype.onProgressChange = function(value){
	if( !this.metadataLoaded || !this.initialized  || isNaN(value) ){
		return;
	}
	this.player.currentTime = (this.duration / 100) * value;
	this.showTimeTooltip(value);
};
D.VideoPlayer.prototype.onVolumeChange = function(value){
	if( value < 0 ){
		value = 0;
	}else if( value > 100 ){
		value = 100;
	}
	this.volume = value;
	this.player.volume = Math.min(1, value / 100);
	this.player.muted = !value;
	removeClassName(this._volumeButton, 'high');
	removeClassName(this._volumeButton, 'medium');
	removeClassName(this._volumeButton, 'low');
	removeClassName(this._volumeButton, 'muted');
	var className = 'high';
	if( value == 0 ){
		className = 'muted'
	}else if( value < 50 ){
		className = 'medium';
	}
	addClassName(this._volumeButton, className);
	this._volumeBarActive.style.height = value + '%';
	if( value > 0 ){
		var userSettings = D.store.get('videoPlayer') || {};
		userSettings.volume = value;
		D.store.set('videoPlayer', userSettings);
	}
};
D.VideoPlayer.prototype.showTimeTooltip = function(value){
	this.hideTimeTooltip();
	if( !isFinite(value) || isNaN(value) ){
		return;
	}
	var text = this.secondsToString((this.duration / 100) * value);
	setNodeText(this._tooltip, text);

	this._tooltip.style.visibility = 'visible';
	var tooltipWidth = this._tooltip.offsetWidth;
	this._tooltip.style.marginLeft = (-1 * (tooltipWidth / 2)) + 'px';
	this._tooltip.style.left = value + '%';
};
D.VideoPlayer.prototype.hideTimeTooltip = function(){
	this._tooltip.style.visibility = 'hidden';
};
D.VideoPlayer.prototype.showProgressTooltip = function(e){
	if( this._progressSlider.active || this._volumeSlider.active ){
		return;
	}
	var offset = e.target == this._progressBarHandle ? e.offsetX + this._progressBarHandle.offsetLeft : e.offsetX;
	this.showTimeTooltip((offset * 100) / this._progressBarBg.offsetWidth);
};
D.VideoPlayer.prototype.hideProgressTooltip = function(){
	if( this._progressSlider.active || this._volumeSlider.active ){
		return;
	}
	this.hideTimeTooltip();
};
D.VideoPlayer.prototype.onProgressClick = function(e){
	if( this.par.stats ){
		this.sendStats();
	}
	if( !this.metadataLoaded ){
		return;
	}
	if( !this._progressBarBg.offsetWidth ){
		return;
	}
	var offset = Math.max(0, (e.target == this._progressBarHandle ? e.offsetX + this._progressBarHandle.offsetLeft : e.offsetX));
	this.player.currentTime = (this.duration / 100) * ((offset * 100) / this._progressBarBg.offsetWidth);
};
D.VideoPlayer.prototype.onVolumeClick = function(e){
	if( e.target == this._volumeBarHandle ){
		return;
	}
	var offset = e.target == this._volumeBarHandle ? e.offsetY + this._volumeBarHandle.offsetTop : e.offsetY;
	var volume = 100 - ((offset * 100) / this._volumeBarBg.offsetHeight);
	this.onVolumeChange(volume);
};
D.VideoPlayer.prototype.toggleFullscreen = function(){
	if( !document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ){
		if( document.documentElement.requestFullscreen ){
			this.bindFullscreen();
			this.node.requestFullscreen();
		}else if( document.documentElement.msRequestFullscreen ){
			this.bindFullscreen();
			this.node.msRequestFullscreen();
		}else if( document.documentElement.mozRequestFullScreen ){
			this.bindFullscreen();
			this.node.mozRequestFullScreen();
		}else if( document.documentElement.webkitRequestFullscreen){
			this.bindFullscreen();
			this.node.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
		}
	}else{
		if( document.exitFullscreen ){
			document.exitFullscreen();
		}else if( document.msExitFullscreen ) {
			document.msExitFullscreen();
		}else if( document.mozCancelFullScreen ){
			document.mozCancelFullScreen();
		}else if( document.webkitExitFullscreen ){
			document.webkitExitFullscreen();
		}
	}
};
D.VideoPlayer.prototype.bindFullscreen = function(){
	$(document).bind('webkitfullscreenchange.videoPlayer', D.closure(this, this.fullscreenEvent));
	$(document).bind('mozfullscreenchange.videoPlayer', D.closure(this, this.fullscreenEvent));
	$(document).bind('fullscreenchange.videoPlayer', D.closure(this, this.fullscreenEvent));
	$(document).bind('MSFullscreenChange.videoPlayer', D.closure(this, this.fullscreenEvent));
};
D.VideoPlayer.prototype.fullscreenEvent = function(){
	if( this.fullscreen ){
		this.exitFullscreen();
	}else{
		this.onFullscreen();
	}
};
D.VideoPlayer.prototype.onFullscreen = function(){
	this.fullscreen = true;
	addClassName(this.node, 'fullscreen');
	removeClassName(this._toggleFullscreen, 'notFullscreen');
	addClassName(this._toggleFullscreen, 'isFullscreen');
	this.node.style.width = '100%';
	this.node.style.height = '100%';
};
D.VideoPlayer.prototype.exitFullscreen = function(){
	this.fullscreen = false;
	removeClassName(this.node, 'fullscreen');
	addClassName(this._toggleFullscreen, 'notFullscreen');
	removeClassName(this._toggleFullscreen, 'isFullscreen');
	//this.node.style.width = this.width + 'px';
	this.node.style.height = this.height + 'px';

	$(document).unbind('webkitfullscreenchange.videoPlayer');
	$(document).unbind('mozfullscreenchange.videoPlayer');
	$(document).unbind('fullscreenchange.videoPlayer');
	$(document).unbind('MSFullscreenChange.videoPlayer');
};
D.VideoPlayer.prototype.toggleVolume = function(e){
	if( e.target != this._volumeButton ){
		return;
	}

	if( this.volume ){
		this.previousVolume = this.volume;
		this.onVolumeChange(0);
		this._volumeBarActive.style.height = '0%';
	}else{
		var volume = this.previousVolume || this.defaultVolume;
		this.onVolumeChange(volume);
		this._volumeBarActive.style.height = volume + '%';
	}
};
D.VideoPlayer.prototype.stopOther = function(){
	for( var i in D.VideoPlayer.videos ){
		if( !D.VideoPlayer.videos.hasOwnProperty(i) ){
			continue;
		}
		var video = D.VideoPlayer.videos[i];
		if( video != this && video.isPlaying ){
			video.pause(false);
			video.showControls();
		}
	}
};
D.VideoPlayer.prototype.checkControls = function(){
	if( !this._controlBar ){
		return;
	}
	if( this._replayContainer ){
		return;
	}
	this.showControls();
	if( !this.isPlaying ){
		return;
	}
	this._hideTimeout = setTimeout(D.closure(this, this.hideControls), 3000);
};
D.VideoPlayer.prototype.showControls = function(){
	// ja ir links, tad nerādam kontroļus
	if (this.par.link) {
		// return; tgd rādam
	}
	removeClassName(this._controlBar, 'hide');
	removeClassName(this._overlay, 'hide');
	removeClassName(this.node, 'hideControls');
	if( this._hideTimeout ){
		clearTimeout(this._hideTimeout);
	}
};
D.VideoPlayer.prototype.hideControls = function(){
	addClassName(this._controlBar, 'hide');
	addClassName(this._overlay, 'hide');
	addClassName(this.node, 'hideControls');
};
D.VideoPlayer.prototype.fitVideo = function(maxW, maxH, currW, currH){
	var ratio = 0;

	if(currW > maxW){
		ratio = maxW / currW;   // get ratio for scaling image
		currH = currH * ratio;    // Reset height to match scaled image
		currW = currW * ratio;    // Reset width to match scaled image
	}

	// Check if current height is larger than max
	if(currH > maxH){
		ratio = maxH / currH; // get ratio for scaling image
		currW = currW * ratio;    // Reset width to match scaled image
		currH = currH * ratio;    // Reset height to match scaled image
	}

	return [currW, currH];
};
D.VideoPlayer.prototype.sendStats = function(){
	if( this._statsTimeout ){
		clearTimeout(this._statsTimeout);
	}
	if( empty(this.statsSeconds) ){
		this.statsTimeout();
		return;
	}
	var seconds = [];
	for( var k in this.statsSeconds ){
		if( !this.statsSeconds.hasOwnProperty(k) ){
			continue;
		}
		seconds.push(k);
	}
	this.statsSeconds = {};
	if( this.par.statsMethod && typeof this.par.statsMethod == 'function' ){
		this.par.statsMethod({
			uid: this.par.stats.uid,
			id: this.par.stats.pid,
			type: this.par.stats.type,
			seconds: seconds
		});
	}else{
		$.ajax({
			url:'//tw.ifrype.com/say/video/' + this.par.stats.uid + '/' + this.par.stats.pid + ':' + this.par.stats.type + '/' + seconds.join(','),
			crossDomain:true,
			dataType:'jsonp'
		});
	}
	this.statsTimeout();
};
D.VideoPlayer.prototype.statsTimeout = function(){
	if( this._statsTimeout ){
		clearTimeout(this._statsTimeout);
	}
	this._statsTimeout = setTimeout(D.closure(this, this.sendStats), 1000);
};
D.VideoPlayer.prototype.drawReplay = function(){
	if( this._replayContainer ){
		return;
	}
	this.hideControls();
	this._replayContainer = mkE({
		tag: 'div',
		className: 'replayContainer',
		onclick: D.closure(this, this.replay),
		els: [
			{
				tag: 'div',
				className: 'replayButton'
			},
			{
				tag: 'div',
				className: 'replayText',
				text: 'Atkārtot'
			}
		]
	}).append(this.node);
};
D.VideoPlayer.prototype.replay = function(){
	this._replayContainer.remove();
	this._replayContainer = null;
	this.ended = false;
	this.play();
};

D.VideoPlayerPar = function(){};
D.VideoPlayerPar.prototype = {};
D.VideoPlayerPar.prototype.width = 0;
D.VideoPlayerPar.prototype.height = 0;
D.VideoPlayerPar.prototype.src = '';
D.VideoPlayerPar.prototype.poster = '';
D.VideoPlayerPar.prototype.autoplay = false;
D.VideoPlayerPar.prototype.autoplayOnScroll = false;
D.VideoPlayerPar.prototype.loop = false;
D.VideoPlayerPar.prototype.muted = false;
D.VideoPlayerPar.prototype.controls = true;
D.VideoPlayerPar.prototype.onStart = function(){};
D.VideoPlayerPar.prototype.onPause = function(){};
D.VideoPlayerPar.prototype.onPlay = function(){};
D.VideoPlayerPar.prototype.onEnd = function(){};
D.VideoPlayerPar.prototype.onContainerClick = null;
D.VideoPlayerPar.prototype.onTimeUpdate = function(){};
D.VideoPlayerPar.prototype.startTime = 0;
D.VideoPlayerPar.prototype.title = '';
D.VideoPlayerPar.prototype.videoReady = true;
D.VideoPlayerPar.prototype.stats = null;
D.VideoPlayerPar.prototype.statsMethod = null;
D.VideoPlayerPar.prototype.link = false;
D.VideoPlayerPar.prototype.linkTarget = '_blank';
D.VideoPlayerPar.prototype.onReady = D.doNothing;
D.VideoPlayerPar.prototype.maxWidth = 0;
D.VideoPlayerPar.prototype.maxHeight = 0;
D.VideoPlayerPar.prototype.ignoreScroll = false;

/**
 *
 * @param {D.VideoPlayer.SliderPar|Object} par
 * @constructor
 */
D.VideoPlayer.Slider = function(par){
	this.par = par;
	this.handle = par.handle;
	this.parent = par.parent;
	this.element = par.element;
	this.direction = par.direction;
	this.onChange = par.onChange || function(){};
	this.onStart = par.onStart || function(){};
	this.onEnd = par.onEnd || function(){};
	this.active = false;
	this.handle.onmousedown = D.closure(this, this.onMouseDown);
};
D.VideoPlayer.Slider.prototype = {
	onMouseDown: function(){
		this.active = true;
		this.onStart();
		this.mouseX = D.mouseX;
		this.mouseY = D.mouseY;
		this.mouseDown();
	},
	mouseDown: function(){
		var mouseUp = D.closure(this, this.onMouseUp);
		$(document.body).bind('mousemove.videoSlider', D.closure(this, this.mouseMove));
		$(document).bind('mouseup.videoSlider', mouseUp);
	},
	onMouseUp: function(){
		$(document).unbind('mouseup.videoSlider');
		$(document.body).unbind('mousemove.videoSlider');
		this.onEnd();
		this.active = false;
	},
	mouseMove: function(){
		var deltaX = D.mouseX - this.mouseX;
		var deltaY = D.mouseY - this.mouseY;

		this.mouseX = D.mouseX;
		this.mouseY = D.mouseY;

		var maxWidth = this.parent.offsetWidth;
		var maxHeight = this.parent.offsetHeight;

		var currentWidth = this.element.offsetWidth;
		var currentHeight = this.element.offsetHeight;

		var percent;

		if( this.direction == 'horizontal' ){
			percent = ((Math.min(maxWidth, (Math.max(0, currentWidth + deltaX))) * 100) / maxWidth);
			this.element.style.width = percent + '%';
		}else{
			percent = ((Math.min(maxHeight, (Math.max(0, currentHeight - deltaY))) * 100) / maxHeight);
			this.element.style.height = percent + '%';
		}
		this.onChange(percent);
	}
};

D.VideoPlayer.SliderPar = function(){};
D.VideoPlayer.SliderPar.prototype = {};
D.VideoPlayer.SliderPar.prototype.parent = null;
D.VideoPlayer.SliderPar.prototype.element = null;
D.VideoPlayer.SliderPar.prototype.handle = null;
D.VideoPlayer.SliderPar.prototype.onStart = function(){};
D.VideoPlayer.SliderPar.prototype.onChange = function(){};
D.VideoPlayer.SliderPar.prototype.onEnd = function(){};
D.VideoPlayer.SliderPar.prototype.direction = 'horizontal';

$(window).on('DOMContentLoaded.videoPlayer load.videoPlayer resize.videoPlayer scroll.videoPlayer', D.VideoPlayer.handleScroll);
// --- ../videoplayer/videoplayer.js ---

// +++ ../gifplayer/gifplayer.js +++
D.GifPlayer = Class.define(function(){
	return Class(
		/**
		 * @lends {D.GifPlayer#}
		 */
		{
			par: null,
			node: null,
			isPlaying: false,
			initialized: false,
			manuallyPaused: false,
			error: false,
			/**
			 *
			 * @param {D.GifPlayerPar} par
			 * @constructs
			 */
			__construct: function(par){
				this.par = par || new D.GifPlayerPar;
				this.pool = par.pool || 'default';
				this.node = mkE({
					tag: 'div',
					className: 'GifPlayer',
					prop: {
						onmouseover: this.setActive,
						onmousemove: this.setActive
					}
				});
				this.drawPoster();
				if( !D.GifPlayer.gifs[this.pool] ){
					D.GifPlayer.gifs[this.pool] = [];
				}
				D.GifPlayer.gifs[this.pool].push(this);
			},
			append: function(el){
				return this.node.append(el);
			},
			remove: function(){
				return this.node.remove();
			},
			drawPoster: function(){
				this._poster = mkE({
					tag: 'div',
					className: 'poster',
					els: [
						this._posterImage = mkE({
							tag: 'img',
							className: 'posterImage',
							src: this.par.poster,
							prop: {
								onload: this.onPoster
							}
						}),
						this._posterImageOverlay = mkE({
							tag: 'div',
							className: 'posterImageOverlay'
						}),
						this._posterPlay = mkE({
							tag: 'div',
							className: 'posterPlay',
							els: [
								{
									tag: 'div'
								}
							],
							onclick: this.initPlay
						})
					]
				}).append(this.node);
				this.titleContainerNode = mkE({
					tag: 'div',
					className: 'titleContainer'
				}).append(this.node);
				if( this.par.title ){
					this.titleNode = mkE({
						tag: 'div',
						className: 'title',
						text: this.par.title
					}).append(this.titleContainerNode);
				}
				this.setActive();
				if( this.par.secondaryTitle ){
					this.secondaryTitleNode = mkE({
						tag: 'div',
						className: 'secondaryTitle',
						text: this.par.secondaryTitle
					}).append(this.titleContainerNode);
				}
				if( this._posterImage.complete ){
					setTimeout(this.onPoster, 1);
				}
			},
			onPoster: function(){
				this.width = this._posterImage.offsetWidth || Math.min(this._posterImage.width, 500);
				this.height = this._posterImage.offsetHeight || (this._posterImage.height * (this.width / this._posterImage.width));
				this.node.style.width = this.width + 'px';
				if( this.height ){
					this.node.style.height = this.height + 'px';
				}
				this.node.style.backgroundColor = '#000000';
				if( this.par.autoplay ){
					this.initPlay();
				}
				this.par.onReady();
			},
			initPlay: function(){
				if( this.initialized ){
					this.play();
					return;
				}
				this.initialized = true;
				this._posterPlay.remove();
				if( !D.GifPlayer.hasFlash && !D.GifPlayer.hasHTML5 ){
					this.showError();
					return;
				}
				this._playButton = mkE({
					tag: 'div',
					className: 'playButton',
					els: [
						{
							tag: 'div'
						}
					],
					onclick: this.play
				});
				if( D.GifPlayer.hasHTML5 ){
					this.drawHTML5Player();
					this.play();
				}else{
					this.drawFlashPlayer();
				}
				this._overlay = mkE({
					tag: 'div',
					className: 'playerOverlay',
					onclick: this.overlayClick
				}).append(this.node);
			},
			showError: function(){
				this.error = true;
				mkE({
					tag: 'div',
					className: 'supportError',
					text: D.Lang.get('video_support_error'),
					style: {
						width: this.width + 'px'
					}
				}).append(this.node);
				new RPC('/say/rq/app.php').send('gifNotSupported', {});
			},
			drawHTML5Player: function(){
				this.player = mkE({
					tag: 'video',
					className: 'player',
					attr: {
						src: this.par.src,
						poster: this.par.poster,
						loop: true,
						muted: true
					},
					prop: {
						onerror: this.onHTML5error
					}
				}).append(this.node);
			},
			onHTML5error: function(){
				D.GifPlayer.hasHTML5 = false;
				this.pause();
				this.drawFlashPlayer();
			},
			drawFlashPlayer: function(){
				if(!D.GifPlayer.hasFlash){
					return;
				}
				this.player = mkE({
					tag: 'div',
					className: 'player flashPlayer'
				}).append(this.node);
				var so = new SWFObject( D.PIMG + 'js/gifplayer/gifplayer.swf', 'gifSwf', this.width, this.height, 0, '#FFFFFF' );
				so.addParam( 'wmode', 'transparent' );
				so.addParam( 'quality', 'best' );
				so.addParam( 'play', 'true' );
				so.addParam( 'allowScriptAccess', 'always' );
				so.addParam( 'scale', 'scale' );
				so.addParam( 'salign', 'tl' );
				so.addVariable( 'imgur_video', this.par.src );
				so.addVariable( 'imgur_width', this.width );
				so.addVariable( 'imgur_height', this.height );
				so.addVariable( 'imgur_url', '' );
				so.addVariable( 'width', this.width );
				so.addVariable( 'height', this.height );
				so.write( this.player );

				this.isPlaying = true;
			},
			play: function(){
				this.stopOther();
				if( !D.GifPlayer.hasHTML5 ){
					this.drawFlashPlayer();
					return;
				}
				if( !this.player ){
					return;
				}
				if( typeof Promise !== "undefined" && Promise.toString().indexOf("[native code]") !== -1 ){
					var promise = this.player.play();
					if( promise ){
						promise.then(D.closure( this, function() {
							this.onPlay();
						}))["catch"](D.closure(this, this.onPause));
					}else{
						this.onPlay();
					}
				}else{
					this.player.play();
					this.onPlay();
				}
			},
			onPlay: function(){
				this.isPlaying = true;
				this._playButton.remove();
			},
			pause: function(manualPause){
				this.manuallyPaused = manualPause !== false;
				if( !D.GifPlayer.hasHTML5 ){
					this.reset();
					return;
				}
				if( !this.player ){
					return;
				}
				this.player.pause();
				this.onPause();
			},
			onPause: function(){
				this.isPlaying = false;
				this._playButton.append(this.node);
				this.setActive();
			},
			reset: function(){
				if( this.error ){
					return;
				}
				this.initialized = false;
				this.isPlaying = false;
				this._posterPlay.append(this._poster);
				this.player.remove();
				this._overlay.remove();
				this.manuallyPaused = false;
				this._playButton.remove();
				this.setActive();
			},
			overlayClick: function(){
				if( typeof this.par.onOverlayClick == 'function' ){
					this.par.onOverlayClick(this);
					return;
				}
				this.playToggle();
			},
			playToggle: function(){
				if( this.isPlaying ){
					this.pause();
					return;
				}
				this.play();
			},
			isVisible: function(){
				var vpWidth = window.innerWidth || document.documentElement.clientWidth;
				var vpHeight = window.innerHeight || document.documentElement.clientHeight;

				if( typeof this.node.getBoundingClientRect === 'function' ){
					var rec = this.node.getBoundingClientRect();
					var tViz = rec.top >= 0 && rec.top < vpHeight;
					var bViz = rec.bottom > 0 && rec.bottom <= vpHeight;
					var lViz = rec.left >= 0 && rec.left < vpWidth;
					var rViz = rec.right > 0 && rec.right <= vpWidth;
					var vVisible = tViz && bViz;
					var hVisible = lViz && rViz;

					return vVisible && hVisible;
				}
				return false;
			},
			stopOther: function(){
				if( !D.GifPlayer.gifs[this.pool] ){
					return;
				}
				for( var i in D.GifPlayer.gifs[this.pool] ){
					if( !D.GifPlayer.gifs[this.pool].hasOwnProperty(i) ){
						continue;
					}
					var gif = D.GifPlayer.gifs[this.pool][i];
					if( gif != this && gif.isPlaying ){
						gif.pause(false);
					}
				}
			},
			setInactive: function(){
				if( this._inactiveTimeout ){
					clearTimeout(this._inactiveTimeout);
				}
				if( !this.isPlaying ){
					this._inactiveTimeout = setTimeout(this.setInactive, 3000);
					return;
				}
				addClassName(this.node, 'inactive');
			},
			setActive: function(){
				if( this._inactiveTimeout ){
					clearTimeout(this._inactiveTimeout);
				}
				removeClassName(this.node, 'inactive');
				this._inactiveTimeout = setTimeout(this.setInactive, 3000);
			}
		}
	)
});
D.GifPlayer.checkFlash = function(){
	try{
		return Boolean((typeof navigator.plugins == "undefined" || navigator.plugins.length == 0) ? !!(new ActiveXObject("ShockwaveFlash.ShockwaveFlash")) : navigator.plugins["Shockwave Flash"]);
	}catch(e){
		return false;
	}
};
D.GifPlayer.hasFlash = D.GifPlayer.checkFlash();
D.GifPlayer.hasHTML5 = typeof(document.createElement('video').canPlayType) != 'undefined';
/** @type {Object.<Array.<D.GifPlayer>>} */
D.GifPlayer.gifs = {};
D.GifPlayer.handleScroll = function(){
	for( var i in D.GifPlayer.gifs ){
		if( !D.GifPlayer.gifs.hasOwnProperty(i) ){
			continue;
		}
		var canPlayVideo = true;
		var pool = D.GifPlayer.gifs[i];
		for( var j in pool ){
			if( !pool.hasOwnProperty(j) ){
				continue;
			}
			var gif = pool[j];
			var visible = gif.isVisible();
			if( visible && gif.isPlaying ){
				canPlayVideo = false;
			}else if( visible && gif.par.autoPlayOnScroll && !gif.isPlaying && !gif.manuallyPaused && canPlayVideo ){
				gif.initPlay(true);
				canPlayVideo = false;
			}else if( !visible && gif.isPlaying ){
				gif.reset();
			}
		}
	}
};

D.GifPlayerPar = function(){};
D.GifPlayerPar.prototype.src = null;
D.GifPlayerPar.prototype.poster = null;
D.GifPlayerPar.prototype.width = 0;
D.GifPlayerPar.prototype.height = 0;
D.GifPlayerPar.prototype.autoplay = false;
D.GifPlayerPar.prototype.autoplayOnScroll = false;
D.GifPlayerPar.prototype.onOverlayClick = null;
D.GifPlayerPar.prototype.title = null;
D.GifPlayerPar.prototype.secondaryTitle = null;
D.GifPlayerPar.prototype.onReady = D.doNothing;
D.GifPlayerPar.prototype.pool = 'default';

$(window).on('DOMContentLoaded.gifPlayer load.gifPlayer resize.gifPlayer scroll.gifPlayer', D.GifPlayer.handleScroll);
// --- ../gifplayer/gifplayer.js ---

// +++ ../pymk_scroll.js +++
/**
 * @class
 * @extends {mkE.Base}
 * @param {DR.users.struct.PYMKMainRe} data
 * @param {String} [statsPrefix]
 */
D.PYMKScroll = Class(
	/**
	 * @lends {D.PYMKScroll#}
	 */
	{
		itemWidth: 144,
		itemMargin: 8,
		/**
		 * @param {DR.users.struct.PYMKMainRe} data
		 * @param {String} [statsPrefix]
		 * @constructs
		 */
		__construct: function(data, statsPrefix){
			this.data = data;
			this.statsPrefix = statsPrefix || 'pymk_scroll_';
			this.pg = 1;
			this.pgs = data.pgs;
			this.loadedPages = 1;
			this.loadingPage = null;
			this.offsetLeft = 0;
			this.count = data.items.length;
			this._disabledLeft = null;
			this._disabledRight = null;
			this._users = new D.SortedMap();

			this.node = mkE({
				tag: 'div',
				className: 'PYMKScroll'
			});

			mkE({
				tag: 'div',
				className: 'container',
				els: [
					this._prevButton = mkE({
						tag: 'a',
						className: 'prevButton pageButton',
						onclick: this._previousPage,
						els: [
							{
								tag: 'div',
								className: 'circle',
								els: [
									T.svgIcon({
										icon: 'arrow-1-le',
										size: 24,
										fill: false
									})
								]
							}
						]
					}),
					this._usersNode = mkE({
						tag: 'div',
						className: 'users'
					}),
					this._nextButton = mkE({
						tag: 'a',
						className: 'nextButton pageButton',
						onclick: this._nextPage,
						els: [
							{
								tag: 'div',
								className: 'circle',
								els: [
									T.svgIcon({
										icon: 'arrow-1-ri',
										size: 24,
										fill: false
									})
								]
							}
						]
					})
				]
			}).append(this.node);

			shuffle(data.items);

			this._addUsers(data);
			this._doMagic();
		},

		_addUsers: function(data){
			for( var i = 0, l = data.items.length; i < l; i++ ){
				var userData = data.items[i];
				if( this._users.get(userData.user.id) ){
					continue;
				}
				var user = new D.PYMKScroll.User(userData, this.statsPrefix).append(this._usersNode);
				user.onRemove = this.removeUser;
				this._users.set(userData.user.id, user);
			}
			this.count = this._users.length();
		},

		_doMagic: function(){
			var last = (this.pg - 1) * 2 + 4 >= this.count;
			removeClassName(this._prevButton, 'disabled');
			removeClassName(this._prevButton, 'last');
			removeClassName(this._nextButton, 'disabled');
			removeClassName(this._nextButton, 'first');
			if( this._disabledLeft ){
				this._disabledLeft.disable(false);
			}
			if( this._disabledRight ){
				this._disabledRight.disable(false);
			}
			if( this.pg == 1 && this._usersNode.childNodes.length >= 4 ){
				addClassName(this._prevButton, 'disabled');
				addClassName(this._nextButton, 'first');
				this.offsetLeft = 0;
			}else if( this.pg == 1 ){
				addClassName(this._prevButton, 'disabled');
				addClassName(this._nextButton, 'disabled');
				this.offsetLeft = 0;
			} else if( !last ){
				var disableLeft = (this.pg - 1) * 2;
				var disableRight = (this.pg - 1) * 2 + 3;
				var users = this._users.toArray();
				this._disabledLeft = users[disableLeft].disable(true);
				this._disabledRight = users[disableRight].disable(true);
				this.offsetLeft = (this.itemWidth + this.itemMargin) * 2 * (this.pg - 1) + 50;
			}else{
				addClassName(this._nextButton, 'disabled');
				addClassName(this._prevButton, 'last');
				this.offsetLeft = this.count * (this.itemWidth + this.itemMargin) - this.itemMargin - 500;
			}

			this._usersNode.style.left = -1 * this.offsetLeft + 'px';
			if( (this.pg - 1) * 2 + 12 >= this.count ){
				this._loadNextPage();
			}
		},

		_previousPage: function(){
			if( this.pg <= 1 ){
				return;
			}
			this.pg--;
			this._doMagic();
		},

		_nextPage: function(){
			this.pg++;
			this._doMagic();
		},

		_loadNextPage: function(){
			if( this.loadedPages + 1  > this.pgs || this.loadedPages + 1 == this.loadingPage ){
				return;
			}
			this.loadingPage = this.loadedPages + 1;
			this._mGetPYMK = new DR.users.PYMKMain;
			this._mGetPYMK.type = DR.users.PYMKMain.TYPE_PIGSORT;
			this._mGetPYMK.select = [
				new DR.users.select.FriendsRe().all(),
				new DR.users.select.UserDefault().id().title().url().image().commonFriends(),
				new DR.users.select.Image().gm().icon()
			];
			this._mGetPYMK.onLoad = this._onLoadNextPage;
			this._mGetPYMK.call();
		},

		_onLoadNextPage: function(){
			if( !this._mGetPYMK || this._mGetPYMK.error || !this._mGetPYMK.re ){
				return;
			}
			this.loadedPages++;
			this.loadingPage = null;
			this._addUsers(this._mGetPYMK.re);
			this._doMagic();
		},

		removeUser: function(uid){
			var user = this._users.get(uid);
			if( !user ){
				return;
			}
			user.remove();
			this._users.del(uid);
			this.count = this._users.length();
			this._doMagic();
		}
	},
	mkE.Base
);

/**
 * @class
 * @extends {mkE.Base}
 * @param {DR.users.struct.PYMKMainItem} item
 * @param {String} statsPrefix
 */
D.PYMKScroll.User = Class(
	/**
	 * @lends {D.PYMKScroll.User#}
	 */
	{
		/**
		 * @param {DR.users.struct.PYMKMainItem} item
		 * @param {String} statsPrefix
		 * @constructs
		 */
		__construct: function(item, statsPrefix){
			this.item = item;
			this.user = item.user;
			this.statsPrefix = statsPrefix;
			this.invitationSent = false;

			this.node = mkE({
				tag: 'div',
				className: 'PYMKScrollUser',
				els: [
					{
						tag: 'a',
						className: 'image',
						href: '/stats/click.php?key=' + this.statsPrefix + 'profile&url=' + encodeURIComponent(this.user.url),
						style: {
							backgroundImage: 'url(' + this.user.image.gm + ')'
						}
					},
					{
						tag: 'div',
						className: 'info',
						els: [
							{
								tag: 'a',
								className: 'title',
								href: '/stats/click.php?key=' + this.statsPrefix + 'profile&url=' + encodeURIComponent(this.user.url),
								text: this.user.title
							},
							{
								tag: 'div',
								className: 'common',
								text: this.user.commonFriends + ' ' + D.Lang.nget(this.user.commonFriends, 'common_friends')
							},
							this._inviteButton = new T.Form.Button({
								caption: D.Lang.get('invite'),
								color: 'link',
								stretch: true,
								onclick: this._invite
							})
						]
					},
					{
						tag: 'a',
						className: 'closeDark',
						attr: {
							title: D.Lang.get('dont_show')
						},
						els: [
							T.svgIcon({
								icon: 'close-10'
							})
						],
						onclick: this._remove
					}
				]
			});
		},

		disable: function(v){
			if( v ){
				addClassName(this.node, 'disabled');
			}else{
				removeClassName(this.node, 'disabled');
			}
			return this;
		},

		_invite: function(){
			this._inviteButton.disable(true);
			return InfoBox.iframe('/invitations/send/friend.php?stats=' + this.statsPrefix + 'invite&fid=' + this.user.id, {
				width: 350,
				onClose: this._onInviteClose
			});
		},

		_onInviteClose: function(){
			this._mGetUser = new DR.users.Get();
			this._mGetUser.uids = [this.user.id];
			this._mGetUser.select = [
				new DR.users.select.GetRe().all(),
				new DR.users.select.UserDefault().isInvited()
			];
			this._mGetUser.onLoad = this._onGetUser;
			this._mGetUser.call();
		},

		_onGetUser: function(){
			if( !this._mGetUser || this._mGetUser.error || !this._mGetUser.re ){
				return;
			}
			if( empty(this._mGetUser.re.users) || !this._mGetUser.re.users[this.user.id] ){
				return;
			}
			if( this._mGetUser.re.users[this.user.id].isInvited ){
				this._inviteButton.caption(D.Lang.get('invitation_sent_short'));
				this.invitationSent = true;
			}else{
				this._inviteButton.disable(false);
			}
		},

		_remove: function(){
			if( this.invitationSent ){
				this.onRemove(this.user.id);
			}
			this._mRemove = new DR.users.RemovePYMK();
			this._mRemove.uid = this.user.id;
			this._mRemove.stats = this.statsPrefix + 'remove';
			this._mRemove.onLoad = this._onRemove;
			this._mRemove.call();
		},

		_onRemove: function(){
			this.onRemove(this.user.id);
		}
	},
	mkE.Base
);
// --- ../pymk_scroll.js ---

// +++ ../zinas_scroll.js +++
/**
 * @class
 * @extends mkE.Base
 * @param {DR.zinas.GetItems} m
 */
D.ZinasScroll = Class(
	/**
	 * @lends {D.ZinasScroll#}
	 */
	{
		_pgs: 0,
		_psPg: 1,

		/**
		 * @param {DR.zinas.GetItems} m
		 * @constructs
		 */
		__construct: function ( m ) {
			this.node = mkE({
				tag: 'div',
				className: 'ZinasScroll',
				els: [
					{
						tag: 'div',
						className: 'container',
						els: [
							this._itemsNode = mkE({
								tag: 'div',
								className: 'wrapper'
							}),
							this._prevBtnNode = mkE({
								tag: 'a',
								className: 'prevButton pageButton',
								onclick: this.previousPage,
								style: {
									display: 'none'
								},
								els: [
									{
										tag: 'div',
										className: 'circle',
										els: [
											T.svgIcon({
												icon: 'arrow-1-le',
												size: 24,
												fill: false
											})
										]
									}
								]
							}),
							this._nextBtnNode = mkE({
								tag: 'a',
								className: 'nextButton pageButton',
								onclick: this.preload,
								style: {
									display: 'none'
								},
								els: [
									{
										tag: 'div',
										className: 'circle',
										els: [
											T.svgIcon({
												icon: 'arrow-1-ri',
												size: 24,
												fill: false
											})
										]
									}
								]
							})
						]
					}
				]
			});

			this._items = new D.SortedMap();

			this._mGetItems = m;
			this._mGetItems.onLoad = this._mGetItemsRe;
			this._mGetItemsRe();
		},

		_mGetItemsRe: function () {
			if( this._mGetItems.re.items.length >= this._mGetItems.count ) {
				this._pgs = this._mGetItems.pg + 1;
			}

			for( var i = 0, l = this._mGetItems.re.items.length; i < l; i++ ) {
				var item = this._mGetItems.re.items[i];
				if( this._items.get(item.id) ) {
					continue;
				}
				this._items.set(item.id, new D.ZinasScroll.Item(item).append(this._itemsNode));
			}

			if( this._pgs >= this._mGetItems.pg ) {
				this._nextBtnNode.style.display = '';
			}
		},

		loadMore: function () {
			if( this._mGetItems.pg >= this._pgs || this._mGetItems.processing ) {
				return;
			}
			this._mGetItems.pg++;
			this._mGetItems.call();
		},

		scrollTo: function ( idx ) {
			var next = false, prev = false,
				offsetLeft = this._items.at(idx).node.offsetLeft - this._nextBtnNode.offsetWidth,
				parentWidth = this._itemsNode.parentNode.offsetWidth,
				containerWidth = this._itemsNode.offsetWidth;
			if( offsetLeft + parentWidth > containerWidth ) {
				offsetLeft = containerWidth - parentWidth;
				this._nextBtnNode.style.display = 'none';
				this._prevBtnNode.style.display = '';
				next = false;
				prev = true;
			} else if( idx <= 0 ) {
				offsetLeft = 0;
				next = true;
				prev = false;
			} else {
				next = true;
				prev = true;
			}
			this._nextBtnNode.style.display = next ? '' : 'none';
			this._prevBtnNode.style.display = prev ? '' : 'none';
			this._itemsNode.style.transform = 'translateX(%cpx)'.replace('%c', -offsetLeft);
		},

		preload: function () {
			this._nextBtnNode.onclick = D.doNothing;
			D.onLoad('DR.zinas', D.closure(this, function () {
				var count = this._mGetItems.count;
				this._mGetItems = new DR.zinas.Ai;
				this._mGetItems.pg = 1;
				this._mGetItems.count = count;
				this._mGetItems.select = [
					new DR.zinas.select.Item().id().title().url().source().categories().image().hasImage().realUrl(),
					new DR.base.select.Image().gm()
				];
				this._mGetItems.onLoad = this._mGetItemsRe;
				this._nextBtnNode.onclick = this.nextPage;
				this.nextPage();
			}));
		},

		nextPage: function () {
			var matrix = getComputedStyle(this._itemsNode).transform.split(',');
			var nextOffsetWidth = Math.abs(parseInt(matrix[4])) + this._itemsNode.parentNode.offsetWidth;
			for( var i = 0; i < this._items.length(); i++ ) {
				var item = this._items.at(i);
				if( item.node.offsetLeft + (item.node.offsetWidth / 2) > nextOffsetWidth ) {
					if( this._psPg >= this._mGetItems.pg ) {
						this.loadMore();
					}
					this._psPg++;
					return this.scrollTo(i);
				}
			}
			return false;
		},

		previousPage: function () {
			var matrix = getComputedStyle(this._itemsNode).transform.split(',');
			var currentOffsetWidth = Math.abs(parseInt(matrix[4])) - this._itemsNode.parentNode.offsetWidth;
			if( currentOffsetWidth < 0 ) {
				this._psPg = 0;
				return this.scrollTo(0);
			}
			for( var i = this._items.length() - 1; i >= 0; i-- ) {
				var item = this._items.at(i);
				if( item.node.offsetLeft - item.node.offsetWidth < currentOffsetWidth ) {
					this._psPg--;
					return this.scrollTo(i);
				}
			}
			return false;
		}
	},
	mkE.Base
);

/**
 * @class
 * @extends {mkE.Base}
 * @param {DR.zinas.struct.Item} item
 */
D.ZinasScroll.Item = Class(
	/**
	 * @lends {D.ZinasScroll.Item#}
	 */
	{
		/**
		 * @param {DR.zinas.struct.Item} item
		 * @constructs
		 */
		__construct: function ( item ) {
			this.item = item;

			var cats = this.item.categories.slice(0, 2),
				catEls = [],
				url = (new Get('/stats/click.php'))
					.add('key', 'zinas_pigsort_all')
					.add('url', '/zinas?id=' + this.item.id)
					.toUrl();

			if( cats.length ) {
				for( var i = 0; i < cats.length; i++ ) {
					var category = cats[i];
					catEls.push({tag: 'a', text: category.title, href: '/zinas/kategorija/' + category.id});
					if( cats.length > i + 1 ) {
						catEls.push(', ');
					}
				}
			}

			this.node = mkE({
				tag: 'div',
				className: 'ZinasScrollUser',
				els: [
					{
						tag: 'a',
						className: 'image',
						style: {
							backgroundImage: this.item.hasImage ? 'url(' + this.item.image.gm + ')' : ''
						},
						href: url
					},
					{
						tag: 'div',
						className: 'info',
						els: [
							{
								tag: 'a',
								className: 'title',
								href: url,
								text: D.shorten(this.item.title, 87, "\u2026")
							},
							{
								tag: 'div',
								els: [
									{
										tag: 'a',
										href: '/zinas/avots/' + this.item.source.name,
										text: this.item.source.title
									},
									{
										tag: 'span',
										className: 'bullet',
										text: '\u2022'
									},
									{
										tag: 'span',
										els: catEls
									}
								]
							}
						]
					}
				]
			});
		}
	},
	mkE.Base
);
// --- ../zinas_scroll.js ---

// +++ svg_loader.js +++
D.loadSVGIcons = function(){
	D.parseSVGIcons(D.SVGIcons || [], 'svg-icon-container');
	D.parseSVGIcons(D.SVGIconsColor || [], 'svg-icon-container-color');

};
D.parseSVGIcons = function(icons, id){
	if( empty(icons) ){
		return;
	}

	var re = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">';
	re += '<defs>';

	for( var i in icons ){
		if( !icons.hasOwnProperty(i) ){
			continue;
		}
		var icon = icons[i];
		re += '<symbol id="icon-' + icon.title + '" viewBox="' + icon.viewBox + '">';
		re += '<title>' + icon.title + '</title>';

		for( var j in icon.els ){
			if( !icon.els.hasOwnProperty(j) ){
				continue;
			}
			var el = icon.els[j];
			re += '<' + el.tag;

			for( var attr in el.attr ){
				if( !el.attr.hasOwnProperty(attr) ){
					continue;
				}
				if( D.browser && D.browser.name === 'Firefox' && (attr === 'fill' || attr === 'stroke') && id !== 'svg-icon-container-color' ){
					continue;
				}
				re += ' ' + attr + '="' + el.attr[attr] + '"';
			}

			re += '>';
			re += '</' + el.tag + '>';
		}

		re += '</symbol>';
	}

	re += '</defs>';
	re += '</svg>';

	var div = document.createElement('div');
	div.setAttribute('id', id);
	div.style.display = 'none';
	div.innerHTML = re;

	if( !document.body.childNodes ){
		document.body.appendChild(div);
	}else{
		document.body.insertBefore(div, document.body.childNodes[0]);
	}
};
// --- svg_loader.js ---

// +++ weather.js +++
D.Weather = {
	getWeather: function(lat, lng, callback){
		var data = D.store.get('data', 'weather');
		var ts = D.store.get('ts', 'weather');

		if( data && ts > ( new Date() ).getTime() - (300 * 1000) ){
			data.cache = true;
			callback(data);
			return;
		}

		var m = new DR.weather.Get();
		if( lat && lng ){
			var latLng = new DR.base.struct.LatLng();
			latLng.lat = lat;
			latLng.lng = lng;
			m.location = latLng;
		}
		m.onLoad = function(){
			D.Weather.onWeather(m, callback)
		};
		m.call();
	},

	/**
	 *
	 * @param {DR.weather.Get} m
	 * @param callback
	 */
	onWeather: function(m, callback){
		if( !m || !m.re || m.error ){
			return;
		}
		var data = {
			temperature: m.re.temperature,
			code: m.re.code
		};
		data.sunrise = m.re.sunrise;
		data.sunset = m.re.sunset;
		data.isDay = m.re.isDay;

		D.store.set('data', data, 'weather');
		D.store.set('ts', ( new Date() ).getTime(), 'weather');
		callback(data);
	},

	// from zinas weather
	CODES: {
		"200": {"code": "thunderstorm", "icon": "rain-lightning"},
		"201": {"code": "thunderstorm", "icon": "rain-lightning"},
		"202": {"code": "thunderstorm", "icon": "rain-lightning-hard"},
		"210": {"code": "thunderstorm", "icon": "rain-lightning"},
		"211": {"code": "thunderstorm", "icon": "rain-lightning"},
		"212": {"code": "thunderstorm", "icon": "rain-lightning-hard"},
		"221": {"code": "thunderstorm", "icon": "rain-lightning"},
		"230": {"code": "thunderstorm", "icon": "rain-lightning"},
		"231": {"code": "thunderstorm", "icon": "rain-lightning"},
		"232": {"code": "thunderstorm", "icon": "rain-lightning-hard"},
		"300": {"code": "rain", "icon": "rain"},
		"301": {"code": "rain", "icon": "rain"},
		"302": {"code": "rain", "icon": "rain"},
		"310": {"code": "rain", "icon": "rain"},
		"311": {"code": "rain", "icon": "rain"},
		"312": {"code": "rain", "icon": "rain"},
		"313": {"code": "rain", "icon": "rain"},
		"314": {"code": "rain", "icon": "rain"},
		"321": {"code": "rain", "icon": "rain"},
		"500": {"code": "shower_rain", "icon": "rain"},
		"501": {"code": "shower_rain", "icon": "rain"},
		"502": {"code": "shower_rain", "icon": "rain-hard"},
		"503": {"code": "shower_rain", "icon": "rain-hard"},
		"504": {"code": "shower_rain", "icon": "rain-hard"},
		"511": {"code": "snow", "icon": "rain-krusa"},
		"520": {"code": "rain", "icon": "rain"},
		"521": {"code": "rain", "icon": "rain"},
		"522": {"code": "rain", "icon": "rain-hard"},
		"531": {"code": "rain", "icon": "rain"},
		"532": {"code": "rain", "icon": "rain-hard"},
		"600": {"code": "snow", "icon": "snow"},
		"601": {"code": "snow", "icon": "snow"},
		"602": {"code": "snow", "icon": "snow"},
		"611": {"code": "snow", "icon": "krusa"},
		"612": {"code": "snow", "icon": "krusa"},
		"613": {"code": "snow", "icon": "snow"},
		"615": {"code": "snow", "icon": "rain-snow"},
		"616": {"code": "snow", "icon": "rain-snow"},
		"620": {"code": "snow", "icon": "snow"},
		"621": {"code": "snow", "icon": "snow"},
		"622": {"code": "snow", "icon": "snow"},
		"701": {"code": "mist", "icon": "mostly-cloud"},
		"711": {"code": "mist", "icon": "mostly-cloud"},
		"721": {"code": "mist", "icon": "mostly-cloud"},
		"731": {"code": "mist", "icon": "mostly-cloud"},
		"741": {"code": "mist", "icon": "mostly-cloud"},
		"751": {"code": "mist", "icon": "mostly-cloud"},
		"761": {"code": "mist", "icon": "mostly-cloud"},
		"762": {"code": "mist", "icon": "mostly-cloud"},
		"771": {"code": "mist", "icon": "mostly-cloud"},
		"781": {"code": "mist", "icon": "clear"},
		"800": {"code": "clear", "icon": "clear"},
		"801": {"code": "few_clouds", "icon": "partly-cloud"},
		"802": {"code": "scattered_clouds", "icon": "mostly-cloud"},
		"803": {"code": "broken_clouds", "icon": "cloud"},
		"804": {"code": "broken_clouds", "icon": "cloud"}
	},
	getCode: function ( code ) {
		return this.CODES[code] ? this.CODES[code].code : 'clear';
	},
	getIcon: function ( code, isNight ) {
		var re = this.CODES[code] ? this.CODES[code].icon : 'clear';
		if( isNight && (re.search('partly-cloud') >= 0 || re.search('mostly-cloud') >= 0 || re === 'clear') ) {
			re = 'night-' + re;
		}
		return re;
	},
	getLocalTime: function ( ts, utcOffset ) {
		return ts + ((new Date(ts * 1000)).getTimezoneOffset() - ((utcOffset / 60) * -1)) * 60;
	}
};

/**
 * @class
 */
D.Weather.Item = Class(
	/**
	 * @lends {D.Weather.Item#}
	 */
	{
		/** @type {DR.zinas.struct.Weather} */
		weather: null,
		/** @type {int} */
		utcOffset: 0,
		/** @type {D.Date} */
		date: null,
		/**
		 *  @param {DR.zinas.struct.Weather} weather
		 *  @param {int} utcOffset
		 */
		__construct: function ( weather, utcOffset ) {
			this.weather = weather;
			this.utcOffset = utcOffset;
			this.date = new D.Date(D.Weather.getLocalTime(this.weather.ts, this.utcOffset));
		},
		temp: function ( suffix ) {
			suffix = suffix === null ? '' : "°";
			var prefix = suffix ? (this.weather.temp <= 0 ? '' : '+') : '';
			return prefix + this.weather.temp.toFixed(0) + suffix;
		},
		feelsLike: function ( suffix ) {
			suffix = suffix === null ? '' : '°';
			return this.weather.feelsLike.toFixed(0) + suffix;
		},
		code: function () {
			var code = D.Weather.getCode(this.weather.weatherId);
			if( this.weather.isNight ) {
				code += '_night';
			}
			return code;
		},
		icon: function () {
			return D.Weather.getIcon(this.weather.weatherId, this.weather.isNight);
		},
		conditions: function () {
			var code = this.code()
			if( code.search('rain') >= 0 && this.weather.rain !== null ) {
				return this.rain();
			} else if( code.search('snow') >= 0 && this.weather.snow !== null ) {
				return this.snow();
			} else if( code.search('cloud') >= 0 && this.weather.clouds !== null ) {
				return this.clouds();
			} else {
				return '';
			}
		},
		chanceOfRain: function () {
			var code = this.code();
			if( code.search('rain') >= 0 && this.weather.rain !== null ) {
				return this.weather.description;
			} else if( code.search('snow') >= 0 && this.weather.snow !== null ) {
				return this.weather.description;
			} else {
				return 'Nelīs';
			}
		},
		rain: function ( suffix ) {
			suffix = suffix === null ? '' : ' mm';
			return (this.weather.rain || 0) + suffix;
		},
		snow: function ( suffix ) {
			suffix = suffix === null ? '' : ' cm';
			return (this.weather.snow || 0) * 10 + suffix;
		},
		windDeg: function () {
			return this.weather.windDirection - 180;
		},
		windSpeed: function ( suffix ) {
			suffix = suffix === null ? '' : ' m/s';
			return Math.round(this.weather.windSpeed * 10) / 10 + suffix;
		},
		windCardinal: function () {
			var val = Math.floor((this.weather.windDirection / 45) + 0.5);
			var arr = ["Z", "ZA", "A", "DA", "D", "DR", "R", "ZR"];
			return arr[(val % 8)];
		},
		humidity: function ( suffix ) {
			suffix = suffix === null ? '' : '%';
			return this.weather.humidity + suffix;
		},
		clouds: function ( suffix ) {
			suffix = suffix === null ? '' : '%';
			return this.weather.clouds + suffix;
		},
		pressure: function ( suffix ) {
			suffix = suffix === null ? '' : ' hpa';
			return this.weather.pressure + suffix;
		}
	}
);
// --- weather.js ---

// +++ style.js +++
/**
 * @param {Style} [clone]
 * @return {Style}
 * @constructor
 */
var Style = function Style(clone){
	if(!(this instanceof Style)){
		return new Style(clone);
	}
	/** @private */
	this._values = (clone ? JSON.parse(JSON.stringify(clone._values)) : {});
};

Style.CLEAR = true;
Style.DEBUG_OUTPUT = false;

Style._n = 0;

Style.UNIT = 'px';
Style.UNIT_TIME = 's';

Style.prototype = {

	toObject:function(){
		return this._values;
	},

	toString:function(){
		var rows = [];
		for(var k in this._values){
			var v = this._values[k];
			if(!v){
				continue;
			}
			rows.push('\t' + k + ': ' + v + ';');
		}
		return rows.join("\n");
	},

	onChange:function(){
		if(this.node){
			O2O(this.node.style, this._values);
		}
	},

	set:function(name, v){
		if(v === null || v === undefined){
			v = '';
		}
		if(v && D.DEV){
			var options = Style._OPTIONS[name];
			switch(v){
				case Style.INHERIT:
				case Style.INITIAL:
				case Style.UNSET:
					break;
				default:
					if(options && !Style.contains(options, v)){
						D.console.warn(name + ':' + JSON.stringify(v));
					}
			}
		}
		var names = [name];
		if(Style._WEBKIT[name]){
			names.push('-webkit-' + name);
		}
		if(Style._MS[name]){
			names.push('-ms-' + name);
		}
		if(Style._MOZ[name]){
			names.push('-moz-' + name);
		}
		if(Style._O[name]){
			names.push('-o-' + name);
		}
		for(var k in names){
			this._values[names[k]] = v;
		}
		this.onChange();
		return this;
	},

	/**
	 * @param {Style.Property} props
	 * @return {Style}
	 * @private
	 */
	_setProperty:function(props){
		var o = props.getValues();
		var onChange = this.onChange;
		this.onChange = function(){};
		try{
			for (var k in o){
				this.set(k, o[k]);
			}
		} catch(e){
			D.console.error(e);
		}
		this.onChange = onChange;
		this.onChange();
		return this;
	},

	/**
	 * @param {Style.POSITION} v
	 * @return {Style}
	 */
	position:function(v){
		return this.set('position', v);
	},

	/**
	 * @param v
	 * @return {Style}
	 */
	color:function(v){
		return this.set('color', Style._value(v));
	},

	/**
	 * @param {Style.Background|string|Array.<Style.Background>} v
	 * @return {Style}
	 */
	background:function(v){
		if(v instanceof Style.Background){
			return this._setProperty(v)
		}
		if(v instanceof Array){
			return this._setProperty(Style._Grouped(v));
		}
		return this.set('background', Style._value(v));
	},

	backgroundImage:function (url){
		this.background(Style.Background().image(url));
		return this;
	},

	/**
	 * @param {Number} v
	 * @return {Style}
	 */
	width:function(v){
		return this.set('width', Style._value(v));
	},

	/**
	 * @param {Number} v
	 * @return {Style}
	 */
	height:function(v){
		return this.set('height', Style._value(v));
	},

	/**
	 * @param {Number} v
	 * @return {Style}
	 */
	top:function(v){
		return this.set('top', Style._value(v));
	},

	/**
	 * @param {Number} v
	 * @return {Style}
	 */
	bottom:function(v){
		return this.set('bottom', Style._value(v));
	},

	/**
	 * @param {Number} v
	 * @return {Style}
	 */
	left:function(v){
		return this.set('left', Style._value(v));
	},

	/**
	 * @param {Number} v
	 * @return {Style}
	 */
	right:function(v){
		return this.set('right', Style._value(v));
	},

	/**
	 * @param {Number|Style.Margin} vTop
	 * @param {Number} [rightBottom]
	 * @param {Number} [bottom]
	 * @param {Number} [left]
	 * @return {Style}
	 */
	margin:function(vTop, rightBottom, bottom, left){
		if(vTop instanceof Style.Margin){
			return this._setProperty(vTop);
		}
		var value = Style._value(vTop);
		for(var i = 1; i < arguments.length; ++ i){
			var v = Style._value(arguments[i]);
			if(v) value += ' ' + v;
		}
		return this.set('margin', value);
	},

	/**
	 * @param {Number|Style.Padding} vTop
	 * @param {Number} [rightBottom]
	 * @param {Number} [bottom]
	 * @param {Number} [left]
	 * @return {Style}
	 */
	padding:function(vTop, rightBottom, bottom, left){
		if(vTop instanceof Style.Padding){
			return this._setProperty(vTop);
		}
		var value = Style._value(vTop);
		for(var i = 1; i < arguments.length; ++ i){
			var v = Style._value(arguments[i]);
			if(v) value += ' ' + v;
		}
		return this.set('padding', value);
	},

	/**
	 * @param v
	 * @return {Style}
	 */
	border:function(v){
		if(v instanceof Style.Border){
			return this._setProperty(v);
		}
		return this.set('border', v);
	},

	borderTop:function (v){
		if(v instanceof Style.Border){
			return this.border(Style.Border().top(v));
		}
		return this.set('border-top', v);
	},

	borderRight:function (v){
		if(v instanceof Style.Border){
			return this.border(Style.Border().right(v));
		}
		return this.set('border-right', v);
	},

	borderBottom:function (v){
		if(v instanceof Style.Border){
			return this.border(Style.Border().bottom(v));
		}
		return this.set('border-bottom', v);
	},

	borderLeft:function (v){
		if(v instanceof Style.Border){
			return this.border(Style.Border().left(v));
		}
		return this.set('border-left', v);
	},

	borderRadius:function (v){
		this.border(Style.Border().radius(v));
		return this;
	},

	/**
	 * @param {Style.TEXT_ALIGN} v
	 * @return {Style}
	 */
	textAlign:function(v){
		return this.set('text-align', v);
	},

	/**
	 * @param {Style.Text} v
	 * @return {Style}
	 */
	text:function(v){
		if(v instanceof Style.Text){
			return this._setProperty(v);
		}
		D.console.warn('text', v);
		return this;
	},

	/**
	 * @param {Style.FLOAT} v
	 * @return {Style}
	 */
	float:function(v){
		return this.set('float', v);
	},

	/**
	 * @param {Style.DISPLAY} v
	 * @return {Style}
	 */
	display:function(v){
		return this.set('display', v);
	},

	/**
	 * @param {Number} v
	 * @return {Style}
	 */
	fontSize:function(v){
		return this.set('font-size', Style._value(v));
	},

	/**
	 * The font-weight property sets how thick or thin characters in text should be displayed.
	 * @param {Style.FONT_WEIGHT} v
	 * @return {Style}
	 */
	fontWeight:function(v){
		return this.set('font-weight', v);
	},

	/**
	 * The font-style property specifies the font style for a text.
	 * @param {Style.FONT_STYLE} v
	 * @return {Style}
	 */
	fontStyle:function(v){
		return this.set('font-style', v);
	},

	/**
	 * @param {Style.Font|string} v
	 * @return {Style}
	 */
	font:function(v){
		if(v instanceof Style.Font){
			return this._setProperty(v);
		}
		return this.set('font', v);
	},

	/**
	 * @param {Style.Animation|string|Array.<Style.Animation>} v
	 * @return {Style}
	 */
	animation:function(v){
		if(v instanceof Style.Animation){
			return this._setProperty(v);
		}
		if(v instanceof Array){
			//v = v.join(', ');
			return this._setProperty(Style._Grouped(v));
		}
		return this.set('animation', String(v));
	},

	/**
	 * @param {Style.VISIBILITY} v
	 * @return {Style}
	 */
	visibility:function(v){
		return this.set('visibility', v);
	},

	/**
	 * @param {Style.WHITE_SPACE} v
	 * @return {Style}
	 */
	whiteSpace:function(v){
		return this.set('white-space', v);
	},

	/**
	 * @param {Number} v
	 * @return {Style}
	 */
	zIndex:function(v){
		return this.set('z-index', v);
	},

	/**
	 * @param {Style.USER_SELECT} v
	 * @return {Style}
	 */
	userSelect:function(v){
		return this.set('user-select', v);
	},

	/**
	 * @param {String} v
	 * @return {Style}
	 */
	content:function(v){
		return this.set('content', isset(v) ? '"' + v + '"' : '');
	},

	transform:function (v){
		return this.set('transform', v);
	},

	wordBreak:function (v){
		return this.set('word-break', v);
	},

	wordSpacing:function (v){
		return this.set('word-spacing', v);
	},

	wordWrap:function (v){
		return this.set('word-wrap', v);
	},

	overflow:function (v){
		return this.set('overflow', v);
	},

	overflowX:function (v){
		return this.set('overflow-x', v);
	},

	overflowY:function (v){
		return this.set('overflow-y', v);
	},

	transition:function (v){
		if(v instanceof Style.Transition){
			return this._setProperty(v);
		}
		return this.set('transition', v);
	},

	cursor:function (v){
		return this.set('cursor', v);
	},

	boxShadow:function (v){
		// TODO Style.BoxShadow()
		return this.set('box-shadow', v);
	},

	boxSizing:function (v){
		return this.set('box-sizing', v);
	}
};

Style._value = function(v, name){
	if(v === undefined || v === null){
		return '';
	}
	switch(typeof v){
		case 'number':
			return String(v) + Style.UNIT;
		case 'object':
			return String(v);
		case 'boolean':
			return (v ? '' : 'none');
	}
	return v;
};

Style._time = function(v){
	if(typeof v == 'number'){
		return String(v) + Style.UNIT_TIME;
	}
	return String(v);
};

Style.toConst = function(v){
	return v.toUpperCase().replace(/-/, '_');
};

Style.camelCase2Css = function(v){
	var re = '';
	for(var i = 0; i < v.length; ++ i){
		var c = v[i];
		if(c >= 'A' && c <= 'Z'){
			re += '-' + c.toLowerCase();
			continue;
		}
		re += c;
	}
	return re;
};

Style.css2camelCase = function(v){
	v = v.toLowerCase();
	var re = '';
	for(var i = 0; i < v.length; ++ i){
		var c = v[i];
		if(c !== '-'){
			re += c;
			continue;
		}
		++i;
		re += v[i].toUpperCase();
	}
	return re;
};

Style.contains = function(obj, v){
	for(var k in obj){
		if(obj[k] === v){
			return true;
		}
	}
	return false;
};

Style._setCSS = function(node, css){
	if(Style.DEBUG_OUTPUT){
		D.log(css);
	}
	if (node.styleSheet){
		// This is required for IE8 and below.
		node.styleSheet.cssText = css;
	} else {
		setNodeText(node, css);
	}
};

Style._OPTIONS = {};

Style.NONE = 'none';
Style.AUTO = 'auto';
Style.INITIAL = 'initial';
Style.INHERIT = 'inherit';
Style.UNSET = 'unset';

Style.POSITION = {
	STATIC:'static',
	ABSOLUTE:'absolute',
	FIXED:'fixed',
	RELATIVE:'relative',
	STICKY:'sticky'
};
Style._OPTIONS.position = Style.POSITION;

Style.DISPLAY = {
	NONE:'none',
	INLINE:'inline',
	BLOCK:'block',
	FLEX:'flex',
	GRID:'grid',
	INLINE_BLOCK:'inline-block',
	INLINE_FLEX:'inline-flex',
	INLINE_GRID:'inline-grid',
	INLINE_TABLE:'inline-table',
	LIST_ITEM:'list-item',
	TABLE:'table'
};
Style._OPTIONS.display = Style.DISPLAY;

Style.TEXT_ALIGN = {
	LEFT:'left',
	RIGHT:'right',
	CENTER:'center',
	JUSTIFY:'justify'
};
Style._OPTIONS['text-align'] = Style.TEXT_ALIGN;

Style.FLOAT = {
	NONE:'none',
	LEFT:'left',
	RIGHT:'right'
};
Style._OPTIONS['float'] = Style.FLOAT;

Style.FONT_WEIGHT = {
	NORMAL:'normal',
	BOLD:'bold',
	BOLDER:'bolder',
	LIGHTER:'lighter',
	NUMBER:'number'
};
Style._OPTIONS['font-weight'] = Style.FONT_WEIGHT;

Style.FONT_STYLE = {
	NORMAL:'normal',
	ITALIC:'italic',
	OBLIQUE:'oblique'
};
Style._OPTIONS['font-style'] = Style.FONT_STYLE;

Style.VISIBILITY = {
	VISIBLE:'visible',
	HIDDEN:'hidden',
	COLLAPSE:'collapse'
};
Style._OPTIONS['visibility'] = Style.VISIBILITY;

Style.WHITE_SPACE = {
	NORMAL:'normal',
	NOWRAP:'nowrap',
	PRE:'pre',
	PRE_LINE:'pre-line',
	PRE_WRAP:'pre-wrap'
};
Style._OPTIONS['white-space'] = Style.WHITE_SPACE;

Style.USER_SELECT = {
	AUTO:'auto',
	NONE:'none',
	TEXT:'text',
	ALL:'all'
};
Style._OPTIONS['user-select'] = Style.USER_SELECT;

Style.WORD_BREAK = {
	NORMAL:'normal',
	BREAK_ALL:'break-all',
	KEEP_ALL:'keep-all',
	BREAK_WORD:'break-word'
};
Style._OPTIONS['word-break'] = Style.WORD_BREAK;

Style.WORD_WRAP = {
	NORMAL:'normal',
	BREAK_WORD:'break-word'
};
Style._OPTIONS['word-wrap'] = Style.WORD_WRAP;

Style.CURSOR = {
	ALIAS:'alias',
	ALL_SCROLL:'all-scroll',
	AUTO:'auto',
	CELL:'cell',
	CONTEXT_MENU:'context-menu',
	COL_RESIZE:'col-resize',
	COPY:'copy',
	CROSSHAIR:'crosshair',
	DEFAULT:'default',
	E_RESIZE:'e-resize',
	EW_RESIZE:'ew-resize',
	GRAB:'grab',
	GRABBING:'grabbing',
	HELP:'help',
	MOVE:'move',
	N_RESIZE:'n-resize',
	NE_RESIZE:'ne-resize',
	NESW_RESIZE:'nesw-resize',
	NS_RESIZE:'ns-resize',
	NW_RESIZE:'nw-resize',
	NWSE_RESIZE:'nwse-resize',
	NO_DROP:'no-drop',
	NONE:'none',
	NOT_ALLOWED:'not-allowed',
	POINTER:'pointer',
	PROGRESS:'progress',
	ROW_RESIZE:'row-resize',
	S_RESIZE:'s-resize',
	SE_RESIZE:'se-resize',
	SW_RESIZE:'sw-resize',
	TEXT:'text',
	VERTICAL_TEXT:'vertical-text',
	W_RESIZE:'w-resize',
	WAIT:'wait',
	ZOOM_IN:'zoom-in',
	ZOOM_OUT:'zoom-out'
};

Style._OPTIONS['cursor'] = Style.CURSOR;

// Style.FONT_CAP = {
// 	NORMAL:'normal',
// 	SMALL_CAPS:'small-caps',
// 	ALL_SMALL_CAPS:'all-small-caps',
// 	PETITE_CAPS:'petite-caps',
// 	ALL_PETITE_CAPS:'all-petite-caps',
// 	UNICASE:'unicase',
// 	TITLING_CAPS:'titling-caps'
// };


// +++ Style.Property +++

Style.Property = function StyleProperty(){
};

Style.Property.prototype = {
	set:function(name, v){
		this._values[name] = v;
		return this;
	},

	get:function(name){
		return this._values[name] || '';
	},

	getValues:function(){
		return this._values;
	}
};

/**
 * @param {Array.<Style.Property>} arr
 * @returns {Style._Grouped}
 */
Style._Grouped = function Style_Grouped(arr){
	if(!(this instanceof Style._Grouped)){
		return new Style._Grouped(arr);
	}
	this._values = {};
	for(var k in arr){
		if(!(arr[k] instanceof Style.Property)){
			D.console.warn('Style._Grouped array element not instanceof Style.Property');
			continue;
		}
		var itemValues = arr[k]._values;
		for(var prop in itemValues){
			if(!this._values[prop]){
				this._values[prop] = [];
			}
			this._values[prop][k] = itemValues[prop];
		}
	}
	for(var k in this._values){
		this._values[k] = this._values[k].join(', ');
	}
};

Style._Grouped.prototype = new Style.Property;


// +++ Padding +++
Style.Padding = function StylePadding(){
	if(!(this instanceof Style.Padding)){
		return new Style.Padding();
	}
	this._values = {};
}
Style.Padding.prototype = new Style.Property;
/**
 * @param v
 * @return {Style.Padding}
 */
Style.Padding.prototype.top = function(v){
	return this.set('padding-top', Style._value(v));
}
/**
 * @param v
 * @return {Style.Padding}
 */
Style.Padding.prototype.right = function(v){
	return this.set('padding-right', Style._value(v));
}
/**
 * @param v
 * @return {Style.Padding}
 */
Style.Padding.prototype.bottom = function(v){
	return this.set('padding-bottom', Style._value(v));
}
/**
 * @param v
 * @return {Style.Padding}
 */
Style.Padding.prototype.left = function(v){
	return this.set('padding-left', Style._value(v));
}

// +++ Margin +++
Style.Margin = function StyleMargin(){
	if(!(this instanceof Style.Margin)){
		return new Style.Margin();
	}
	this._values = {};
}
Style.Margin.prototype = new Style.Property;
/**
 * @param v
 * @return {Style.Margin}
 */
Style.Margin.prototype.top = function(v){
	return this.set('margin-top', Style._value(v));
}
/**
 * @param v
 * @return {Style.Margin}
 */
Style.Margin.prototype.right = function(v){
	return this.set('margin-right', Style._value(v));
}
/**
 * @param v
 * @return {Style.Margin}
 */
Style.Margin.prototype.bottom = function(v){
	return this.set('margin-bottom', Style._value(v));
}
/**
 * @param v
 * @return {Style.Margin}
 */
Style.Margin.prototype.left = function(v){
	return this.set('margin-left', Style._value(v));
}

// +++ Font +++
Style.Font = function StyleFont(){
	if(!(this instanceof Style.Font)){
		return new Style.Font();
	}
	this._values = {};
};
Style.Font.prototype = new Style.Property;
/**
 * @param {Style.FONT_STYLE} v
 * @return {Style.Font}
 */
Style.Font.prototype.style = function(v){
	return this.set('font-style', v);
};
/**
 * @param v
 * @return {Style.Font}
 */
Style.Font.prototype.size = function(v){
	return this.set('font-size', Style._value(v));
};
/**
 * @param {Style.FONT_WEIGHT} v
 * @return {Style.Font}
 */
Style.Font.prototype.weight = function(v){
	return this.set('font-weight', v);
};
/**
 * @param v
 * @return {Style.Font}
 */
Style.Font.prototype.family = function(v){
	return this.set('font-family', v);
};

// +++ Color +++

/**
 * @param {string|Number} vRed
 * @param {Number} [opacityGreen]
 * @param {Number} [blue]
 * @param {Number} [opacity]
 * @constructor
 */
Style.Color = function StyleColor(vRed, opacityGreen, blue, opacity){
	if(!(this instanceof Style.Color)){
		return new Style.Color(vRed, opacityGreen, blue, opacity);
	}
	this._vRed = String(vRed);
	this._green = Number(opacityGreen);
	this._blue = Number(blue);
	this._opacity = 1;
	if(this._vRed[0] == '#' && isset(opacityGreen)){
		this._opacity = Number(opacityGreen);
	} else if(isset(blue, opacity)){
		this._opacity = Number(opacity);
	}
};

Style.Color.prototype = {
	toString:function(){
		if(this._vRed[0] == '#'){
			if(this._opacity == 1){
				return this._vRed;
			}
			var r = 0, g = 0, b = 0;
			if(this._vRed.length == 4){
				r = parseInt(this._vRed[1] + this._vRed[1], 16);
				g = parseInt(this._vRed[2] + this._vRed[2], 16);
				b = parseInt(this._vRed[3] + this._vRed[3], 16);
			} else if(this._vRed.length == 7){
				r = parseInt(this._vRed.substr(1, 2), 16);
				g = parseInt(this._vRed.substr(3, 2), 16);
				b = parseInt(this._vRed.substr(5, 2), 16);
			}
			return 'rgba(' + String(r) + ',' + String(g) + ',' + String(b) + ',' + String(this._opacity) + ')';
		}
		if(isset(this._blue)){
			if(this._opacity == 1){
				return 'rgb(' + String(this._vRed) + ',' + String(this._green) + ',' + String(this._blue) + ')';
			}
			return 'rgba(' + String(this._vRed) + ',' + String(this._green) + ',' + String(this._blue) + ',' + String(this._opacity) + ')';
		}
		return this._vRed || '';
	},

	/**
	 * @param {Number} v
	 * @returns {Style.Color}
	 */
	opacity:function (v){
		this._opacity = Number(v);
		return this;
	}
};

// +++ Background +++

Style.Background = function StyleBackground(){
	if(!(this instanceof Style.Background)){
		return new Style.Background();
	}
	this._values = {};
};

Style.Background.prototype = new Style.Property;
/**
 * @param v
 * @return {Style.Background}
 */
Style.Background.prototype.color = function(v){
	return this.set('background-color', v);
};
/**
 * @param v
 * @return {Style.Background}
 */
Style.Background.prototype.image = function(v){
	return this.set('background-image', "url('" + v + "')");
};
/**
 * @param v
 * @return {Style.Background}
 */
Style.Background.prototype.position = function(v){
	return this.set('background-position', v);
}
/**
 * @param v
 * @return {Style.Background}
 */
Style.Background.prototype.size = function(v){
	return this.set('background-size', v);
};
Style.Background.REPEAT = {
	REPEAT:'repeat',
	X:'repeat-x',
	Y:'repeat-y',
	NO:'no-repeat'
};
Style._OPTIONS['background-repeat'] = Style.Background.REPEAT;
/**
 * @param {Style.Background.REPEAT} v
 * @return {Style.Background}
 */
Style.Background.prototype.repeat = function(v){
	return this.set('background-repeat', v);
};
Style.Background.ORIGIN = {
	PADDING_BOX:'padding-box',
	BORDER_BOX:'border-box',
	CONTENT_BOX:'content-box'
};
Style._OPTIONS['background-origin'] = Style.Background.ORIGIN;
/**
 * The background-origin property specifies the origin position (the background positioning area) of a background image.
 * @param {Style.Background.ORIGIN} v
 * @return {Style.Background}
 */
Style.Background.prototype.origin = function(v){
	return this.set('background-origin', v);
};
/**
 * @param v
 * @return {Style.Background}
 */
Style.Background.prototype.clip = function(v){
	return this.set('background-clip', v);
};
Style.Background.ATTACHMENT = {
	SCROLL:'scroll',
	FIXED:'fixed',
	LOCAL:'local'
};
Style._OPTIONS['background-attachment'] = Style.Background.ATTACHMENT;
/**
 * @param {Style.Background.ATTACHMENT} v
 * @return {Style.Background}
 */
Style.Background.prototype.attachment = function(v){
	return this.set('background-attachment', v);
};
Style.Background.BLEND_MODE = {
	NORMAL:'normal',
	MULTIPLY:'multiply',
	SCREEN:'screen',
	OVERLAY:'overlay',
	DARKEN:'darken',
	LIGHTEN:'lighten',
	COLOR_DODGE:'color-dodge',
	SATURATION:'saturation',
	COLOR:'color',
	LUMINOSITY:'luminosity'
};
Style._OPTIONS['background-blend-mode'] = Style.Background.BLEND_MODE;
/**
 * @param {Style.Background.BLEND_MODE} v
 * @return {Style.Background}
 */
Style.Background.prototype.blendMode = function(v){
	return this.set('background-blend-mode', v);
};

Style.Background.prototype.noRepeat = function (){
	return this.repeat(Style.Background.REPEAT.NO);
};

Style.Background.prototype.center = function (){
	return this.position('center');
};

// +++ Text +++
Style.Text = function StyleText(){
	if(!(this instanceof Style.Text)){
		return new Style.Text();
	}
	this._values = {};
};
Style.Text.prototype = new Style.Property();

Style.Text.ALIGN = Style.TEXT_ALIGN;
/**
 * @param {Style.Text.ALIGN|Style.TEXT_ALIGN} v
 * @return {Style.Text}
 */
Style.Text.prototype.align = function(v){
	return this.set('text-align', v);
};
/**
 * @param v
 * @return {Style.Text}
 */
Style.Text.prototype.ident = function(v){
	return this.set('text-ident', v);
};

Style.Text.JUSTIFY = {
	AUTO:'auto',
	INTER_WORD:'inter-word',
	INTER_CHARACTER:'inter-character',
	NONE:'none'
};
Style._OPTIONS['text-justify'] = Style.Text.JUSTIFY;
/**
 * @param {Style.Text.JUSTIFY} v
 * @return {Style.Text}
 */
Style.Text.prototype.justify = function(v){
	return this.set('text-justify', v);
};

Style.Text.OVERFLOW = {
	CLIP:'clip',
	ELLIPSIS:'ellipsis',
	STRING:'string'
};
/**
 * @param {Style.Text.OVERFLOW} v
 * @return {Style.Text}
 */
Style.Text.prototype.overflow = function(v){
	return this.set('text-overflow', v);
};

/**
 * @param v
 * @return {Style.Text}
 */
Style.Text.prototype.shadow = function(v){
	return this.set('text-shadows', v);
};

Style.Text.TRANSFORM = {
	NONE:'none',
	CAPITALIZE:'capitalize',
	UPPERCASE:'uppercase',
	LOWERCASE:'lowercase'
};
Style._OPTIONS['text-transform'] = Style.Text.TRANSFORM;
/**
 * @param {Style.Text.TRANSFORM} v
 * @return {Style.Text}
 */
Style.Text.prototype.transform = function(v){
	return this.set('text-transform', v);
};

// +++ Border +++

/**
 * @param {number} [width]
 * @param {Style.Color|string} [color]
 * @param {Style.Border.STYLE} [style]
 * @return {Style.Border|*}
 * @constructor
 */
Style.Border = function StyleBorder(width, color, style){
	if(!(this instanceof Style.Border)){
		return new Style.Border(width, color, style);
	}
	this._values = {
		'border-style':style || Style.Border.STYLE.SOLID
	};
};
Style.Border.prototype = new Style.Property();
Style.Border.COLLAPSE = {
	SEPARATE:'separate',
	COLLAPSE:'collapse'
};
Style._OPTIONS['border-collapse'] = Style.Border.COLLAPSE;
/**
 * @param {Style.Border.COLLAPSE} v
 * @return {Style.Border}
 */
Style.Border.prototype.collapse = function(v){
	return this.set('border-collapse', v);
};
/**
 * @param v
 * @return {Style.Border}
 */
Style.Border.prototype.color = function(v){
	return this.set('border-color', v);
};
/**
 * @param v
 * @return {Style.Border}
 */
Style.Border.prototype.image = function(v){
	return this.set('border-image', v);
};

Style.Border.STYLE = {
	NONE:'none',
	HIDDEN:'hidden',
	DOTTED:'dotted',
	DASHED:'dashed',
	SOLID:'solid',
	DOUBLE:'double',
	GROOVE:'groove',
	RIDGE:'ridge',
	INSET:'inset',
	OUTSET:'outset'
};
Style._OPTIONS['border-style'] = Style.Border.STYLE;
Style._OPTIONS['border-top-style'] = Style.Border.STYLE;
Style._OPTIONS['border-right-style'] = Style.Border.STYLE;
Style._OPTIONS['border-bottom-style'] = Style.Border.STYLE;
Style._OPTIONS['border-left-style'] = Style.Border.STYLE;
/**
 * @param {Style.Border.STYLE} v
 * @return {Style.Border}
 */
Style.Border.prototype.style = function(v){
	return this.set('border-style', v);
};
/**
 * @param {Number} v
 * @return {Style.Border}
 */
Style.Border.prototype.width = function(v){
	return this.set('border-width', Style._value(v));
};
/**
 * @param {Number} v
 * @return {Style.Border}
 */
Style.Border.prototype.spacing = function(v){
	return this.set('border-spacing', Style._value(v));
};
/**
 * @param {Number|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.radius = function(v){
	return this.set('border-radius', Style._value(v));
};
/**
 * @param {Number|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.radiusBottomLeft = function(v){
	return this.set('border-bottom-left-radius', Style._value(v));
};
/**
 * @param {Number|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.radiusBottomRight = function(v){
	return this.set('border-bottom-right-radius', Style._value(v));
};
/**
 * @param {Number|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.radiusTopLeft = function(v){
	return this.set('border-top-left-radius', Style._value(v));
};
/**
 * @param {Number|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.radiusTopRight = function(v){
	return this.set('border-top-right-radius', Style._value(v));
};
/**
 * @param {Style.Border|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.top = function(v){
	if(v instanceof Style.Border){
		this.set('border-top-width', v.get('border-width'));
		this.set('border-top-style', v.get('border-style'));
		this.set('border-top-color', v.get('border-color'));
		return this;
	}
	return this.set('border-top', v);
};
/**
 * @param {Style.Border|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.right = function(v){
	if(v instanceof Style.Border){
		this.set('border-right-width', v.get('border-width'));
		this.set('border-right-style', v.get('border-style'));
		this.set('border-right-color', v.get('border-color'));
		return this;
	}
	return this.set('border-right', v);
};
/**
 * @param {Style.Border|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.bottom = function(v){
	if(v instanceof Style.Border){
		this.set('border-bottom-width', v.get('border-width'));
		this.set('border-bottom-style', v.get('border-style'));
		this.set('border-bottom-color', v.get('border-color'));
		return this;
	}
	return this.set('border-bottom', v);
};
/**
 * @param {Style.Border|string} v
 * @return {Style.Border}
 */
Style.Border.prototype.left = function(v){
	if(v instanceof Style.Border){
		this.set('border-left-width', v.get('border-width'));
		this.set('border-left-style', v.get('border-style'));
		this.set('border-left-color', v.get('border-color'));
		return this;
	}
	return this.set('border-left', v);
};

// +++ Animation +++

Style.Animation = function StyleAnimation(name){
	if(!(this instanceof Style.Animation)){
		return new Style.Animation(name);
	}
	this._values = {};
	if(name){
		this.name(name);
	}
};
Style.Animation.prototype = new Style.Property();
/**
 * @param v
 * @return {Style.Animation}
 */
Style.Animation.prototype.name = function(v){
	return this.set('animation-name', v);
};
/**
 * @param {number|string} v
 * @return {Style.Animation}
 */
Style.Animation.prototype.duration = function(v){
	return this.set('animation-duration', Style._time(v));
};
/**
 * @param v
 * @return {Style.Animation}
 */
Style.Animation.prototype.timingFunction = function(v){
	return this.set('animation-timing-function', v);
};
/**
 * @param v
 * @return {Style.Animation}
 */
Style.Animation.prototype.delay = function(v){
	return this.set('animation-delay', v);
};
/**
 * @param {Number} v
 * @return {Style.Animation}
 */
Style.Animation.prototype.iterationCount = function(v){
	return this.set('animation-iteration-count', v);
};
/**
 * @return {Style.Animation}
 */
Style.Animation.prototype.infinite = function(){
	return this.set('animation-iteration-count', 'infinite');
};

Style.Animation.DIRECTION = {
	NORMAL:'normal',
	REVERSE:'reverse',
	ALTERNATIVE:'alternate',
	ALTERNATIVE_REVERSE:'alternate-reverse'
};
Style._OPTIONS['animation-direction'] = Style.Animation.DIRECTION;
/**
 * @param {Style.Animation.DIRECTION} v
 * @return {Style.Animation}
 */
Style.Animation.prototype.direction = function(v){
	return this.set('animation-direction', v);
};

Style.Animation.FILL_MODE = {
	NONE:'none',
	FORWARDS:'forwards',
	BACKWARDS:'backwards',
	BOTH:'both'
};
Style._OPTIONS['animation-fill-mode'] = Style.Animation.FILL_MODE;
/**
 * @param {Style.Animation.FILL_MODE} v
 * @return {Style.Animation}
 */
Style.Animation.prototype.fillMode = function(v){
	return this.set('animation-fill-mode', v);
};

Style.Animation.PLAY_STATE = {
	PAUSED:'paused',
	RUNNING:'running'
};
Style._OPTIONS['animation-play-state'] = Style.Animation.PLAY_STATE;
/**
 * @param {Style.Animation.PLAY_STATE} v
 * @return {Style.Animation}
 */
Style.Animation.prototype.playState = function(v){
	return this.set('animation-play-state', v);
};

Style.Animation.prototype.toString = function (){
	var values = [
		this.get('animation-duration'),
		this.get('animation-timing-function'),
		this.get('animation-delay'),
		this.get('animation-iteration-count'),
		this.get('animation-direction'),
		this.get('animation-fill-mode'),
		this.get('animation-play-state'),
		this.get('animation-name'),
	];
	var valuesNoEmpty = [];
	for(var k in values){
		if(values[k]){
			valuesNoEmpty.push(values[k]);
		}
	}
	return valuesNoEmpty.join(' ');
};
// +++ Transition +++

Style.Transition = function StyleTransition(){
	if(!(this instanceof Style.Transition)){
		return new Style.Transition();
	}
	this._values = {};
};

Style.Transition.prototype = new Style.Property;
/**
 * @param v
 * @return {Style.Transition}
 */
Style.Transition.prototype.property = function(v){
	return this.set('transition-property', v);
};
/**
 * @param v
 * @return {Style.Transition}
 */
Style.Transition.prototype.duration = function(v){
	return this.set('transition-duration', Style._time(v));
};
Style.Transition.TIMING_FUNCTION = {
	LINEAR:'linear',
	EASE:'ease',
	EASE_IN:'ease-in',
	EASE_OUT:'ease-out',
	EASE_IN_OUT:'ease-in-out',
	STEP_START:'step-start',
	STEP_END:'step-end'
};
/**
 * @param {Style.Transition.TIMING_FUNCTION} v
 * @return {Style.Transition}
 */
Style.Transition.prototype.timingFunction = function(v){
	return this.set('transition-timing-function', v );
};

/**
 * @param {Style.Transition.TIMING_FUNCTION} v
 * @return {Style.Transition}
 */
Style.Transition.prototype.fn = function (v){
	return this.timingFunction(v);
};

/**
 * @param v
 * @return {Style.Transition}
 */
Style.Transition.prototype.delay = function(v){
	return this.set('transition-delay', Style._time(v));
};

// +++ Flex ++

Style.Flex = function StyleTransition(){
	if(!(this instanceof Style.Flex)){
		return new Style.Flex();
	}
	this._values = {};
};

Style.Flex.prototype = new Style.Property;

Style.Flex.prototype.basis = function (v){
	return this.set('flex-basis', v);
};

Style.Flex.prototype.direction = function (v){
	return this.set('flex-direction', v);
};

Style.Flex.DIRECTION = {
	ROW:'row',
	ROW_REVERSE:'row-reverse',
	COLUMN:'column',
	COLUMN_REVERSE:'column-reverse'
};
Style._OPTIONS['flex-direction'] = Style.Flex.DIRECTION;

Style.Flex.prototype.flow = function (v){
	return this.set('flex-flow', v);
};

Style.Flex.prototype.grow = function (v){
	return this.set('flex-grow', String(v));
};

Style.Flex.prototype.wrap = function (v){
	return this.set('flex-wrap', String(v));
};

Style.Flex.WRAP = {
	NOWRAP:'nowrap',
	WRAP:'wrap'
};

Style._OPTIONS['flex-wrap'] = Style.Flex.WRAP;

// +++ Style.Selector +++

/**
 * @param {string} [selector]
 * @param {Style} [style]
 * @return {Style.Selector}
 * @constructor
 */
Style.Selector = function StyleSelector(selector, style){
	if(!(this instanceof Style.Selector)){
		return new Style.Selector(selector, style);
	}
	this.media = null;
	this.style = null;
	this.parent = null;
	this._n  = Style._n ++;
	this.name = 'c' + String(this._n);
	this._childs = [];
	this.selector = selector || '';
	if(this.selector[0] >= 'A' && this.selector[0] <= 'z'){
		this.selector = ' ' + this.selector;
	}
	// TODO full preg match
	var name = this.selector.replace(/[> +~]/g, '');
	if(name[0] === '.'){
		this.name = name.substr(1);
		this.nameCustom = true;
	}
	if(style){
		this.setStyle(style);
	}
};

Style.Selector.prototype = {

	toString:function(){
		// if(!this._isSetCSS){
		// 	this._isSetCSS = true;
		// 	this._setCSS();
		// }
		return this.name;
	},

	getMedia:function (){
		var s = this;
		do{
			if(s.media){
				return s.media;
			}
			s = s.parent;
		} while(s);
		return '';
	},

	/**
	 * @param {Style.Selector} selector
	 * @return {Style.Selector}
	 */
	add:function(selector){
		selector.parent = this;
		this._childs.push(selector);
		return this;
	},

	_onChange:function(){
		this._setCSS();
	},

	setStyle:function(style, els){
		this.style = style;
		style.onChange = D.closure(this, this._onChange);
		// for(var k in (els || [])){
		// 	this.add(els[k]);
		// }
		return this;
	},

	fullSelector:function(){
		var all = [];
		var s = this;
		do{
			all.unshift(s.selector ? s.selector : ' .' + s.name);
			s = s.parent;
		} while(s);
		return trim(all.join(''));
	},

	fullSelectorId:function(){
		var all = [];
		var s = this;
		do{
			all.unshift('.c' + String(s._n));
			s = s.parent;
		} while(s);
		return all.join(' ');
	},

	css:function(){
		var css = (this.style ? this.style.toString() : '' );
		var grouped = {};
		grouped['.c' + String(this._n)] = true;
		grouped[this.fullSelector()] = true;
		var media = this.getMedia();
		return "\n" +
			(media ? '@media ' + media + "{\n" : '') +
			array_keys(grouped).join(', ') + "{\n" +
			css + "\n" +
			"}\n" +
			(media ? "}\n" : "");
	},

	_setCSS:function(){
		if(this.node){
			Style._setCSS(this.node, this.css());
		}
	},

	append:function(parent){
		if(!this.node){
			this.node = mkE({
				tag:'style',
				type:'text/css',
				attr:{
					//'data-id':this._n
				}
			});
		}
		this._setCSS();
		this.node.append(parent);
		for(var k in this._childs){
			this._childs[k].append(parent);
		}
	},

	remove:function(){
		this.node.remove();
		for(var k in this._childs){
			this._childs[k].remove();
		}
	}

};

Style.Keyframes = function StyleKeyframes(nameFrames, frames){
	if(!(this instanceof Style.Keyframes)){
		return new Style.Keyframes(nameFrames, frames);
	}
	this.frames = [];
	this.parent = null;
	this._n = Style._n++;
	this.name = 'kf' + String(this._n);
	switch(typeof nameFrames){
		case 'string':
			if(nameFrames){
				this.name = nameFrames;
				this.nameCustom = true;
			}
			break;
		case 'object':
			this.frames = nameFrames;
			break;
	}
	if(frames){
		this.frames = frames;
	}
	this._onChange = D.closure(this, this._setCSS);
	for(var k in this.frames){
		this.frames[k].onChange = this._onChange;
	}
};

Style.Keyframes.prototype = {

	toString:function(){
		return this.name;
	},

	css:function(){
		var rows = [];
		var minK = null;
		var maxK = 0;
		var allNum = true;
		for(var k in this.frames){
			k = Number(k);
			if(isNaN(k)){
				allNum = false;
				break;
			}
			if(minK === null){
				minK = k;
			} else {
				minK = Math.min(minK, k);
			}
			maxK = Math.max(maxK, k);
		}
		if(maxK - minK == 0){
			allNum = false;
		}
		for(var k in this.frames){
			var v = this.frames[k];
			if(allNum){
				k = Math.round((Number(k) - minK) / (maxK - minK) * 100) + '%';
			} else if(!isNaN(Number(k))){
				k = k + '%';
			}
			rows.push(k + '{');
			rows.push(String(v));
			rows.push('}');
		}
		var body = this.name + '{\n' + rows.join('\n') + '\n}\n'
		var re = '';
		if(Style._WEBKIT.animation){
			re = '@-webkit-keyframes ' + body;
		}
		if(Style._MOZ.animation){
			re = '@-moz-keyframes ' + body;
		}
		if(Style._O.animation){
			re = '@-o-keyframes ' + body;
		}
		re += '@keyframes ' + body;
		return re;
	},

	_setCSS:function(){
		if(this.node){
			Style._setCSS(this.node, this.css());
		}
	},

	append:function(parent){
		if(!this.node){
			this.node = mkE({
				tag:'style',
				type:'text/css',
				attr:{
					//'data-id':this._n
				}
			});
		}
		this._setCSS();
		this.node.append(parent);
	},

	remove:function (){
		this.node.remove();
	}
};

//for(var k in Style._OPTIONS ) for(var kk in Style._OPTIONS[k]) D.log('Style.' + kk + " = '" + Style._OPTIONS[k][kk] + "';" )
Style.STATIC = 'static';
Style.ABSOLUTE = 'absolute';
Style.FIXED = 'fixed';
Style.RELATIVE = 'relative';
Style.STICKY = 'sticky';
Style.NONE = 'none';
Style.INLINE = 'inline';
Style.BLOCK = 'block';
Style.FLEX = 'flex';
Style.GRID = 'grid';
Style.INLINE_BLOCK = 'inline-block';
Style.INLINE_FLEX = 'inline-flex';
Style.INLINE_GRID = 'inline-grid';
Style.INLINE_TABLE = 'inline-table';
Style.LIST_ITEM = 'list-item';
Style.TABLE = 'table';
Style.LEFT = 'left';
Style.RIGHT = 'right';
Style.CENTER = 'center';
Style.JUSTIFY = 'justify';
Style.NONE = 'none';
Style.LEFT = 'left';
Style.RIGHT = 'right';
Style.NORMAL = 'normal';
Style.BOLD = 'bold';
Style.BOLDER = 'bolder';
Style.LIGHTER = 'lighter';
Style.NUMBER = 'number';
Style.NORMAL = 'normal';
Style.ITALIC = 'italic';
Style.OBLIQUE = 'oblique';
Style.NORMAL = 'normal';
Style.REVERSE = 'reverse';
Style.ALTERNATIVE = 'alternate';
Style.ALTERNATIVE_REVERSE = 'alternate-reverse';
Style.NONE = 'none';
Style.FORWARDS = 'forwards';
Style.BACKWARDS = 'backwards';
Style.BOTH = 'both';
Style.PAUSED = 'paused';

Style._WEBKIT = {};
Style._MS = {};
Style._MOZ = {};
Style._O = {};

Style.getChromeVersion = function() {
	var match = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
	return match ? parseInt(match[2]) : 0;
};

Style.getFirefoxVersion = function(){
	var match = window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);
	return match ? parseInt(match[1]) : 0;
}

if(!(Style.getChromeVersion() > 80 || Style.getFirefoxVersion() > 80)){
	Style._testNode = (document.head ? document.head.style : document.createElement('div'));
	for (var k in Style._testNode){
		switch(k[0]){
			case 'w':
				if(k.substr(0, 6) === 'webkit'){
					Style._WEBKIT[Style.camelCase2Css(k).substr(7)] = true;
				}
				break;
			case 'm':
				if(k.substr(0, 2) === 'ms'){
					Style._MS[Style.camelCase2Css(k).substr(3)] = true;
				}
				break;
			case 'M':
				if(k.substr(0, 3) === 'Moz'){
					Style._MOZ[Style.camelCase2Css(k).substr(5)] = true;
				}
				break;
			case 'o':
				if(k[1] >= 'A' && k[1] <= 'Z'){
					Style._O[Style.camelCase2Css(k).substr(2)] = true;
				}
				break;
		}
	}
}

Style.Selector.prototype._addTypeElements = function (v){
	if(empty(v)){
		return;
	}
	if((v instanceof Style.Selector) || (v instanceof Style.Keyframes)){
		this.add(v);
		return;
	}
	if(v instanceof Style){
		this.add(Style.Selector('', v));
	}
	if(v instanceof Array){
		for(var k in v){
			this._addTypeElements(v[k]);
		}
		return;
	}
	if(v instanceof Function){
		this._addTypeElements(v());
		return;
	}
	if(v === true){
		return;
	}
	if((v instanceof Object) && v.constructor == Object){
		if(v.tag || v.style || v.keyframes){
			this.add(mkS(v));
			return;
		}
	}
}

var ss = Style;

/**
 * @param par
 * @returns {Style.Selector}
 */
function mkS(par){
	if(par instanceof Style.Selector){
		return par;
	}
	if(par instanceof Style.Keyframes){
		return par;
	}
	if(par instanceof Style){
		return Style.Selector('', par);
	}
	if(par.keyframes){
		return Style.Keyframes(par.name || '', par.keyframes);
	}
	if(!par.tag && !par.style){
		return;
	}
	var re = Style.Selector(par.tag || '', par.style);
	if(par.media){
		re.media = par.media;
	}
	if(par.els){
		if((par.els instanceof Object) && par.els.constructor == Object){
			for(var k in par.els){
				var el = par.els[k];
				if(el instanceof Style){
					re.add(Style.Selector(k, el));
					continue;
				}
				re._addTypeElements(el);
			}
		} else {
			re._addTypeElements(par.els);
		}
	}
	return re;
}



// --- style.js ---
